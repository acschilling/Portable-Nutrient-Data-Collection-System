
BLE_PNDCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d7b0  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  20000000  0000d7b0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  000180ac  2**0
                  CONTENTS
  3 .bss          000021cc  200000ac  0000d85c  000180ac  2**2
                  ALLOC
  4 .stack        00002000  20002278  0000fa28  000180ac  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000180ac  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000180d4  2**0
                  CONTENTS, READONLY
  7 .debug_info   000302ed  00000000  00000000  0001812f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004d8a  00000000  00000000  0004841c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008aba  00000000  00000000  0004d1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000938  00000000  00000000  00055c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009d8  00000000  00000000  00056598  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00021b80  00000000  00000000  00056f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001534b  00000000  00000000  00078af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a4971  00000000  00000000  0008de3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001f48  00000000  00000000  001327ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20004278 	.word	0x20004278
       4:	00001cc5 	.word	0x00001cc5
       8:	00001cc1 	.word	0x00001cc1
       c:	00001cc1 	.word	0x00001cc1
	...
      2c:	00001cc1 	.word	0x00001cc1
	...
      38:	00001cc1 	.word	0x00001cc1
      3c:	00001cc1 	.word	0x00001cc1
      40:	00001cc1 	.word	0x00001cc1
      44:	00001cc1 	.word	0x00001cc1
      48:	00001cc1 	.word	0x00001cc1
      4c:	00000271 	.word	0x00000271
      50:	00001cc1 	.word	0x00001cc1
      54:	00001cc1 	.word	0x00001cc1
      58:	00001cc1 	.word	0x00001cc1
      5c:	00001cc1 	.word	0x00001cc1
      60:	000008c9 	.word	0x000008c9
      64:	000008d9 	.word	0x000008d9
      68:	000008e9 	.word	0x000008e9
      6c:	000008f9 	.word	0x000008f9
      70:	00000909 	.word	0x00000909
      74:	00000919 	.word	0x00000919
      78:	00001cc1 	.word	0x00001cc1
      7c:	00001cc1 	.word	0x00001cc1
      80:	00001cc1 	.word	0x00001cc1
      84:	000018e9 	.word	0x000018e9
      88:	000018f9 	.word	0x000018f9
      8c:	00001909 	.word	0x00001909
      90:	00001919 	.word	0x00001919
      94:	00001929 	.word	0x00001929
      98:	00001cc1 	.word	0x00001cc1
      9c:	00001cc1 	.word	0x00001cc1
      a0:	00001cc1 	.word	0x00001cc1
      a4:	00001cc1 	.word	0x00001cc1
      a8:	00001cc1 	.word	0x00001cc1
      ac:	00001cc1 	.word	0x00001cc1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000ac 	.word	0x200000ac
      d4:	00000000 	.word	0x00000000
      d8:	0000d7b0 	.word	0x0000d7b0

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	0000d7b0 	.word	0x0000d7b0
     108:	200000b0 	.word	0x200000b0
     10c:	0000d7b0 	.word	0x0000d7b0
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
	cycles_per_ms /= 1000;
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
}
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	00001629 	.word	0x00001629
     140:	00008219 	.word	0x00008219
     144:	20000004 	.word	0x20000004
     148:	20000000 	.word	0x20000000
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     150:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     152:	4b08      	ldr	r3, [pc, #32]	; (174 <delay_cycles_ms+0x24>)
     154:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     156:	4a08      	ldr	r2, [pc, #32]	; (178 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     158:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15a:	2180      	movs	r1, #128	; 0x80
     15c:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     15e:	e006      	b.n	16e <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     160:	2c00      	cmp	r4, #0
     162:	d004      	beq.n	16e <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     164:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     166:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     168:	6813      	ldr	r3, [r2, #0]
     16a:	420b      	tst	r3, r1
     16c:	d0fc      	beq.n	168 <delay_cycles_ms+0x18>
     16e:	3801      	subs	r0, #1
     170:	d2f6      	bcs.n	160 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     172:	bd30      	pop	{r4, r5, pc}
     174:	20000004 	.word	0x20000004
     178:	e000e010 	.word	0xe000e010

0000017c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     17c:	4b0c      	ldr	r3, [pc, #48]	; (1b0 <cpu_irq_enter_critical+0x34>)
     17e:	681b      	ldr	r3, [r3, #0]
     180:	2b00      	cmp	r3, #0
     182:	d110      	bne.n	1a6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     184:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     188:	2b00      	cmp	r3, #0
     18a:	d109      	bne.n	1a0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     18c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     18e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     192:	2200      	movs	r2, #0
     194:	4b07      	ldr	r3, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x38>)
     196:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     198:	3201      	adds	r2, #1
     19a:	4b07      	ldr	r3, [pc, #28]	; (1b8 <cpu_irq_enter_critical+0x3c>)
     19c:	701a      	strb	r2, [r3, #0]
     19e:	e002      	b.n	1a6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1a0:	2200      	movs	r2, #0
     1a2:	4b05      	ldr	r3, [pc, #20]	; (1b8 <cpu_irq_enter_critical+0x3c>)
     1a4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1a6:	4a02      	ldr	r2, [pc, #8]	; (1b0 <cpu_irq_enter_critical+0x34>)
     1a8:	6813      	ldr	r3, [r2, #0]
     1aa:	3301      	adds	r3, #1
     1ac:	6013      	str	r3, [r2, #0]
}
     1ae:	4770      	bx	lr
     1b0:	200000c8 	.word	0x200000c8
     1b4:	20000008 	.word	0x20000008
     1b8:	200000cc 	.word	0x200000cc

000001bc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1bc:	4b08      	ldr	r3, [pc, #32]	; (1e0 <cpu_irq_leave_critical+0x24>)
     1be:	681a      	ldr	r2, [r3, #0]
     1c0:	3a01      	subs	r2, #1
     1c2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c4:	681b      	ldr	r3, [r3, #0]
     1c6:	2b00      	cmp	r3, #0
     1c8:	d109      	bne.n	1de <cpu_irq_leave_critical+0x22>
     1ca:	4b06      	ldr	r3, [pc, #24]	; (1e4 <cpu_irq_leave_critical+0x28>)
     1cc:	781b      	ldrb	r3, [r3, #0]
     1ce:	2b00      	cmp	r3, #0
     1d0:	d005      	beq.n	1de <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d2:	2201      	movs	r2, #1
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <cpu_irq_leave_critical+0x2c>)
     1d6:	701a      	strb	r2, [r3, #0]
     1d8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     1dc:	b662      	cpsie	i
	}
}
     1de:	4770      	bx	lr
     1e0:	200000c8 	.word	0x200000c8
     1e4:	200000cc 	.word	0x200000cc
     1e8:	20000008 	.word	0x20000008

000001ec <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ee:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f0:	ac01      	add	r4, sp, #4
     1f2:	2501      	movs	r5, #1
     1f4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1f6:	2700      	movs	r7, #0
     1f8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     1fc:	202a      	movs	r0, #42	; 0x2a
     1fe:	1c21      	adds	r1, r4, #0
     200:	4e06      	ldr	r6, [pc, #24]	; (21c <system_board_init+0x30>)
     202:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     204:	2280      	movs	r2, #128	; 0x80
     206:	00d2      	lsls	r2, r2, #3
     208:	4b05      	ldr	r3, [pc, #20]	; (220 <system_board_init+0x34>)
     20a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     20c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     20e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     210:	2002      	movs	r0, #2
     212:	1c21      	adds	r1, r4, #0
     214:	47b0      	blx	r6
}
     216:	b003      	add	sp, #12
     218:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	0000043d 	.word	0x0000043d
     220:	40002880 	.word	0x40002880

00000224 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     224:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     226:	2a00      	cmp	r2, #0
     228:	d10d      	bne.n	246 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     22a:	008b      	lsls	r3, r1, #2
     22c:	4a07      	ldr	r2, [pc, #28]	; (24c <extint_register_callback+0x28>)
     22e:	589b      	ldr	r3, [r3, r2]
     230:	2b00      	cmp	r3, #0
     232:	d103      	bne.n	23c <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     234:	0089      	lsls	r1, r1, #2
     236:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     238:	2300      	movs	r3, #0
     23a:	e004      	b.n	246 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
     23c:	4283      	cmp	r3, r0
     23e:	d001      	beq.n	244 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     240:	231d      	movs	r3, #29
     242:	e000      	b.n	246 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     244:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     246:	1c18      	adds	r0, r3, #0
     248:	4770      	bx	lr
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	20000e0c 	.word	0x20000e0c

00000250 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     250:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     252:	2900      	cmp	r1, #0
     254:	d107      	bne.n	266 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     256:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     258:	281f      	cmp	r0, #31
     25a:	d800      	bhi.n	25e <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     25c:	4a03      	ldr	r2, [pc, #12]	; (26c <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     25e:	2301      	movs	r3, #1
     260:	4083      	lsls	r3, r0
     262:	6113      	str	r3, [r2, #16]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     264:	2300      	movs	r3, #0
}
     266:	1c18      	adds	r0, r3, #0
     268:	4770      	bx	lr
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	40002400 	.word	0x40002400

00000270 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     270:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     272:	2200      	movs	r2, #0
     274:	4b15      	ldr	r3, [pc, #84]	; (2cc <EIC_Handler+0x5c>)
     276:	701a      	strb	r2, [r3, #0]
     278:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     27a:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     27c:	4e14      	ldr	r6, [pc, #80]	; (2d0 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     27e:	4c13      	ldr	r4, [pc, #76]	; (2cc <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     280:	2b1f      	cmp	r3, #31
     282:	d919      	bls.n	2b8 <EIC_Handler+0x48>
     284:	e00f      	b.n	2a6 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     286:	2100      	movs	r1, #0
     288:	e000      	b.n	28c <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     28a:	4912      	ldr	r1, [pc, #72]	; (2d4 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     28c:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     28e:	009b      	lsls	r3, r3, #2
     290:	599b      	ldr	r3, [r3, r6]
     292:	2b00      	cmp	r3, #0
     294:	d000      	beq.n	298 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     296:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     298:	7823      	ldrb	r3, [r4, #0]
     29a:	3301      	adds	r3, #1
     29c:	b2db      	uxtb	r3, r3
     29e:	7023      	strb	r3, [r4, #0]
     2a0:	2b0f      	cmp	r3, #15
     2a2:	d9ed      	bls.n	280 <EIC_Handler+0x10>
     2a4:	e011      	b.n	2ca <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     2a6:	1c29      	adds	r1, r5, #0
     2a8:	4019      	ands	r1, r3
     2aa:	2201      	movs	r2, #1
     2ac:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     2ae:	2100      	movs	r1, #0
     2b0:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     2b2:	4211      	tst	r1, r2
     2b4:	d1e7      	bne.n	286 <EIC_Handler+0x16>
     2b6:	e7ef      	b.n	298 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     2b8:	1c29      	adds	r1, r5, #0
     2ba:	4019      	ands	r1, r3
     2bc:	2201      	movs	r2, #1
     2be:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     2c0:	4904      	ldr	r1, [pc, #16]	; (2d4 <EIC_Handler+0x64>)
     2c2:	6949      	ldr	r1, [r1, #20]
     2c4:	4211      	tst	r1, r2
     2c6:	d1e0      	bne.n	28a <EIC_Handler+0x1a>
     2c8:	e7e6      	b.n	298 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     2ca:	bd70      	pop	{r4, r5, r6, pc}
     2cc:	20000e08 	.word	0x20000e08
     2d0:	20000e0c 	.word	0x20000e0c
     2d4:	40002400 	.word	0x40002400

000002d8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     2d8:	4a06      	ldr	r2, [pc, #24]	; (2f4 <_extint_enable+0x1c>)
     2da:	7811      	ldrb	r1, [r2, #0]
     2dc:	2302      	movs	r3, #2
     2de:	430b      	orrs	r3, r1
     2e0:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     2e2:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2e4:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     2e6:	6853      	ldr	r3, [r2, #4]
     2e8:	4219      	tst	r1, r3
     2ea:	d1fc      	bne.n	2e6 <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2ec:	6853      	ldr	r3, [r2, #4]
     2ee:	4218      	tst	r0, r3
     2f0:	d1f9      	bne.n	2e6 <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     2f2:	4770      	bx	lr
     2f4:	40002400 	.word	0x40002400

000002f8 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     2f8:	4a06      	ldr	r2, [pc, #24]	; (314 <_extint_disable+0x1c>)
     2fa:	7813      	ldrb	r3, [r2, #0]
     2fc:	2102      	movs	r1, #2
     2fe:	438b      	bics	r3, r1
     300:	7013      	strb	r3, [r2, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     302:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     304:	6853      	ldr	r3, [r2, #4]
     306:	4219      	tst	r1, r3
     308:	d1fc      	bne.n	304 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     30a:	6853      	ldr	r3, [r2, #4]
     30c:	4218      	tst	r0, r3
     30e:	d1f9      	bne.n	304 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     310:	4770      	bx	lr
     312:	46c0      	nop			; (mov r8, r8)
     314:	40002400 	.word	0x40002400

00000318 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     318:	b500      	push	{lr}
     31a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     31c:	4a18      	ldr	r2, [pc, #96]	; (380 <_system_extint_init+0x68>)
     31e:	6953      	ldr	r3, [r2, #20]
     320:	2180      	movs	r1, #128	; 0x80
     322:	0089      	lsls	r1, r1, #2
     324:	430b      	orrs	r3, r1
     326:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     328:	a901      	add	r1, sp, #4
     32a:	2300      	movs	r3, #0
     32c:	700b      	strb	r3, [r1, #0]
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     32e:	2003      	movs	r0, #3
     330:	4b14      	ldr	r3, [pc, #80]	; (384 <_system_extint_init+0x6c>)
     332:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     334:	2003      	movs	r0, #3
     336:	4b14      	ldr	r3, [pc, #80]	; (388 <_system_extint_init+0x70>)
     338:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     33a:	4a14      	ldr	r2, [pc, #80]	; (38c <_system_extint_init+0x74>)
     33c:	7811      	ldrb	r1, [r2, #0]
     33e:	2301      	movs	r3, #1
     340:	430b      	orrs	r3, r1
     342:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     344:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     346:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     348:	6853      	ldr	r3, [r2, #4]
     34a:	4219      	tst	r1, r3
     34c:	d1fc      	bne.n	348 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     34e:	6853      	ldr	r3, [r2, #4]
     350:	4218      	tst	r0, r3
     352:	d009      	beq.n	368 <_system_extint_init+0x50>
     354:	e7f8      	b.n	348 <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     356:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     358:	428b      	cmp	r3, r1
     35a:	d1fc      	bne.n	356 <_system_extint_init+0x3e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     35c:	2208      	movs	r2, #8
     35e:	4b0c      	ldr	r3, [pc, #48]	; (390 <_system_extint_init+0x78>)
     360:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     362:	4b0c      	ldr	r3, [pc, #48]	; (394 <_system_extint_init+0x7c>)
     364:	4798      	blx	r3
     366:	e009      	b.n	37c <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     368:	4a08      	ldr	r2, [pc, #32]	; (38c <_system_extint_init+0x74>)
     36a:	7813      	ldrb	r3, [r2, #0]
     36c:	2110      	movs	r1, #16
     36e:	438b      	bics	r3, r1
     370:	7013      	strb	r3, [r2, #0]
     372:	4b09      	ldr	r3, [pc, #36]	; (398 <_system_extint_init+0x80>)
     374:	1c19      	adds	r1, r3, #0
     376:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     378:	2200      	movs	r2, #0
     37a:	e7ec      	b.n	356 <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     37c:	b003      	add	sp, #12
     37e:	bd00      	pop	{pc}
     380:	40000400 	.word	0x40000400
     384:	000016fd 	.word	0x000016fd
     388:	00001695 	.word	0x00001695
     38c:	40002400 	.word	0x40002400
     390:	e000e100 	.word	0xe000e100
     394:	000002d9 	.word	0x000002d9
     398:	20000e0c 	.word	0x20000e0c

0000039c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     39c:	2300      	movs	r3, #0
     39e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     3a0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     3a2:	2201      	movs	r2, #1
     3a4:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     3a6:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     3a8:	3201      	adds	r2, #1
     3aa:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     3ac:	7243      	strb	r3, [r0, #9]
}
     3ae:	4770      	bx	lr

000003b0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b2:	b083      	sub	sp, #12
     3b4:	1c05      	adds	r5, r0, #0
     3b6:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     3b8:	4b1c      	ldr	r3, [pc, #112]	; (42c <extint_chan_set_config+0x7c>)
     3ba:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3bc:	a901      	add	r1, sp, #4
     3be:	2300      	movs	r3, #0
     3c0:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     3c2:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     3c4:	7923      	ldrb	r3, [r4, #4]
     3c6:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     3c8:	7a23      	ldrb	r3, [r4, #8]
     3ca:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     3cc:	7820      	ldrb	r0, [r4, #0]
     3ce:	4b18      	ldr	r3, [pc, #96]	; (430 <extint_chan_set_config+0x80>)
     3d0:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     3d2:	2600      	movs	r6, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     3d4:	2d1f      	cmp	r5, #31
     3d6:	d800      	bhi.n	3da <extint_chan_set_config+0x2a>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     3d8:	4e16      	ldr	r6, [pc, #88]	; (434 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     3da:	2207      	movs	r2, #7
     3dc:	402a      	ands	r2, r5
     3de:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     3e0:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     3e2:	7aa3      	ldrb	r3, [r4, #10]
     3e4:	2b00      	cmp	r3, #0
     3e6:	d001      	beq.n	3ec <extint_chan_set_config+0x3c>
		new_config |= EIC_CONFIG_FILTEN0;
     3e8:	2308      	movs	r3, #8
     3ea:	4318      	orrs	r0, r3
     3ec:	08eb      	lsrs	r3, r5, #3
     3ee:	009b      	lsls	r3, r3, #2
     3f0:	18f3      	adds	r3, r6, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     3f2:	69d9      	ldr	r1, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     3f4:	4090      	lsls	r0, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3f6:	270f      	movs	r7, #15
     3f8:	4097      	lsls	r7, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     3fa:	43b9      	bics	r1, r7
     3fc:	1c0a      	adds	r2, r1, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3fe:	4302      	orrs	r2, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     400:	61da      	str	r2, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
#if (SAML22) || (SAML21XXXB || SAMC20)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     402:	7a63      	ldrb	r3, [r4, #9]
     404:	2b00      	cmp	r3, #0
     406:	d006      	beq.n	416 <extint_chan_set_config+0x66>
		EIC_module->ASYNCH.reg |= (1UL << channel);
     408:	69b3      	ldr	r3, [r6, #24]
     40a:	2201      	movs	r2, #1
     40c:	40aa      	lsls	r2, r5
     40e:	1c15      	adds	r5, r2, #0
     410:	431d      	orrs	r5, r3
     412:	61b5      	str	r5, [r6, #24]
     414:	e006      	b.n	424 <extint_chan_set_config+0x74>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
     416:	69b3      	ldr	r3, [r6, #24]
     418:	041b      	lsls	r3, r3, #16
     41a:	0c1b      	lsrs	r3, r3, #16
     41c:	2201      	movs	r2, #1
     41e:	40aa      	lsls	r2, r5
     420:	4393      	bics	r3, r2
     422:	61b3      	str	r3, [r6, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
     424:	4b04      	ldr	r3, [pc, #16]	; (438 <extint_chan_set_config+0x88>)
     426:	4798      	blx	r3
}
     428:	b003      	add	sp, #12
     42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     42c:	000002f9 	.word	0x000002f9
     430:	000017f9 	.word	0x000017f9
     434:	40002400 	.word	0x40002400
     438:	000002d9 	.word	0x000002d9

0000043c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     43c:	b500      	push	{lr}
     43e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     440:	ab01      	add	r3, sp, #4
     442:	2280      	movs	r2, #128	; 0x80
     444:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     446:	780a      	ldrb	r2, [r1, #0]
     448:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     44a:	784a      	ldrb	r2, [r1, #1]
     44c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     44e:	788a      	ldrb	r2, [r1, #2]
     450:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     452:	1c19      	adds	r1, r3, #0
     454:	4b01      	ldr	r3, [pc, #4]	; (45c <port_pin_set_config+0x20>)
     456:	4798      	blx	r3
}
     458:	b003      	add	sp, #12
     45a:	bd00      	pop	{pc}
     45c:	000017f9 	.word	0x000017f9

00000460 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     460:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     462:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     464:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     466:	4281      	cmp	r1, r0
     468:	d30c      	bcc.n	484 <_sercom_get_sync_baud_val+0x24>
     46a:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     46c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     46e:	3301      	adds	r3, #1
     470:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     472:	4288      	cmp	r0, r1
     474:	d9fa      	bls.n	46c <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     476:	3b01      	subs	r3, #1
     478:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     47a:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     47c:	2bff      	cmp	r3, #255	; 0xff
     47e:	d801      	bhi.n	484 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     480:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     482:	2400      	movs	r4, #0
	}
}
     484:	1c20      	adds	r0, r4, #0
     486:	bd10      	pop	{r4, pc}

00000488 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     488:	b5f0      	push	{r4, r5, r6, r7, lr}
     48a:	465f      	mov	r7, fp
     48c:	4656      	mov	r6, sl
     48e:	464d      	mov	r5, r9
     490:	4644      	mov	r4, r8
     492:	b4f0      	push	{r4, r5, r6, r7}
     494:	b089      	sub	sp, #36	; 0x24
     496:	1c1c      	adds	r4, r3, #0
     498:	ab12      	add	r3, sp, #72	; 0x48
     49a:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     49c:	1c06      	adds	r6, r0, #0
     49e:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4a0:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     4a2:	428e      	cmp	r6, r1
     4a4:	d900      	bls.n	4a8 <_sercom_get_async_baud_val+0x20>
     4a6:	e0c7      	b.n	638 <_sercom_get_async_baud_val+0x1b0>
     4a8:	1c25      	adds	r5, r4, #0
     4aa:	9207      	str	r2, [sp, #28]
     4ac:	1c0c      	adds	r4, r1, #0
     4ae:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     4b0:	2d00      	cmp	r5, #0
     4b2:	d151      	bne.n	558 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     4b4:	1c18      	adds	r0, r3, #0
     4b6:	2100      	movs	r1, #0
     4b8:	2300      	movs	r3, #0
     4ba:	4d63      	ldr	r5, [pc, #396]	; (648 <_sercom_get_async_baud_val+0x1c0>)
     4bc:	47a8      	blx	r5
     4be:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     4c0:	1c26      	adds	r6, r4, #0
     4c2:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     4c4:	2300      	movs	r3, #0
     4c6:	2400      	movs	r4, #0
     4c8:	9302      	str	r3, [sp, #8]
     4ca:	9403      	str	r4, [sp, #12]
     4cc:	2200      	movs	r2, #0
     4ce:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     4d0:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     4d2:	2120      	movs	r1, #32
     4d4:	468c      	mov	ip, r1
     4d6:	391f      	subs	r1, #31
     4d8:	9600      	str	r6, [sp, #0]
     4da:	9701      	str	r7, [sp, #4]
     4dc:	2420      	movs	r4, #32
     4de:	4264      	negs	r4, r4
     4e0:	1904      	adds	r4, r0, r4
     4e2:	d403      	bmi.n	4ec <_sercom_get_async_baud_val+0x64>
     4e4:	1c0d      	adds	r5, r1, #0
     4e6:	40a5      	lsls	r5, r4
     4e8:	46a8      	mov	r8, r5
     4ea:	e004      	b.n	4f6 <_sercom_get_async_baud_val+0x6e>
     4ec:	4664      	mov	r4, ip
     4ee:	1a24      	subs	r4, r4, r0
     4f0:	1c0d      	adds	r5, r1, #0
     4f2:	40e5      	lsrs	r5, r4
     4f4:	46a8      	mov	r8, r5
     4f6:	1c0c      	adds	r4, r1, #0
     4f8:	4084      	lsls	r4, r0
     4fa:	46a1      	mov	r9, r4

		r = r << 1;
     4fc:	1c14      	adds	r4, r2, #0
     4fe:	1c1d      	adds	r5, r3, #0
     500:	18a4      	adds	r4, r4, r2
     502:	415d      	adcs	r5, r3
     504:	1c22      	adds	r2, r4, #0
     506:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
     508:	465e      	mov	r6, fp
     50a:	4647      	mov	r7, r8
     50c:	423e      	tst	r6, r7
     50e:	d003      	beq.n	518 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
     510:	1c0e      	adds	r6, r1, #0
     512:	4326      	orrs	r6, r4
     514:	1c32      	adds	r2, r6, #0
     516:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
     518:	9c01      	ldr	r4, [sp, #4]
     51a:	429c      	cmp	r4, r3
     51c:	d810      	bhi.n	540 <_sercom_get_async_baud_val+0xb8>
     51e:	d102      	bne.n	526 <_sercom_get_async_baud_val+0x9e>
     520:	9c00      	ldr	r4, [sp, #0]
     522:	4294      	cmp	r4, r2
     524:	d80c      	bhi.n	540 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
     526:	9c00      	ldr	r4, [sp, #0]
     528:	9d01      	ldr	r5, [sp, #4]
     52a:	1b12      	subs	r2, r2, r4
     52c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     52e:	464d      	mov	r5, r9
     530:	9e02      	ldr	r6, [sp, #8]
     532:	9f03      	ldr	r7, [sp, #12]
     534:	4335      	orrs	r5, r6
     536:	1c3c      	adds	r4, r7, #0
     538:	4646      	mov	r6, r8
     53a:	4334      	orrs	r4, r6
     53c:	9502      	str	r5, [sp, #8]
     53e:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     540:	3801      	subs	r0, #1
     542:	d2cb      	bcs.n	4dc <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     544:	2200      	movs	r2, #0
     546:	2301      	movs	r3, #1
     548:	9802      	ldr	r0, [sp, #8]
     54a:	9903      	ldr	r1, [sp, #12]
     54c:	1a12      	subs	r2, r2, r0
     54e:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     550:	0c11      	lsrs	r1, r2, #16
     552:	041b      	lsls	r3, r3, #16
     554:	4319      	orrs	r1, r3
     556:	e06c      	b.n	632 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     558:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     55a:	2d01      	cmp	r5, #1
     55c:	d169      	bne.n	632 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     55e:	0f61      	lsrs	r1, r4, #29
     560:	1c0f      	adds	r7, r1, #0
     562:	00e1      	lsls	r1, r4, #3
     564:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
     566:	1c18      	adds	r0, r3, #0
     568:	2100      	movs	r1, #0
     56a:	2300      	movs	r3, #0
     56c:	4c36      	ldr	r4, [pc, #216]	; (648 <_sercom_get_async_baud_val+0x1c0>)
     56e:	47a0      	blx	r4
     570:	1c04      	adds	r4, r0, #0
     572:	1c0d      	adds	r5, r1, #0
     574:	2300      	movs	r3, #0
     576:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     578:	3320      	adds	r3, #32
     57a:	469b      	mov	fp, r3
     57c:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     57e:	4663      	mov	r3, ip
     580:	9305      	str	r3, [sp, #20]
     582:	46b9      	mov	r9, r7
     584:	466b      	mov	r3, sp
     586:	7d1b      	ldrb	r3, [r3, #20]
     588:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     58a:	2300      	movs	r3, #0
     58c:	469c      	mov	ip, r3
     58e:	2000      	movs	r0, #0
     590:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
     592:	223f      	movs	r2, #63	; 0x3f
     594:	9400      	str	r4, [sp, #0]
     596:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
     598:	2320      	movs	r3, #32
     59a:	425b      	negs	r3, r3
     59c:	18d3      	adds	r3, r2, r3
     59e:	d403      	bmi.n	5a8 <_sercom_get_async_baud_val+0x120>
     5a0:	1c34      	adds	r4, r6, #0
     5a2:	409c      	lsls	r4, r3
     5a4:	1c23      	adds	r3, r4, #0
     5a6:	e004      	b.n	5b2 <_sercom_get_async_baud_val+0x12a>
     5a8:	465b      	mov	r3, fp
     5aa:	1a9b      	subs	r3, r3, r2
     5ac:	1c34      	adds	r4, r6, #0
     5ae:	40dc      	lsrs	r4, r3
     5b0:	1c23      	adds	r3, r4, #0
     5b2:	1c37      	adds	r7, r6, #0
     5b4:	4097      	lsls	r7, r2

		r = r << 1;
     5b6:	1c04      	adds	r4, r0, #0
     5b8:	1c0d      	adds	r5, r1, #0
     5ba:	1824      	adds	r4, r4, r0
     5bc:	414d      	adcs	r5, r1
     5be:	1c20      	adds	r0, r4, #0
     5c0:	1c29      	adds	r1, r5, #0
     5c2:	9002      	str	r0, [sp, #8]
     5c4:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
     5c6:	4644      	mov	r4, r8
     5c8:	403c      	ands	r4, r7
     5ca:	46a2      	mov	sl, r4
     5cc:	464c      	mov	r4, r9
     5ce:	4023      	ands	r3, r4
     5d0:	4654      	mov	r4, sl
     5d2:	4323      	orrs	r3, r4
     5d4:	d005      	beq.n	5e2 <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
     5d6:	9b02      	ldr	r3, [sp, #8]
     5d8:	9c03      	ldr	r4, [sp, #12]
     5da:	1c1d      	adds	r5, r3, #0
     5dc:	4335      	orrs	r5, r6
     5de:	1c28      	adds	r0, r5, #0
     5e0:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
     5e2:	9b01      	ldr	r3, [sp, #4]
     5e4:	428b      	cmp	r3, r1
     5e6:	d80a      	bhi.n	5fe <_sercom_get_async_baud_val+0x176>
     5e8:	d102      	bne.n	5f0 <_sercom_get_async_baud_val+0x168>
     5ea:	9b00      	ldr	r3, [sp, #0]
     5ec:	4283      	cmp	r3, r0
     5ee:	d806      	bhi.n	5fe <_sercom_get_async_baud_val+0x176>
			r = r - d;
     5f0:	9b00      	ldr	r3, [sp, #0]
     5f2:	9c01      	ldr	r4, [sp, #4]
     5f4:	1ac0      	subs	r0, r0, r3
     5f6:	41a1      	sbcs	r1, r4
			q |= bit_shift;
     5f8:	4663      	mov	r3, ip
     5fa:	433b      	orrs	r3, r7
     5fc:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     5fe:	3a01      	subs	r2, #1
     600:	d2ca      	bcs.n	598 <_sercom_get_async_baud_val+0x110>
     602:	9c00      	ldr	r4, [sp, #0]
     604:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     606:	4662      	mov	r2, ip
     608:	9905      	ldr	r1, [sp, #20]
     60a:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
     60c:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     60e:	4a0f      	ldr	r2, [pc, #60]	; (64c <_sercom_get_async_baud_val+0x1c4>)
     610:	4293      	cmp	r3, r2
     612:	d908      	bls.n	626 <_sercom_get_async_baud_val+0x19e>
     614:	9a06      	ldr	r2, [sp, #24]
     616:	3201      	adds	r2, #1
     618:	b2d2      	uxtb	r2, r2
     61a:	9206      	str	r2, [sp, #24]
     61c:	1c0a      	adds	r2, r1, #0
     61e:	3201      	adds	r2, #1
     620:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     622:	2a08      	cmp	r2, #8
     624:	d1ae      	bne.n	584 <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     626:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     628:	9a06      	ldr	r2, [sp, #24]
     62a:	2a08      	cmp	r2, #8
     62c:	d004      	beq.n	638 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     62e:	0351      	lsls	r1, r2, #13
     630:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     632:	9b07      	ldr	r3, [sp, #28]
     634:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
     636:	2500      	movs	r5, #0
}
     638:	1c28      	adds	r0, r5, #0
     63a:	b009      	add	sp, #36	; 0x24
     63c:	bc3c      	pop	{r2, r3, r4, r5}
     63e:	4690      	mov	r8, r2
     640:	4699      	mov	r9, r3
     642:	46a2      	mov	sl, r4
     644:	46ab      	mov	fp, r5
     646:	bdf0      	pop	{r4, r5, r6, r7, pc}
     648:	0000833d 	.word	0x0000833d
     64c:	00001fff 	.word	0x00001fff

00000650 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     650:	b510      	push	{r4, lr}
     652:	b082      	sub	sp, #8
     654:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     656:	4b0e      	ldr	r3, [pc, #56]	; (690 <sercom_set_gclk_generator+0x40>)
     658:	781b      	ldrb	r3, [r3, #0]
     65a:	2b00      	cmp	r3, #0
     65c:	d001      	beq.n	662 <sercom_set_gclk_generator+0x12>
     65e:	2900      	cmp	r1, #0
     660:	d00d      	beq.n	67e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     662:	a901      	add	r1, sp, #4
     664:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     666:	2011      	movs	r0, #17
     668:	4b0a      	ldr	r3, [pc, #40]	; (694 <sercom_set_gclk_generator+0x44>)
     66a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     66c:	2011      	movs	r0, #17
     66e:	4b0a      	ldr	r3, [pc, #40]	; (698 <sercom_set_gclk_generator+0x48>)
     670:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     672:	4b07      	ldr	r3, [pc, #28]	; (690 <sercom_set_gclk_generator+0x40>)
     674:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     676:	2201      	movs	r2, #1
     678:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     67a:	2000      	movs	r0, #0
     67c:	e006      	b.n	68c <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     67e:	4b04      	ldr	r3, [pc, #16]	; (690 <sercom_set_gclk_generator+0x40>)
     680:	785b      	ldrb	r3, [r3, #1]
     682:	4283      	cmp	r3, r0
     684:	d001      	beq.n	68a <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     686:	201d      	movs	r0, #29
     688:	e000      	b.n	68c <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     68a:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     68c:	b002      	add	sp, #8
     68e:	bd10      	pop	{r4, pc}
     690:	200000d0 	.word	0x200000d0
     694:	000016fd 	.word	0x000016fd
     698:	00001695 	.word	0x00001695

0000069c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     69c:	4b44      	ldr	r3, [pc, #272]	; (7b0 <_sercom_get_default_pad+0x114>)
     69e:	4298      	cmp	r0, r3
     6a0:	d034      	beq.n	70c <_sercom_get_default_pad+0x70>
     6a2:	d807      	bhi.n	6b4 <_sercom_get_default_pad+0x18>
     6a4:	2384      	movs	r3, #132	; 0x84
     6a6:	05db      	lsls	r3, r3, #23
     6a8:	4298      	cmp	r0, r3
     6aa:	d00d      	beq.n	6c8 <_sercom_get_default_pad+0x2c>
     6ac:	4b41      	ldr	r3, [pc, #260]	; (7b4 <_sercom_get_default_pad+0x118>)
     6ae:	4298      	cmp	r0, r3
     6b0:	d01b      	beq.n	6ea <_sercom_get_default_pad+0x4e>
     6b2:	e06f      	b.n	794 <_sercom_get_default_pad+0xf8>
     6b4:	4b40      	ldr	r3, [pc, #256]	; (7b8 <_sercom_get_default_pad+0x11c>)
     6b6:	4298      	cmp	r0, r3
     6b8:	d04a      	beq.n	750 <_sercom_get_default_pad+0xb4>
     6ba:	4b40      	ldr	r3, [pc, #256]	; (7bc <_sercom_get_default_pad+0x120>)
     6bc:	4298      	cmp	r0, r3
     6be:	d058      	beq.n	772 <_sercom_get_default_pad+0xd6>
     6c0:	4b3f      	ldr	r3, [pc, #252]	; (7c0 <_sercom_get_default_pad+0x124>)
     6c2:	4298      	cmp	r0, r3
     6c4:	d166      	bne.n	794 <_sercom_get_default_pad+0xf8>
     6c6:	e032      	b.n	72e <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6c8:	2901      	cmp	r1, #1
     6ca:	d006      	beq.n	6da <_sercom_get_default_pad+0x3e>
     6cc:	2900      	cmp	r1, #0
     6ce:	d063      	beq.n	798 <_sercom_get_default_pad+0xfc>
     6d0:	2902      	cmp	r1, #2
     6d2:	d006      	beq.n	6e2 <_sercom_get_default_pad+0x46>
     6d4:	2903      	cmp	r1, #3
     6d6:	d006      	beq.n	6e6 <_sercom_get_default_pad+0x4a>
     6d8:	e001      	b.n	6de <_sercom_get_default_pad+0x42>
     6da:	483a      	ldr	r0, [pc, #232]	; (7c4 <_sercom_get_default_pad+0x128>)
     6dc:	e067      	b.n	7ae <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     6de:	2000      	movs	r0, #0
     6e0:	e065      	b.n	7ae <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6e2:	4839      	ldr	r0, [pc, #228]	; (7c8 <_sercom_get_default_pad+0x12c>)
     6e4:	e063      	b.n	7ae <_sercom_get_default_pad+0x112>
     6e6:	4839      	ldr	r0, [pc, #228]	; (7cc <_sercom_get_default_pad+0x130>)
     6e8:	e061      	b.n	7ae <_sercom_get_default_pad+0x112>
     6ea:	2901      	cmp	r1, #1
     6ec:	d006      	beq.n	6fc <_sercom_get_default_pad+0x60>
     6ee:	2900      	cmp	r1, #0
     6f0:	d054      	beq.n	79c <_sercom_get_default_pad+0x100>
     6f2:	2902      	cmp	r1, #2
     6f4:	d006      	beq.n	704 <_sercom_get_default_pad+0x68>
     6f6:	2903      	cmp	r1, #3
     6f8:	d006      	beq.n	708 <_sercom_get_default_pad+0x6c>
     6fa:	e001      	b.n	700 <_sercom_get_default_pad+0x64>
     6fc:	4834      	ldr	r0, [pc, #208]	; (7d0 <_sercom_get_default_pad+0x134>)
     6fe:	e056      	b.n	7ae <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     700:	2000      	movs	r0, #0
     702:	e054      	b.n	7ae <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     704:	4833      	ldr	r0, [pc, #204]	; (7d4 <_sercom_get_default_pad+0x138>)
     706:	e052      	b.n	7ae <_sercom_get_default_pad+0x112>
     708:	4833      	ldr	r0, [pc, #204]	; (7d8 <_sercom_get_default_pad+0x13c>)
     70a:	e050      	b.n	7ae <_sercom_get_default_pad+0x112>
     70c:	2901      	cmp	r1, #1
     70e:	d006      	beq.n	71e <_sercom_get_default_pad+0x82>
     710:	2900      	cmp	r1, #0
     712:	d045      	beq.n	7a0 <_sercom_get_default_pad+0x104>
     714:	2902      	cmp	r1, #2
     716:	d006      	beq.n	726 <_sercom_get_default_pad+0x8a>
     718:	2903      	cmp	r1, #3
     71a:	d006      	beq.n	72a <_sercom_get_default_pad+0x8e>
     71c:	e001      	b.n	722 <_sercom_get_default_pad+0x86>
     71e:	482f      	ldr	r0, [pc, #188]	; (7dc <_sercom_get_default_pad+0x140>)
     720:	e045      	b.n	7ae <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     722:	2000      	movs	r0, #0
     724:	e043      	b.n	7ae <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     726:	482e      	ldr	r0, [pc, #184]	; (7e0 <_sercom_get_default_pad+0x144>)
     728:	e041      	b.n	7ae <_sercom_get_default_pad+0x112>
     72a:	482e      	ldr	r0, [pc, #184]	; (7e4 <_sercom_get_default_pad+0x148>)
     72c:	e03f      	b.n	7ae <_sercom_get_default_pad+0x112>
     72e:	2901      	cmp	r1, #1
     730:	d006      	beq.n	740 <_sercom_get_default_pad+0xa4>
     732:	2900      	cmp	r1, #0
     734:	d036      	beq.n	7a4 <_sercom_get_default_pad+0x108>
     736:	2902      	cmp	r1, #2
     738:	d006      	beq.n	748 <_sercom_get_default_pad+0xac>
     73a:	2903      	cmp	r1, #3
     73c:	d006      	beq.n	74c <_sercom_get_default_pad+0xb0>
     73e:	e001      	b.n	744 <_sercom_get_default_pad+0xa8>
     740:	4829      	ldr	r0, [pc, #164]	; (7e8 <_sercom_get_default_pad+0x14c>)
     742:	e034      	b.n	7ae <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     744:	2000      	movs	r0, #0
     746:	e032      	b.n	7ae <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     748:	4828      	ldr	r0, [pc, #160]	; (7ec <_sercom_get_default_pad+0x150>)
     74a:	e030      	b.n	7ae <_sercom_get_default_pad+0x112>
     74c:	4828      	ldr	r0, [pc, #160]	; (7f0 <_sercom_get_default_pad+0x154>)
     74e:	e02e      	b.n	7ae <_sercom_get_default_pad+0x112>
     750:	2901      	cmp	r1, #1
     752:	d006      	beq.n	762 <_sercom_get_default_pad+0xc6>
     754:	2900      	cmp	r1, #0
     756:	d027      	beq.n	7a8 <_sercom_get_default_pad+0x10c>
     758:	2902      	cmp	r1, #2
     75a:	d006      	beq.n	76a <_sercom_get_default_pad+0xce>
     75c:	2903      	cmp	r1, #3
     75e:	d006      	beq.n	76e <_sercom_get_default_pad+0xd2>
     760:	e001      	b.n	766 <_sercom_get_default_pad+0xca>
     762:	4824      	ldr	r0, [pc, #144]	; (7f4 <_sercom_get_default_pad+0x158>)
     764:	e023      	b.n	7ae <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     766:	2000      	movs	r0, #0
     768:	e021      	b.n	7ae <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     76a:	4823      	ldr	r0, [pc, #140]	; (7f8 <_sercom_get_default_pad+0x15c>)
     76c:	e01f      	b.n	7ae <_sercom_get_default_pad+0x112>
     76e:	4823      	ldr	r0, [pc, #140]	; (7fc <_sercom_get_default_pad+0x160>)
     770:	e01d      	b.n	7ae <_sercom_get_default_pad+0x112>
     772:	2901      	cmp	r1, #1
     774:	d006      	beq.n	784 <_sercom_get_default_pad+0xe8>
     776:	2900      	cmp	r1, #0
     778:	d018      	beq.n	7ac <_sercom_get_default_pad+0x110>
     77a:	2902      	cmp	r1, #2
     77c:	d006      	beq.n	78c <_sercom_get_default_pad+0xf0>
     77e:	2903      	cmp	r1, #3
     780:	d006      	beq.n	790 <_sercom_get_default_pad+0xf4>
     782:	e001      	b.n	788 <_sercom_get_default_pad+0xec>
     784:	481e      	ldr	r0, [pc, #120]	; (800 <_sercom_get_default_pad+0x164>)
     786:	e012      	b.n	7ae <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     788:	2000      	movs	r0, #0
     78a:	e010      	b.n	7ae <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     78c:	481d      	ldr	r0, [pc, #116]	; (804 <_sercom_get_default_pad+0x168>)
     78e:	e00e      	b.n	7ae <_sercom_get_default_pad+0x112>
     790:	481d      	ldr	r0, [pc, #116]	; (808 <_sercom_get_default_pad+0x16c>)
     792:	e00c      	b.n	7ae <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
     794:	2000      	movs	r0, #0
     796:	e00a      	b.n	7ae <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     798:	481c      	ldr	r0, [pc, #112]	; (80c <_sercom_get_default_pad+0x170>)
     79a:	e008      	b.n	7ae <_sercom_get_default_pad+0x112>
     79c:	2003      	movs	r0, #3
     79e:	e006      	b.n	7ae <_sercom_get_default_pad+0x112>
     7a0:	481b      	ldr	r0, [pc, #108]	; (810 <_sercom_get_default_pad+0x174>)
     7a2:	e004      	b.n	7ae <_sercom_get_default_pad+0x112>
     7a4:	481b      	ldr	r0, [pc, #108]	; (814 <_sercom_get_default_pad+0x178>)
     7a6:	e002      	b.n	7ae <_sercom_get_default_pad+0x112>
     7a8:	481b      	ldr	r0, [pc, #108]	; (818 <_sercom_get_default_pad+0x17c>)
     7aa:	e000      	b.n	7ae <_sercom_get_default_pad+0x112>
     7ac:	481b      	ldr	r0, [pc, #108]	; (81c <_sercom_get_default_pad+0x180>)
	}

	Assert(false);
	return 0;
}
     7ae:	4770      	bx	lr
     7b0:	42000800 	.word	0x42000800
     7b4:	42000400 	.word	0x42000400
     7b8:	42001000 	.word	0x42001000
     7bc:	43000400 	.word	0x43000400
     7c0:	42000c00 	.word	0x42000c00
     7c4:	00050003 	.word	0x00050003
     7c8:	00060003 	.word	0x00060003
     7cc:	00070003 	.word	0x00070003
     7d0:	00010003 	.word	0x00010003
     7d4:	001e0003 	.word	0x001e0003
     7d8:	001f0003 	.word	0x001f0003
     7dc:	00090003 	.word	0x00090003
     7e0:	000a0003 	.word	0x000a0003
     7e4:	000b0003 	.word	0x000b0003
     7e8:	00110003 	.word	0x00110003
     7ec:	00120003 	.word	0x00120003
     7f0:	00130003 	.word	0x00130003
     7f4:	000d0003 	.word	0x000d0003
     7f8:	000e0003 	.word	0x000e0003
     7fc:	000f0003 	.word	0x000f0003
     800:	00170003 	.word	0x00170003
     804:	00180003 	.word	0x00180003
     808:	00190003 	.word	0x00190003
     80c:	00040003 	.word	0x00040003
     810:	00080003 	.word	0x00080003
     814:	00100003 	.word	0x00100003
     818:	000c0003 	.word	0x000c0003
     81c:	00160003 	.word	0x00160003

00000820 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     820:	b530      	push	{r4, r5, lr}
     822:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     824:	4b0c      	ldr	r3, [pc, #48]	; (858 <_sercom_get_sercom_inst_index+0x38>)
     826:	466a      	mov	r2, sp
     828:	cb32      	ldmia	r3!, {r1, r4, r5}
     82a:	c232      	stmia	r2!, {r1, r4, r5}
     82c:	cb32      	ldmia	r3!, {r1, r4, r5}
     82e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     830:	9b00      	ldr	r3, [sp, #0]
     832:	4283      	cmp	r3, r0
     834:	d006      	beq.n	844 <_sercom_get_sercom_inst_index+0x24>
     836:	2301      	movs	r3, #1
     838:	009a      	lsls	r2, r3, #2
     83a:	4669      	mov	r1, sp
     83c:	5852      	ldr	r2, [r2, r1]
     83e:	4282      	cmp	r2, r0
     840:	d103      	bne.n	84a <_sercom_get_sercom_inst_index+0x2a>
     842:	e000      	b.n	846 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     844:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     846:	b2d8      	uxtb	r0, r3
     848:	e003      	b.n	852 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     84a:	3301      	adds	r3, #1
     84c:	2b06      	cmp	r3, #6
     84e:	d1f3      	bne.n	838 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     850:	2000      	movs	r0, #0
}
     852:	b007      	add	sp, #28
     854:	bd30      	pop	{r4, r5, pc}
     856:	46c0      	nop			; (mov r8, r8)
     858:	00009540 	.word	0x00009540

0000085c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     85c:	4770      	bx	lr
     85e:	46c0      	nop			; (mov r8, r8)

00000860 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     860:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     862:	4b0a      	ldr	r3, [pc, #40]	; (88c <_sercom_set_handler+0x2c>)
     864:	781b      	ldrb	r3, [r3, #0]
     866:	2b00      	cmp	r3, #0
     868:	d10c      	bne.n	884 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     86a:	4f09      	ldr	r7, [pc, #36]	; (890 <_sercom_set_handler+0x30>)
     86c:	4e09      	ldr	r6, [pc, #36]	; (894 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     86e:	4d0a      	ldr	r5, [pc, #40]	; (898 <_sercom_set_handler+0x38>)
     870:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     872:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     874:	195a      	adds	r2, r3, r5
     876:	6014      	str	r4, [r2, #0]
     878:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     87a:	2b18      	cmp	r3, #24
     87c:	d1f9      	bne.n	872 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     87e:	2201      	movs	r2, #1
     880:	4b02      	ldr	r3, [pc, #8]	; (88c <_sercom_set_handler+0x2c>)
     882:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     884:	0080      	lsls	r0, r0, #2
     886:	4b02      	ldr	r3, [pc, #8]	; (890 <_sercom_set_handler+0x30>)
     888:	50c1      	str	r1, [r0, r3]
}
     88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     88c:	200000d2 	.word	0x200000d2
     890:	200000d4 	.word	0x200000d4
     894:	0000085d 	.word	0x0000085d
     898:	20000e4c 	.word	0x20000e4c

0000089c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     89c:	b510      	push	{r4, lr}
     89e:	b082      	sub	sp, #8
     8a0:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     8a2:	4668      	mov	r0, sp
     8a4:	4905      	ldr	r1, [pc, #20]	; (8bc <_sercom_get_interrupt_vector+0x20>)
     8a6:	2206      	movs	r2, #6
     8a8:	4b05      	ldr	r3, [pc, #20]	; (8c0 <_sercom_get_interrupt_vector+0x24>)
     8aa:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     8ac:	1c20      	adds	r0, r4, #0
     8ae:	4b05      	ldr	r3, [pc, #20]	; (8c4 <_sercom_get_interrupt_vector+0x28>)
     8b0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     8b2:	466b      	mov	r3, sp
     8b4:	5618      	ldrsb	r0, [r3, r0]
}
     8b6:	b002      	add	sp, #8
     8b8:	bd10      	pop	{r4, pc}
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	00009558 	.word	0x00009558
     8c0:	000083fb 	.word	0x000083fb
     8c4:	00000821 	.word	0x00000821

000008c8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     8c8:	b508      	push	{r3, lr}
     8ca:	4b02      	ldr	r3, [pc, #8]	; (8d4 <SERCOM0_Handler+0xc>)
     8cc:	681b      	ldr	r3, [r3, #0]
     8ce:	2000      	movs	r0, #0
     8d0:	4798      	blx	r3
     8d2:	bd08      	pop	{r3, pc}
     8d4:	200000d4 	.word	0x200000d4

000008d8 <SERCOM1_Handler>:
     8d8:	b508      	push	{r3, lr}
     8da:	4b02      	ldr	r3, [pc, #8]	; (8e4 <SERCOM1_Handler+0xc>)
     8dc:	685b      	ldr	r3, [r3, #4]
     8de:	2001      	movs	r0, #1
     8e0:	4798      	blx	r3
     8e2:	bd08      	pop	{r3, pc}
     8e4:	200000d4 	.word	0x200000d4

000008e8 <SERCOM2_Handler>:
     8e8:	b508      	push	{r3, lr}
     8ea:	4b02      	ldr	r3, [pc, #8]	; (8f4 <SERCOM2_Handler+0xc>)
     8ec:	689b      	ldr	r3, [r3, #8]
     8ee:	2002      	movs	r0, #2
     8f0:	4798      	blx	r3
     8f2:	bd08      	pop	{r3, pc}
     8f4:	200000d4 	.word	0x200000d4

000008f8 <SERCOM3_Handler>:
     8f8:	b508      	push	{r3, lr}
     8fa:	4b02      	ldr	r3, [pc, #8]	; (904 <SERCOM3_Handler+0xc>)
     8fc:	68db      	ldr	r3, [r3, #12]
     8fe:	2003      	movs	r0, #3
     900:	4798      	blx	r3
     902:	bd08      	pop	{r3, pc}
     904:	200000d4 	.word	0x200000d4

00000908 <SERCOM4_Handler>:
     908:	b508      	push	{r3, lr}
     90a:	4b02      	ldr	r3, [pc, #8]	; (914 <SERCOM4_Handler+0xc>)
     90c:	691b      	ldr	r3, [r3, #16]
     90e:	2004      	movs	r0, #4
     910:	4798      	blx	r3
     912:	bd08      	pop	{r3, pc}
     914:	200000d4 	.word	0x200000d4

00000918 <SERCOM5_Handler>:
     918:	b508      	push	{r3, lr}
     91a:	4b02      	ldr	r3, [pc, #8]	; (924 <SERCOM5_Handler+0xc>)
     91c:	695b      	ldr	r3, [r3, #20]
     91e:	2005      	movs	r0, #5
     920:	4798      	blx	r3
     922:	bd08      	pop	{r3, pc}
     924:	200000d4 	.word	0x200000d4

00000928 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     928:	b5f0      	push	{r4, r5, r6, r7, lr}
     92a:	465f      	mov	r7, fp
     92c:	4656      	mov	r6, sl
     92e:	464d      	mov	r5, r9
     930:	4644      	mov	r4, r8
     932:	b4f0      	push	{r4, r5, r6, r7}
     934:	b091      	sub	sp, #68	; 0x44
     936:	1c06      	adds	r6, r0, #0
     938:	1c0c      	adds	r4, r1, #0
     93a:	1c15      	adds	r5, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     93c:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     93e:	1c08      	adds	r0, r1, #0
     940:	4bc2      	ldr	r3, [pc, #776]	; (c4c <usart_init+0x324>)
     942:	4798      	blx	r3
     944:	1e02      	subs	r2, r0, #0
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
     946:	2a05      	cmp	r2, #5
     948:	d003      	beq.n	952 <usart_init+0x2a>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     94a:	1c07      	adds	r7, r0, #0
     94c:	3712      	adds	r7, #18
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     94e:	1c03      	adds	r3, r0, #0
     950:	e001      	b.n	956 <usart_init+0x2e>
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     952:	2718      	movs	r7, #24
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
     954:	2301      	movs	r3, #1
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     956:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     958:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     95a:	07c9      	lsls	r1, r1, #31
     95c:	d500      	bpl.n	960 <usart_init+0x38>
     95e:	e16e      	b.n	c3e <usart_init+0x316>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     960:	6821      	ldr	r1, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     962:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     964:	0789      	lsls	r1, r1, #30
     966:	d500      	bpl.n	96a <usart_init+0x42>
     968:	e169      	b.n	c3e <usart_init+0x316>
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
#if (SAML21)
	if (sercom_index == 5) {
     96a:	2a05      	cmp	r2, #5
     96c:	d106      	bne.n	97c <usart_init+0x54>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     96e:	49b8      	ldr	r1, [pc, #736]	; (c50 <usart_init+0x328>)
     970:	6a0a      	ldr	r2, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
     972:	381b      	subs	r0, #27
     974:	4098      	lsls	r0, r3
     976:	4310      	orrs	r0, r2
     978:	6208      	str	r0, [r1, #32]
     97a:	e005      	b.n	988 <usart_init+0x60>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     97c:	49b4      	ldr	r1, [pc, #720]	; (c50 <usart_init+0x328>)
     97e:	69ca      	ldr	r2, [r1, #28]
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
     980:	2001      	movs	r0, #1
     982:	4098      	lsls	r0, r3
     984:	4310      	orrs	r0, r2
     986:	61c8      	str	r0, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     988:	a90f      	add	r1, sp, #60	; 0x3c
     98a:	232d      	movs	r3, #45	; 0x2d
     98c:	4698      	mov	r8, r3
     98e:	5ceb      	ldrb	r3, [r5, r3]
     990:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     992:	b2ff      	uxtb	r7, r7
     994:	1c38      	adds	r0, r7, #0
     996:	4baf      	ldr	r3, [pc, #700]	; (c54 <usart_init+0x32c>)
     998:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     99a:	1c38      	adds	r0, r7, #0
     99c:	4bae      	ldr	r3, [pc, #696]	; (c58 <usart_init+0x330>)
     99e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     9a0:	4643      	mov	r3, r8
     9a2:	5ce8      	ldrb	r0, [r5, r3]
     9a4:	2100      	movs	r1, #0
     9a6:	4bad      	ldr	r3, [pc, #692]	; (c5c <usart_init+0x334>)
     9a8:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     9aa:	7aeb      	ldrb	r3, [r5, #11]
     9ac:	7173      	strb	r3, [r6, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     9ae:	2324      	movs	r3, #36	; 0x24
     9b0:	5ceb      	ldrb	r3, [r5, r3]
     9b2:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
     9b4:	2325      	movs	r3, #37	; 0x25
     9b6:	5ceb      	ldrb	r3, [r5, r3]
     9b8:	71f3      	strb	r3, [r6, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     9ba:	7eeb      	ldrb	r3, [r5, #27]
     9bc:	7233      	strb	r3, [r6, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     9be:	7f2b      	ldrb	r3, [r5, #28]
     9c0:	7273      	strb	r3, [r6, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     9c2:	6833      	ldr	r3, [r6, #0]
     9c4:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     9c6:	1c18      	adds	r0, r3, #0
     9c8:	4ba0      	ldr	r3, [pc, #640]	; (c4c <usart_init+0x324>)
     9ca:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     9cc:	3012      	adds	r0, #18
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     9ce:	2200      	movs	r2, #0
     9d0:	230e      	movs	r3, #14
     9d2:	a906      	add	r1, sp, #24
     9d4:	468c      	mov	ip, r1
     9d6:	4463      	add	r3, ip
     9d8:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     9da:	8a2b      	ldrh	r3, [r5, #16]
     9dc:	4699      	mov	r9, r3
     9de:	2380      	movs	r3, #128	; 0x80
     9e0:	01db      	lsls	r3, r3, #7
     9e2:	4599      	cmp	r9, r3
     9e4:	d019      	beq.n	a1a <usart_init+0xf2>
     9e6:	d804      	bhi.n	9f2 <usart_init+0xca>
     9e8:	2380      	movs	r3, #128	; 0x80
     9ea:	019b      	lsls	r3, r3, #6
     9ec:	4599      	cmp	r9, r3
     9ee:	d00a      	beq.n	a06 <usart_init+0xde>
     9f0:	e106      	b.n	c00 <usart_init+0x2d8>
     9f2:	23c0      	movs	r3, #192	; 0xc0
     9f4:	01db      	lsls	r3, r3, #7
     9f6:	4599      	cmp	r9, r3
     9f8:	d00a      	beq.n	a10 <usart_init+0xe8>
     9fa:	2380      	movs	r3, #128	; 0x80
     9fc:	021b      	lsls	r3, r3, #8
     9fe:	4599      	cmp	r9, r3
     a00:	d100      	bne.n	a04 <usart_init+0xdc>
     a02:	e102      	b.n	c0a <usart_init+0x2e2>
     a04:	e0fc      	b.n	c00 <usart_init+0x2d8>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     a06:	2310      	movs	r3, #16
     a08:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     a0a:	3b0f      	subs	r3, #15
     a0c:	9307      	str	r3, [sp, #28]
     a0e:	e100      	b.n	c12 <usart_init+0x2ea>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     a10:	2308      	movs	r3, #8
     a12:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     a14:	3b07      	subs	r3, #7
     a16:	9307      	str	r3, [sp, #28]
     a18:	e0fb      	b.n	c12 <usart_init+0x2ea>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     a1a:	682b      	ldr	r3, [r5, #0]
     a1c:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     a1e:	68eb      	ldr	r3, [r5, #12]
     a20:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     a22:	696b      	ldr	r3, [r5, #20]
     a24:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     a26:	7e2b      	ldrb	r3, [r5, #24]
     a28:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a2a:	2326      	movs	r3, #38	; 0x26
     a2c:	5ceb      	ldrb	r3, [r5, r3]
     a2e:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     a30:	686a      	ldr	r2, [r5, #4]
     a32:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     a34:	2a00      	cmp	r2, #0
     a36:	d016      	beq.n	a66 <usart_init+0x13e>
     a38:	2380      	movs	r3, #128	; 0x80
     a3a:	055b      	lsls	r3, r3, #21
     a3c:	429a      	cmp	r2, r3
     a3e:	d139      	bne.n	ab4 <usart_init+0x18c>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     a40:	2327      	movs	r3, #39	; 0x27
     a42:	5ceb      	ldrb	r3, [r5, r3]
     a44:	2b00      	cmp	r3, #0
     a46:	d139      	bne.n	abc <usart_init+0x194>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     a48:	6a2b      	ldr	r3, [r5, #32]
     a4a:	4698      	mov	r8, r3
     a4c:	b2c0      	uxtb	r0, r0
     a4e:	4b84      	ldr	r3, [pc, #528]	; (c60 <usart_init+0x338>)
     a50:	4798      	blx	r3
     a52:	1c01      	adds	r1, r0, #0
     a54:	4640      	mov	r0, r8
     a56:	220e      	movs	r2, #14
     a58:	ab06      	add	r3, sp, #24
     a5a:	469c      	mov	ip, r3
     a5c:	4462      	add	r2, ip
     a5e:	4b81      	ldr	r3, [pc, #516]	; (c64 <usart_init+0x33c>)
     a60:	4798      	blx	r3
     a62:	1c03      	adds	r3, r0, #0
     a64:	e027      	b.n	ab6 <usart_init+0x18e>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     a66:	2308      	movs	r3, #8
     a68:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a6a:	2300      	movs	r3, #0
     a6c:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     a6e:	2327      	movs	r3, #39	; 0x27
     a70:	5ceb      	ldrb	r3, [r5, r3]
     a72:	2b00      	cmp	r3, #0
     a74:	d00c      	beq.n	a90 <usart_init+0x168>
				status_code =
     a76:	4643      	mov	r3, r8
     a78:	9300      	str	r3, [sp, #0]
     a7a:	6a28      	ldr	r0, [r5, #32]
     a7c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     a7e:	220e      	movs	r2, #14
     a80:	ab06      	add	r3, sp, #24
     a82:	469c      	mov	ip, r3
     a84:	4462      	add	r2, ip
     a86:	9b07      	ldr	r3, [sp, #28]
     a88:	4f77      	ldr	r7, [pc, #476]	; (c68 <usart_init+0x340>)
     a8a:	47b8      	blx	r7
     a8c:	1c03      	adds	r3, r0, #0
     a8e:	e012      	b.n	ab6 <usart_init+0x18e>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     a90:	6a2b      	ldr	r3, [r5, #32]
     a92:	1c1f      	adds	r7, r3, #0
     a94:	b2c0      	uxtb	r0, r0
     a96:	4b72      	ldr	r3, [pc, #456]	; (c60 <usart_init+0x338>)
     a98:	4798      	blx	r3
     a9a:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     a9c:	4643      	mov	r3, r8
     a9e:	9300      	str	r3, [sp, #0]
     aa0:	1c38      	adds	r0, r7, #0
     aa2:	220e      	movs	r2, #14
     aa4:	ab06      	add	r3, sp, #24
     aa6:	469c      	mov	ip, r3
     aa8:	4462      	add	r2, ip
     aaa:	9b07      	ldr	r3, [sp, #28]
     aac:	4f6e      	ldr	r7, [pc, #440]	; (c68 <usart_init+0x340>)
     aae:	47b8      	blx	r7
     ab0:	1c03      	adds	r3, r0, #0
     ab2:	e000      	b.n	ab6 <usart_init+0x18e>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     ab4:	2300      	movs	r3, #0
     ab6:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     ab8:	d000      	beq.n	abc <usart_init+0x194>
     aba:	e0c0      	b.n	c3e <usart_init+0x316>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     abc:	7e6b      	ldrb	r3, [r5, #25]
     abe:	2b00      	cmp	r3, #0
     ac0:	d002      	beq.n	ac8 <usart_init+0x1a0>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     ac2:	7eab      	ldrb	r3, [r5, #26]
     ac4:	4652      	mov	r2, sl
     ac6:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ac8:	6832      	ldr	r2, [r6, #0]
     aca:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     acc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ace:	2b00      	cmp	r3, #0
     ad0:	d1fc      	bne.n	acc <usart_init+0x1a4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     ad2:	330e      	adds	r3, #14
     ad4:	aa06      	add	r2, sp, #24
     ad6:	4694      	mov	ip, r2
     ad8:	4463      	add	r3, ip
     ada:	881b      	ldrh	r3, [r3, #0]
     adc:	4652      	mov	r2, sl
     ade:	8193      	strh	r3, [r2, #12]
     ae0:	9b02      	ldr	r3, [sp, #8]
     ae2:	465a      	mov	r2, fp
     ae4:	4313      	orrs	r3, r2
     ae6:	9a03      	ldr	r2, [sp, #12]
     ae8:	4313      	orrs	r3, r2
     aea:	433b      	orrs	r3, r7
     aec:	464a      	mov	r2, r9
     aee:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     af0:	9a04      	ldr	r2, [sp, #16]
     af2:	0212      	lsls	r2, r2, #8
     af4:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     af6:	9a05      	ldr	r2, [sp, #20]
     af8:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
     afa:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     afc:	2327      	movs	r3, #39	; 0x27
     afe:	5ceb      	ldrb	r3, [r5, r3]
     b00:	2b00      	cmp	r3, #0
     b02:	d101      	bne.n	b08 <usart_init+0x1e0>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     b04:	3304      	adds	r3, #4
     b06:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     b08:	7f2b      	ldrb	r3, [r5, #28]
     b0a:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     b0c:	7e6a      	ldrb	r2, [r5, #25]
     b0e:	0293      	lsls	r3, r2, #10
     b10:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     b12:	7f6a      	ldrb	r2, [r5, #29]
     b14:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     b16:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     b18:	2224      	movs	r2, #36	; 0x24
     b1a:	5caa      	ldrb	r2, [r5, r2]
     b1c:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     b1e:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     b20:	2225      	movs	r2, #37	; 0x25
     b22:	5caa      	ldrb	r2, [r5, r2]
     b24:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     b26:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     b28:	7ae9      	ldrb	r1, [r5, #11]
     b2a:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     b2c:	892b      	ldrh	r3, [r5, #8]
     b2e:	2bff      	cmp	r3, #255	; 0xff
     b30:	d004      	beq.n	b3c <usart_init+0x214>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     b32:	2280      	movs	r2, #128	; 0x80
     b34:	0452      	lsls	r2, r2, #17
     b36:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     b38:	4319      	orrs	r1, r3
     b3a:	e005      	b.n	b48 <usart_init+0x220>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     b3c:	7eeb      	ldrb	r3, [r5, #27]
     b3e:	2b00      	cmp	r3, #0
     b40:	d002      	beq.n	b48 <usart_init+0x220>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     b42:	2380      	movs	r3, #128	; 0x80
     b44:	04db      	lsls	r3, r3, #19
     b46:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     b48:	232c      	movs	r3, #44	; 0x2c
     b4a:	5ceb      	ldrb	r3, [r5, r3]
     b4c:	2b00      	cmp	r3, #0
     b4e:	d103      	bne.n	b58 <usart_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b50:	4b46      	ldr	r3, [pc, #280]	; (c6c <usart_init+0x344>)
     b52:	789b      	ldrb	r3, [r3, #2]
     b54:	079b      	lsls	r3, r3, #30
     b56:	d501      	bpl.n	b5c <usart_init+0x234>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     b58:	2380      	movs	r3, #128	; 0x80
     b5a:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     b5c:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b5e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b60:	2b00      	cmp	r3, #0
     b62:	d1fc      	bne.n	b5e <usart_init+0x236>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     b64:	4653      	mov	r3, sl
     b66:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     b68:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b6a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b6c:	2b00      	cmp	r3, #0
     b6e:	d1fc      	bne.n	b6a <usart_init+0x242>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     b70:	4653      	mov	r3, sl
     b72:	601f      	str	r7, [r3, #0]
     b74:	ab0e      	add	r3, sp, #56	; 0x38
     b76:	2280      	movs	r2, #128	; 0x80
     b78:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b7a:	2200      	movs	r2, #0
     b7c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     b7e:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b80:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     b82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     b84:	930a      	str	r3, [sp, #40]	; 0x28
     b86:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     b88:	930b      	str	r3, [sp, #44]	; 0x2c
     b8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
     b8c:	930c      	str	r3, [sp, #48]	; 0x30
     b8e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
     b90:	9302      	str	r3, [sp, #8]
     b92:	930d      	str	r3, [sp, #52]	; 0x34
     b94:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b96:	ad0e      	add	r5, sp, #56	; 0x38
     b98:	b2f9      	uxtb	r1, r7
     b9a:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b9c:	aa0a      	add	r2, sp, #40	; 0x28
     b9e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     ba0:	2800      	cmp	r0, #0
     ba2:	d102      	bne.n	baa <usart_init+0x282>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ba4:	1c20      	adds	r0, r4, #0
     ba6:	4b32      	ldr	r3, [pc, #200]	; (c70 <usart_init+0x348>)
     ba8:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     baa:	1c43      	adds	r3, r0, #1
     bac:	d005      	beq.n	bba <usart_init+0x292>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     bae:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     bb0:	0c00      	lsrs	r0, r0, #16
     bb2:	b2c0      	uxtb	r0, r0
     bb4:	1c29      	adds	r1, r5, #0
     bb6:	4b2f      	ldr	r3, [pc, #188]	; (c74 <usart_init+0x34c>)
     bb8:	4798      	blx	r3
     bba:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     bbc:	2f04      	cmp	r7, #4
     bbe:	d1eb      	bne.n	b98 <usart_init+0x270>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     bc0:	2300      	movs	r3, #0
     bc2:	60f3      	str	r3, [r6, #12]
     bc4:	6133      	str	r3, [r6, #16]
     bc6:	6173      	str	r3, [r6, #20]
     bc8:	61b3      	str	r3, [r6, #24]
     bca:	61f3      	str	r3, [r6, #28]
     bcc:	6233      	str	r3, [r6, #32]
	}

	module->tx_buffer_ptr              = NULL;
     bce:	62b3      	str	r3, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     bd0:	6273      	str	r3, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     bd2:	2200      	movs	r2, #0
     bd4:	85f3      	strh	r3, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     bd6:	85b3      	strh	r3, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     bd8:	3330      	adds	r3, #48	; 0x30
     bda:	54f2      	strb	r2, [r6, r3]
	module->callback_enable_mask       = 0x00;
     bdc:	3301      	adds	r3, #1
     bde:	54f2      	strb	r2, [r6, r3]
	module->rx_status                  = STATUS_OK;
     be0:	3301      	adds	r3, #1
     be2:	54f2      	strb	r2, [r6, r3]
	module->tx_status                  = STATUS_OK;
     be4:	3301      	adds	r3, #1
     be6:	54f2      	strb	r2, [r6, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     be8:	6830      	ldr	r0, [r6, #0]
     bea:	4b18      	ldr	r3, [pc, #96]	; (c4c <usart_init+0x324>)
     bec:	4798      	blx	r3
     bee:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     bf0:	4921      	ldr	r1, [pc, #132]	; (c78 <usart_init+0x350>)
     bf2:	4b22      	ldr	r3, [pc, #136]	; (c7c <usart_init+0x354>)
     bf4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     bf6:	00a4      	lsls	r4, r4, #2
     bf8:	4b21      	ldr	r3, [pc, #132]	; (c80 <usart_init+0x358>)
     bfa:	50e6      	str	r6, [r4, r3]
#endif

	return status_code;
     bfc:	2000      	movs	r0, #0
     bfe:	e01e      	b.n	c3e <usart_init+0x316>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c00:	2310      	movs	r3, #16
     c02:	4698      	mov	r8, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c04:	2300      	movs	r3, #0
     c06:	9307      	str	r3, [sp, #28]
     c08:	e003      	b.n	c12 <usart_init+0x2ea>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     c0a:	2303      	movs	r3, #3
     c0c:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c0e:	2300      	movs	r3, #0
     c10:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     c12:	682b      	ldr	r3, [r5, #0]
     c14:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     c16:	68eb      	ldr	r3, [r5, #12]
     c18:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     c1a:	696b      	ldr	r3, [r5, #20]
     c1c:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c1e:	7e2b      	ldrb	r3, [r5, #24]
     c20:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c22:	2326      	movs	r3, #38	; 0x26
     c24:	5ceb      	ldrb	r3, [r5, r3]
     c26:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     c28:	686a      	ldr	r2, [r5, #4]
     c2a:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     c2c:	2a00      	cmp	r2, #0
     c2e:	d100      	bne.n	c32 <usart_init+0x30a>
     c30:	e71d      	b.n	a6e <usart_init+0x146>
     c32:	2380      	movs	r3, #128	; 0x80
     c34:	055b      	lsls	r3, r3, #21
     c36:	429a      	cmp	r2, r3
     c38:	d100      	bne.n	c3c <usart_init+0x314>
     c3a:	e701      	b.n	a40 <usart_init+0x118>
     c3c:	e73e      	b.n	abc <usart_init+0x194>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     c3e:	b011      	add	sp, #68	; 0x44
     c40:	bc3c      	pop	{r2, r3, r4, r5}
     c42:	4690      	mov	r8, r2
     c44:	4699      	mov	r9, r3
     c46:	46a2      	mov	sl, r4
     c48:	46ab      	mov	fp, r5
     c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c4c:	00000821 	.word	0x00000821
     c50:	40000400 	.word	0x40000400
     c54:	000016fd 	.word	0x000016fd
     c58:	00001695 	.word	0x00001695
     c5c:	00000651 	.word	0x00000651
     c60:	00001721 	.word	0x00001721
     c64:	00000461 	.word	0x00000461
     c68:	00000489 	.word	0x00000489
     c6c:	41002000 	.word	0x41002000
     c70:	0000069d 	.word	0x0000069d
     c74:	000017f9 	.word	0x000017f9
     c78:	00000e1d 	.word	0x00000e1d
     c7c:	00000861 	.word	0x00000861
     c80:	20000e4c 	.word	0x20000e4c

00000c84 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     c84:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     c86:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     c88:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     c8a:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     c8c:	2c00      	cmp	r4, #0
     c8e:	d00d      	beq.n	cac <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     c90:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
     c92:	b280      	uxth	r0, r0
		return STATUS_BUSY;
     c94:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     c96:	2800      	cmp	r0, #0
     c98:	d108      	bne.n	cac <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c9a:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c9c:	2a00      	cmp	r2, #0
     c9e:	d1fc      	bne.n	c9a <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     ca0:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     ca2:	2102      	movs	r1, #2
     ca4:	7e1a      	ldrb	r2, [r3, #24]
     ca6:	420a      	tst	r2, r1
     ca8:	d0fc      	beq.n	ca4 <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     caa:	2200      	movs	r2, #0
}
     cac:	1c10      	adds	r0, r2, #0
     cae:	bd10      	pop	{r4, pc}

00000cb0 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     cb0:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     cb2:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     cb4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     cb6:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     cb8:	2a00      	cmp	r2, #0
     cba:	d033      	beq.n	d24 <usart_read_wait+0x74>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     cbc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     cbe:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     cc0:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     cc2:	2a00      	cmp	r2, #0
     cc4:	d12e      	bne.n	d24 <usart_read_wait+0x74>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     cc6:	7e22      	ldrb	r2, [r4, #24]
     cc8:	0752      	lsls	r2, r2, #29
     cca:	d52b      	bpl.n	d24 <usart_read_wait+0x74>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ccc:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     cce:	2b00      	cmp	r3, #0
     cd0:	d1fc      	bne.n	ccc <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     cd2:	8b63      	ldrh	r3, [r4, #26]
     cd4:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     cd6:	069a      	lsls	r2, r3, #26
     cd8:	d021      	beq.n	d1e <usart_read_wait+0x6e>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     cda:	079a      	lsls	r2, r3, #30
     cdc:	d503      	bpl.n	ce6 <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     cde:	2302      	movs	r3, #2
     ce0:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
     ce2:	3318      	adds	r3, #24
     ce4:	e01e      	b.n	d24 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ce6:	075a      	lsls	r2, r3, #29
     ce8:	d503      	bpl.n	cf2 <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     cea:	2304      	movs	r3, #4
     cec:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
     cee:	331a      	adds	r3, #26
     cf0:	e018      	b.n	d24 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     cf2:	07da      	lsls	r2, r3, #31
     cf4:	d503      	bpl.n	cfe <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     cf6:	2301      	movs	r3, #1
     cf8:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
     cfa:	3312      	adds	r3, #18
     cfc:	e012      	b.n	d24 <usart_read_wait+0x74>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     cfe:	06da      	lsls	r2, r3, #27
     d00:	d505      	bpl.n	d0e <usart_read_wait+0x5e>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     d02:	8b62      	ldrh	r2, [r4, #26]
     d04:	2310      	movs	r3, #16
     d06:	4313      	orrs	r3, r2
     d08:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
     d0a:	2342      	movs	r3, #66	; 0x42
     d0c:	e00a      	b.n	d24 <usart_read_wait+0x74>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     d0e:	069b      	lsls	r3, r3, #26
     d10:	d505      	bpl.n	d1e <usart_read_wait+0x6e>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     d12:	8b62      	ldrh	r2, [r4, #26]
     d14:	2320      	movs	r3, #32
     d16:	4313      	orrs	r3, r2
     d18:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
     d1a:	2341      	movs	r3, #65	; 0x41
     d1c:	e002      	b.n	d24 <usart_read_wait+0x74>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     d1e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d20:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     d22:	2300      	movs	r3, #0
}
     d24:	1c18      	adds	r0, r3, #0
     d26:	bd10      	pop	{r4, pc}

00000d28 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d2a:	1c06      	adds	r6, r0, #0
     d2c:	1c0c      	adds	r4, r1, #0
     d2e:	1c15      	adds	r5, r2, #0
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     d30:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     d32:	4b0a      	ldr	r3, [pc, #40]	; (d5c <_usart_write_buffer+0x34>)
     d34:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     d36:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     d38:	b29b      	uxth	r3, r3
     d3a:	2b00      	cmp	r3, #0
     d3c:	d003      	beq.n	d46 <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     d3e:	4b08      	ldr	r3, [pc, #32]	; (d60 <_usart_write_buffer+0x38>)
     d40:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     d42:	2005      	movs	r0, #5
     d44:	e009      	b.n	d5a <_usart_write_buffer+0x32>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
     d46:	85f5      	strh	r5, [r6, #46]	; 0x2e
     d48:	4b05      	ldr	r3, [pc, #20]	; (d60 <_usart_write_buffer+0x38>)
     d4a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->tx_buffer_ptr              = tx_data;
     d4c:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
     d4e:	2205      	movs	r2, #5
     d50:	2333      	movs	r3, #51	; 0x33
     d52:	54f2      	strb	r2, [r6, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     d54:	3b32      	subs	r3, #50	; 0x32
     d56:	75bb      	strb	r3, [r7, #22]

	return STATUS_OK;
     d58:	2000      	movs	r0, #0
}
     d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d5c:	0000017d 	.word	0x0000017d
     d60:	000001bd 	.word	0x000001bd

00000d64 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d66:	1c04      	adds	r4, r0, #0
     d68:	1c0d      	adds	r5, r1, #0
     d6a:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     d6c:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     d6e:	4b0f      	ldr	r3, [pc, #60]	; (dac <_usart_read_buffer+0x48>)
     d70:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     d72:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     d74:	b29b      	uxth	r3, r3
     d76:	2b00      	cmp	r3, #0
     d78:	d003      	beq.n	d82 <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     d7a:	4b0d      	ldr	r3, [pc, #52]	; (db0 <_usart_read_buffer+0x4c>)
     d7c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     d7e:	2005      	movs	r0, #5
     d80:	e013      	b.n	daa <_usart_read_buffer+0x46>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
     d82:	85a6      	strh	r6, [r4, #44]	; 0x2c
     d84:	4b0a      	ldr	r3, [pc, #40]	; (db0 <_usart_read_buffer+0x4c>)
     d86:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
     d88:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     d8a:	2205      	movs	r2, #5
     d8c:	2332      	movs	r3, #50	; 0x32
     d8e:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     d90:	3b2e      	subs	r3, #46	; 0x2e
     d92:	75bb      	strb	r3, [r7, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
     d94:	7a23      	ldrb	r3, [r4, #8]
     d96:	2b00      	cmp	r3, #0
     d98:	d001      	beq.n	d9e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     d9a:	2320      	movs	r3, #32
     d9c:	75bb      	strb	r3, [r7, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
     d9e:	7a63      	ldrb	r3, [r4, #9]
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
     da0:	2000      	movs	r0, #0
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
     da2:	2b00      	cmp	r3, #0
     da4:	d001      	beq.n	daa <_usart_read_buffer+0x46>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     da6:	2308      	movs	r3, #8
     da8:	75bb      	strb	r3, [r7, #22]
	}
#endif

	return STATUS_OK;
}
     daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dac:	0000017d 	.word	0x0000017d
     db0:	000001bd 	.word	0x000001bd

00000db4 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     db4:	1c93      	adds	r3, r2, #2
     db6:	009b      	lsls	r3, r3, #2
     db8:	18c3      	adds	r3, r0, r3
     dba:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     dbc:	2301      	movs	r3, #1
     dbe:	4093      	lsls	r3, r2
     dc0:	1c1a      	adds	r2, r3, #0
     dc2:	2130      	movs	r1, #48	; 0x30
     dc4:	5c43      	ldrb	r3, [r0, r1]
     dc6:	431a      	orrs	r2, r3
     dc8:	5442      	strb	r2, [r0, r1]
}
     dca:	4770      	bx	lr

00000dcc <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     dcc:	b508      	push	{r3, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
     dce:	2201      	movs	r2, #1
     dd0:	4b01      	ldr	r3, [pc, #4]	; (dd8 <usart_read_job+0xc>)
     dd2:	4798      	blx	r3
}
     dd4:	bd08      	pop	{r3, pc}
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	00000d65 	.word	0x00000d65

00000ddc <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     ddc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     dde:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
     de0:	2a00      	cmp	r2, #0
     de2:	d006      	beq.n	df2 <usart_write_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
     de4:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     de6:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
     de8:	2c00      	cmp	r4, #0
     dea:	d002      	beq.n	df2 <usart_write_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
     dec:	4b02      	ldr	r3, [pc, #8]	; (df8 <usart_write_buffer_job+0x1c>)
     dee:	4798      	blx	r3
     df0:	1c03      	adds	r3, r0, #0
}
     df2:	1c18      	adds	r0, r3, #0
     df4:	bd10      	pop	{r4, pc}
     df6:	46c0      	nop			; (mov r8, r8)
     df8:	00000d29 	.word	0x00000d29

00000dfc <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
     dfc:	2900      	cmp	r1, #0
     dfe:	d002      	beq.n	e06 <usart_get_job_status+0xa>
     e00:	2901      	cmp	r1, #1
     e02:	d004      	beq.n	e0e <usart_get_job_status+0x12>
     e04:	e007      	b.n	e16 <usart_get_job_status+0x1a>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
     e06:	2332      	movs	r3, #50	; 0x32
     e08:	5cc0      	ldrb	r0, [r0, r3]
     e0a:	b2c0      	uxtb	r0, r0
			break;
     e0c:	e004      	b.n	e18 <usart_get_job_status+0x1c>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
     e0e:	2333      	movs	r3, #51	; 0x33
     e10:	5cc0      	ldrb	r0, [r0, r3]
     e12:	b2c0      	uxtb	r0, r0
			break;
     e14:	e000      	b.n	e18 <usart_get_job_status+0x1c>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
     e16:	2017      	movs	r0, #23
			break;
	}

	return status_code;
}
     e18:	4770      	bx	lr
     e1a:	46c0      	nop			; (mov r8, r8)

00000e1c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     e1e:	0080      	lsls	r0, r0, #2
     e20:	4b65      	ldr	r3, [pc, #404]	; (fb8 <_usart_interrupt_handler+0x19c>)
     e22:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     e24:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     e26:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     e28:	2b00      	cmp	r3, #0
     e2a:	d1fc      	bne.n	e26 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     e2c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     e2e:	7da6      	ldrb	r6, [r4, #22]
     e30:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     e32:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     e34:	5ceb      	ldrb	r3, [r5, r3]
     e36:	2230      	movs	r2, #48	; 0x30
     e38:	5caf      	ldrb	r7, [r5, r2]
     e3a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     e3c:	07f3      	lsls	r3, r6, #31
     e3e:	d522      	bpl.n	e86 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     e40:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     e42:	b29b      	uxth	r3, r3
     e44:	2b00      	cmp	r3, #0
     e46:	d01c      	beq.n	e82 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e48:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     e4a:	7813      	ldrb	r3, [r2, #0]
     e4c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     e4e:	1c51      	adds	r1, r2, #1
     e50:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e52:	7969      	ldrb	r1, [r5, #5]
     e54:	2901      	cmp	r1, #1
     e56:	d001      	beq.n	e5c <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e58:	b29b      	uxth	r3, r3
     e5a:	e004      	b.n	e66 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     e5c:	7851      	ldrb	r1, [r2, #1]
     e5e:	0209      	lsls	r1, r1, #8
     e60:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     e62:	3202      	adds	r2, #2
     e64:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     e66:	05db      	lsls	r3, r3, #23
     e68:	0ddb      	lsrs	r3, r3, #23
     e6a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     e6c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     e6e:	3b01      	subs	r3, #1
     e70:	b29b      	uxth	r3, r3
     e72:	85eb      	strh	r3, [r5, #46]	; 0x2e
     e74:	2b00      	cmp	r3, #0
     e76:	d106      	bne.n	e86 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e78:	3301      	adds	r3, #1
     e7a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     e7c:	3301      	adds	r3, #1
     e7e:	75a3      	strb	r3, [r4, #22]
     e80:	e001      	b.n	e86 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e82:	2301      	movs	r3, #1
     e84:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     e86:	07b3      	lsls	r3, r6, #30
     e88:	d509      	bpl.n	e9e <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     e8a:	2302      	movs	r3, #2
     e8c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     e8e:	2200      	movs	r2, #0
     e90:	3331      	adds	r3, #49	; 0x31
     e92:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     e94:	07fb      	lsls	r3, r7, #31
     e96:	d502      	bpl.n	e9e <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     e98:	1c28      	adds	r0, r5, #0
     e9a:	68eb      	ldr	r3, [r5, #12]
     e9c:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     e9e:	0773      	lsls	r3, r6, #29
     ea0:	d56a      	bpl.n	f78 <_usart_interrupt_handler+0x15c>

		if (module->remaining_rx_buffer_length) {
     ea2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ea4:	b29b      	uxth	r3, r3
     ea6:	2b00      	cmp	r3, #0
     ea8:	d064      	beq.n	f74 <_usart_interrupt_handler+0x158>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     eaa:	8b63      	ldrh	r3, [r4, #26]
     eac:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     eae:	071a      	lsls	r2, r3, #28
     eb0:	d402      	bmi.n	eb8 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     eb2:	223f      	movs	r2, #63	; 0x3f
     eb4:	4013      	ands	r3, r2
     eb6:	e001      	b.n	ebc <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     eb8:	2237      	movs	r2, #55	; 0x37
     eba:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     ebc:	2b00      	cmp	r3, #0
     ebe:	d037      	beq.n	f30 <_usart_interrupt_handler+0x114>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     ec0:	079a      	lsls	r2, r3, #30
     ec2:	d507      	bpl.n	ed4 <_usart_interrupt_handler+0xb8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     ec4:	221a      	movs	r2, #26
     ec6:	2332      	movs	r3, #50	; 0x32
     ec8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     eca:	8b62      	ldrh	r2, [r4, #26]
     ecc:	3b30      	subs	r3, #48	; 0x30
     ece:	4313      	orrs	r3, r2
     ed0:	8363      	strh	r3, [r4, #26]
     ed2:	e027      	b.n	f24 <_usart_interrupt_handler+0x108>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ed4:	075a      	lsls	r2, r3, #29
     ed6:	d507      	bpl.n	ee8 <_usart_interrupt_handler+0xcc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     ed8:	221e      	movs	r2, #30
     eda:	2332      	movs	r3, #50	; 0x32
     edc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     ede:	8b62      	ldrh	r2, [r4, #26]
     ee0:	3b2e      	subs	r3, #46	; 0x2e
     ee2:	4313      	orrs	r3, r2
     ee4:	8363      	strh	r3, [r4, #26]
     ee6:	e01d      	b.n	f24 <_usart_interrupt_handler+0x108>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     ee8:	07da      	lsls	r2, r3, #31
     eea:	d507      	bpl.n	efc <_usart_interrupt_handler+0xe0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     eec:	2213      	movs	r2, #19
     eee:	2332      	movs	r3, #50	; 0x32
     ef0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     ef2:	8b62      	ldrh	r2, [r4, #26]
     ef4:	3b31      	subs	r3, #49	; 0x31
     ef6:	4313      	orrs	r3, r2
     ef8:	8363      	strh	r3, [r4, #26]
     efa:	e013      	b.n	f24 <_usart_interrupt_handler+0x108>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     efc:	06da      	lsls	r2, r3, #27
     efe:	d507      	bpl.n	f10 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     f00:	2242      	movs	r2, #66	; 0x42
     f02:	2332      	movs	r3, #50	; 0x32
     f04:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     f06:	8b62      	ldrh	r2, [r4, #26]
     f08:	3b22      	subs	r3, #34	; 0x22
     f0a:	4313      	orrs	r3, r2
     f0c:	8363      	strh	r3, [r4, #26]
     f0e:	e009      	b.n	f24 <_usart_interrupt_handler+0x108>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     f10:	2220      	movs	r2, #32
     f12:	421a      	tst	r2, r3
     f14:	d006      	beq.n	f24 <_usart_interrupt_handler+0x108>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     f16:	3221      	adds	r2, #33	; 0x21
     f18:	2332      	movs	r3, #50	; 0x32
     f1a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     f1c:	8b62      	ldrh	r2, [r4, #26]
     f1e:	3b12      	subs	r3, #18
     f20:	4313      	orrs	r3, r2
     f22:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     f24:	077b      	lsls	r3, r7, #29
     f26:	d527      	bpl.n	f78 <_usart_interrupt_handler+0x15c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     f28:	1c28      	adds	r0, r5, #0
     f2a:	696b      	ldr	r3, [r5, #20]
     f2c:	4798      	blx	r3
     f2e:	e023      	b.n	f78 <_usart_interrupt_handler+0x15c>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     f30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     f32:	05db      	lsls	r3, r3, #23
     f34:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     f36:	b2da      	uxtb	r2, r3
     f38:	6a69      	ldr	r1, [r5, #36]	; 0x24
     f3a:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     f3c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     f3e:	1c51      	adds	r1, r2, #1
     f40:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f42:	7969      	ldrb	r1, [r5, #5]
     f44:	2901      	cmp	r1, #1
     f46:	d104      	bne.n	f52 <_usart_interrupt_handler+0x136>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     f48:	0a1b      	lsrs	r3, r3, #8
     f4a:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     f4c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     f4e:	3301      	adds	r3, #1
     f50:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     f52:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     f54:	3b01      	subs	r3, #1
     f56:	b29b      	uxth	r3, r3
     f58:	85ab      	strh	r3, [r5, #44]	; 0x2c
     f5a:	2b00      	cmp	r3, #0
     f5c:	d10c      	bne.n	f78 <_usart_interrupt_handler+0x15c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f5e:	3304      	adds	r3, #4
     f60:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     f62:	2200      	movs	r2, #0
     f64:	332e      	adds	r3, #46	; 0x2e
     f66:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     f68:	07bb      	lsls	r3, r7, #30
     f6a:	d505      	bpl.n	f78 <_usart_interrupt_handler+0x15c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     f6c:	1c28      	adds	r0, r5, #0
     f6e:	692b      	ldr	r3, [r5, #16]
     f70:	4798      	blx	r3
     f72:	e001      	b.n	f78 <_usart_interrupt_handler+0x15c>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f74:	2304      	movs	r3, #4
     f76:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     f78:	06f3      	lsls	r3, r6, #27
     f7a:	d507      	bpl.n	f8c <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     f7c:	2310      	movs	r3, #16
     f7e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     f80:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     f82:	06fb      	lsls	r3, r7, #27
     f84:	d502      	bpl.n	f8c <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     f86:	1c28      	adds	r0, r5, #0
     f88:	69eb      	ldr	r3, [r5, #28]
     f8a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     f8c:	06b3      	lsls	r3, r6, #26
     f8e:	d507      	bpl.n	fa0 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     f90:	2320      	movs	r3, #32
     f92:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     f94:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     f96:	073b      	lsls	r3, r7, #28
     f98:	d502      	bpl.n	fa0 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     f9a:	1c28      	adds	r0, r5, #0
     f9c:	69ab      	ldr	r3, [r5, #24]
     f9e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     fa0:	0733      	lsls	r3, r6, #28
     fa2:	d507      	bpl.n	fb4 <_usart_interrupt_handler+0x198>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     fa4:	2308      	movs	r3, #8
     fa6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     fa8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     faa:	06bb      	lsls	r3, r7, #26
     fac:	d502      	bpl.n	fb4 <_usart_interrupt_handler+0x198>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     fae:	6a2b      	ldr	r3, [r5, #32]
     fb0:	1c28      	adds	r0, r5, #0
     fb2:	4798      	blx	r3
		}
	}
#endif
}
     fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	20000e4c 	.word	0x20000e4c

00000fbc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     fbc:	b508      	push	{r3, lr}
	switch (clock_source) {
     fbe:	2808      	cmp	r0, #8
     fc0:	d803      	bhi.n	fca <system_clock_source_get_hz+0xe>
     fc2:	0080      	lsls	r0, r0, #2
     fc4:	4b1c      	ldr	r3, [pc, #112]	; (1038 <system_clock_source_get_hz+0x7c>)
     fc6:	581b      	ldr	r3, [r3, r0]
     fc8:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     fca:	2000      	movs	r0, #0
     fcc:	e032      	b.n	1034 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     fce:	4b1b      	ldr	r3, [pc, #108]	; (103c <system_clock_source_get_hz+0x80>)
     fd0:	6918      	ldr	r0, [r3, #16]
     fd2:	e02f      	b.n	1034 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
     fd4:	4b1a      	ldr	r3, [pc, #104]	; (1040 <system_clock_source_get_hz+0x84>)
     fd6:	7d18      	ldrb	r0, [r3, #20]
     fd8:	0700      	lsls	r0, r0, #28
     fda:	0f80      	lsrs	r0, r0, #30
     fdc:	3001      	adds	r0, #1
     fde:	4b19      	ldr	r3, [pc, #100]	; (1044 <system_clock_source_get_hz+0x88>)
     fe0:	4358      	muls	r0, r3
     fe2:	e027      	b.n	1034 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     fe4:	4b15      	ldr	r3, [pc, #84]	; (103c <system_clock_source_get_hz+0x80>)
     fe6:	6958      	ldr	r0, [r3, #20]
     fe8:	e024      	b.n	1034 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     fea:	4b14      	ldr	r3, [pc, #80]	; (103c <system_clock_source_get_hz+0x80>)
     fec:	681b      	ldr	r3, [r3, #0]
     fee:	2002      	movs	r0, #2
     ff0:	4018      	ands	r0, r3
     ff2:	d01f      	beq.n	1034 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     ff4:	4912      	ldr	r1, [pc, #72]	; (1040 <system_clock_source_get_hz+0x84>)
     ff6:	2280      	movs	r2, #128	; 0x80
     ff8:	0052      	lsls	r2, r2, #1
     ffa:	68cb      	ldr	r3, [r1, #12]
     ffc:	4213      	tst	r3, r2
     ffe:	d0fc      	beq.n	ffa <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    1000:	4b0e      	ldr	r3, [pc, #56]	; (103c <system_clock_source_get_hz+0x80>)
    1002:	681b      	ldr	r3, [r3, #0]
    1004:	075b      	lsls	r3, r3, #29
    1006:	d514      	bpl.n	1032 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1008:	2000      	movs	r0, #0
    100a:	4b0f      	ldr	r3, [pc, #60]	; (1048 <system_clock_source_get_hz+0x8c>)
    100c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    100e:	4b0b      	ldr	r3, [pc, #44]	; (103c <system_clock_source_get_hz+0x80>)
    1010:	689b      	ldr	r3, [r3, #8]
    1012:	041b      	lsls	r3, r3, #16
    1014:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1016:	4358      	muls	r0, r3
    1018:	e00c      	b.n	1034 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    101a:	2328      	movs	r3, #40	; 0x28
    101c:	4a08      	ldr	r2, [pc, #32]	; (1040 <system_clock_source_get_hz+0x84>)
    101e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1020:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1022:	079b      	lsls	r3, r3, #30
    1024:	d506      	bpl.n	1034 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1026:	4b05      	ldr	r3, [pc, #20]	; (103c <system_clock_source_get_hz+0x80>)
    1028:	68d8      	ldr	r0, [r3, #12]
    102a:	e003      	b.n	1034 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    102c:	2080      	movs	r0, #128	; 0x80
    102e:	0200      	lsls	r0, r0, #8
    1030:	e000      	b.n	1034 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1032:	4806      	ldr	r0, [pc, #24]	; (104c <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    1034:	bd08      	pop	{r3, pc}
    1036:	46c0      	nop			; (mov r8, r8)
    1038:	00009560 	.word	0x00009560
    103c:	200000ec 	.word	0x200000ec
    1040:	40000c00 	.word	0x40000c00
    1044:	003d0900 	.word	0x003d0900
    1048:	00001721 	.word	0x00001721
    104c:	02dc6c00 	.word	0x02dc6c00

00001050 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    1050:	b530      	push	{r4, r5, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    1052:	4c0c      	ldr	r4, [pc, #48]	; (1084 <system_clock_source_osc16m_set_config+0x34>)
    1054:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    1056:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1058:	7841      	ldrb	r1, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    105a:	7800      	ldrb	r0, [r0, #0]
    105c:	2203      	movs	r2, #3
    105e:	4010      	ands	r0, r2
    1060:	0080      	lsls	r0, r0, #2
    1062:	3209      	adds	r2, #9
    1064:	4393      	bics	r3, r2
    1066:	4303      	orrs	r3, r0
    1068:	3a0b      	subs	r2, #11
    106a:	4011      	ands	r1, r2
    106c:	0189      	lsls	r1, r1, #6
    106e:	323f      	adds	r2, #63	; 0x3f
    1070:	4393      	bics	r3, r2
    1072:	430b      	orrs	r3, r1
    1074:	1c1a      	adds	r2, r3, #0
    1076:	01e9      	lsls	r1, r5, #7
    1078:	237f      	movs	r3, #127	; 0x7f
    107a:	4013      	ands	r3, r2
    107c:	430b      	orrs	r3, r1
    107e:	7523      	strb	r3, [r4, #20]
}
    1080:	bd30      	pop	{r4, r5, pc}
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	40000c00 	.word	0x40000c00

00001088 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1088:	b5f0      	push	{r4, r5, r6, r7, lr}
    108a:	465f      	mov	r7, fp
    108c:	4656      	mov	r6, sl
    108e:	464d      	mov	r5, r9
    1090:	4644      	mov	r4, r8
    1092:	b4f0      	push	{r4, r5, r6, r7}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    1094:	4e25      	ldr	r6, [pc, #148]	; (112c <system_clock_source_xosc32k_set_config+0xa4>)
    1096:	6973      	ldr	r3, [r6, #20]
    1098:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    109a:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    109c:	7803      	ldrb	r3, [r0, #0]
    109e:	425a      	negs	r2, r3
    10a0:	415a      	adcs	r2, r3
    10a2:	4690      	mov	r8, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    10a4:	7883      	ldrb	r3, [r0, #2]
    10a6:	469a      	mov	sl, r3
	temp.bit.EN32K = config->enable_32khz_output;
    10a8:	78c3      	ldrb	r3, [r0, #3]

	temp.bit.ONDEMAND = config->on_demand;
    10aa:	7a47      	ldrb	r7, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    10ac:	7a02      	ldrb	r2, [r0, #8]
    10ae:	4693      	mov	fp, r2
	temp.bit.WRTLOCK  = config->write_once;
    10b0:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    10b2:	6842      	ldr	r2, [r0, #4]
    10b4:	481e      	ldr	r0, [pc, #120]	; (1130 <system_clock_source_xosc32k_set_config+0xa8>)
    10b6:	6142      	str	r2, [r0, #20]

	OSC32KCTRL->XOSC32K = temp;
    10b8:	2001      	movs	r0, #1
    10ba:	4642      	mov	r2, r8
    10bc:	0092      	lsls	r2, r2, #2
    10be:	4690      	mov	r8, r2
    10c0:	2204      	movs	r2, #4
    10c2:	4691      	mov	r9, r2
    10c4:	4662      	mov	r2, ip
    10c6:	4649      	mov	r1, r9
    10c8:	438a      	bics	r2, r1
    10ca:	4694      	mov	ip, r2
    10cc:	4642      	mov	r2, r8
    10ce:	4661      	mov	r1, ip
    10d0:	430a      	orrs	r2, r1
    10d2:	4694      	mov	ip, r2
    10d4:	4003      	ands	r3, r0
    10d6:	00db      	lsls	r3, r3, #3
    10d8:	2208      	movs	r2, #8
    10da:	4690      	mov	r8, r2
    10dc:	4662      	mov	r2, ip
    10de:	4641      	mov	r1, r8
    10e0:	438a      	bics	r2, r1
    10e2:	4313      	orrs	r3, r2
    10e4:	4651      	mov	r1, sl
    10e6:	4001      	ands	r1, r0
    10e8:	0109      	lsls	r1, r1, #4
    10ea:	2210      	movs	r2, #16
    10ec:	4393      	bics	r3, r2
    10ee:	430b      	orrs	r3, r1
    10f0:	465a      	mov	r2, fp
    10f2:	4002      	ands	r2, r0
    10f4:	0192      	lsls	r2, r2, #6
    10f6:	2140      	movs	r1, #64	; 0x40
    10f8:	438b      	bics	r3, r1
    10fa:	4313      	orrs	r3, r2
    10fc:	4007      	ands	r7, r0
    10fe:	01ff      	lsls	r7, r7, #7
    1100:	2280      	movs	r2, #128	; 0x80
    1102:	4393      	bics	r3, r2
    1104:	433b      	orrs	r3, r7
    1106:	3a79      	subs	r2, #121	; 0x79
    1108:	4015      	ands	r5, r2
    110a:	022d      	lsls	r5, r5, #8
    110c:	4f09      	ldr	r7, [pc, #36]	; (1134 <system_clock_source_xosc32k_set_config+0xac>)
    110e:	403b      	ands	r3, r7
    1110:	432b      	orrs	r3, r5
    1112:	4004      	ands	r4, r0
    1114:	0320      	lsls	r0, r4, #12
    1116:	4c08      	ldr	r4, [pc, #32]	; (1138 <system_clock_source_xosc32k_set_config+0xb0>)
    1118:	401c      	ands	r4, r3
    111a:	4304      	orrs	r4, r0
    111c:	6174      	str	r4, [r6, #20]
}
    111e:	bc3c      	pop	{r2, r3, r4, r5}
    1120:	4690      	mov	r8, r2
    1122:	4699      	mov	r9, r3
    1124:	46a2      	mov	sl, r4
    1126:	46ab      	mov	fp, r5
    1128:	bdf0      	pop	{r4, r5, r6, r7, pc}
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	40001000 	.word	0x40001000
    1130:	200000ec 	.word	0x200000ec
    1134:	fffff8ff 	.word	0xfffff8ff
    1138:	ffffefff 	.word	0xffffefff

0000113c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    113c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    113e:	7a83      	ldrb	r3, [r0, #10]
    1140:	069b      	lsls	r3, r3, #26
    1142:	0c1a      	lsrs	r2, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    1144:	8983      	ldrh	r3, [r0, #12]
    1146:	059b      	lsls	r3, r3, #22
    1148:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    114a:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    114c:	4c1a      	ldr	r4, [pc, #104]	; (11b8 <system_clock_source_dfll_set_config+0x7c>)
    114e:	6063      	str	r3, [r4, #4]
    1150:	88c1      	ldrh	r1, [r0, #6]
    1152:	8883      	ldrh	r3, [r0, #4]
    1154:	4319      	orrs	r1, r3
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
			OSCCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1156:	7a43      	ldrb	r3, [r0, #9]
    1158:	7a02      	ldrb	r2, [r0, #8]
    115a:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    115c:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    115e:	7842      	ldrb	r2, [r0, #1]
    1160:	01d2      	lsls	r2, r2, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    1162:	4313      	orrs	r3, r2
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    1164:	7882      	ldrb	r2, [r0, #2]
    1166:	0192      	lsls	r2, r2, #6
	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    1168:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
			OSCCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    116a:	6023      	str	r3, [r4, #0]
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    116c:	7803      	ldrb	r3, [r0, #0]
    116e:	2b04      	cmp	r3, #4
    1170:	d10f      	bne.n	1192 <system_clock_source_dfll_set_config+0x56>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1172:	7b83      	ldrb	r3, [r0, #14]
    1174:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    1176:	8a42      	ldrh	r2, [r0, #18]
    1178:	4313      	orrs	r3, r2
    117a:	1c19      	adds	r1, r3, #0

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    117c:	8a03      	ldrh	r3, [r0, #16]
    117e:	041b      	lsls	r3, r3, #16
    1180:	4a0e      	ldr	r2, [pc, #56]	; (11bc <system_clock_source_dfll_set_config+0x80>)
    1182:	4013      	ands	r3, r2
    1184:	430b      	orrs	r3, r1
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1186:	60a3      	str	r3, [r4, #8]
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1188:	6821      	ldr	r1, [r4, #0]
    118a:	2304      	movs	r3, #4
    118c:	430b      	orrs	r3, r1
    118e:	6023      	str	r3, [r4, #0]
    1190:	e011      	b.n	11b6 <system_clock_source_dfll_set_config+0x7a>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1192:	2b20      	cmp	r3, #32
    1194:	d10f      	bne.n	11b6 <system_clock_source_dfll_set_config+0x7a>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1196:	7b83      	ldrb	r3, [r0, #14]
    1198:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    119a:	8a42      	ldrh	r2, [r0, #18]
    119c:	4313      	orrs	r3, r2
    119e:	1c19      	adds	r1, r3, #0
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    11a0:	8a03      	ldrh	r3, [r0, #16]
    11a2:	041b      	lsls	r3, r3, #16
    11a4:	4a05      	ldr	r2, [pc, #20]	; (11bc <system_clock_source_dfll_set_config+0x80>)
    11a6:	4013      	ands	r3, r2
    11a8:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    11aa:	4a03      	ldr	r2, [pc, #12]	; (11b8 <system_clock_source_dfll_set_config+0x7c>)
    11ac:	6093      	str	r3, [r2, #8]
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    11ae:	6813      	ldr	r3, [r2, #0]
    11b0:	4903      	ldr	r1, [pc, #12]	; (11c0 <system_clock_source_dfll_set_config+0x84>)
    11b2:	430b      	orrs	r3, r1
    11b4:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    11b6:	bd10      	pop	{r4, pc}
    11b8:	200000ec 	.word	0x200000ec
    11bc:	03ff0000 	.word	0x03ff0000
    11c0:	00000424 	.word	0x00000424

000011c4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    11c4:	2808      	cmp	r0, #8
    11c6:	d803      	bhi.n	11d0 <system_clock_source_enable+0xc>
    11c8:	0080      	lsls	r0, r0, #2
    11ca:	4b29      	ldr	r3, [pc, #164]	; (1270 <system_clock_source_enable+0xac>)
    11cc:	581b      	ldr	r3, [r3, r0]
    11ce:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    11d0:	2017      	movs	r0, #23
    11d2:	e04b      	b.n	126c <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    11d4:	4a27      	ldr	r2, [pc, #156]	; (1274 <system_clock_source_enable+0xb0>)
    11d6:	7d11      	ldrb	r1, [r2, #20]
    11d8:	2302      	movs	r3, #2
    11da:	430b      	orrs	r3, r1
    11dc:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    11de:	2000      	movs	r0, #0
    11e0:	e044      	b.n	126c <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    11e2:	4a25      	ldr	r2, [pc, #148]	; (1278 <system_clock_source_enable+0xb4>)
    11e4:	6991      	ldr	r1, [r2, #24]
    11e6:	2302      	movs	r3, #2
    11e8:	430b      	orrs	r3, r1
    11ea:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11ec:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    11ee:	e03d      	b.n	126c <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    11f0:	4a20      	ldr	r2, [pc, #128]	; (1274 <system_clock_source_enable+0xb0>)
    11f2:	8a11      	ldrh	r1, [r2, #16]
    11f4:	2302      	movs	r3, #2
    11f6:	430b      	orrs	r3, r1
    11f8:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11fa:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    11fc:	e036      	b.n	126c <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    11fe:	4a1e      	ldr	r2, [pc, #120]	; (1278 <system_clock_source_enable+0xb4>)
    1200:	6951      	ldr	r1, [r2, #20]
    1202:	2302      	movs	r3, #2
    1204:	430b      	orrs	r3, r1
    1206:	6153      	str	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1208:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    120a:	e02f      	b.n	126c <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    120c:	491b      	ldr	r1, [pc, #108]	; (127c <system_clock_source_enable+0xb8>)
    120e:	680b      	ldr	r3, [r1, #0]
    1210:	2202      	movs	r2, #2
    1212:	4313      	orrs	r3, r2
    1214:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    1216:	4b17      	ldr	r3, [pc, #92]	; (1274 <system_clock_source_enable+0xb0>)
    1218:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    121a:	1c19      	adds	r1, r3, #0
    121c:	32fe      	adds	r2, #254	; 0xfe
    121e:	68cb      	ldr	r3, [r1, #12]
    1220:	4213      	tst	r3, r2
    1222:	d0fc      	beq.n	121e <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1224:	4a15      	ldr	r2, [pc, #84]	; (127c <system_clock_source_enable+0xb8>)
    1226:	6891      	ldr	r1, [r2, #8]
    1228:	4b12      	ldr	r3, [pc, #72]	; (1274 <system_clock_source_enable+0xb0>)
    122a:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    122c:	6852      	ldr	r2, [r2, #4]
    122e:	61da      	str	r2, [r3, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    1230:	2200      	movs	r2, #0
    1232:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1234:	1c19      	adds	r1, r3, #0
    1236:	3201      	adds	r2, #1
    1238:	32ff      	adds	r2, #255	; 0xff
    123a:	68cb      	ldr	r3, [r1, #12]
    123c:	4213      	tst	r3, r2
    123e:	d0fc      	beq.n	123a <system_clock_source_enable+0x76>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1240:	4b0e      	ldr	r3, [pc, #56]	; (127c <system_clock_source_enable+0xb8>)
    1242:	681b      	ldr	r3, [r3, #0]
    1244:	b29b      	uxth	r3, r3
    1246:	4a0b      	ldr	r2, [pc, #44]	; (1274 <system_clock_source_enable+0xb0>)
    1248:	8313      	strh	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    124a:	2000      	movs	r0, #0
    124c:	e00e      	b.n	126c <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    124e:	4909      	ldr	r1, [pc, #36]	; (1274 <system_clock_source_enable+0xb0>)
    1250:	2228      	movs	r2, #40	; 0x28
    1252:	5c88      	ldrb	r0, [r1, r2]
    1254:	2302      	movs	r3, #2
    1256:	4303      	orrs	r3, r0
    1258:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    125a:	1c08      	adds	r0, r1, #0
    125c:	2138      	movs	r1, #56	; 0x38
    125e:	3a26      	subs	r2, #38	; 0x26
    1260:	5c43      	ldrb	r3, [r0, r1]
    1262:	4213      	tst	r3, r2
    1264:	d1fc      	bne.n	1260 <system_clock_source_enable+0x9c>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1266:	2000      	movs	r0, #0
    1268:	e000      	b.n	126c <system_clock_source_enable+0xa8>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    126a:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    126c:	4770      	bx	lr
    126e:	46c0      	nop			; (mov r8, r8)
    1270:	00009584 	.word	0x00009584
    1274:	40000c00 	.word	0x40000c00
    1278:	40001000 	.word	0x40001000
    127c:	200000ec 	.word	0x200000ec

00001280 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1280:	2808      	cmp	r0, #8
    1282:	d832      	bhi.n	12ea <system_clock_source_disable+0x6a>
    1284:	0080      	lsls	r0, r0, #2
    1286:	4b1a      	ldr	r3, [pc, #104]	; (12f0 <system_clock_source_disable+0x70>)
    1288:	581b      	ldr	r3, [r3, r0]
    128a:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    128c:	4a19      	ldr	r2, [pc, #100]	; (12f4 <system_clock_source_disable+0x74>)
    128e:	7d13      	ldrb	r3, [r2, #20]
    1290:	2102      	movs	r1, #2
    1292:	438b      	bics	r3, r1
    1294:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    1296:	2000      	movs	r0, #0
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;
    1298:	e028      	b.n	12ec <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    129a:	4a17      	ldr	r2, [pc, #92]	; (12f8 <system_clock_source_disable+0x78>)
    129c:	6993      	ldr	r3, [r2, #24]
    129e:	2102      	movs	r1, #2
    12a0:	438b      	bics	r3, r1
    12a2:	6193      	str	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    12a4:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;
    12a6:	e021      	b.n	12ec <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    12a8:	4a12      	ldr	r2, [pc, #72]	; (12f4 <system_clock_source_disable+0x74>)
    12aa:	8a13      	ldrh	r3, [r2, #16]
    12ac:	2102      	movs	r1, #2
    12ae:	438b      	bics	r3, r1
    12b0:	8213      	strh	r3, [r2, #16]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    12b2:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;
    12b4:	e01a      	b.n	12ec <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    12b6:	4a10      	ldr	r2, [pc, #64]	; (12f8 <system_clock_source_disable+0x78>)
    12b8:	6953      	ldr	r3, [r2, #20]
    12ba:	2102      	movs	r1, #2
    12bc:	438b      	bics	r3, r1
    12be:	6153      	str	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    12c0:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
		break;
    12c2:	e013      	b.n	12ec <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    12c4:	4b0d      	ldr	r3, [pc, #52]	; (12fc <system_clock_source_disable+0x7c>)
    12c6:	681a      	ldr	r2, [r3, #0]
    12c8:	2102      	movs	r1, #2
    12ca:	438a      	bics	r2, r1
    12cc:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    12ce:	681b      	ldr	r3, [r3, #0]
    12d0:	b29b      	uxth	r3, r3
    12d2:	4a08      	ldr	r2, [pc, #32]	; (12f4 <system_clock_source_disable+0x74>)
    12d4:	8313      	strh	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    12d6:	2000      	movs	r0, #0
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
    12d8:	e008      	b.n	12ec <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    12da:	4906      	ldr	r1, [pc, #24]	; (12f4 <system_clock_source_disable+0x74>)
    12dc:	2228      	movs	r2, #40	; 0x28
    12de:	5c8b      	ldrb	r3, [r1, r2]
    12e0:	2002      	movs	r0, #2
    12e2:	4383      	bics	r3, r0
    12e4:	548b      	strb	r3, [r1, r2]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    12e6:	2000      	movs	r0, #0
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
		break;
    12e8:	e000      	b.n	12ec <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    12ea:	2017      	movs	r0, #23

	}

	return STATUS_OK;
}
    12ec:	4770      	bx	lr
    12ee:	46c0      	nop			; (mov r8, r8)
    12f0:	000095a8 	.word	0x000095a8
    12f4:	40000c00 	.word	0x40000c00
    12f8:	40001000 	.word	0x40001000
    12fc:	200000ec 	.word	0x200000ec

00001300 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1300:	b5f0      	push	{r4, r5, r6, r7, lr}
    1302:	4647      	mov	r7, r8
    1304:	b480      	push	{r7}
    1306:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    1308:	2280      	movs	r2, #128	; 0x80
    130a:	0052      	lsls	r2, r2, #1
    130c:	4b6f      	ldr	r3, [pc, #444]	; (14cc <system_clock_init+0x1cc>)
    130e:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    1310:	3afd      	subs	r2, #253	; 0xfd
    1312:	4b6f      	ldr	r3, [pc, #444]	; (14d0 <system_clock_init+0x1d0>)
    1314:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1316:	496f      	ldr	r1, [pc, #444]	; (14d4 <system_clock_init+0x1d4>)
    1318:	684b      	ldr	r3, [r1, #4]
    131a:	321b      	adds	r2, #27
    131c:	4393      	bics	r3, r2
    131e:	3a1a      	subs	r2, #26
    1320:	4313      	orrs	r3, r2
    1322:	604b      	str	r3, [r1, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1324:	2380      	movs	r3, #128	; 0x80
    1326:	05db      	lsls	r3, r3, #23
    1328:	789b      	ldrb	r3, [r3, #2]
    132a:	2b02      	cmp	r3, #2
    132c:	d009      	beq.n	1342 <system_clock_init+0x42>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    132e:	2380      	movs	r3, #128	; 0x80
    1330:	05db      	lsls	r3, r3, #23
    1332:	3a03      	subs	r2, #3
    1334:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1336:	3201      	adds	r2, #1
    1338:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    133a:	1c1a      	adds	r2, r3, #0
    133c:	7993      	ldrb	r3, [r2, #6]
    133e:	2b00      	cmp	r3, #0
    1340:	d0fc      	beq.n	133c <system_clock_init+0x3c>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1342:	a809      	add	r0, sp, #36	; 0x24
    1344:	2300      	movs	r3, #0
    1346:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->frequency           = 32768UL;
    1348:	2280      	movs	r2, #128	; 0x80
    134a:	0212      	lsls	r2, r2, #8
    134c:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    134e:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    1350:	2201      	movs	r2, #1
    1352:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
	config->on_demand           = true;
	config->write_once          = false;
    1354:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1356:	2104      	movs	r1, #4
    1358:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    135a:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    135c:	7202      	strb	r2, [r0, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    135e:	4b5e      	ldr	r3, [pc, #376]	; (14d8 <system_clock_init+0x1d8>)
    1360:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1362:	2005      	movs	r0, #5
    1364:	4b5d      	ldr	r3, [pc, #372]	; (14dc <system_clock_init+0x1dc>)
    1366:	4798      	blx	r3
		mask = OSCCTRL_STATUS_XOSCRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    1368:	495d      	ldr	r1, [pc, #372]	; (14e0 <system_clock_init+0x1e0>)
    136a:	2201      	movs	r2, #1
    136c:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    136e:	421a      	tst	r2, r3
    1370:	d0fc      	beq.n	136c <system_clock_init+0x6c>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1372:	a901      	add	r1, sp, #4
    1374:	2301      	movs	r3, #1
    1376:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    1378:	2400      	movs	r4, #0
    137a:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    137c:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    137e:	724c      	strb	r4, [r1, #9]
	struct system_gclk_gen_config gclk_conf;
	struct system_clock_source_osc16m_config osc16m_conf;

	/* Select OSCULP32K as new clock source for mainclock temporarily */
	system_gclk_gen_get_config_defaults(&gclk_conf);
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    1380:	2503      	movs	r5, #3
    1382:	700d      	strb	r5, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    1384:	2000      	movs	r0, #0
    1386:	4b57      	ldr	r3, [pc, #348]	; (14e4 <system_clock_init+0x1e4>)
    1388:	4798      	blx	r3

	/* GCLK0 is enabled after POR */

	/* Disable OSC16M clock*/
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    138a:	2006      	movs	r0, #6
    138c:	4b56      	ldr	r3, [pc, #344]	; (14e8 <system_clock_init+0x1e8>)
    138e:	4798      	blx	r3
		struct system_clock_source_osc16m_config *const config)
{
	Assert(config);

	config->fsel = SYSTEM_OSC16M_4M;
	config->run_in_standby  = false;
    1390:	466b      	mov	r3, sp
    1392:	705c      	strb	r4, [r3, #1]

	/* Switch to new frequency selection and enable OSC16M */
	system_clock_source_osc16m_get_config_defaults(&osc16m_conf);
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    1394:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    1396:	709c      	strb	r4, [r3, #2]
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
    1398:	4668      	mov	r0, sp
    139a:	4b54      	ldr	r3, [pc, #336]	; (14ec <system_clock_init+0x1ec>)
    139c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    139e:	2006      	movs	r0, #6
    13a0:	4b4e      	ldr	r3, [pc, #312]	; (14dc <system_clock_init+0x1dc>)
    13a2:	4798      	blx	r3
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    13a4:	4949      	ldr	r1, [pc, #292]	; (14cc <system_clock_init+0x1cc>)
    13a6:	2210      	movs	r2, #16
    13a8:	68cb      	ldr	r3, [r1, #12]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
	osc16m_conf.on_demand       = 0;
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    13aa:	421a      	tst	r2, r3
    13ac:	d0fc      	beq.n	13a8 <system_clock_init+0xa8>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    13ae:	a901      	add	r1, sp, #4
    13b0:	2301      	movs	r3, #1
    13b2:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    13b4:	2400      	movs	r4, #0
    13b6:	704c      	strb	r4, [r1, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
    13b8:	3305      	adds	r3, #5
    13ba:	700b      	strb	r3, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    13bc:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    13be:	724c      	strb	r4, [r1, #9]

	/* Select OSC16M for mainclock again */
	system_gclk_gen_get_config_defaults(&gclk_conf);
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_OSC16M;
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    13c0:	2000      	movs	r0, #0
    13c2:	4b48      	ldr	r3, [pc, #288]	; (14e4 <system_clock_init+0x1e4>)
    13c4:	4798      	blx	r3
	if (CONF_CLOCK_OSC16M_ON_DEMAND){
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    13c6:	4a41      	ldr	r2, [pc, #260]	; (14cc <system_clock_init+0x1cc>)
    13c8:	7d11      	ldrb	r1, [r2, #20]
    13ca:	2380      	movs	r3, #128	; 0x80
    13cc:	430b      	orrs	r3, r1
    13ce:	7513      	strb	r3, [r2, #20]
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    13d0:	ab04      	add	r3, sp, #16
    13d2:	2200      	movs	r2, #0
    13d4:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    13d6:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    13d8:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    13da:	725a      	strb	r2, [r3, #9]
	config->on_demand       = true;
	config->run_in_stanby   = false;
    13dc:	709a      	strb	r2, [r3, #2]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    13de:	213f      	movs	r1, #63	; 0x3f
    13e0:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    13e2:	393b      	subs	r1, #59	; 0x3b
    13e4:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    13e6:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    13e8:	4b41      	ldr	r3, [pc, #260]	; (14f0 <system_clock_init+0x1f0>)
    13ea:	681b      	ldr	r3, [r3, #0]
    13ec:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    13ee:	2b3f      	cmp	r3, #63	; 0x3f
    13f0:	d100      	bne.n	13f4 <system_clock_init+0xf4>
		coarse = 0x1f;
    13f2:	3b20      	subs	r3, #32
	}

	dfll_conf.coarse_value = coarse;
    13f4:	a804      	add	r0, sp, #16
    13f6:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    13f8:	23b7      	movs	r3, #183	; 0xb7
    13fa:	00db      	lsls	r3, r3, #3
    13fc:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    13fe:	2303      	movs	r3, #3
    1400:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1402:	331c      	adds	r3, #28
    1404:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1406:	4b3b      	ldr	r3, [pc, #236]	; (14f4 <system_clock_init+0x1f4>)
    1408:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    140a:	4b3b      	ldr	r3, [pc, #236]	; (14f8 <system_clock_init+0x1f8>)
    140c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    140e:	ac01      	add	r4, sp, #4
    1410:	2601      	movs	r6, #1
    1412:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1414:	2500      	movs	r5, #0
    1416:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1418:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    141a:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    141c:	2305      	movs	r3, #5
    141e:	7023      	strb	r3, [r4, #0]
    1420:	2001      	movs	r0, #1
    1422:	1c21      	adds	r1, r4, #0
    1424:	4b2f      	ldr	r3, [pc, #188]	; (14e4 <system_clock_init+0x1e4>)
    1426:	4698      	mov	r8, r3
    1428:	4798      	blx	r3
    142a:	2001      	movs	r0, #1
    142c:	4f33      	ldr	r7, [pc, #204]	; (14fc <system_clock_init+0x1fc>)
    142e:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1430:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1432:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1434:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1436:	7265      	strb	r5, [r4, #9]
    1438:	2307      	movs	r3, #7
    143a:	7023      	strb	r3, [r4, #0]
    143c:	2003      	movs	r0, #3
    143e:	1c21      	adds	r1, r4, #0
    1440:	47c0      	blx	r8
    1442:	2003      	movs	r0, #3
    1444:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1446:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1448:	2000      	movs	r0, #0
    144a:	1c21      	adds	r1, r4, #0
    144c:	4b2c      	ldr	r3, [pc, #176]	; (1500 <system_clock_init+0x200>)
    144e:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    1450:	2000      	movs	r0, #0
    1452:	4b2c      	ldr	r3, [pc, #176]	; (1504 <system_clock_init+0x204>)
    1454:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1456:	2007      	movs	r0, #7
    1458:	4b20      	ldr	r3, [pc, #128]	; (14dc <system_clock_init+0x1dc>)
    145a:	4798      	blx	r3
			mask = (OSCCTRL_STATUS_DFLLRDY |
			        OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC);
		} else {
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    145c:	491b      	ldr	r1, [pc, #108]	; (14cc <system_clock_init+0x1cc>)
    145e:	22d0      	movs	r2, #208	; 0xd0
    1460:	0112      	lsls	r2, r2, #4
    1462:	68cb      	ldr	r3, [r1, #12]
    1464:	4013      	ands	r3, r2
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1466:	4293      	cmp	r3, r2
    1468:	d1fb      	bne.n	1462 <system_clock_init+0x162>
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    146a:	4c27      	ldr	r4, [pc, #156]	; (1508 <system_clock_init+0x208>)
    146c:	2301      	movs	r3, #1
    146e:	71a3      	strb	r3, [r4, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    1470:	7163      	strb	r3, [r4, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    1472:	7123      	strb	r3, [r4, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1474:	a901      	add	r1, sp, #4
    1476:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    1478:	2200      	movs	r2, #0
    147a:	704a      	strb	r2, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    147c:	724a      	strb	r2, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    147e:	3207      	adds	r2, #7
    1480:	700a      	strb	r2, [r1, #0]
    1482:	720b      	strb	r3, [r1, #8]
    1484:	2000      	movs	r0, #0
    1486:	4b17      	ldr	r3, [pc, #92]	; (14e4 <system_clock_init+0x1e4>)
    1488:	4798      	blx	r3
    148a:	2000      	movs	r0, #0
    148c:	4b1b      	ldr	r3, [pc, #108]	; (14fc <system_clock_init+0x1fc>)
    148e:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    1490:	2000      	movs	r0, #0
    1492:	4b1e      	ldr	r3, [pc, #120]	; (150c <system_clock_init+0x20c>)
    1494:	4798      	blx	r3
    1496:	7921      	ldrb	r1, [r4, #4]
    1498:	b2c9      	uxtb	r1, r1
    149a:	4b1d      	ldr	r3, [pc, #116]	; (1510 <system_clock_init+0x210>)
    149c:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    149e:	4b1d      	ldr	r3, [pc, #116]	; (1514 <system_clock_init+0x214>)
    14a0:	4298      	cmp	r0, r3
    14a2:	d80e      	bhi.n	14c2 <system_clock_init+0x1c2>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    14a4:	2380      	movs	r3, #128	; 0x80
    14a6:	05db      	lsls	r3, r3, #23
    14a8:	789b      	ldrb	r3, [r3, #2]
    14aa:	2b00      	cmp	r3, #0
    14ac:	d009      	beq.n	14c2 <system_clock_init+0x1c2>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    14ae:	2380      	movs	r3, #128	; 0x80
    14b0:	05db      	lsls	r3, r3, #23
    14b2:	2201      	movs	r2, #1
    14b4:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    14b6:	2200      	movs	r2, #0
    14b8:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    14ba:	1c1a      	adds	r2, r3, #0
    14bc:	7993      	ldrb	r3, [r2, #6]
    14be:	2b00      	cmp	r3, #0
    14c0:	d0fc      	beq.n	14bc <system_clock_init+0x1bc>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    14c2:	b00c      	add	sp, #48	; 0x30
    14c4:	bc04      	pop	{r2}
    14c6:	4690      	mov	r8, r2
    14c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14ca:	46c0      	nop			; (mov r8, r8)
    14cc:	40000c00 	.word	0x40000c00
    14d0:	40001400 	.word	0x40001400
    14d4:	41004000 	.word	0x41004000
    14d8:	00001089 	.word	0x00001089
    14dc:	000011c5 	.word	0x000011c5
    14e0:	40001000 	.word	0x40001000
    14e4:	0000153d 	.word	0x0000153d
    14e8:	00001281 	.word	0x00001281
    14ec:	00001051 	.word	0x00001051
    14f0:	00806020 	.word	0x00806020
    14f4:	0000113d 	.word	0x0000113d
    14f8:	00001519 	.word	0x00001519
    14fc:	000015e9 	.word	0x000015e9
    1500:	000016fd 	.word	0x000016fd
    1504:	00001695 	.word	0x00001695
    1508:	40000400 	.word	0x40000400
    150c:	00001629 	.word	0x00001629
    1510:	00008219 	.word	0x00008219
    1514:	00b71b00 	.word	0x00b71b00

00001518 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1518:	4a06      	ldr	r2, [pc, #24]	; (1534 <system_gclk_init+0x1c>)
    151a:	6951      	ldr	r1, [r2, #20]
    151c:	2340      	movs	r3, #64	; 0x40
    151e:	430b      	orrs	r3, r1
    1520:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    1522:	2201      	movs	r2, #1
    1524:	4b04      	ldr	r3, [pc, #16]	; (1538 <system_gclk_init+0x20>)
    1526:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1528:	1c19      	adds	r1, r3, #0
    152a:	780b      	ldrb	r3, [r1, #0]
    152c:	4213      	tst	r3, r2
    152e:	d1fc      	bne.n	152a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1530:	4770      	bx	lr
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	40000400 	.word	0x40000400
    1538:	40001800 	.word	0x40001800

0000153c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    153c:	b570      	push	{r4, r5, r6, lr}
    153e:	1c04      	adds	r4, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1540:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1542:	784b      	ldrb	r3, [r1, #1]
    1544:	2b00      	cmp	r3, #0
    1546:	d002      	beq.n	154e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1548:	2380      	movs	r3, #128	; 0x80
    154a:	00db      	lsls	r3, r3, #3
    154c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    154e:	7a4b      	ldrb	r3, [r1, #9]
    1550:	2b00      	cmp	r3, #0
    1552:	d002      	beq.n	155a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1554:	2380      	movs	r3, #128	; 0x80
    1556:	011b      	lsls	r3, r3, #4
    1558:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    155a:	684a      	ldr	r2, [r1, #4]
    155c:	2a01      	cmp	r2, #1
    155e:	d917      	bls.n	1590 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1560:	1e53      	subs	r3, r2, #1
    1562:	421a      	tst	r2, r3
    1564:	d10f      	bne.n	1586 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1566:	2a02      	cmp	r2, #2
    1568:	d906      	bls.n	1578 <system_gclk_gen_set_config+0x3c>
    156a:	2302      	movs	r3, #2
    156c:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    156e:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1570:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1572:	429a      	cmp	r2, r3
    1574:	d8fb      	bhi.n	156e <system_gclk_gen_set_config+0x32>
    1576:	e000      	b.n	157a <system_gclk_gen_set_config+0x3e>
    1578:	2000      	movs	r0, #0
    157a:	2380      	movs	r3, #128	; 0x80
    157c:	015b      	lsls	r3, r3, #5
    157e:	431d      	orrs	r5, r3
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    1580:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1582:	4305      	orrs	r5, r0
    1584:	e004      	b.n	1590 <system_gclk_gen_set_config+0x54>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    1586:	0412      	lsls	r2, r2, #16
    1588:	2380      	movs	r3, #128	; 0x80
    158a:	009b      	lsls	r3, r3, #2
    158c:	431a      	orrs	r2, r3

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    158e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1590:	7a0b      	ldrb	r3, [r1, #8]
    1592:	2b00      	cmp	r3, #0
    1594:	d002      	beq.n	159c <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1596:	2380      	movs	r3, #128	; 0x80
    1598:	019b      	lsls	r3, r3, #6
    159a:	431d      	orrs	r5, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    159c:	2604      	movs	r6, #4
    159e:	40a6      	lsls	r6, r4
    15a0:	490d      	ldr	r1, [pc, #52]	; (15d8 <system_gclk_gen_set_config+0x9c>)
    15a2:	4a0e      	ldr	r2, [pc, #56]	; (15dc <system_gclk_gen_set_config+0xa0>)
    15a4:	684b      	ldr	r3, [r1, #4]
    15a6:	4013      	ands	r3, r2
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    15a8:	421e      	tst	r6, r3
    15aa:	d1fb      	bne.n	15a4 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    15ac:	4b0c      	ldr	r3, [pc, #48]	; (15e0 <system_gclk_gen_set_config+0xa4>)
    15ae:	4798      	blx	r3
    15b0:	00a4      	lsls	r4, r4, #2
    15b2:	4b09      	ldr	r3, [pc, #36]	; (15d8 <system_gclk_gen_set_config+0x9c>)
    15b4:	469c      	mov	ip, r3
    15b6:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    15b8:	6a20      	ldr	r0, [r4, #32]
    15ba:	2380      	movs	r3, #128	; 0x80
    15bc:	005b      	lsls	r3, r3, #1
    15be:	4018      	ands	r0, r3
    15c0:	4328      	orrs	r0, r5
    15c2:	6220      	str	r0, [r4, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    15c4:	4661      	mov	r1, ip
    15c6:	4a05      	ldr	r2, [pc, #20]	; (15dc <system_gclk_gen_set_config+0xa0>)
    15c8:	684b      	ldr	r3, [r1, #4]
    15ca:	4013      	ands	r3, r2

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    15cc:	421e      	tst	r6, r3
    15ce:	d1fb      	bne.n	15c8 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    15d0:	4b04      	ldr	r3, [pc, #16]	; (15e4 <system_gclk_gen_set_config+0xa8>)
    15d2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    15d4:	bd70      	pop	{r4, r5, r6, pc}
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	40001800 	.word	0x40001800
    15dc:	000007fc 	.word	0x000007fc
    15e0:	0000017d 	.word	0x0000017d
    15e4:	000001bd 	.word	0x000001bd

000015e8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    15e8:	b510      	push	{r4, lr}
    15ea:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    15ec:	2204      	movs	r2, #4
    15ee:	4082      	lsls	r2, r0
    15f0:	4809      	ldr	r0, [pc, #36]	; (1618 <system_gclk_gen_enable+0x30>)
    15f2:	490a      	ldr	r1, [pc, #40]	; (161c <system_gclk_gen_enable+0x34>)
    15f4:	6843      	ldr	r3, [r0, #4]
    15f6:	400b      	ands	r3, r1
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    15f8:	421a      	tst	r2, r3
    15fa:	d1fb      	bne.n	15f4 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    15fc:	4b08      	ldr	r3, [pc, #32]	; (1620 <system_gclk_gen_enable+0x38>)
    15fe:	4798      	blx	r3
    1600:	00a4      	lsls	r4, r4, #2
    1602:	4b05      	ldr	r3, [pc, #20]	; (1618 <system_gclk_gen_enable+0x30>)
    1604:	469c      	mov	ip, r3
    1606:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1608:	6a23      	ldr	r3, [r4, #32]
    160a:	2280      	movs	r2, #128	; 0x80
    160c:	0052      	lsls	r2, r2, #1
    160e:	4313      	orrs	r3, r2
    1610:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1612:	4b04      	ldr	r3, [pc, #16]	; (1624 <system_gclk_gen_enable+0x3c>)
    1614:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1616:	bd10      	pop	{r4, pc}
    1618:	40001800 	.word	0x40001800
    161c:	000007fc 	.word	0x000007fc
    1620:	0000017d 	.word	0x0000017d
    1624:	000001bd 	.word	0x000001bd

00001628 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    162a:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    162c:	2204      	movs	r2, #4
    162e:	4082      	lsls	r2, r0
    1630:	4812      	ldr	r0, [pc, #72]	; (167c <system_gclk_gen_get_hz+0x54>)
    1632:	4913      	ldr	r1, [pc, #76]	; (1680 <system_gclk_gen_get_hz+0x58>)
    1634:	6843      	ldr	r3, [r0, #4]
    1636:	400b      	ands	r3, r1
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1638:	421a      	tst	r2, r3
    163a:	d1fb      	bne.n	1634 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    163c:	4b11      	ldr	r3, [pc, #68]	; (1684 <system_gclk_gen_get_hz+0x5c>)
    163e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1640:	4f0e      	ldr	r7, [pc, #56]	; (167c <system_gclk_gen_get_hz+0x54>)
    1642:	3408      	adds	r4, #8
    1644:	00a4      	lsls	r4, r4, #2
    1646:	59e3      	ldr	r3, [r4, r7]
    1648:	200f      	movs	r0, #15
    164a:	4018      	ands	r0, r3
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    164c:	4b0e      	ldr	r3, [pc, #56]	; (1688 <system_gclk_gen_get_hz+0x60>)
    164e:	4798      	blx	r3
    1650:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    1652:	59e5      	ldr	r5, [r4, r7]
    1654:	04ed      	lsls	r5, r5, #19
    1656:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1658:	59e4      	ldr	r4, [r4, r7]
    165a:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    165c:	4b0b      	ldr	r3, [pc, #44]	; (168c <system_gclk_gen_get_hz+0x64>)
    165e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1660:	2d00      	cmp	r5, #0
    1662:	d107      	bne.n	1674 <system_gclk_gen_get_hz+0x4c>
    1664:	2c01      	cmp	r4, #1
    1666:	d907      	bls.n	1678 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1668:	1c30      	adds	r0, r6, #0
    166a:	1c21      	adds	r1, r4, #0
    166c:	4b08      	ldr	r3, [pc, #32]	; (1690 <system_gclk_gen_get_hz+0x68>)
    166e:	4798      	blx	r3
    1670:	1c06      	adds	r6, r0, #0
    1672:	e001      	b.n	1678 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1674:	3401      	adds	r4, #1
    1676:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1678:	1c30      	adds	r0, r6, #0
    167a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    167c:	40001800 	.word	0x40001800
    1680:	000007fc 	.word	0x000007fc
    1684:	0000017d 	.word	0x0000017d
    1688:	00000fbd 	.word	0x00000fbd
    168c:	000001bd 	.word	0x000001bd
    1690:	00008219 	.word	0x00008219

00001694 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1694:	b510      	push	{r4, lr}
    1696:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1698:	4b08      	ldr	r3, [pc, #32]	; (16bc <system_gclk_chan_enable+0x28>)
    169a:	4798      	blx	r3
    169c:	00a4      	lsls	r4, r4, #2
    169e:	4b08      	ldr	r3, [pc, #32]	; (16c0 <system_gclk_chan_enable+0x2c>)
    16a0:	18e0      	adds	r0, r4, r3
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    16a2:	2280      	movs	r2, #128	; 0x80
    16a4:	5881      	ldr	r1, [r0, r2]
    16a6:	2340      	movs	r3, #64	; 0x40
    16a8:	430b      	orrs	r3, r1
    16aa:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    16ac:	2180      	movs	r1, #128	; 0x80
    16ae:	3a40      	subs	r2, #64	; 0x40
    16b0:	5843      	ldr	r3, [r0, r1]
    16b2:	421a      	tst	r2, r3
    16b4:	d0fc      	beq.n	16b0 <system_gclk_chan_enable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    16b6:	4b03      	ldr	r3, [pc, #12]	; (16c4 <system_gclk_chan_enable+0x30>)
    16b8:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    16ba:	bd10      	pop	{r4, pc}
    16bc:	0000017d 	.word	0x0000017d
    16c0:	40001800 	.word	0x40001800
    16c4:	000001bd 	.word	0x000001bd

000016c8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    16c8:	b510      	push	{r4, lr}
    16ca:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    16cc:	4b08      	ldr	r3, [pc, #32]	; (16f0 <system_gclk_chan_disable+0x28>)
    16ce:	4798      	blx	r3
    16d0:	00a4      	lsls	r4, r4, #2
    16d2:	4b08      	ldr	r3, [pc, #32]	; (16f4 <system_gclk_chan_disable+0x2c>)
    16d4:	18e0      	adds	r0, r4, r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    16d6:	2280      	movs	r2, #128	; 0x80
    16d8:	5883      	ldr	r3, [r0, r2]
    16da:	2140      	movs	r1, #64	; 0x40
    16dc:	438b      	bics	r3, r1
    16de:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    16e0:	3140      	adds	r1, #64	; 0x40
    16e2:	3a40      	subs	r2, #64	; 0x40
    16e4:	5843      	ldr	r3, [r0, r1]
    16e6:	421a      	tst	r2, r3
    16e8:	d1fc      	bne.n	16e4 <system_gclk_chan_disable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    16ea:	4b03      	ldr	r3, [pc, #12]	; (16f8 <system_gclk_chan_disable+0x30>)
    16ec:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    16ee:	bd10      	pop	{r4, pc}
    16f0:	0000017d 	.word	0x0000017d
    16f4:	40001800 	.word	0x40001800
    16f8:	000001bd 	.word	0x000001bd

000016fc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    16fc:	b538      	push	{r3, r4, r5, lr}
    16fe:	1c04      	adds	r4, r0, #0
    1700:	1c0d      	adds	r5, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1702:	4b05      	ldr	r3, [pc, #20]	; (1718 <system_gclk_chan_set_config+0x1c>)
    1704:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    1706:	782b      	ldrb	r3, [r5, #0]
    1708:	220f      	movs	r2, #15
    170a:	4013      	ands	r3, r2
    170c:	3420      	adds	r4, #32
    170e:	00a4      	lsls	r4, r4, #2
    1710:	4a02      	ldr	r2, [pc, #8]	; (171c <system_gclk_chan_set_config+0x20>)
    1712:	50a3      	str	r3, [r4, r2]


}
    1714:	bd38      	pop	{r3, r4, r5, pc}
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	000016c9 	.word	0x000016c9
    171c:	40001800 	.word	0x40001800

00001720 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1720:	b510      	push	{r4, lr}
    1722:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1724:	4b06      	ldr	r3, [pc, #24]	; (1740 <system_gclk_chan_get_hz+0x20>)
    1726:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    1728:	3420      	adds	r4, #32
    172a:	00a4      	lsls	r4, r4, #2
    172c:	4b05      	ldr	r3, [pc, #20]	; (1744 <system_gclk_chan_get_hz+0x24>)
    172e:	58e3      	ldr	r3, [r4, r3]
    1730:	240f      	movs	r4, #15
    1732:	401c      	ands	r4, r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1734:	4b04      	ldr	r3, [pc, #16]	; (1748 <system_gclk_chan_get_hz+0x28>)
    1736:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1738:	1c20      	adds	r0, r4, #0
    173a:	4b04      	ldr	r3, [pc, #16]	; (174c <system_gclk_chan_get_hz+0x2c>)
    173c:	4798      	blx	r3
}
    173e:	bd10      	pop	{r4, pc}
    1740:	0000017d 	.word	0x0000017d
    1744:	40001800 	.word	0x40001800
    1748:	000001bd 	.word	0x000001bd
    174c:	00001629 	.word	0x00001629

00001750 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1750:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1752:	78d3      	ldrb	r3, [r2, #3]
    1754:	2b00      	cmp	r3, #0
    1756:	d11e      	bne.n	1796 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1758:	7814      	ldrb	r4, [r2, #0]
    175a:	2c80      	cmp	r4, #128	; 0x80
    175c:	d004      	beq.n	1768 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    175e:	0624      	lsls	r4, r4, #24
    1760:	2380      	movs	r3, #128	; 0x80
    1762:	025b      	lsls	r3, r3, #9
    1764:	431c      	orrs	r4, r3
    1766:	e000      	b.n	176a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1768:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    176a:	7853      	ldrb	r3, [r2, #1]
    176c:	2502      	movs	r5, #2
    176e:	43ab      	bics	r3, r5
    1770:	d10a      	bne.n	1788 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1772:	7893      	ldrb	r3, [r2, #2]
    1774:	2b00      	cmp	r3, #0
    1776:	d103      	bne.n	1780 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1778:	2380      	movs	r3, #128	; 0x80
    177a:	029b      	lsls	r3, r3, #10
    177c:	431c      	orrs	r4, r3
    177e:	e002      	b.n	1786 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1780:	23c0      	movs	r3, #192	; 0xc0
    1782:	02db      	lsls	r3, r3, #11
    1784:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1786:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1788:	7853      	ldrb	r3, [r2, #1]
    178a:	3b01      	subs	r3, #1
    178c:	2b01      	cmp	r3, #1
    178e:	d812      	bhi.n	17b6 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1790:	4b18      	ldr	r3, [pc, #96]	; (17f4 <_system_pinmux_config+0xa4>)
    1792:	401c      	ands	r4, r3
    1794:	e00f      	b.n	17b6 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1796:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1798:	040b      	lsls	r3, r1, #16
    179a:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    179c:	24a0      	movs	r4, #160	; 0xa0
    179e:	05e4      	lsls	r4, r4, #23
    17a0:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17a2:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    17a4:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    17a6:	24d0      	movs	r4, #208	; 0xd0
    17a8:	0624      	lsls	r4, r4, #24
    17aa:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17ac:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    17ae:	78d3      	ldrb	r3, [r2, #3]
    17b0:	2b00      	cmp	r3, #0
    17b2:	d018      	beq.n	17e6 <_system_pinmux_config+0x96>
    17b4:	e01c      	b.n	17f0 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    17b6:	040b      	lsls	r3, r1, #16
    17b8:	0c1b      	lsrs	r3, r3, #16
    17ba:	25a0      	movs	r5, #160	; 0xa0
    17bc:	05ed      	lsls	r5, r5, #23
    17be:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    17c0:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17c2:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    17c4:	0c0b      	lsrs	r3, r1, #16
    17c6:	25d0      	movs	r5, #208	; 0xd0
    17c8:	062d      	lsls	r5, r5, #24
    17ca:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    17cc:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17ce:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    17d0:	78d3      	ldrb	r3, [r2, #3]
    17d2:	2b00      	cmp	r3, #0
    17d4:	d10c      	bne.n	17f0 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    17d6:	0363      	lsls	r3, r4, #13
    17d8:	d505      	bpl.n	17e6 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    17da:	7893      	ldrb	r3, [r2, #2]
    17dc:	2b01      	cmp	r3, #1
    17de:	d101      	bne.n	17e4 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    17e0:	6181      	str	r1, [r0, #24]
    17e2:	e000      	b.n	17e6 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    17e4:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    17e6:	7853      	ldrb	r3, [r2, #1]
    17e8:	3b01      	subs	r3, #1
    17ea:	2b01      	cmp	r3, #1
    17ec:	d800      	bhi.n	17f0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    17ee:	6081      	str	r1, [r0, #8]
		}
	}
}
    17f0:	bd30      	pop	{r4, r5, pc}
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	fffbffff 	.word	0xfffbffff

000017f8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    17f8:	b508      	push	{r3, lr}
    17fa:	1c03      	adds	r3, r0, #0
    17fc:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    17fe:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1800:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1802:	2900      	cmp	r1, #0
    1804:	d104      	bne.n	1810 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1806:	0958      	lsrs	r0, r3, #5
    1808:	01c0      	lsls	r0, r0, #7
    180a:	4905      	ldr	r1, [pc, #20]	; (1820 <system_pinmux_pin_set_config+0x28>)
    180c:	468c      	mov	ip, r1
    180e:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1810:	211f      	movs	r1, #31
    1812:	400b      	ands	r3, r1
    1814:	391e      	subs	r1, #30
    1816:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1818:	4b02      	ldr	r3, [pc, #8]	; (1824 <system_pinmux_pin_set_config+0x2c>)
    181a:	4798      	blx	r3
}
    181c:	bd08      	pop	{r3, pc}
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	40002800 	.word	0x40002800
    1824:	00001751 	.word	0x00001751

00001828 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1828:	4770      	bx	lr
    182a:	46c0      	nop			; (mov r8, r8)

0000182c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    182c:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    182e:	4b05      	ldr	r3, [pc, #20]	; (1844 <system_init+0x18>)
    1830:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1832:	4b05      	ldr	r3, [pc, #20]	; (1848 <system_init+0x1c>)
    1834:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1836:	4b05      	ldr	r3, [pc, #20]	; (184c <system_init+0x20>)
    1838:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    183a:	4b05      	ldr	r3, [pc, #20]	; (1850 <system_init+0x24>)
    183c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    183e:	4b05      	ldr	r3, [pc, #20]	; (1854 <system_init+0x28>)
    1840:	4798      	blx	r3
}
    1842:	bd08      	pop	{r3, pc}
    1844:	00001301 	.word	0x00001301
    1848:	000001ed 	.word	0x000001ed
    184c:	00001829 	.word	0x00001829
    1850:	00000319 	.word	0x00000319
    1854:	00001829 	.word	0x00001829

00001858 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1858:	1c93      	adds	r3, r2, #2
    185a:	009b      	lsls	r3, r3, #2
    185c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    185e:	2a02      	cmp	r2, #2
    1860:	d104      	bne.n	186c <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1862:	7e02      	ldrb	r2, [r0, #24]
    1864:	2310      	movs	r3, #16
    1866:	4313      	orrs	r3, r2
    1868:	7603      	strb	r3, [r0, #24]
    186a:	e00c      	b.n	1886 <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    186c:	2a03      	cmp	r2, #3
    186e:	d104      	bne.n	187a <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1870:	7e02      	ldrb	r2, [r0, #24]
    1872:	2320      	movs	r3, #32
    1874:	4313      	orrs	r3, r2
    1876:	7603      	strb	r3, [r0, #24]
    1878:	e005      	b.n	1886 <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    187a:	2301      	movs	r3, #1
    187c:	4093      	lsls	r3, r2
    187e:	1c1a      	adds	r2, r3, #0
    1880:	7e03      	ldrb	r3, [r0, #24]
    1882:	431a      	orrs	r2, r3
    1884:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    1886:	2000      	movs	r0, #0
    1888:	4770      	bx	lr
    188a:	46c0      	nop			; (mov r8, r8)

0000188c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    188c:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    188e:	0080      	lsls	r0, r0, #2
    1890:	4b14      	ldr	r3, [pc, #80]	; (18e4 <_tc_interrupt_handler+0x58>)
    1892:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1894:	682b      	ldr	r3, [r5, #0]
    1896:	7a9c      	ldrb	r4, [r3, #10]
    1898:	7e2b      	ldrb	r3, [r5, #24]
    189a:	401c      	ands	r4, r3
    189c:	7e6b      	ldrb	r3, [r5, #25]
    189e:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    18a0:	07e3      	lsls	r3, r4, #31
    18a2:	d505      	bpl.n	18b0 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    18a4:	1c28      	adds	r0, r5, #0
    18a6:	68ab      	ldr	r3, [r5, #8]
    18a8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    18aa:	2301      	movs	r3, #1
    18ac:	682a      	ldr	r2, [r5, #0]
    18ae:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    18b0:	07a3      	lsls	r3, r4, #30
    18b2:	d505      	bpl.n	18c0 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    18b4:	1c28      	adds	r0, r5, #0
    18b6:	68eb      	ldr	r3, [r5, #12]
    18b8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    18ba:	2302      	movs	r3, #2
    18bc:	682a      	ldr	r2, [r5, #0]
    18be:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    18c0:	06e3      	lsls	r3, r4, #27
    18c2:	d505      	bpl.n	18d0 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    18c4:	1c28      	adds	r0, r5, #0
    18c6:	692b      	ldr	r3, [r5, #16]
    18c8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    18ca:	2310      	movs	r3, #16
    18cc:	682a      	ldr	r2, [r5, #0]
    18ce:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    18d0:	06a3      	lsls	r3, r4, #26
    18d2:	d505      	bpl.n	18e0 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    18d4:	1c28      	adds	r0, r5, #0
    18d6:	696b      	ldr	r3, [r5, #20]
    18d8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    18da:	682b      	ldr	r3, [r5, #0]
    18dc:	2220      	movs	r2, #32
    18de:	729a      	strb	r2, [r3, #10]
	}
}
    18e0:	bd38      	pop	{r3, r4, r5, pc}
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	20000e64 	.word	0x20000e64

000018e8 <TC0_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    18e8:	b508      	push	{r3, lr}
    18ea:	2000      	movs	r0, #0
    18ec:	4b01      	ldr	r3, [pc, #4]	; (18f4 <TC0_Handler+0xc>)
    18ee:	4798      	blx	r3
    18f0:	bd08      	pop	{r3, pc}
    18f2:	46c0      	nop			; (mov r8, r8)
    18f4:	0000188d 	.word	0x0000188d

000018f8 <TC1_Handler>:
    18f8:	b508      	push	{r3, lr}
    18fa:	2001      	movs	r0, #1
    18fc:	4b01      	ldr	r3, [pc, #4]	; (1904 <TC1_Handler+0xc>)
    18fe:	4798      	blx	r3
    1900:	bd08      	pop	{r3, pc}
    1902:	46c0      	nop			; (mov r8, r8)
    1904:	0000188d 	.word	0x0000188d

00001908 <TC2_Handler>:
    1908:	b508      	push	{r3, lr}
    190a:	2002      	movs	r0, #2
    190c:	4b01      	ldr	r3, [pc, #4]	; (1914 <TC2_Handler+0xc>)
    190e:	4798      	blx	r3
    1910:	bd08      	pop	{r3, pc}
    1912:	46c0      	nop			; (mov r8, r8)
    1914:	0000188d 	.word	0x0000188d

00001918 <TC3_Handler>:
    1918:	b508      	push	{r3, lr}
    191a:	2003      	movs	r0, #3
    191c:	4b01      	ldr	r3, [pc, #4]	; (1924 <TC3_Handler+0xc>)
    191e:	4798      	blx	r3
    1920:	bd08      	pop	{r3, pc}
    1922:	46c0      	nop			; (mov r8, r8)
    1924:	0000188d 	.word	0x0000188d

00001928 <TC4_Handler>:
    1928:	b508      	push	{r3, lr}
    192a:	2004      	movs	r0, #4
    192c:	4b01      	ldr	r3, [pc, #4]	; (1934 <TC4_Handler+0xc>)
    192e:	4798      	blx	r3
    1930:	bd08      	pop	{r3, pc}
    1932:	46c0      	nop			; (mov r8, r8)
    1934:	0000188d 	.word	0x0000188d

00001938 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1938:	b530      	push	{r4, r5, lr}
    193a:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    193c:	a901      	add	r1, sp, #4
    193e:	4b0c      	ldr	r3, [pc, #48]	; (1970 <_tc_get_inst_index+0x38>)
    1940:	1c0a      	adds	r2, r1, #0
    1942:	cb32      	ldmia	r3!, {r1, r4, r5}
    1944:	c232      	stmia	r2!, {r1, r4, r5}
    1946:	cb12      	ldmia	r3!, {r1, r4}
    1948:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    194a:	9b01      	ldr	r3, [sp, #4]
    194c:	4283      	cmp	r3, r0
    194e:	d006      	beq.n	195e <_tc_get_inst_index+0x26>
    1950:	2301      	movs	r3, #1
    1952:	009a      	lsls	r2, r3, #2
    1954:	a901      	add	r1, sp, #4
    1956:	5852      	ldr	r2, [r2, r1]
    1958:	4282      	cmp	r2, r0
    195a:	d103      	bne.n	1964 <_tc_get_inst_index+0x2c>
    195c:	e000      	b.n	1960 <_tc_get_inst_index+0x28>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    195e:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    1960:	b2d8      	uxtb	r0, r3
    1962:	e003      	b.n	196c <_tc_get_inst_index+0x34>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1964:	3301      	adds	r3, #1
    1966:	2b05      	cmp	r3, #5
    1968:	d1f3      	bne.n	1952 <_tc_get_inst_index+0x1a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    196a:	2000      	movs	r0, #0
}
    196c:	b007      	add	sp, #28
    196e:	bd30      	pop	{r4, r5, pc}
    1970:	000095f4 	.word	0x000095f4

00001974 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1974:	b5f0      	push	{r4, r5, r6, r7, lr}
    1976:	4647      	mov	r7, r8
    1978:	b480      	push	{r7}
    197a:	b08e      	sub	sp, #56	; 0x38
    197c:	1c05      	adds	r5, r0, #0
    197e:	1c0e      	adds	r6, r1, #0
    1980:	1c17      	adds	r7, r2, #0
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1982:	1c08      	adds	r0, r1, #0
    1984:	4baa      	ldr	r3, [pc, #680]	; (1c30 <tc_init+0x2bc>)
    1986:	4798      	blx	r3
    1988:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    198a:	4caa      	ldr	r4, [pc, #680]	; (1c34 <tc_init+0x2c0>)
    198c:	1c21      	adds	r1, r4, #0
    198e:	3114      	adds	r1, #20
    1990:	a80c      	add	r0, sp, #48	; 0x30
    1992:	2205      	movs	r2, #5
    1994:	4ba8      	ldr	r3, [pc, #672]	; (1c38 <tc_init+0x2c4>)
    1996:	4798      	blx	r3
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    1998:	a902      	add	r1, sp, #8
    199a:	1c23      	adds	r3, r4, #0
    199c:	331c      	adds	r3, #28
    199e:	1c0a      	adds	r2, r1, #0
    19a0:	cb13      	ldmia	r3!, {r0, r1, r4}
    19a2:	c213      	stmia	r2!, {r0, r1, r4}
    19a4:	cb13      	ldmia	r3!, {r0, r1, r4}
    19a6:	c213      	stmia	r2!, {r0, r1, r4}
    19a8:	cb13      	ldmia	r3!, {r0, r1, r4}
    19aa:	c213      	stmia	r2!, {r0, r1, r4}
    19ac:	681b      	ldr	r3, [r3, #0]
    19ae:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    19b0:	2300      	movs	r3, #0
    19b2:	60ab      	str	r3, [r5, #8]
    19b4:	60eb      	str	r3, [r5, #12]
    19b6:	612b      	str	r3, [r5, #16]
    19b8:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    19ba:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    19bc:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    19be:	4643      	mov	r3, r8
    19c0:	009a      	lsls	r2, r3, #2
    19c2:	4b9e      	ldr	r3, [pc, #632]	; (1c3c <tc_init+0x2c8>)
    19c4:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    19c6:	602e      	str	r6, [r5, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    19c8:	2334      	movs	r3, #52	; 0x34
    19ca:	5cfb      	ldrb	r3, [r7, r3]
    19cc:	76ab      	strb	r3, [r5, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    19ce:	78fb      	ldrb	r3, [r7, #3]
    19d0:	2b08      	cmp	r3, #8
    19d2:	d104      	bne.n	19de <tc_init+0x6a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    19d4:	2017      	movs	r0, #23

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    19d6:	4642      	mov	r2, r8
    19d8:	07d2      	lsls	r2, r2, #31
    19da:	d500      	bpl.n	19de <tc_init+0x6a>
    19dc:	e123      	b.n	1c26 <tc_init+0x2b2>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    19de:	712b      	strb	r3, [r5, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    19e0:	6833      	ldr	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    19e2:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    19e4:	07db      	lsls	r3, r3, #31
    19e6:	d500      	bpl.n	19ea <tc_init+0x76>
    19e8:	e11d      	b.n	1c26 <tc_init+0x2b2>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    19ea:	7af3      	ldrb	r3, [r6, #11]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    19ec:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    19ee:	079b      	lsls	r3, r3, #30
    19f0:	d500      	bpl.n	19f4 <tc_init+0x80>
    19f2:	e118      	b.n	1c26 <tc_init+0x2b2>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    19f4:	6833      	ldr	r3, [r6, #0]
    19f6:	079b      	lsls	r3, r3, #30
    19f8:	d500      	bpl.n	19fc <tc_init+0x88>
    19fa:	e114      	b.n	1c26 <tc_init+0x2b2>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    19fc:	7c3b      	ldrb	r3, [r7, #16]
    19fe:	2b00      	cmp	r3, #0
    1a00:	d00a      	beq.n	1a18 <tc_init+0xa4>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1a02:	a901      	add	r1, sp, #4
    1a04:	2301      	movs	r3, #1
    1a06:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1a08:	2200      	movs	r2, #0
    1a0a:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1a0c:	7e3a      	ldrb	r2, [r7, #24]
    1a0e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1a10:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1a12:	7d38      	ldrb	r0, [r7, #20]
    1a14:	4b8a      	ldr	r3, [pc, #552]	; (1c40 <tc_init+0x2cc>)
    1a16:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1a18:	7f3b      	ldrb	r3, [r7, #28]
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d00b      	beq.n	1a36 <tc_init+0xc2>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1a1e:	a901      	add	r1, sp, #4
    1a20:	2301      	movs	r3, #1
    1a22:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1a24:	2200      	movs	r2, #0
    1a26:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a2a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1a2c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1a2e:	6a3b      	ldr	r3, [r7, #32]
    1a30:	b2d8      	uxtb	r0, r3
    1a32:	4b83      	ldr	r3, [pc, #524]	; (1c40 <tc_init+0x2cc>)
    1a34:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    1a36:	4643      	mov	r3, r8
    1a38:	005a      	lsls	r2, r3, #1
    1a3a:	a902      	add	r1, sp, #8
    1a3c:	1c53      	adds	r3, r2, #1
    1a3e:	009b      	lsls	r3, r3, #2
    1a40:	5858      	ldr	r0, [r3, r1]
    1a42:	4643      	mov	r3, r8
    1a44:	00db      	lsls	r3, r3, #3
    1a46:	585b      	ldr	r3, [r3, r1]
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
    1a48:	b2d9      	uxtb	r1, r3
    1a4a:	2904      	cmp	r1, #4
    1a4c:	d81b      	bhi.n	1a86 <tc_init+0x112>
    1a4e:	008b      	lsls	r3, r1, #2
    1a50:	497c      	ldr	r1, [pc, #496]	; (1c44 <tc_init+0x2d0>)
    1a52:	58cb      	ldr	r3, [r1, r3]
    1a54:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1a56:	497c      	ldr	r1, [pc, #496]	; (1c48 <tc_init+0x2d4>)
    1a58:	694b      	ldr	r3, [r1, #20]
    1a5a:	4318      	orrs	r0, r3
    1a5c:	6148      	str	r0, [r1, #20]
    1a5e:	e012      	b.n	1a86 <tc_init+0x112>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    1a60:	4979      	ldr	r1, [pc, #484]	; (1c48 <tc_init+0x2d4>)
    1a62:	698b      	ldr	r3, [r1, #24]
    1a64:	4318      	orrs	r0, r3
    1a66:	6188      	str	r0, [r1, #24]
    1a68:	e00d      	b.n	1a86 <tc_init+0x112>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    1a6a:	4977      	ldr	r1, [pc, #476]	; (1c48 <tc_init+0x2d4>)
    1a6c:	69cb      	ldr	r3, [r1, #28]
    1a6e:	4318      	orrs	r0, r3
    1a70:	61c8      	str	r0, [r1, #28]
    1a72:	e008      	b.n	1a86 <tc_init+0x112>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    1a74:	4974      	ldr	r1, [pc, #464]	; (1c48 <tc_init+0x2d4>)
    1a76:	6a0b      	ldr	r3, [r1, #32]
    1a78:	4318      	orrs	r0, r3
    1a7a:	6208      	str	r0, [r1, #32]
    1a7c:	e003      	b.n	1a86 <tc_init+0x112>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    1a7e:	4972      	ldr	r1, [pc, #456]	; (1c48 <tc_init+0x2d4>)
    1a80:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    1a82:	4318      	orrs	r0, r3
    1a84:	6248      	str	r0, [r1, #36]	; 0x24
			inst_mclk_apbmask[2*instance+1]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    1a86:	78fb      	ldrb	r3, [r7, #3]
    1a88:	2b08      	cmp	r3, #8
    1a8a:	d129      	bne.n	1ae0 <tc_init+0x16c>
    1a8c:	4643      	mov	r3, r8
    1a8e:	3301      	adds	r3, #1
    1a90:	2b04      	cmp	r3, #4
    1a92:	dc25      	bgt.n	1ae0 <tc_init+0x16c>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    1a94:	a902      	add	r1, sp, #8
    1a96:	1cd3      	adds	r3, r2, #3
    1a98:	009b      	lsls	r3, r3, #2
    1a9a:	5858      	ldr	r0, [r3, r1]
    1a9c:	1c93      	adds	r3, r2, #2
    1a9e:	009b      	lsls	r3, r3, #2
    1aa0:	585b      	ldr	r3, [r3, r1]
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
    1aa2:	b2da      	uxtb	r2, r3
    1aa4:	2a04      	cmp	r2, #4
    1aa6:	d81b      	bhi.n	1ae0 <tc_init+0x16c>
    1aa8:	0093      	lsls	r3, r2, #2
    1aaa:	4a68      	ldr	r2, [pc, #416]	; (1c4c <tc_init+0x2d8>)
    1aac:	58d3      	ldr	r3, [r2, r3]
    1aae:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1ab0:	4a65      	ldr	r2, [pc, #404]	; (1c48 <tc_init+0x2d4>)
    1ab2:	6953      	ldr	r3, [r2, #20]
    1ab4:	4318      	orrs	r0, r3
    1ab6:	6150      	str	r0, [r2, #20]
    1ab8:	e012      	b.n	1ae0 <tc_init+0x16c>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    1aba:	4a63      	ldr	r2, [pc, #396]	; (1c48 <tc_init+0x2d4>)
    1abc:	6993      	ldr	r3, [r2, #24]
    1abe:	4318      	orrs	r0, r3
    1ac0:	6190      	str	r0, [r2, #24]
    1ac2:	e00d      	b.n	1ae0 <tc_init+0x16c>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    1ac4:	4a60      	ldr	r2, [pc, #384]	; (1c48 <tc_init+0x2d4>)
    1ac6:	69d3      	ldr	r3, [r2, #28]
    1ac8:	4318      	orrs	r0, r3
    1aca:	61d0      	str	r0, [r2, #28]
    1acc:	e008      	b.n	1ae0 <tc_init+0x16c>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    1ace:	4a5e      	ldr	r2, [pc, #376]	; (1c48 <tc_init+0x2d4>)
    1ad0:	6a13      	ldr	r3, [r2, #32]
    1ad2:	4318      	orrs	r0, r3
    1ad4:	6210      	str	r0, [r2, #32]
    1ad6:	e003      	b.n	1ae0 <tc_init+0x16c>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    1ad8:	4a5b      	ldr	r2, [pc, #364]	; (1c48 <tc_init+0x2d4>)
    1ada:	6a53      	ldr	r3, [r2, #36]	; 0x24
    1adc:	4318      	orrs	r0, r3
    1ade:	6250      	str	r0, [r2, #36]	; 0x24
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1ae0:	783b      	ldrb	r3, [r7, #0]
    1ae2:	466a      	mov	r2, sp
    1ae4:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1ae6:	ab0c      	add	r3, sp, #48	; 0x30
    1ae8:	4642      	mov	r2, r8
    1aea:	5c9c      	ldrb	r4, [r3, r2]
    1aec:	1c20      	adds	r0, r4, #0
    1aee:	4669      	mov	r1, sp
    1af0:	4b57      	ldr	r3, [pc, #348]	; (1c50 <tc_init+0x2dc>)
    1af2:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1af4:	1c20      	adds	r0, r4, #0
    1af6:	4b57      	ldr	r3, [pc, #348]	; (1c54 <tc_init+0x2e0>)
    1af8:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    1afa:	79fa      	ldrb	r2, [r7, #7]
    1afc:	78fb      	ldrb	r3, [r7, #3]
    1afe:	4313      	orrs	r3, r2
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    1b00:	88ba      	ldrh	r2, [r7, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    1b02:	4313      	orrs	r3, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1b04:	7a7a      	ldrb	r2, [r7, #9]
    1b06:	2a00      	cmp	r2, #0
    1b08:	d002      	beq.n	1b10 <tc_init+0x19c>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    1b0a:	2280      	movs	r2, #128	; 0x80
    1b0c:	0252      	lsls	r2, r2, #9
    1b0e:	4313      	orrs	r3, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1b10:	7aba      	ldrb	r2, [r7, #10]
    1b12:	2a00      	cmp	r2, #0
    1b14:	d002      	beq.n	1b1c <tc_init+0x1a8>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    1b16:	2280      	movs	r2, #128	; 0x80
    1b18:	0292      	lsls	r2, r2, #10
    1b1a:	4313      	orrs	r3, r2
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_IO[i] == true) {
    1b1c:	7afa      	ldrb	r2, [r7, #11]
    1b1e:	2a00      	cmp	r2, #0
    1b20:	d002      	beq.n	1b28 <tc_init+0x1b4>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    1b22:	2280      	movs	r2, #128	; 0x80
    1b24:	0352      	lsls	r2, r2, #13
    1b26:	4313      	orrs	r3, r2
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_IO[i] == true) {
    1b28:	7b3a      	ldrb	r2, [r7, #12]
    1b2a:	2a00      	cmp	r2, #0
    1b2c:	d002      	beq.n	1b34 <tc_init+0x1c0>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    1b2e:	2280      	movs	r2, #128	; 0x80
    1b30:	0392      	lsls	r2, r2, #14
    1b32:	4313      	orrs	r3, r2
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    1b34:	78b9      	ldrb	r1, [r7, #2]
    1b36:	01c9      	lsls	r1, r1, #7
		if (config->enable_capture_on_IO[i] == true) {
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    1b38:	787a      	ldrb	r2, [r7, #1]
    1b3a:	0192      	lsls	r2, r2, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    1b3c:	4311      	orrs	r1, r2
		if (config->enable_capture_on_IO[i] == true) {
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    1b3e:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b40:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1b42:	6913      	ldr	r3, [r2, #16]
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1b44:	2b00      	cmp	r3, #0
    1b46:	d1fc      	bne.n	1b42 <tc_init+0x1ce>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1b48:	6031      	str	r1, [r6, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b4a:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1b4c:	6913      	ldr	r3, [r2, #16]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d1fc      	bne.n	1b4c <tc_init+0x1d8>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
    1b52:	79bb      	ldrb	r3, [r7, #6]
    1b54:	7333      	strb	r3, [r6, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
    1b56:	7b79      	ldrb	r1, [r7, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1b58:	1e4b      	subs	r3, r1, #1
    1b5a:	4199      	sbcs	r1, r3
    1b5c:	0089      	lsls	r1, r1, #2
	}

	if (config->count_direction) {
    1b5e:	7bbb      	ldrb	r3, [r7, #14]
    1b60:	2b00      	cmp	r3, #0
    1b62:	d001      	beq.n	1b68 <tc_init+0x1f4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1b64:	2301      	movs	r3, #1
    1b66:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b68:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1b6a:	6913      	ldr	r3, [r2, #16]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d1fc      	bne.n	1b6a <tc_init+0x1f6>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1b70:	33ff      	adds	r3, #255	; 0xff
    1b72:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1b74:	2900      	cmp	r1, #0
    1b76:	d004      	beq.n	1b82 <tc_init+0x20e>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b78:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1b7a:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    1b7c:	2b00      	cmp	r3, #0
    1b7e:	d1fc      	bne.n	1b7a <tc_init+0x206>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1b80:	7171      	strb	r1, [r6, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    1b82:	7a3b      	ldrb	r3, [r7, #8]
    1b84:	7373      	strb	r3, [r6, #13]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b86:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1b88:	6913      	ldr	r3, [r2, #16]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d1fc      	bne.n	1b88 <tc_init+0x214>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1b8e:	792b      	ldrb	r3, [r5, #4]
    1b90:	2b04      	cmp	r3, #4
    1b92:	d005      	beq.n	1ba0 <tc_init+0x22c>
    1b94:	2b08      	cmp	r3, #8
    1b96:	d033      	beq.n	1c00 <tc_init+0x28c>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1b98:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d143      	bne.n	1c26 <tc_init+0x2b2>
    1b9e:	e01c      	b.n	1bda <tc_init+0x266>
    1ba0:	6913      	ldr	r3, [r2, #16]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	d1fc      	bne.n	1ba0 <tc_init+0x22c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    1ba6:	3328      	adds	r3, #40	; 0x28
    1ba8:	5cfb      	ldrb	r3, [r7, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    1baa:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bac:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1bae:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d1fc      	bne.n	1bae <tc_init+0x23a>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    1bb4:	3329      	adds	r3, #41	; 0x29
    1bb6:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    1bb8:	76f3      	strb	r3, [r6, #27]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bba:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1bbc:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d1fc      	bne.n	1bbc <tc_init+0x248>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    1bc2:	332a      	adds	r3, #42	; 0x2a
    1bc4:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    1bc6:	7733      	strb	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bc8:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1bca:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d1fc      	bne.n	1bca <tc_init+0x256>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    1bd0:	332b      	adds	r3, #43	; 0x2b
    1bd2:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    1bd4:	7773      	strb	r3, [r6, #29]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1bd6:	2000      	movs	r0, #0
    1bd8:	e025      	b.n	1c26 <tc_init+0x2b2>
    1bda:	6913      	ldr	r3, [r2, #16]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d1fc      	bne.n	1bda <tc_init+0x266>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1be0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    1be2:	82b3      	strh	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1be4:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1be6:	6913      	ldr	r3, [r2, #16]

			while (tc_is_syncing(module_inst)) {
    1be8:	2b00      	cmp	r3, #0
    1bea:	d1fc      	bne.n	1be6 <tc_init+0x272>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1bec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    1bee:	83b3      	strh	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bf0:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1bf2:	6913      	ldr	r3, [r2, #16]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	d1fc      	bne.n	1bf2 <tc_init+0x27e>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1bf8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    1bfa:	83f3      	strh	r3, [r6, #30]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    1bfc:	2000      	movs	r0, #0
    1bfe:	e012      	b.n	1c26 <tc_init+0x2b2>
    1c00:	6913      	ldr	r3, [r2, #16]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1c02:	2b00      	cmp	r3, #0
    1c04:	d1fc      	bne.n	1c00 <tc_init+0x28c>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1c08:	6173      	str	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c0a:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1c0c:	6913      	ldr	r3, [r2, #16]

			while (tc_is_syncing(module_inst)) {
    1c0e:	2b00      	cmp	r3, #0
    1c10:	d1fc      	bne.n	1c0c <tc_init+0x298>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    1c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c14:	61f3      	str	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c16:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1c18:	6913      	ldr	r3, [r2, #16]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	d1fc      	bne.n	1c18 <tc_init+0x2a4>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    1c20:	6233      	str	r3, [r6, #32]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    1c22:	2000      	movs	r0, #0
    1c24:	e7ff      	b.n	1c26 <tc_init+0x2b2>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1c26:	b00e      	add	sp, #56	; 0x38
    1c28:	bc04      	pop	{r2}
    1c2a:	4690      	mov	r8, r2
    1c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c2e:	46c0      	nop			; (mov r8, r8)
    1c30:	00001939 	.word	0x00001939
    1c34:	000095f4 	.word	0x000095f4
    1c38:	000083fb 	.word	0x000083fb
    1c3c:	20000e64 	.word	0x20000e64
    1c40:	000017f9 	.word	0x000017f9
    1c44:	000095cc 	.word	0x000095cc
    1c48:	40000400 	.word	0x40000400
    1c4c:	000095e0 	.word	0x000095e0
    1c50:	000016fd 	.word	0x000016fd
    1c54:	00001695 	.word	0x00001695

00001c58 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    1c58:	6802      	ldr	r2, [r0, #0]
    1c5a:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d1fc      	bne.n	1c5a <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    1c60:	7903      	ldrb	r3, [r0, #4]
    1c62:	2b04      	cmp	r3, #4
    1c64:	d005      	beq.n	1c72 <tc_set_count_value+0x1a>
    1c66:	2b08      	cmp	r3, #8
    1c68:	d00b      	beq.n	1c82 <tc_set_count_value+0x2a>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    1c6a:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d10b      	bne.n	1c88 <tc_set_count_value+0x30>
    1c70:	e003      	b.n	1c7a <tc_set_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    1c72:	b2c9      	uxtb	r1, r1
    1c74:	7511      	strb	r1, [r2, #20]
			return STATUS_OK;
    1c76:	2000      	movs	r0, #0
    1c78:	e006      	b.n	1c88 <tc_set_count_value+0x30>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    1c7a:	b289      	uxth	r1, r1
    1c7c:	8291      	strh	r1, [r2, #20]
			return STATUS_OK;
    1c7e:	2000      	movs	r0, #0
    1c80:	e002      	b.n	1c88 <tc_set_count_value+0x30>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    1c82:	6151      	str	r1, [r2, #20]
			return STATUS_OK;
    1c84:	2000      	movs	r0, #0
    1c86:	e7ff      	b.n	1c88 <tc_set_count_value+0x30>

		default:
			return STATUS_ERR_INVALID_ARG;
	}
}
    1c88:	4770      	bx	lr
    1c8a:	46c0      	nop			; (mov r8, r8)

00001c8c <tc_reset>:
	/* Sanity check arguments  */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c8c:	6803      	ldr	r3, [r0, #0]

	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
    1c8e:	7ad9      	ldrb	r1, [r3, #11]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1c90:	2215      	movs	r2, #21
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
    1c92:	0789      	lsls	r1, r1, #30
    1c94:	d412      	bmi.n	1cbc <tc_reset+0x30>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}

	/* Disable this module if it is running */
	if (tc_module->CTRLA.reg & TC_CTRLA_ENABLE) {
    1c96:	681a      	ldr	r2, [r3, #0]
    1c98:	0792      	lsls	r2, r2, #30
    1c9a:	d50a      	bpl.n	1cb2 <tc_reset+0x26>
    1c9c:	691a      	ldr	r2, [r3, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1c9e:	2a00      	cmp	r2, #0
    1ca0:	d1fc      	bne.n	1c9c <tc_reset+0x10>
		/* Wait for sync */
	}

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    1ca2:	681a      	ldr	r2, [r3, #0]
    1ca4:	2102      	movs	r1, #2
    1ca6:	438a      	bics	r2, r1
    1ca8:	601a      	str	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1caa:	6801      	ldr	r1, [r0, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1cac:	690a      	ldr	r2, [r1, #16]
		tc_disable(module_inst);
		while (tc_is_syncing(module_inst)) {
    1cae:	2a00      	cmp	r2, #0
    1cb0:	d1fc      	bne.n	1cac <tc_reset+0x20>
			/* wait while module is disabling */
		}
	}

	/* Reset this TC module */
	tc_module->CTRLA.reg  |= TC_CTRLA_SWRST;
    1cb2:	6819      	ldr	r1, [r3, #0]
    1cb4:	2201      	movs	r2, #1
    1cb6:	430a      	orrs	r2, r1
    1cb8:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    1cba:	2200      	movs	r2, #0
}
    1cbc:	1c10      	adds	r0, r2, #0
    1cbe:	4770      	bx	lr

00001cc0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    1cc0:	e7fe      	b.n	1cc0 <Dummy_Handler>
    1cc2:	46c0      	nop			; (mov r8, r8)

00001cc4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1cc4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1cc6:	4b1d      	ldr	r3, [pc, #116]	; (1d3c <Reset_Handler+0x78>)
    1cc8:	4a1d      	ldr	r2, [pc, #116]	; (1d40 <Reset_Handler+0x7c>)
    1cca:	429a      	cmp	r2, r3
    1ccc:	d003      	beq.n	1cd6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1cce:	4b1d      	ldr	r3, [pc, #116]	; (1d44 <Reset_Handler+0x80>)
    1cd0:	4a1a      	ldr	r2, [pc, #104]	; (1d3c <Reset_Handler+0x78>)
    1cd2:	429a      	cmp	r2, r3
    1cd4:	d304      	bcc.n	1ce0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1cd6:	4b1c      	ldr	r3, [pc, #112]	; (1d48 <Reset_Handler+0x84>)
    1cd8:	4a1c      	ldr	r2, [pc, #112]	; (1d4c <Reset_Handler+0x88>)
    1cda:	429a      	cmp	r2, r3
    1cdc:	d310      	bcc.n	1d00 <Reset_Handler+0x3c>
    1cde:	e01e      	b.n	1d1e <Reset_Handler+0x5a>
    1ce0:	4a1b      	ldr	r2, [pc, #108]	; (1d50 <Reset_Handler+0x8c>)
    1ce2:	4b18      	ldr	r3, [pc, #96]	; (1d44 <Reset_Handler+0x80>)
    1ce4:	3303      	adds	r3, #3
    1ce6:	1a9b      	subs	r3, r3, r2
    1ce8:	089b      	lsrs	r3, r3, #2
    1cea:	3301      	adds	r3, #1
    1cec:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1cee:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1cf0:	4812      	ldr	r0, [pc, #72]	; (1d3c <Reset_Handler+0x78>)
    1cf2:	4913      	ldr	r1, [pc, #76]	; (1d40 <Reset_Handler+0x7c>)
    1cf4:	588c      	ldr	r4, [r1, r2]
    1cf6:	5084      	str	r4, [r0, r2]
    1cf8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1cfa:	429a      	cmp	r2, r3
    1cfc:	d1fa      	bne.n	1cf4 <Reset_Handler+0x30>
    1cfe:	e7ea      	b.n	1cd6 <Reset_Handler+0x12>
    1d00:	4a14      	ldr	r2, [pc, #80]	; (1d54 <Reset_Handler+0x90>)
    1d02:	4b11      	ldr	r3, [pc, #68]	; (1d48 <Reset_Handler+0x84>)
    1d04:	3303      	adds	r3, #3
    1d06:	1a9b      	subs	r3, r3, r2
    1d08:	089b      	lsrs	r3, r3, #2
    1d0a:	3301      	adds	r3, #1
    1d0c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1d0e:	2200      	movs	r2, #0
                *pDest++ = 0;
    1d10:	480e      	ldr	r0, [pc, #56]	; (1d4c <Reset_Handler+0x88>)
    1d12:	2100      	movs	r1, #0
    1d14:	1814      	adds	r4, r2, r0
    1d16:	6021      	str	r1, [r4, #0]
    1d18:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1d1a:	429a      	cmp	r2, r3
    1d1c:	d1fa      	bne.n	1d14 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1d1e:	4a0e      	ldr	r2, [pc, #56]	; (1d58 <Reset_Handler+0x94>)
    1d20:	21ff      	movs	r1, #255	; 0xff
    1d22:	4b0e      	ldr	r3, [pc, #56]	; (1d5c <Reset_Handler+0x98>)
    1d24:	438b      	bics	r3, r1
    1d26:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1d28:	4a0d      	ldr	r2, [pc, #52]	; (1d60 <Reset_Handler+0x9c>)
    1d2a:	6851      	ldr	r1, [r2, #4]
    1d2c:	2380      	movs	r3, #128	; 0x80
    1d2e:	430b      	orrs	r3, r1
    1d30:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1d32:	4b0c      	ldr	r3, [pc, #48]	; (1d64 <Reset_Handler+0xa0>)
    1d34:	4798      	blx	r3

        /* Branch to main function */
        main();
    1d36:	4b0c      	ldr	r3, [pc, #48]	; (1d68 <Reset_Handler+0xa4>)
    1d38:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1d3a:	e7fe      	b.n	1d3a <Reset_Handler+0x76>
    1d3c:	20000000 	.word	0x20000000
    1d40:	0000d7b0 	.word	0x0000d7b0
    1d44:	200000ac 	.word	0x200000ac
    1d48:	20002278 	.word	0x20002278
    1d4c:	200000ac 	.word	0x200000ac
    1d50:	20000004 	.word	0x20000004
    1d54:	200000b0 	.word	0x200000b0
    1d58:	e000ed00 	.word	0xe000ed00
    1d5c:	00000000 	.word	0x00000000
    1d60:	41004000 	.word	0x41004000
    1d64:	00008391 	.word	0x00008391
    1d68:	00003da9 	.word	0x00003da9

00001d6c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d6e:	4647      	mov	r7, r8
    1d70:	b480      	push	{r7}
    1d72:	1c0c      	adds	r4, r1, #0
    1d74:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1d76:	2800      	cmp	r0, #0
    1d78:	d110      	bne.n	1d9c <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
    1d7a:	2a00      	cmp	r2, #0
    1d7c:	dd0a      	ble.n	1d94 <_read+0x28>
    1d7e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1d80:	4e09      	ldr	r6, [pc, #36]	; (1da8 <_read+0x3c>)
    1d82:	4d0a      	ldr	r5, [pc, #40]	; (1dac <_read+0x40>)
    1d84:	6830      	ldr	r0, [r6, #0]
    1d86:	1c21      	adds	r1, r4, #0
    1d88:	682b      	ldr	r3, [r5, #0]
    1d8a:	4798      	blx	r3
		ptr++;
    1d8c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1d8e:	42bc      	cmp	r4, r7
    1d90:	d1f8      	bne.n	1d84 <_read+0x18>
    1d92:	e001      	b.n	1d98 <_read+0x2c>
    1d94:	2300      	movs	r3, #0
    1d96:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    1d98:	4640      	mov	r0, r8
    1d9a:	e001      	b.n	1da0 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    1d9c:	2001      	movs	r0, #1
    1d9e:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    1da0:	bc04      	pop	{r2}
    1da2:	4690      	mov	r8, r2
    1da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	20000e80 	.word	0x20000e80
    1dac:	20000e78 	.word	0x20000e78

00001db0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1db2:	4647      	mov	r7, r8
    1db4:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1db6:	3801      	subs	r0, #1
    1db8:	2802      	cmp	r0, #2
    1dba:	d815      	bhi.n	1de8 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
    1dbc:	2a00      	cmp	r2, #0
    1dbe:	d010      	beq.n	1de2 <_write+0x32>
    1dc0:	1c15      	adds	r5, r2, #0
    1dc2:	1c0e      	adds	r6, r1, #0
    1dc4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1dc6:	4b0c      	ldr	r3, [pc, #48]	; (1df8 <_write+0x48>)
    1dc8:	4698      	mov	r8, r3
    1dca:	4f0c      	ldr	r7, [pc, #48]	; (1dfc <_write+0x4c>)
    1dcc:	4643      	mov	r3, r8
    1dce:	6818      	ldr	r0, [r3, #0]
    1dd0:	5d31      	ldrb	r1, [r6, r4]
    1dd2:	683b      	ldr	r3, [r7, #0]
    1dd4:	4798      	blx	r3
    1dd6:	2800      	cmp	r0, #0
    1dd8:	db09      	blt.n	1dee <_write+0x3e>
			return -1;
		}
		++nChars;
    1dda:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1ddc:	42a5      	cmp	r5, r4
    1dde:	d1f5      	bne.n	1dcc <_write+0x1c>
    1de0:	e000      	b.n	1de4 <_write+0x34>
    1de2:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    1de4:	1c20      	adds	r0, r4, #0
    1de6:	e004      	b.n	1df2 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    1de8:	2001      	movs	r0, #1
    1dea:	4240      	negs	r0, r0
    1dec:	e001      	b.n	1df2 <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    1dee:	2001      	movs	r0, #1
    1df0:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    1df2:	bc04      	pop	{r2}
    1df4:	4690      	mov	r8, r2
    1df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1df8:	20000e80 	.word	0x20000e80
    1dfc:	20000e7c 	.word	0x20000e7c

00001e00 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1e00:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1e02:	4a06      	ldr	r2, [pc, #24]	; (1e1c <_sbrk+0x1c>)
    1e04:	6812      	ldr	r2, [r2, #0]
    1e06:	2a00      	cmp	r2, #0
    1e08:	d102      	bne.n	1e10 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    1e0a:	4905      	ldr	r1, [pc, #20]	; (1e20 <_sbrk+0x20>)
    1e0c:	4a03      	ldr	r2, [pc, #12]	; (1e1c <_sbrk+0x1c>)
    1e0e:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    1e10:	4a02      	ldr	r2, [pc, #8]	; (1e1c <_sbrk+0x1c>)
    1e12:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1e14:	18c3      	adds	r3, r0, r3
    1e16:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1e18:	4770      	bx	lr
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	20000104 	.word	0x20000104
    1e20:	20004278 	.word	0x20004278

00001e24 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1e24:	2001      	movs	r0, #1
    1e26:	4240      	negs	r0, r0
    1e28:	4770      	bx	lr
    1e2a:	46c0      	nop			; (mov r8, r8)

00001e2c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1e2c:	2380      	movs	r3, #128	; 0x80
    1e2e:	019b      	lsls	r3, r3, #6
    1e30:	604b      	str	r3, [r1, #4]

	return 0;
}
    1e32:	2000      	movs	r0, #0
    1e34:	4770      	bx	lr
    1e36:	46c0      	nop			; (mov r8, r8)

00001e38 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1e38:	2001      	movs	r0, #1
    1e3a:	4770      	bx	lr

00001e3c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1e3c:	2000      	movs	r0, #0
    1e3e:	4770      	bx	lr

00001e40 <csc_prf_disconnect_event_handler>:
* \CSC device disconnected handler function
*/

at_ble_status_t csc_prf_disconnect_event_handler(void *params)
{
	app_csc_info.devicedb = false;
    1e40:	2200      	movs	r2, #0
    1e42:	4b02      	ldr	r3, [pc, #8]	; (1e4c <csc_prf_disconnect_event_handler+0xc>)
    1e44:	719a      	strb	r2, [r3, #6]
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
    1e46:	2000      	movs	r0, #0
    1e48:	4770      	bx	lr
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	20000e84 	.word	0x20000e84

00001e50 <csc_notification_confirmation_handler>:
	} else {
		DBG_LOG_DEV("Sending Notification over the air failed");
		DBG_LOG_DEV("\r\n");
	}
	return AT_BLE_SUCCESS;
}
    1e50:	2000      	movs	r0, #0
    1e52:	4770      	bx	lr

00001e54 <csc_prf_notification_handler>:

/**
 * @brief invoked by ble manager on receiving notification
 */
at_ble_status_t csc_prf_notification_handler(void *params)
{
    1e54:	b508      	push	{r3, lr}
	 //gpio for voltage booster start
	 DBG_LOG("Notify received");
    1e56:	4806      	ldr	r0, [pc, #24]	; (1e70 <csc_prf_notification_handler+0x1c>)
    1e58:	4b06      	ldr	r3, [pc, #24]	; (1e74 <csc_prf_notification_handler+0x20>)
    1e5a:	4798      	blx	r3
    1e5c:	4806      	ldr	r0, [pc, #24]	; (1e78 <csc_prf_notification_handler+0x24>)
    1e5e:	4b07      	ldr	r3, [pc, #28]	; (1e7c <csc_prf_notification_handler+0x28>)
    1e60:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1e62:	2280      	movs	r2, #128	; 0x80
    1e64:	00d2      	lsls	r2, r2, #3
    1e66:	4b06      	ldr	r3, [pc, #24]	; (1e80 <csc_prf_notification_handler+0x2c>)
    1e68:	61da      	str	r2, [r3, #28]
	 //port_pin_toggle_output_level(EXT3_PIN_GPIO_0);
	 port_pin_toggle_output_level(LED_0_PIN);
	 
	 
	return AT_BLE_SUCCESS;
}
    1e6a:	2000      	movs	r0, #0
    1e6c:	bd08      	pop	{r3, pc}
    1e6e:	46c0      	nop			; (mov r8, r8)
    1e70:	000096ac 	.word	0x000096ac
    1e74:	0000853d 	.word	0x0000853d
    1e78:	000096b0 	.word	0x000096b0
    1e7c:	0000841d 	.word	0x0000841d
    1e80:	40002880 	.word	0x40002880

00001e84 <csc_prf_service_found_handler>:

/**
 * @brief Service found handler invoked by ble manager
 */
at_ble_status_t csc_prf_service_found_handler(void * params)
{
    1e84:	b508      	push	{r3, lr}
    1e86:	1c01      	adds	r1, r0, #0
	DBG_LOG_DEV("Service Found handler");
	memcpy((uint8_t *)&app_csc_info.csc_serv, params, sizeof(at_ble_primary_service_found_t));
    1e88:	4802      	ldr	r0, [pc, #8]	; (1e94 <csc_prf_service_found_handler+0x10>)
    1e8a:	2218      	movs	r2, #24
    1e8c:	4b02      	ldr	r3, [pc, #8]	; (1e98 <csc_prf_service_found_handler+0x14>)
    1e8e:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
    1e90:	2000      	movs	r0, #0
    1e92:	bd08      	pop	{r3, pc}
    1e94:	20000e9e 	.word	0x20000e9e
    1e98:	000083fb 	.word	0x000083fb

00001e9c <csc_prf_characteristic_found_handler>:

/**
 * @brief characteristic found handler invoked by ble manager
 */
at_ble_status_t csc_prf_characteristic_found_handler(void *params)
{
    1e9c:	b508      	push	{r3, lr}
    1e9e:	1c01      	adds	r1, r0, #0
	memcpy((uint8_t *)&app_csc_info.csc_char, params, sizeof(at_ble_characteristic_found_t));
    1ea0:	4802      	ldr	r0, [pc, #8]	; (1eac <csc_prf_characteristic_found_handler+0x10>)
    1ea2:	2218      	movs	r2, #24
    1ea4:	4b02      	ldr	r3, [pc, #8]	; (1eb0 <csc_prf_characteristic_found_handler+0x14>)
    1ea6:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
    1ea8:	2000      	movs	r0, #0
    1eaa:	bd08      	pop	{r3, pc}
    1eac:	20000eb6 	.word	0x20000eb6
    1eb0:	000083fb 	.word	0x000083fb

00001eb4 <csc_prf_descriptor_found_handler>:

/**
 * @brief client descriptor found handler invoked by ble manager
 */
at_ble_status_t csc_prf_descriptor_found_handler(void *params)
{
    1eb4:	b508      	push	{r3, lr}
    1eb6:	1c01      	adds	r1, r0, #0
		memcpy((uint8_t *)&app_csc_info.csc_desc, params, sizeof(at_ble_descriptor_found_t));
    1eb8:	4802      	ldr	r0, [pc, #8]	; (1ec4 <csc_prf_descriptor_found_handler+0x10>)
    1eba:	2216      	movs	r2, #22
    1ebc:	4b02      	ldr	r3, [pc, #8]	; (1ec8 <csc_prf_descriptor_found_handler+0x14>)
    1ebe:	4798      	blx	r3
		return AT_BLE_SUCCESS;
}
    1ec0:	2000      	movs	r0, #0
    1ec2:	bd08      	pop	{r3, pc}
    1ec4:	20000ece 	.word	0x20000ece
    1ec8:	000083fb 	.word	0x000083fb

00001ecc <csc_prf_char_changed_handler>:

/**
* \Service characteristic change handler function
*/
at_ble_status_t csc_prf_char_changed_handler(void *params)
{
    1ecc:	b580      	push	{r7, lr}
    1ece:	4f09      	ldr	r7, [pc, #36]	; (1ef4 <csc_prf_char_changed_handler+0x28>)
    1ed0:	44bd      	add	sp, r7
    1ed2:	1c01      	adds	r1, r0, #0
	at_ble_characteristic_changed_t change_params;
	memcpy((uint8_t *)&change_params, params, sizeof(at_ble_characteristic_changed_t));
    1ed4:	a801      	add	r0, sp, #4
    1ed6:	4a08      	ldr	r2, [pc, #32]	; (1ef8 <csc_prf_char_changed_handler+0x2c>)
    1ed8:	4b08      	ldr	r3, [pc, #32]	; (1efc <csc_prf_char_changed_handler+0x30>)
    1eda:	4798      	blx	r3
	DBG_LOG("Characteristic changed");
    1edc:	4808      	ldr	r0, [pc, #32]	; (1f00 <csc_prf_char_changed_handler+0x34>)
    1ede:	4b09      	ldr	r3, [pc, #36]	; (1f04 <csc_prf_char_changed_handler+0x38>)
    1ee0:	4798      	blx	r3
    1ee2:	4809      	ldr	r0, [pc, #36]	; (1f08 <csc_prf_char_changed_handler+0x3c>)
    1ee4:	4b09      	ldr	r3, [pc, #36]	; (1f0c <csc_prf_char_changed_handler+0x40>)
    1ee6:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
    1ee8:	2000      	movs	r0, #0
    1eea:	2384      	movs	r3, #132	; 0x84
    1eec:	009b      	lsls	r3, r3, #2
    1eee:	449d      	add	sp, r3
    1ef0:	bd80      	pop	{r7, pc}
    1ef2:	46c0      	nop			; (mov r8, r8)
    1ef4:	fffffdf0 	.word	0xfffffdf0
    1ef8:	0000020a 	.word	0x0000020a
    1efc:	000083fb 	.word	0x000083fb
    1f00:	000096ac 	.word	0x000096ac
    1f04:	0000853d 	.word	0x0000853d
    1f08:	000096c0 	.word	0x000096c0
    1f0c:	0000841d 	.word	0x0000841d

00001f10 <csc_prf_connected_state_handler>:

/**
 * @brief Connection handler invoked by ble manager
 */
at_ble_status_t csc_prf_connected_state_handler(void *params)
{
    1f10:	b510      	push	{r4, lr}
    1f12:	1c01      	adds	r1, r0, #0
	at_ble_status_t status;
	memcpy((uint8_t *)&app_csc_info.conn_params, params, sizeof(at_ble_connected_t));
    1f14:	4c16      	ldr	r4, [pc, #88]	; (1f70 <csc_prf_connected_state_handler+0x60>)
    1f16:	1c20      	adds	r0, r4, #0
    1f18:	2212      	movs	r2, #18
    1f1a:	4b16      	ldr	r3, [pc, #88]	; (1f74 <csc_prf_connected_state_handler+0x64>)
    1f1c:	4798      	blx	r3
	if(!app_csc_info.devicedb){		
    1f1e:	3c08      	subs	r4, #8
    1f20:	79a3      	ldrb	r3, [r4, #6]
    1f22:	2b00      	cmp	r3, #0
    1f24:	d122      	bne.n	1f6c <csc_prf_connected_state_handler+0x5c>
		app_csc_info.discover_role = DISCOVER_SERVICE;	
    1f26:	4c14      	ldr	r4, [pc, #80]	; (1f78 <csc_prf_connected_state_handler+0x68>)
    1f28:	3301      	adds	r3, #1
    1f2a:	71e3      	strb	r3, [r4, #7]
		app_csc_info.csc_serv.service_uuid.type = AT_BLE_UUID_128;
    1f2c:	2202      	movs	r2, #2
    1f2e:	331f      	adds	r3, #31
    1f30:	54e2      	strb	r2, [r4, r3]
		memcpy(&app_csc_info.csc_serv.service_uuid.uuid[0], PNDCS_START_SERVICE_UUID, CSC_UUID_128_LEN);
    1f32:	1c20      	adds	r0, r4, #0
    1f34:	3021      	adds	r0, #33	; 0x21
    1f36:	4911      	ldr	r1, [pc, #68]	; (1f7c <csc_prf_connected_state_handler+0x6c>)
    1f38:	320e      	adds	r2, #14
    1f3a:	4b0e      	ldr	r3, [pc, #56]	; (1f74 <csc_prf_connected_state_handler+0x64>)
    1f3c:	4798      	blx	r3
		/* Discover Remote Service by service UUID */
		status = at_ble_primary_service_discover_by_uuid(app_csc_info.conn_params.handle,START_HANDLE, END_HANDLE, &app_csc_info.csc_serv.service_uuid);
    1f3e:	8a20      	ldrh	r0, [r4, #16]
    1f40:	1c23      	adds	r3, r4, #0
    1f42:	3320      	adds	r3, #32
    1f44:	2101      	movs	r1, #1
    1f46:	4a0e      	ldr	r2, [pc, #56]	; (1f80 <csc_prf_connected_state_handler+0x70>)
    1f48:	4c0e      	ldr	r4, [pc, #56]	; (1f84 <csc_prf_connected_state_handler+0x74>)
    1f4a:	47a0      	blx	r4
    1f4c:	1e04      	subs	r4, r0, #0
		if(status != AT_BLE_SUCCESS){
    1f4e:	d007      	beq.n	1f60 <csc_prf_connected_state_handler+0x50>
			DBG_LOG("Failed to start service discovery. status = %d", status);
    1f50:	480d      	ldr	r0, [pc, #52]	; (1f88 <csc_prf_connected_state_handler+0x78>)
    1f52:	4b0e      	ldr	r3, [pc, #56]	; (1f8c <csc_prf_connected_state_handler+0x7c>)
    1f54:	4798      	blx	r3
    1f56:	480e      	ldr	r0, [pc, #56]	; (1f90 <csc_prf_connected_state_handler+0x80>)
    1f58:	1c21      	adds	r1, r4, #0
    1f5a:	4b0e      	ldr	r3, [pc, #56]	; (1f94 <csc_prf_connected_state_handler+0x84>)
    1f5c:	4798      	blx	r3
    1f5e:	e005      	b.n	1f6c <csc_prf_connected_state_handler+0x5c>
		} else {
			DBG_LOG("Started service discovery");
    1f60:	4809      	ldr	r0, [pc, #36]	; (1f88 <csc_prf_connected_state_handler+0x78>)
    1f62:	4b0a      	ldr	r3, [pc, #40]	; (1f8c <csc_prf_connected_state_handler+0x7c>)
    1f64:	4798      	blx	r3
    1f66:	480c      	ldr	r0, [pc, #48]	; (1f98 <csc_prf_connected_state_handler+0x88>)
    1f68:	4b0a      	ldr	r3, [pc, #40]	; (1f94 <csc_prf_connected_state_handler+0x84>)
    1f6a:	4798      	blx	r3
		}		
	}
	return AT_BLE_SUCCESS;
}
    1f6c:	2000      	movs	r0, #0
    1f6e:	bd10      	pop	{r4, pc}
    1f70:	20000e8c 	.word	0x20000e8c
    1f74:	000083fb 	.word	0x000083fb
    1f78:	20000e84 	.word	0x20000e84
    1f7c:	000096d8 	.word	0x000096d8
    1f80:	0000ffff 	.word	0x0000ffff
    1f84:	00004be9 	.word	0x00004be9
    1f88:	000096ac 	.word	0x000096ac
    1f8c:	0000853d 	.word	0x0000853d
    1f90:	000096ec 	.word	0x000096ec
    1f94:	0000841d 	.word	0x0000841d
    1f98:	0000971c 	.word	0x0000971c

00001f9c <csc_prf_discovery_complete_handler>:

/**
 * @brief Discovery Complete handler invoked by ble manager
 */
at_ble_status_t csc_prf_discovery_complete_handler(void *params)
{
    1f9c:	b530      	push	{r4, r5, lr}
    1f9e:	b085      	sub	sp, #20
    1fa0:	1c01      	adds	r1, r0, #0
		at_ble_discovery_complete_t discover_status;
		memcpy((uint8_t *)&discover_status, params, sizeof(at_ble_discovery_complete_t));
    1fa2:	ac03      	add	r4, sp, #12
    1fa4:	1c20      	adds	r0, r4, #0
    1fa6:	2204      	movs	r2, #4
    1fa8:	4b27      	ldr	r3, [pc, #156]	; (2048 <STACK_SIZE+0x48>)
    1faa:	4798      	blx	r3
		if(discover_status.status == AT_DISCOVER_SUCCESS){
    1fac:	78e3      	ldrb	r3, [r4, #3]
    1fae:	2b0a      	cmp	r3, #10
    1fb0:	d146      	bne.n	2040 <STACK_SIZE+0x40>
			if(discover_status.operation == AT_BLE_DISC_BY_UUID_SVC){
    1fb2:	ab03      	add	r3, sp, #12
    1fb4:	789b      	ldrb	r3, [r3, #2]
    1fb6:	2b03      	cmp	r3, #3
    1fb8:	d12c      	bne.n	2014 <STACK_SIZE+0x14>
				DBG_LOG("Discover Service Info:\r\n -->ConnHandle 0x%02x\r\n -->start handle 0x%02x\r\n -->End handle : 0x%02x\r\n  --> UUID 0x%d%d",
    1fba:	4824      	ldr	r0, [pc, #144]	; (204c <STACK_SIZE+0x4c>)
    1fbc:	4b24      	ldr	r3, [pc, #144]	; (2050 <STACK_SIZE+0x50>)
    1fbe:	4798      	blx	r3
				app_csc_info.csc_serv.conn_handle,
    1fc0:	4c24      	ldr	r4, [pc, #144]	; (2054 <STACK_SIZE+0x54>)
{
		at_ble_discovery_complete_t discover_status;
		memcpy((uint8_t *)&discover_status, params, sizeof(at_ble_discovery_complete_t));
		if(discover_status.status == AT_DISCOVER_SUCCESS){
			if(discover_status.operation == AT_BLE_DISC_BY_UUID_SVC){
				DBG_LOG("Discover Service Info:\r\n -->ConnHandle 0x%02x\r\n -->start handle 0x%02x\r\n -->End handle : 0x%02x\r\n  --> UUID 0x%d%d",
    1fc2:	8b61      	ldrh	r1, [r4, #26]
    1fc4:	8ba2      	ldrh	r2, [r4, #28]
    1fc6:	8be3      	ldrh	r3, [r4, #30]
				app_csc_info.csc_serv.conn_handle,
				app_csc_info.csc_serv.start_handle,
				app_csc_info.csc_serv.end_handle,
				app_csc_info.csc_serv.service_uuid.uuid[0],
    1fc8:	2021      	movs	r0, #33	; 0x21
{
		at_ble_discovery_complete_t discover_status;
		memcpy((uint8_t *)&discover_status, params, sizeof(at_ble_discovery_complete_t));
		if(discover_status.status == AT_DISCOVER_SUCCESS){
			if(discover_status.operation == AT_BLE_DISC_BY_UUID_SVC){
				DBG_LOG("Discover Service Info:\r\n -->ConnHandle 0x%02x\r\n -->start handle 0x%02x\r\n -->End handle : 0x%02x\r\n  --> UUID 0x%d%d",
    1fca:	5c20      	ldrb	r0, [r4, r0]
    1fcc:	9000      	str	r0, [sp, #0]
				app_csc_info.csc_serv.conn_handle,
				app_csc_info.csc_serv.start_handle,
				app_csc_info.csc_serv.end_handle,
				app_csc_info.csc_serv.service_uuid.uuid[0],
				app_csc_info.csc_serv.service_uuid.uuid[1]);
    1fce:	2022      	movs	r0, #34	; 0x22
{
		at_ble_discovery_complete_t discover_status;
		memcpy((uint8_t *)&discover_status, params, sizeof(at_ble_discovery_complete_t));
		if(discover_status.status == AT_DISCOVER_SUCCESS){
			if(discover_status.operation == AT_BLE_DISC_BY_UUID_SVC){
				DBG_LOG("Discover Service Info:\r\n -->ConnHandle 0x%02x\r\n -->start handle 0x%02x\r\n -->End handle : 0x%02x\r\n  --> UUID 0x%d%d",
    1fd0:	5c20      	ldrb	r0, [r4, r0]
    1fd2:	9001      	str	r0, [sp, #4]
    1fd4:	4820      	ldr	r0, [pc, #128]	; (2058 <STACK_SIZE+0x58>)
    1fd6:	4d21      	ldr	r5, [pc, #132]	; (205c <STACK_SIZE+0x5c>)
    1fd8:	47a8      	blx	r5
				app_csc_info.csc_serv.conn_handle,
				app_csc_info.csc_serv.start_handle,
				app_csc_info.csc_serv.end_handle,
				app_csc_info.csc_serv.service_uuid.uuid[0],
				app_csc_info.csc_serv.service_uuid.uuid[1]);
				memcpy(&app_csc_info.csc_char.char_uuid.uuid[0], PNDCS_CHAR_START_UUID, CSC_UUID_128_LEN);				
    1fda:	1c20      	adds	r0, r4, #0
    1fdc:	303a      	adds	r0, #58	; 0x3a
    1fde:	4920      	ldr	r1, [pc, #128]	; (2060 <STACK_SIZE+0x60>)
    1fe0:	2210      	movs	r2, #16
    1fe2:	4b19      	ldr	r3, [pc, #100]	; (2048 <STACK_SIZE+0x48>)
    1fe4:	4798      	blx	r3
				if(at_ble_characteristic_discover_by_uuid(app_csc_info.conn_params.handle, START_HANDLE, END_HANDLE, &app_csc_info.csc_char.char_uuid) != AT_BLE_SUCCESS){
    1fe6:	8a20      	ldrh	r0, [r4, #16]
    1fe8:	1c23      	adds	r3, r4, #0
    1fea:	3339      	adds	r3, #57	; 0x39
    1fec:	2101      	movs	r1, #1
    1fee:	4a1d      	ldr	r2, [pc, #116]	; (2064 <STACK_SIZE+0x64>)
    1ff0:	4c1d      	ldr	r4, [pc, #116]	; (2068 <STACK_SIZE+0x68>)
    1ff2:	47a0      	blx	r4
    1ff4:	2800      	cmp	r0, #0
    1ff6:	d006      	beq.n	2006 <STACK_SIZE+0x6>
					DBG_LOG("Fail to start discover characteristic");
    1ff8:	4814      	ldr	r0, [pc, #80]	; (204c <STACK_SIZE+0x4c>)
    1ffa:	4b15      	ldr	r3, [pc, #84]	; (2050 <STACK_SIZE+0x50>)
    1ffc:	4798      	blx	r3
    1ffe:	481b      	ldr	r0, [pc, #108]	; (206c <STACK_SIZE+0x6c>)
    2000:	4b16      	ldr	r3, [pc, #88]	; (205c <STACK_SIZE+0x5c>)
    2002:	4798      	blx	r3
    2004:	e01c      	b.n	2040 <STACK_SIZE+0x40>
				}
				else
				{
					DBG_LOG("Characterisitc discovery start");
    2006:	4811      	ldr	r0, [pc, #68]	; (204c <STACK_SIZE+0x4c>)
    2008:	4b11      	ldr	r3, [pc, #68]	; (2050 <STACK_SIZE+0x50>)
    200a:	4798      	blx	r3
    200c:	4818      	ldr	r0, [pc, #96]	; (2070 <STACK_SIZE+0x70>)
    200e:	4b13      	ldr	r3, [pc, #76]	; (205c <STACK_SIZE+0x5c>)
    2010:	4798      	blx	r3
    2012:	e015      	b.n	2040 <STACK_SIZE+0x40>
				}
			}
			else if(discover_status.operation == AT_BLE_DISC_BY_UUID_CHAR){
    2014:	2b06      	cmp	r3, #6
    2016:	d10e      	bne.n	2036 <STACK_SIZE+0x36>
				if(at_ble_descriptor_discover_all(app_csc_info.csc_char.conn_handle,START_HANDLE,END_HANDLE) != AT_BLE_SUCCESS){
    2018:	4b0e      	ldr	r3, [pc, #56]	; (2054 <STACK_SIZE+0x54>)
    201a:	8e58      	ldrh	r0, [r3, #50]	; 0x32
    201c:	2101      	movs	r1, #1
    201e:	4a11      	ldr	r2, [pc, #68]	; (2064 <STACK_SIZE+0x64>)
    2020:	4b14      	ldr	r3, [pc, #80]	; (2074 <STACK_SIZE+0x74>)
    2022:	4798      	blx	r3
    2024:	2800      	cmp	r0, #0
    2026:	d00b      	beq.n	2040 <STACK_SIZE+0x40>
					DBG_LOG("Descriptor Discovery Failed");
    2028:	4808      	ldr	r0, [pc, #32]	; (204c <STACK_SIZE+0x4c>)
    202a:	4b09      	ldr	r3, [pc, #36]	; (2050 <STACK_SIZE+0x50>)
    202c:	4798      	blx	r3
    202e:	4812      	ldr	r0, [pc, #72]	; (2078 <STACK_SIZE+0x78>)
    2030:	4b0a      	ldr	r3, [pc, #40]	; (205c <STACK_SIZE+0x5c>)
    2032:	4798      	blx	r3
    2034:	e004      	b.n	2040 <STACK_SIZE+0x40>
				}
			}
			else if(discover_status.operation == AT_BLE_DISC_DESC_CHAR){
    2036:	2b07      	cmp	r3, #7
    2038:	d102      	bne.n	2040 <STACK_SIZE+0x40>
				app_csc_info.devicedb = true;
    203a:	2201      	movs	r2, #1
    203c:	4b05      	ldr	r3, [pc, #20]	; (2054 <STACK_SIZE+0x54>)
    203e:	719a      	strb	r2, [r3, #6]
			}
		}
		return AT_BLE_SUCCESS;
}
    2040:	2000      	movs	r0, #0
    2042:	b005      	add	sp, #20
    2044:	bd30      	pop	{r4, r5, pc}
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	000083fb 	.word	0x000083fb
    204c:	000096ac 	.word	0x000096ac
    2050:	0000853d 	.word	0x0000853d
    2054:	20000e84 	.word	0x20000e84
    2058:	00009738 	.word	0x00009738
    205c:	0000841d 	.word	0x0000841d
    2060:	000097ac 	.word	0x000097ac
    2064:	0000ffff 	.word	0x0000ffff
    2068:	00004cc1 	.word	0x00004cc1
    206c:	000097c0 	.word	0x000097c0
    2070:	000097e8 	.word	0x000097e8
    2074:	00004d7d 	.word	0x00004d7d
    2078:	00009808 	.word	0x00009808

0000207c <csc_prf_write_notification_handler>:

/**
 * @brief invoked by ble manager for setting the notification 
 */
at_ble_status_t csc_prf_write_notification_handler(void *params)
{
    207c:	b5f0      	push	{r4, r5, r6, r7, lr}
    207e:	b087      	sub	sp, #28
	uint8_t data[2] = {1, 0};
    2080:	ac05      	add	r4, sp, #20
    2082:	2501      	movs	r5, #1
    2084:	7025      	strb	r5, [r4, #0]
    2086:	2600      	movs	r6, #0
    2088:	7066      	strb	r6, [r4, #1]
	DBG_LOG("\r\n");
    208a:	480e      	ldr	r0, [pc, #56]	; (20c4 <csc_prf_write_notification_handler+0x48>)
    208c:	4f0e      	ldr	r7, [pc, #56]	; (20c8 <csc_prf_write_notification_handler+0x4c>)
    208e:	47b8      	blx	r7
    2090:	480c      	ldr	r0, [pc, #48]	; (20c4 <csc_prf_write_notification_handler+0x48>)
    2092:	47b8      	blx	r7
	if(at_ble_characteristic_write(app_csc_info.csc_desc.conn_handle, app_csc_info.csc_desc.desc_handle, 0, 2, data, false, true) == AT_BLE_FAILURE){
    2094:	4b0d      	ldr	r3, [pc, #52]	; (20cc <csc_prf_write_notification_handler+0x50>)
    2096:	224a      	movs	r2, #74	; 0x4a
    2098:	5a98      	ldrh	r0, [r3, r2]
    209a:	3202      	adds	r2, #2
    209c:	5a99      	ldrh	r1, [r3, r2]
    209e:	9400      	str	r4, [sp, #0]
    20a0:	9601      	str	r6, [sp, #4]
    20a2:	9502      	str	r5, [sp, #8]
    20a4:	2200      	movs	r2, #0
    20a6:	2302      	movs	r3, #2
    20a8:	4c09      	ldr	r4, [pc, #36]	; (20d0 <csc_prf_write_notification_handler+0x54>)
    20aa:	47a0      	blx	r4
    20ac:	28e2      	cmp	r0, #226	; 0xe2
    20ae:	d105      	bne.n	20bc <csc_prf_write_notification_handler+0x40>
		DBG_LOG("\r\nFailed to send characteristic Write Request");
    20b0:	4804      	ldr	r0, [pc, #16]	; (20c4 <csc_prf_write_notification_handler+0x48>)
    20b2:	4b05      	ldr	r3, [pc, #20]	; (20c8 <csc_prf_write_notification_handler+0x4c>)
    20b4:	4798      	blx	r3
    20b6:	4807      	ldr	r0, [pc, #28]	; (20d4 <csc_prf_write_notification_handler+0x58>)
    20b8:	4b07      	ldr	r3, [pc, #28]	; (20d8 <csc_prf_write_notification_handler+0x5c>)
    20ba:	4798      	blx	r3
	}
	UNUSED(params);
	return AT_BLE_SUCCESS;
}
    20bc:	2000      	movs	r0, #0
    20be:	b007      	add	sp, #28
    20c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20c2:	46c0      	nop			; (mov r8, r8)
    20c4:	000096ac 	.word	0x000096ac
    20c8:	0000853d 	.word	0x0000853d
    20cc:	20000e84 	.word	0x20000e84
    20d0:	00004dcd 	.word	0x00004dcd
    20d4:	00009824 	.word	0x00009824
    20d8:	0000841d 	.word	0x0000841d

000020dc <pndcs_prf_buf_init>:
/**
* \CSC buffer initialization function
*/
void pndcs_prf_buf_init(uint8_t *databuf, uint16_t datalen)
{
	app_csc_info.buff_ptr = databuf;
    20dc:	4b01      	ldr	r3, [pc, #4]	; (20e4 <pndcs_prf_buf_init+0x8>)
    20de:	6018      	str	r0, [r3, #0]
	app_csc_info.buff_len = datalen;
    20e0:	8099      	strh	r1, [r3, #4]
}
    20e2:	4770      	bx	lr
    20e4:	20000e84 	.word	0x20000e84

000020e8 <pndcs_prf_init>:

/**
* \CSC profile initialization function
*/
void pndcs_prf_init(void *param)
{ 
    20e8:	b510      	push	{r4, lr}
	at_ble_status_t status;
	
	if((status = pndcs_init_service(app_csc_info.buff_ptr, app_csc_info.buff_len))!= AT_BLE_SUCCESS)
    20ea:	4b13      	ldr	r3, [pc, #76]	; (2138 <pndcs_prf_init+0x50>)
    20ec:	6818      	ldr	r0, [r3, #0]
    20ee:	8899      	ldrh	r1, [r3, #4]
    20f0:	4b12      	ldr	r3, [pc, #72]	; (213c <pndcs_prf_init+0x54>)
    20f2:	4798      	blx	r3
    20f4:	2800      	cmp	r0, #0
    20f6:	d005      	beq.n	2104 <pndcs_prf_init+0x1c>
	{
		DBG_LOG("can not initialize service");
    20f8:	4811      	ldr	r0, [pc, #68]	; (2140 <pndcs_prf_init+0x58>)
    20fa:	4b12      	ldr	r3, [pc, #72]	; (2144 <pndcs_prf_init+0x5c>)
    20fc:	4798      	blx	r3
    20fe:	4812      	ldr	r0, [pc, #72]	; (2148 <pndcs_prf_init+0x60>)
    2100:	4b12      	ldr	r3, [pc, #72]	; (214c <pndcs_prf_init+0x64>)
    2102:	4798      	blx	r3
	}
	
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
    2104:	2000      	movs	r0, #0
    2106:	2100      	movs	r1, #0
    2108:	4a11      	ldr	r2, [pc, #68]	; (2150 <pndcs_prf_init+0x68>)
    210a:	4c12      	ldr	r4, [pc, #72]	; (2154 <pndcs_prf_init+0x6c>)
    210c:	47a0      	blx	r4
	BLE_GAP_EVENT_TYPE,
	pndcs_prf_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
    210e:	2000      	movs	r0, #0
    2110:	2101      	movs	r1, #1
    2112:	4a11      	ldr	r2, [pc, #68]	; (2158 <pndcs_prf_init+0x70>)
    2114:	47a0      	blx	r4
	BLE_GATT_CLIENT_EVENT_TYPE,
	pndcs_prf_gatt_client_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
    2116:	2000      	movs	r0, #0
    2118:	2102      	movs	r1, #2
    211a:	4a10      	ldr	r2, [pc, #64]	; (215c <pndcs_prf_init+0x74>)
    211c:	47a0      	blx	r4
	BLE_GATT_SERVER_EVENT_TYPE,
	pndcs_prf_gatt_server_handle);
	
	status = ble_advertisement_data_set();
    211e:	4b10      	ldr	r3, [pc, #64]	; (2160 <pndcs_prf_init+0x78>)
    2120:	4798      	blx	r3
    2122:	1e04      	subs	r4, r0, #0
	if (status != AT_BLE_SUCCESS) {
    2124:	d006      	beq.n	2134 <pndcs_prf_init+0x4c>
		DBG_LOG("Advertisement data set failed reason %d",status);
    2126:	4806      	ldr	r0, [pc, #24]	; (2140 <pndcs_prf_init+0x58>)
    2128:	4b06      	ldr	r3, [pc, #24]	; (2144 <pndcs_prf_init+0x5c>)
    212a:	4798      	blx	r3
    212c:	480d      	ldr	r0, [pc, #52]	; (2164 <pndcs_prf_init+0x7c>)
    212e:	1c21      	adds	r1, r4, #0
    2130:	4b06      	ldr	r3, [pc, #24]	; (214c <pndcs_prf_init+0x64>)
    2132:	4798      	blx	r3
	}
    ALL_UNUSED(param);
}
    2134:	bd10      	pop	{r4, pc}
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	20000e84 	.word	0x20000e84
    213c:	0000334d 	.word	0x0000334d
    2140:	000096ac 	.word	0x000096ac
    2144:	0000853d 	.word	0x0000853d
    2148:	00009854 	.word	0x00009854
    214c:	0000841d 	.word	0x0000841d
    2150:	00009638 	.word	0x00009638
    2154:	00002a55 	.word	0x00002a55
    2158:	00009898 	.word	0x00009898
    215c:	00009684 	.word	0x00009684
    2160:	00003275 	.word	0x00003275
    2164:	00009870 	.word	0x00009870

00002168 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
    2168:	2000      	movs	r0, #0
    216a:	4770      	bx	lr

0000216c <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
    216c:	2000      	movs	r0, #0
    216e:	4770      	bx	lr

00002170 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
    2170:	78c0      	ldrb	r0, [r0, #3]
    2172:	2800      	cmp	r0, #0
    2174:	d000      	beq.n	2178 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
    2176:	20e2      	movs	r0, #226	; 0xe2
}
    2178:	4770      	bx	lr
    217a:	46c0      	nop			; (mov r8, r8)

0000217c <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
    217c:	2000      	movs	r0, #0
    217e:	4770      	bx	lr

00002180 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
    2180:	b508      	push	{r3, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
    2182:	7800      	ldrb	r0, [r0, #0]
    2184:	2800      	cmp	r0, #0
    2186:	d006      	beq.n	2196 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
    2188:	4803      	ldr	r0, [pc, #12]	; (2198 <ble_scan_report_handler+0x18>)
    218a:	4b04      	ldr	r3, [pc, #16]	; (219c <ble_scan_report_handler+0x1c>)
    218c:	4798      	blx	r3
    218e:	4804      	ldr	r0, [pc, #16]	; (21a0 <ble_scan_report_handler+0x20>)
    2190:	4b04      	ldr	r3, [pc, #16]	; (21a4 <ble_scan_report_handler+0x24>)
    2192:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
    2194:	20e2      	movs	r0, #226	; 0xe2
}
    2196:	bd08      	pop	{r3, pc}
    2198:	000096ac 	.word	0x000096ac
    219c:	0000853d 	.word	0x0000853d
    21a0:	00009a78 	.word	0x00009a78
    21a4:	0000841d 	.word	0x0000841d

000021a8 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
    21a8:	b510      	push	{r4, lr}
    21aa:	1c03      	adds	r3, r0, #0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
    21ac:	78c0      	ldrb	r0, [r0, #3]
    21ae:	2800      	cmp	r0, #0
    21b0:	d009      	beq.n	21c6 <ble_mtu_changed_cmd_complete_handler+0x1e>
    21b2:	1c1c      	adds	r4, r3, #0
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
    21b4:	4804      	ldr	r0, [pc, #16]	; (21c8 <ble_mtu_changed_cmd_complete_handler+0x20>)
    21b6:	4b05      	ldr	r3, [pc, #20]	; (21cc <ble_mtu_changed_cmd_complete_handler+0x24>)
    21b8:	4798      	blx	r3
    21ba:	8821      	ldrh	r1, [r4, #0]
    21bc:	78a2      	ldrb	r2, [r4, #2]
    21be:	4804      	ldr	r0, [pc, #16]	; (21d0 <ble_mtu_changed_cmd_complete_handler+0x28>)
    21c0:	4b04      	ldr	r3, [pc, #16]	; (21d4 <ble_mtu_changed_cmd_complete_handler+0x2c>)
    21c2:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
    21c4:	20e2      	movs	r0, #226	; 0xe2
}
    21c6:	bd10      	pop	{r4, pc}
    21c8:	000096ac 	.word	0x000096ac
    21cc:	0000853d 	.word	0x0000853d
    21d0:	00009a8c 	.word	0x00009a8c
    21d4:	0000841d 	.word	0x0000841d

000021d8 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
    21d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21da:	1c04      	adds	r4, r0, #0
    21dc:	4b19      	ldr	r3, [pc, #100]	; (2244 <ble_disconnected_state_handler+0x6c>)
    21de:	229b      	movs	r2, #155	; 0x9b
    21e0:	0092      	lsls	r2, r2, #2
    21e2:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
    21e4:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
    21e6:	2600      	movs	r6, #0
    21e8:	1c18      	adds	r0, r3, #0
    21ea:	1c1a      	adds	r2, r3, #0
    21ec:	3a56      	subs	r2, #86	; 0x56
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
    21ee:	8811      	ldrh	r1, [r2, #0]
    21f0:	8822      	ldrh	r2, [r4, #0]
    21f2:	4291      	cmp	r1, r2
    21f4:	d119      	bne.n	222a <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
    21f6:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
    21f8:	2a05      	cmp	r2, #5
    21fa:	d001      	beq.n	2200 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
    21fc:	2a08      	cmp	r2, #8
    21fe:	d101      	bne.n	2204 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
    2200:	7007      	strb	r7, [r0, #0]
    2202:	e012      	b.n	222a <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
    2204:	2a07      	cmp	r2, #7
    2206:	d80f      	bhi.n	2228 <ble_disconnected_state_handler+0x50>
    2208:	0092      	lsls	r2, r2, #2
    220a:	490f      	ldr	r1, [pc, #60]	; (2248 <ble_disconnected_state_handler+0x70>)
    220c:	588a      	ldr	r2, [r1, r2]
    220e:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
    2210:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
    2212:	4a0e      	ldr	r2, [pc, #56]	; (224c <ble_disconnected_state_handler+0x74>)
    2214:	7812      	ldrb	r2, [r2, #0]
    2216:	2a00      	cmp	r2, #0
    2218:	d007      	beq.n	222a <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
    221a:	4a0c      	ldr	r2, [pc, #48]	; (224c <ble_disconnected_state_handler+0x74>)
    221c:	7812      	ldrb	r2, [r2, #0]
    221e:	3a01      	subs	r2, #1
    2220:	b2d2      	uxtb	r2, r2
    2222:	490a      	ldr	r1, [pc, #40]	; (224c <ble_disconnected_state_handler+0x74>)
    2224:	700a      	strb	r2, [r1, #0]
    2226:	e000      	b.n	222a <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
    2228:	7006      	strb	r6, [r0, #0]
    222a:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    222c:	42ab      	cmp	r3, r5
    222e:	d1db      	bne.n	21e8 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
    2230:	4807      	ldr	r0, [pc, #28]	; (2250 <ble_disconnected_state_handler+0x78>)
    2232:	4b08      	ldr	r3, [pc, #32]	; (2254 <ble_disconnected_state_handler+0x7c>)
    2234:	4798      	blx	r3
    2236:	78e1      	ldrb	r1, [r4, #3]
    2238:	8822      	ldrh	r2, [r4, #0]
    223a:	4807      	ldr	r0, [pc, #28]	; (2258 <ble_disconnected_state_handler+0x80>)
    223c:	4b07      	ldr	r3, [pc, #28]	; (225c <ble_disconnected_state_handler+0x84>)
    223e:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
    2240:	2000      	movs	r0, #0
    2242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2244:	20000f5e 	.word	0x20000f5e
    2248:	000098c0 	.word	0x000098c0
    224c:	2000116c 	.word	0x2000116c
    2250:	000096ac 	.word	0x000096ac
    2254:	0000853d 	.word	0x0000853d
    2258:	00009ac4 	.word	0x00009ac4
    225c:	0000841d 	.word	0x0000841d

00002260 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
    2260:	b570      	push	{r4, r5, r6, lr}
    2262:	1c06      	adds	r6, r0, #0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
    2264:	8801      	ldrh	r1, [r0, #0]
    2266:	4b26      	ldr	r3, [pc, #152]	; (2300 <ble_encryption_status_change_handler+0xa0>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    2268:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
    226a:	891a      	ldrh	r2, [r3, #8]
    226c:	428a      	cmp	r2, r1
    226e:	d104      	bne.n	227a <ble_encryption_status_change_handler+0x1a>
    2270:	1c1a      	adds	r2, r3, #0
    2272:	325e      	adds	r2, #94	; 0x5e
    2274:	7812      	ldrb	r2, [r2, #0]
    2276:	2a06      	cmp	r2, #6
    2278:	d02a      	beq.n	22d0 <ble_encryption_status_change_handler+0x70>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    227a:	3401      	adds	r4, #1
    227c:	b2e4      	uxtb	r4, r4
    227e:	337c      	adds	r3, #124	; 0x7c
    2280:	2c05      	cmp	r4, #5
    2282:	d1f2      	bne.n	226a <ble_encryption_status_change_handler+0xa>
    2284:	e035      	b.n	22f2 <ble_encryption_status_change_handler+0x92>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
    2286:	491e      	ldr	r1, [pc, #120]	; (2300 <ble_encryption_status_change_handler+0xa0>)
    2288:	0163      	lsls	r3, r4, #5
    228a:	1b1a      	subs	r2, r3, r4
    228c:	0092      	lsls	r2, r2, #2
    228e:	188a      	adds	r2, r1, r2
    2290:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
    2292:	1c13      	adds	r3, r2, #0
    2294:	3358      	adds	r3, #88	; 0x58
    2296:	2207      	movs	r2, #7
    2298:	719a      	strb	r2, [r3, #6]
		DBG_LOG("Encryption failed");
    229a:	481a      	ldr	r0, [pc, #104]	; (2304 <ble_encryption_status_change_handler+0xa4>)
    229c:	4b1a      	ldr	r3, [pc, #104]	; (2308 <ble_encryption_status_change_handler+0xa8>)
    229e:	4798      	blx	r3
    22a0:	481a      	ldr	r0, [pc, #104]	; (230c <ble_encryption_status_change_handler+0xac>)
    22a2:	4b1b      	ldr	r3, [pc, #108]	; (2310 <ble_encryption_status_change_handler+0xb0>)
    22a4:	4798      	blx	r3
		return AT_BLE_FAILURE;
    22a6:	25e2      	movs	r5, #226	; 0xe2
    22a8:	e027      	b.n	22fa <ble_encryption_status_change_handler+0x9a>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
    22aa:	4816      	ldr	r0, [pc, #88]	; (2304 <ble_encryption_status_change_handler+0xa4>)
    22ac:	4b16      	ldr	r3, [pc, #88]	; (2308 <ble_encryption_status_change_handler+0xa8>)
    22ae:	4798      	blx	r3
    22b0:	4818      	ldr	r0, [pc, #96]	; (2314 <ble_encryption_status_change_handler+0xb4>)
    22b2:	4b17      	ldr	r3, [pc, #92]	; (2310 <ble_encryption_status_change_handler+0xb0>)
    22b4:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
    22b6:	237c      	movs	r3, #124	; 0x7c
    22b8:	435c      	muls	r4, r3
    22ba:	4b11      	ldr	r3, [pc, #68]	; (2300 <ble_encryption_status_change_handler+0xa0>)
    22bc:	191b      	adds	r3, r3, r4
    22be:	1c1a      	adds	r2, r3, #0
    22c0:	3258      	adds	r2, #88	; 0x58
    22c2:	2108      	movs	r1, #8
    22c4:	7191      	strb	r1, [r2, #6]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
    22c6:	78f2      	ldrb	r2, [r6, #3]
    22c8:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
    22ca:	78b2      	ldrb	r2, [r6, #2]
    22cc:	761a      	strb	r2, [r3, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
    22ce:	e014      	b.n	22fa <ble_encryption_status_change_handler+0x9a>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
    22d0:	78b5      	ldrb	r5, [r6, #2]
    22d2:	2d00      	cmp	r5, #0
    22d4:	d1d7      	bne.n	2286 <ble_encryption_status_change_handler+0x26>
    22d6:	e7e8      	b.n	22aa <ble_encryption_status_change_handler+0x4a>
	{
		DBG_LOG("Encryption completed successfully");
    22d8:	4e0a      	ldr	r6, [pc, #40]	; (2304 <ble_encryption_status_change_handler+0xa4>)
    22da:	1c30      	adds	r0, r6, #0
    22dc:	4d0a      	ldr	r5, [pc, #40]	; (2308 <ble_encryption_status_change_handler+0xa8>)
    22de:	47a8      	blx	r5
    22e0:	480c      	ldr	r0, [pc, #48]	; (2314 <ble_encryption_status_change_handler+0xb4>)
    22e2:	4c0b      	ldr	r4, [pc, #44]	; (2310 <ble_encryption_status_change_handler+0xb0>)
    22e4:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
    22e6:	1c30      	adds	r0, r6, #0
    22e8:	47a8      	blx	r5
    22ea:	480b      	ldr	r0, [pc, #44]	; (2318 <ble_encryption_status_change_handler+0xb8>)
    22ec:	47a0      	blx	r4
			return AT_BLE_FAILURE;
    22ee:	25e2      	movs	r5, #226	; 0xe2
    22f0:	e003      	b.n	22fa <ble_encryption_status_change_handler+0x9a>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
    22f2:	78b5      	ldrb	r5, [r6, #2]
    22f4:	2d00      	cmp	r5, #0
    22f6:	d1c6      	bne.n	2286 <ble_encryption_status_change_handler+0x26>
    22f8:	e7ee      	b.n	22d8 <ble_encryption_status_change_handler+0x78>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
    22fa:	1c28      	adds	r0, r5, #0
    22fc:	bd70      	pop	{r4, r5, r6, pc}
    22fe:	46c0      	nop			; (mov r8, r8)
    2300:	20000f00 	.word	0x20000f00
    2304:	000096ac 	.word	0x000096ac
    2308:	0000853d 	.word	0x0000853d
    230c:	00009af4 	.word	0x00009af4
    2310:	0000841d 	.word	0x0000841d
    2314:	00009b08 	.word	0x00009b08
    2318:	00009b2c 	.word	0x00009b2c

0000231c <ble_scan_info_handler>:
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_GEN_DISCOVERY, false,true)) ;
}

/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
    231c:	b510      	push	{r4, lr}
    231e:	1c01      	adds	r1, r0, #0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
    2320:	4b15      	ldr	r3, [pc, #84]	; (2378 <ble_scan_info_handler+0x5c>)
    2322:	781b      	ldrb	r3, [r3, #0]
    2324:	b2db      	uxtb	r3, r3
    2326:	2b13      	cmp	r3, #19
    2328:	d812      	bhi.n	2350 <ble_scan_info_handler+0x34>
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
    232a:	4c13      	ldr	r4, [pc, #76]	; (2378 <ble_scan_info_handler+0x5c>)
    232c:	7823      	ldrb	r3, [r4, #0]
    232e:	b2db      	uxtb	r3, r3
    2330:	0098      	lsls	r0, r3, #2
    2332:	18c0      	adds	r0, r0, r3
    2334:	00c0      	lsls	r0, r0, #3
    2336:	18c3      	adds	r3, r0, r3
    2338:	4810      	ldr	r0, [pc, #64]	; (237c <ble_scan_info_handler+0x60>)
    233a:	18c0      	adds	r0, r0, r3
    233c:	2229      	movs	r2, #41	; 0x29
    233e:	4b10      	ldr	r3, [pc, #64]	; (2380 <ble_scan_info_handler+0x64>)
    2340:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
    2342:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
    2344:	7823      	ldrb	r3, [r4, #0]
    2346:	3301      	adds	r3, #1
    2348:	b2db      	uxtb	r3, r3
    234a:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
    234c:	2000      	movs	r0, #0
    234e:	e012      	b.n	2376 <ble_scan_info_handler+0x5a>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
    2350:	480c      	ldr	r0, [pc, #48]	; (2384 <ble_scan_info_handler+0x68>)
    2352:	4b0d      	ldr	r3, [pc, #52]	; (2388 <ble_scan_info_handler+0x6c>)
    2354:	4798      	blx	r3
    2356:	480d      	ldr	r0, [pc, #52]	; (238c <ble_scan_info_handler+0x70>)
    2358:	4b0d      	ldr	r3, [pc, #52]	; (2390 <ble_scan_info_handler+0x74>)
    235a:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
    235c:	4b0d      	ldr	r3, [pc, #52]	; (2394 <ble_scan_info_handler+0x78>)
    235e:	4798      	blx	r3
    2360:	1c03      	adds	r3, r0, #0
		{
			DBG_LOG("Failed to stop scanning");
		}
		
		return AT_BLE_FAILURE;
    2362:	20e2      	movs	r0, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
    2364:	2b00      	cmp	r3, #0
    2366:	d006      	beq.n	2376 <ble_scan_info_handler+0x5a>
		{
			DBG_LOG("Failed to stop scanning");
    2368:	4806      	ldr	r0, [pc, #24]	; (2384 <ble_scan_info_handler+0x68>)
    236a:	4b07      	ldr	r3, [pc, #28]	; (2388 <ble_scan_info_handler+0x6c>)
    236c:	4798      	blx	r3
    236e:	480a      	ldr	r0, [pc, #40]	; (2398 <ble_scan_info_handler+0x7c>)
    2370:	4b07      	ldr	r3, [pc, #28]	; (2390 <ble_scan_info_handler+0x74>)
    2372:	4798      	blx	r3
		}
		
		return AT_BLE_FAILURE;
    2374:	20e2      	movs	r0, #226	; 0xe2
	}
}
    2376:	bd10      	pop	{r4, pc}
    2378:	200005e8 	.word	0x200005e8
    237c:	200011f8 	.word	0x200011f8
    2380:	000083fb 	.word	0x000083fb
    2384:	000096ac 	.word	0x000096ac
    2388:	0000853d 	.word	0x0000853d
    238c:	00009b54 	.word	0x00009b54
    2390:	0000841d 	.word	0x0000841d
    2394:	00004b19 	.word	0x00004b19
    2398:	00009b8c 	.word	0x00009b8c

0000239c <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
    239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    239e:	464f      	mov	r7, r9
    23a0:	4646      	mov	r6, r8
    23a2:	b4c0      	push	{r6, r7}
    23a4:	1c06      	adds	r6, r0, #0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
    23a6:	8845      	ldrh	r5, [r0, #2]
    23a8:	4a3a      	ldr	r2, [pc, #232]	; (2494 <ble_pair_done_handler+0xf8>)
    23aa:	2300      	movs	r3, #0
    23ac:	b2dc      	uxtb	r4, r3
    23ae:	1c19      	adds	r1, r3, #0
    23b0:	8910      	ldrh	r0, [r2, #8]
    23b2:	42a8      	cmp	r0, r5
    23b4:	d110      	bne.n	23d8 <ble_pair_done_handler+0x3c>
    23b6:	1c10      	adds	r0, r2, #0
    23b8:	305e      	adds	r0, #94	; 0x5e
    23ba:	7800      	ldrb	r0, [r0, #0]
    23bc:	2803      	cmp	r0, #3
    23be:	d10b      	bne.n	23d8 <ble_pair_done_handler+0x3c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
    23c0:	015b      	lsls	r3, r3, #5
    23c2:	1a5b      	subs	r3, r3, r1
    23c4:	0099      	lsls	r1, r3, #2
    23c6:	4b33      	ldr	r3, [pc, #204]	; (2494 <ble_pair_done_handler+0xf8>)
    23c8:	185b      	adds	r3, r3, r1
    23ca:	3358      	adds	r3, #88	; 0x58
    23cc:	2205      	movs	r2, #5
    23ce:	719a      	strb	r2, [r3, #6]
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
    23d0:	7935      	ldrb	r5, [r6, #4]
    23d2:	2d00      	cmp	r5, #0
    23d4:	d034      	beq.n	2440 <ble_pair_done_handler+0xa4>
    23d6:	e006      	b.n	23e6 <ble_pair_done_handler+0x4a>
    23d8:	3401      	adds	r4, #1
    23da:	b2e4      	uxtb	r4, r4
    23dc:	3301      	adds	r3, #1
    23de:	327c      	adds	r2, #124	; 0x7c
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    23e0:	2b05      	cmp	r3, #5
    23e2:	d1e3      	bne.n	23ac <ble_pair_done_handler+0x10>
    23e4:	e028      	b.n	2438 <ble_pair_done_handler+0x9c>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING_FAILED;
    23e6:	0163      	lsls	r3, r4, #5
    23e8:	1b1c      	subs	r4, r3, r4
    23ea:	00a4      	lsls	r4, r4, #2
    23ec:	4b29      	ldr	r3, [pc, #164]	; (2494 <ble_pair_done_handler+0xf8>)
    23ee:	191c      	adds	r4, r3, r4
    23f0:	3458      	adds	r4, #88	; 0x58
    23f2:	2304      	movs	r3, #4
    23f4:	71a3      	strb	r3, [r4, #6]
		DBG_LOG("Pairing failed...Disconnecting");
    23f6:	4828      	ldr	r0, [pc, #160]	; (2498 <ble_pair_done_handler+0xfc>)
    23f8:	4b28      	ldr	r3, [pc, #160]	; (249c <ble_pair_done_handler+0x100>)
    23fa:	4798      	blx	r3
    23fc:	4828      	ldr	r0, [pc, #160]	; (24a0 <ble_pair_done_handler+0x104>)
    23fe:	4b29      	ldr	r3, [pc, #164]	; (24a4 <ble_pair_done_handler+0x108>)
    2400:	4798      	blx	r3
		if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
    2402:	8870      	ldrh	r0, [r6, #2]
    2404:	2113      	movs	r1, #19
    2406:	4b28      	ldr	r3, [pc, #160]	; (24a8 <ble_pair_done_handler+0x10c>)
    2408:	4798      	blx	r3
    240a:	1e05      	subs	r5, r0, #0
    240c:	d03d      	beq.n	248a <ble_pair_done_handler+0xee>
		{
			DBG_LOG("Disconnect Request Failed");
    240e:	4822      	ldr	r0, [pc, #136]	; (2498 <ble_pair_done_handler+0xfc>)
    2410:	4b22      	ldr	r3, [pc, #136]	; (249c <ble_pair_done_handler+0x100>)
    2412:	4798      	blx	r3
    2414:	4825      	ldr	r0, [pc, #148]	; (24ac <ble_pair_done_handler+0x110>)
    2416:	4b23      	ldr	r3, [pc, #140]	; (24a4 <ble_pair_done_handler+0x108>)
    2418:	4798      	blx	r3
			return AT_BLE_FAILURE;
    241a:	25e2      	movs	r5, #226	; 0xe2
    241c:	e035      	b.n	248a <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
    241e:	4e1e      	ldr	r6, [pc, #120]	; (2498 <ble_pair_done_handler+0xfc>)
    2420:	1c30      	adds	r0, r6, #0
    2422:	4d1e      	ldr	r5, [pc, #120]	; (249c <ble_pair_done_handler+0x100>)
    2424:	47a8      	blx	r5
    2426:	4822      	ldr	r0, [pc, #136]	; (24b0 <ble_pair_done_handler+0x114>)
    2428:	4c1e      	ldr	r4, [pc, #120]	; (24a4 <ble_pair_done_handler+0x108>)
    242a:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
    242c:	1c30      	adds	r0, r6, #0
    242e:	47a8      	blx	r5
    2430:	4820      	ldr	r0, [pc, #128]	; (24b4 <ble_pair_done_handler+0x118>)
    2432:	47a0      	blx	r4
			return AT_BLE_FAILURE;
    2434:	25e2      	movs	r5, #226	; 0xe2
    2436:	e028      	b.n	248a <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
    2438:	7933      	ldrb	r3, [r6, #4]
    243a:	2b00      	cmp	r3, #0
    243c:	d0ef      	beq.n	241e <ble_pair_done_handler+0x82>
    243e:	e7d2      	b.n	23e6 <ble_pair_done_handler+0x4a>
	{
		DBG_LOG("Pairing procedure completed successfully");
    2440:	4815      	ldr	r0, [pc, #84]	; (2498 <ble_pair_done_handler+0xfc>)
    2442:	4b16      	ldr	r3, [pc, #88]	; (249c <ble_pair_done_handler+0x100>)
    2444:	4798      	blx	r3
    2446:	481a      	ldr	r0, [pc, #104]	; (24b0 <ble_pair_done_handler+0x114>)
    2448:	4b16      	ldr	r3, [pc, #88]	; (24a4 <ble_pair_done_handler+0x108>)
    244a:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
    244c:	7832      	ldrb	r2, [r6, #0]
    244e:	4f11      	ldr	r7, [pc, #68]	; (2494 <ble_pair_done_handler+0xf8>)
    2450:	237c      	movs	r3, #124	; 0x7c
    2452:	435c      	muls	r4, r3
    2454:	193b      	adds	r3, r7, r4
    2456:	4699      	mov	r9, r3
    2458:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
    245a:	7932      	ldrb	r2, [r6, #4]
    245c:	761a      	strb	r2, [r3, #24]
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
    245e:	4648      	mov	r0, r9
    2460:	3036      	adds	r0, #54	; 0x36
    2462:	1c31      	adds	r1, r6, #0
    2464:	3122      	adds	r1, #34	; 0x22
    2466:	2210      	movs	r2, #16
    2468:	4b13      	ldr	r3, [pc, #76]	; (24b8 <ble_pair_done_handler+0x11c>)
    246a:	4698      	mov	r8, r3
    246c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
    246e:	4648      	mov	r0, r9
    2470:	3046      	adds	r0, #70	; 0x46
    2472:	1c31      	adds	r1, r6, #0
    2474:	3132      	adds	r1, #50	; 0x32
    2476:	2217      	movs	r2, #23
    2478:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
    247a:	4648      	mov	r0, r9
    247c:	301a      	adds	r0, #26
    247e:	1db1      	adds	r1, r6, #6
    2480:	221c      	movs	r2, #28
    2482:	47c0      	blx	r8
			ble_dev_info->conn_state = BLE_DEVICE_PAIRED;
    2484:	2205      	movs	r2, #5
    2486:	235e      	movs	r3, #94	; 0x5e
    2488:	54fa      	strb	r2, [r7, r3]
			DBG_LOG("Disconnect Request Failed");
			return AT_BLE_FAILURE;
		}
	}
	return AT_BLE_SUCCESS;
}
    248a:	1c28      	adds	r0, r5, #0
    248c:	bc0c      	pop	{r2, r3}
    248e:	4690      	mov	r8, r2
    2490:	4699      	mov	r9, r3
    2492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2494:	20000f00 	.word	0x20000f00
    2498:	000096ac 	.word	0x000096ac
    249c:	0000853d 	.word	0x0000853d
    24a0:	00009ba4 	.word	0x00009ba4
    24a4:	0000841d 	.word	0x0000841d
    24a8:	00004b39 	.word	0x00004b39
    24ac:	00009bc4 	.word	0x00009bc4
    24b0:	00009be0 	.word	0x00009be0
    24b4:	00009c0c 	.word	0x00009c0c
    24b8:	000083fb 	.word	0x000083fb

000024bc <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
    24bc:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
    24be:	8800      	ldrh	r0, [r0, #0]
    24c0:	2101      	movs	r1, #1
    24c2:	2201      	movs	r2, #1
    24c4:	2378      	movs	r3, #120	; 0x78
    24c6:	4c02      	ldr	r4, [pc, #8]	; (24d0 <ble_conn_param_update_req+0x14>)
    24c8:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
    24ca:	2000      	movs	r0, #0
    24cc:	bd10      	pop	{r4, pc}
    24ce:	46c0      	nop			; (mov r8, r8)
    24d0:	00004b59 	.word	0x00004b59

000024d4 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
    24d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24d6:	4657      	mov	r7, sl
    24d8:	464e      	mov	r6, r9
    24da:	4645      	mov	r5, r8
    24dc:	b4e0      	push	{r5, r6, r7}
    24de:	b084      	sub	sp, #16
    24e0:	1c04      	adds	r4, r0, #0
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
    24e2:	8806      	ldrh	r6, [r0, #0]
    24e4:	496c      	ldr	r1, [pc, #432]	; (2698 <ble_slave_security_request_handler+0x1c4>)
    24e6:	1c0a      	adds	r2, r1, #0
    24e8:	2300      	movs	r3, #0
    24ea:	b2dd      	uxtb	r5, r3
    24ec:	1c1f      	adds	r7, r3, #0
    24ee:	8910      	ldrh	r0, [r2, #8]
    24f0:	42b0      	cmp	r0, r6
    24f2:	d114      	bne.n	251e <ble_slave_security_request_handler+0x4a>
    24f4:	1c10      	adds	r0, r2, #0
    24f6:	305e      	adds	r0, #94	; 0x5e
    24f8:	7800      	ldrb	r0, [r0, #0]
    24fa:	2802      	cmp	r0, #2
    24fc:	d10f      	bne.n	251e <ble_slave_security_request_handler+0x4a>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
    24fe:	4a66      	ldr	r2, [pc, #408]	; (2698 <ble_slave_security_request_handler+0x1c4>)
    2500:	015b      	lsls	r3, r3, #5
    2502:	1bdb      	subs	r3, r3, r7
    2504:	009b      	lsls	r3, r3, #2
    2506:	18d3      	adds	r3, r2, r3
    2508:	3358      	adds	r3, #88	; 0x58
    250a:	3004      	adds	r0, #4
    250c:	7198      	strb	r0, [r3, #6]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
    250e:	016b      	lsls	r3, r5, #5
    2510:	1b5b      	subs	r3, r3, r5
    2512:	009b      	lsls	r3, r3, #2
    2514:	18d3      	adds	r3, r2, r3
    2516:	7d1a      	ldrb	r2, [r3, #20]
    2518:	07d3      	lsls	r3, r2, #31
    251a:	d405      	bmi.n	2528 <ble_slave_security_request_handler+0x54>
    251c:	e01b      	b.n	2556 <ble_slave_security_request_handler+0x82>
    251e:	3301      	adds	r3, #1
    2520:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    2522:	2b05      	cmp	r3, #5
    2524:	d1e1      	bne.n	24ea <ble_slave_security_request_handler+0x16>
    2526:	e01e      	b.n	2566 <ble_slave_security_request_handler+0x92>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
    2528:	78e3      	ldrb	r3, [r4, #3]
    252a:	2b00      	cmp	r3, #0
    252c:	d013      	beq.n	2556 <ble_slave_security_request_handler+0x82>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
    252e:	8820      	ldrh	r0, [r4, #0]
    2530:	0169      	lsls	r1, r5, #5
    2532:	1b49      	subs	r1, r1, r5
    2534:	008d      	lsls	r5, r1, #2
    2536:	4958      	ldr	r1, [pc, #352]	; (2698 <ble_slave_security_request_handler+0x1c4>)
    2538:	1949      	adds	r1, r1, r5
    253a:	311a      	adds	r1, #26
    253c:	4b57      	ldr	r3, [pc, #348]	; (269c <ble_slave_security_request_handler+0x1c8>)
    253e:	4798      	blx	r3
    2540:	2800      	cmp	r0, #0
    2542:	d100      	bne.n	2546 <ble_slave_security_request_handler+0x72>
    2544:	e0a2      	b.n	268c <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
    2546:	4856      	ldr	r0, [pc, #344]	; (26a0 <ble_slave_security_request_handler+0x1cc>)
    2548:	4b56      	ldr	r3, [pc, #344]	; (26a4 <ble_slave_security_request_handler+0x1d0>)
    254a:	4798      	blx	r3
    254c:	4856      	ldr	r0, [pc, #344]	; (26a8 <ble_slave_security_request_handler+0x1d4>)
    254e:	4b57      	ldr	r3, [pc, #348]	; (26ac <ble_slave_security_request_handler+0x1d8>)
    2550:	4798      	blx	r3
				return AT_BLE_FAILURE;
    2552:	20e2      	movs	r0, #226	; 0xe2
    2554:	e09a      	b.n	268c <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
    2556:	016b      	lsls	r3, r5, #5
    2558:	1b5d      	subs	r5, r3, r5
    255a:	00ad      	lsls	r5, r5, #2
    255c:	4b4e      	ldr	r3, [pc, #312]	; (2698 <ble_slave_security_request_handler+0x1c4>)
    255e:	195d      	adds	r5, r3, r5
    2560:	3558      	adds	r5, #88	; 0x58
    2562:	2302      	movs	r3, #2
    2564:	71ab      	strb	r3, [r5, #6]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
    2566:	8825      	ldrh	r5, [r4, #0]
    2568:	2200      	movs	r2, #0
    256a:	b2d3      	uxtb	r3, r2
    256c:	1c16      	adds	r6, r2, #0
    256e:	8908      	ldrh	r0, [r1, #8]
    2570:	42a8      	cmp	r0, r5
    2572:	d10d      	bne.n	2590 <ble_slave_security_request_handler+0xbc>
    2574:	1c08      	adds	r0, r1, #0
    2576:	305e      	adds	r0, #94	; 0x5e
    2578:	7800      	ldrb	r0, [r0, #0]
    257a:	2802      	cmp	r0, #2
    257c:	d108      	bne.n	2590 <ble_slave_security_request_handler+0xbc>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
    257e:	0152      	lsls	r2, r2, #5
    2580:	1b92      	subs	r2, r2, r6
    2582:	0096      	lsls	r6, r2, #2
    2584:	4a44      	ldr	r2, [pc, #272]	; (2698 <ble_slave_security_request_handler+0x1c4>)
    2586:	1992      	adds	r2, r2, r6
    2588:	3258      	adds	r2, #88	; 0x58
    258a:	2103      	movs	r1, #3
    258c:	7191      	strb	r1, [r2, #6]
			break;
    258e:	e005      	b.n	259c <ble_slave_security_request_handler+0xc8>
    2590:	3301      	adds	r3, #1
    2592:	b2db      	uxtb	r3, r3
    2594:	3201      	adds	r2, #1
    2596:	317c      	adds	r1, #124	; 0x7c
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    2598:	2a05      	cmp	r2, #5
    259a:	d1e6      	bne.n	256a <ble_slave_security_request_handler+0x96>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
    259c:	aa01      	add	r2, sp, #4
    259e:	2102      	movs	r1, #2
    25a0:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
    25a2:	78e1      	ldrb	r1, [r4, #3]
    25a4:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
    25a6:	2101      	movs	r1, #1
    25a8:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
    25aa:	3103      	adds	r1, #3
    25ac:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
    25ae:	2100      	movs	r1, #0
    25b0:	70d1      	strb	r1, [r2, #3]
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
    25b2:	1c1f      	adds	r7, r3, #0
    25b4:	015a      	lsls	r2, r3, #5
    25b6:	1ad2      	subs	r2, r2, r3
    25b8:	0092      	lsls	r2, r2, #2
    25ba:	4937      	ldr	r1, [pc, #220]	; (2698 <ble_slave_security_request_handler+0x1c4>)
    25bc:	5c52      	ldrb	r2, [r2, r1]
    25be:	2a02      	cmp	r2, #2
    25c0:	d104      	bne.n	25cc <ble_slave_security_request_handler+0xf8>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
    25c2:	aa01      	add	r2, sp, #4
    25c4:	2103      	movs	r1, #3
    25c6:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
    25c8:	71d1      	strb	r1, [r2, #7]
    25ca:	e044      	b.n	2656 <ble_slave_security_request_handler+0x182>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
    25cc:	aa01      	add	r2, sp, #4
    25ce:	2101      	movs	r1, #1
    25d0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
    25d2:	71d1      	strb	r1, [r2, #7]
    25d4:	e03f      	b.n	2656 <ble_slave_security_request_handler+0x182>
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    25d6:	47c8      	blx	r9
    25d8:	4643      	mov	r3, r8
    25da:	4018      	ands	r0, r3
    25dc:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
    25de:	47c8      	blx	r9
    25e0:	4643      	mov	r3, r8
    25e2:	4018      	ands	r0, r3
    25e4:	74b0      	strb	r0, [r6, #18]
    25e6:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
    25e8:	42ae      	cmp	r6, r5
    25ea:	d1f4      	bne.n	25d6 <ble_slave_security_request_handler+0x102>
    25ec:	4653      	mov	r3, sl
    25ee:	3370      	adds	r3, #112	; 0x70
    25f0:	4a29      	ldr	r2, [pc, #164]	; (2698 <ble_slave_security_request_handler+0x1c4>)
    25f2:	189e      	adds	r6, r3, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    25f4:	4b2e      	ldr	r3, [pc, #184]	; (26b0 <ble_slave_security_request_handler+0x1dc>)
    25f6:	4699      	mov	r9, r3
    25f8:	230f      	movs	r3, #15
    25fa:	4698      	mov	r8, r3
    25fc:	47c8      	blx	r9
    25fe:	4643      	mov	r3, r8
    2600:	4018      	ands	r0, r3
    2602:	7028      	strb	r0, [r5, #0]
    2604:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
    2606:	42b5      	cmp	r5, r6
    2608:	d1f8      	bne.n	25fc <ble_slave_security_request_handler+0x128>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
    260a:	4b29      	ldr	r3, [pc, #164]	; (26b0 <ble_slave_security_request_handler+0x1dc>)
    260c:	4798      	blx	r3
    260e:	017b      	lsls	r3, r7, #5
    2610:	1bdb      	subs	r3, r3, r7
    2612:	009b      	lsls	r3, r3, #2
    2614:	4a20      	ldr	r2, [pc, #128]	; (2698 <ble_slave_security_request_handler+0x1c4>)
    2616:	18d3      	adds	r3, r2, r3
    2618:	1c1a      	adds	r2, r3, #0
    261a:	3270      	adds	r2, #112	; 0x70
    261c:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
    261e:	3378      	adds	r3, #120	; 0x78
    2620:	2210      	movs	r2, #16
    2622:	709a      	strb	r2, [r3, #2]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
    2624:	8820      	ldrh	r0, [r4, #0]
    2626:	017a      	lsls	r2, r7, #5
    2628:	1bd7      	subs	r7, r2, r7
    262a:	00bf      	lsls	r7, r7, #2
    262c:	3760      	adds	r7, #96	; 0x60
    262e:	4a1a      	ldr	r2, [pc, #104]	; (2698 <ble_slave_security_request_handler+0x1c4>)
    2630:	18ba      	adds	r2, r7, r2
    2632:	a901      	add	r1, sp, #4
    2634:	2300      	movs	r3, #0
    2636:	4c1f      	ldr	r4, [pc, #124]	; (26b4 <ble_slave_security_request_handler+0x1e0>)
    2638:	47a0      	blx	r4
    263a:	2800      	cmp	r0, #0
    263c:	d026      	beq.n	268c <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
    263e:	ab01      	add	r3, sp, #4
    2640:	2200      	movs	r2, #0
    2642:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
    2644:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
    2646:	4816      	ldr	r0, [pc, #88]	; (26a0 <ble_slave_security_request_handler+0x1cc>)
    2648:	4b16      	ldr	r3, [pc, #88]	; (26a4 <ble_slave_security_request_handler+0x1d0>)
    264a:	4798      	blx	r3
    264c:	481a      	ldr	r0, [pc, #104]	; (26b8 <ble_slave_security_request_handler+0x1e4>)
    264e:	4b17      	ldr	r3, [pc, #92]	; (26ac <ble_slave_security_request_handler+0x1d8>)
    2650:	4798      	blx	r3
		return AT_BLE_FAILURE;
    2652:	20e2      	movs	r0, #226	; 0xe2
    2654:	e01a      	b.n	268c <ble_slave_security_request_handler+0x1b8>
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
	}
	features.max_key_size = 16;
    2656:	aa01      	add	r2, sp, #4
    2658:	2110      	movs	r1, #16
    265a:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
    265c:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
    265e:	017a      	lsls	r2, r7, #5
    2660:	1bd2      	subs	r2, r2, r7
    2662:	0092      	lsls	r2, r2, #2
    2664:	490c      	ldr	r1, [pc, #48]	; (2698 <ble_slave_security_request_handler+0x1c4>)
    2666:	188a      	adds	r2, r1, r2
    2668:	7e12      	ldrb	r2, [r2, #24]
    266a:	2a40      	cmp	r2, #64	; 0x40
    266c:	d1da      	bne.n	2624 <ble_slave_security_request_handler+0x150>
    266e:	015a      	lsls	r2, r3, #5
    2670:	1ad3      	subs	r3, r2, r3
    2672:	009b      	lsls	r3, r3, #2
    2674:	469a      	mov	sl, r3
    2676:	1c1e      	adds	r6, r3, #0
    2678:	3660      	adds	r6, #96	; 0x60
    267a:	1876      	adds	r6, r6, r1
    267c:	4655      	mov	r5, sl
    267e:	3568      	adds	r5, #104	; 0x68
    2680:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    2682:	4b0b      	ldr	r3, [pc, #44]	; (26b0 <ble_slave_security_request_handler+0x1dc>)
    2684:	4699      	mov	r9, r3
    2686:	230f      	movs	r3, #15
    2688:	4698      	mov	r8, r3
    268a:	e7a4      	b.n	25d6 <ble_slave_security_request_handler+0x102>
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
    268c:	b004      	add	sp, #16
    268e:	bc1c      	pop	{r2, r3, r4}
    2690:	4690      	mov	r8, r2
    2692:	4699      	mov	r9, r3
    2694:	46a2      	mov	sl, r4
    2696:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2698:	20000f00 	.word	0x20000f00
    269c:	000061fd 	.word	0x000061fd
    26a0:	000096ac 	.word	0x000096ac
    26a4:	0000853d 	.word	0x0000853d
    26a8:	00009c3c 	.word	0x00009c3c
    26ac:	0000841d 	.word	0x0000841d
    26b0:	00008551 	.word	0x00008551
    26b4:	00005ec5 	.word	0x00005ec5
    26b8:	00009c54 	.word	0x00009c54

000026bc <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
    26bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26be:	4657      	mov	r7, sl
    26c0:	464e      	mov	r6, r9
    26c2:	4645      	mov	r5, r8
    26c4:	b4e0      	push	{r5, r6, r7}
    26c6:	b084      	sub	sp, #16
    26c8:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
    26ca:	8804      	ldrh	r4, [r0, #0]
    26cc:	4949      	ldr	r1, [pc, #292]	; (27f4 <ble_pair_request_handler+0x138>)
    26ce:	2200      	movs	r2, #0
    26d0:	b2d3      	uxtb	r3, r2
    26d2:	1c15      	adds	r5, r2, #0
    26d4:	8908      	ldrh	r0, [r1, #8]
    26d6:	42a0      	cmp	r0, r4
    26d8:	d10d      	bne.n	26f6 <ble_pair_request_handler+0x3a>
    26da:	1c08      	adds	r0, r1, #0
    26dc:	305e      	adds	r0, #94	; 0x5e
    26de:	7800      	ldrb	r0, [r0, #0]
    26e0:	2802      	cmp	r0, #2
    26e2:	d108      	bne.n	26f6 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
    26e4:	0152      	lsls	r2, r2, #5
    26e6:	1b52      	subs	r2, r2, r5
    26e8:	0095      	lsls	r5, r2, #2
    26ea:	4a42      	ldr	r2, [pc, #264]	; (27f4 <ble_pair_request_handler+0x138>)
    26ec:	1952      	adds	r2, r2, r5
    26ee:	3258      	adds	r2, #88	; 0x58
    26f0:	2103      	movs	r1, #3
    26f2:	7191      	strb	r1, [r2, #6]
			break;
    26f4:	e005      	b.n	2702 <ble_pair_request_handler+0x46>
    26f6:	3301      	adds	r3, #1
    26f8:	b2db      	uxtb	r3, r3
    26fa:	3201      	adds	r2, #1
    26fc:	317c      	adds	r1, #124	; 0x7c
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    26fe:	2a05      	cmp	r2, #5
    2700:	d1e6      	bne.n	26d0 <ble_pair_request_handler+0x14>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
    2702:	aa01      	add	r2, sp, #4
    2704:	2102      	movs	r1, #2
    2706:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
    2708:	3901      	subs	r1, #1
    270a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
    270c:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
    270e:	2100      	movs	r1, #0
    2710:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
    2712:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
    2714:	1c1f      	adds	r7, r3, #0
    2716:	015a      	lsls	r2, r3, #5
    2718:	1ad2      	subs	r2, r2, r3
    271a:	0092      	lsls	r2, r2, #2
    271c:	4935      	ldr	r1, [pc, #212]	; (27f4 <ble_pair_request_handler+0x138>)
    271e:	5c52      	ldrb	r2, [r2, r1]
    2720:	2a02      	cmp	r2, #2
    2722:	d104      	bne.n	272e <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
    2724:	aa01      	add	r2, sp, #4
    2726:	2103      	movs	r1, #3
    2728:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
    272a:	71d1      	strb	r1, [r2, #7]
    272c:	e041      	b.n	27b2 <ble_pair_request_handler+0xf6>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
    272e:	aa01      	add	r2, sp, #4
    2730:	2101      	movs	r1, #1
    2732:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
    2734:	71d1      	strb	r1, [r2, #7]
    2736:	e03c      	b.n	27b2 <ble_pair_request_handler+0xf6>
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    2738:	47c8      	blx	r9
    273a:	4030      	ands	r0, r6
    273c:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
    273e:	47c8      	blx	r9
    2740:	4030      	ands	r0, r6
    2742:	74a8      	strb	r0, [r5, #18]
    2744:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
    2746:	42a5      	cmp	r5, r4
    2748:	d1f6      	bne.n	2738 <ble_pair_request_handler+0x7c>
    274a:	4653      	mov	r3, sl
    274c:	3370      	adds	r3, #112	; 0x70
    274e:	4a29      	ldr	r2, [pc, #164]	; (27f4 <ble_pair_request_handler+0x138>)
    2750:	189d      	adds	r5, r3, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    2752:	4b29      	ldr	r3, [pc, #164]	; (27f8 <ble_pair_request_handler+0x13c>)
    2754:	4699      	mov	r9, r3
    2756:	260f      	movs	r6, #15
    2758:	47c8      	blx	r9
    275a:	4030      	ands	r0, r6
    275c:	7020      	strb	r0, [r4, #0]
    275e:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
    2760:	42ac      	cmp	r4, r5
    2762:	d1f9      	bne.n	2758 <ble_pair_request_handler+0x9c>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
    2764:	4b24      	ldr	r3, [pc, #144]	; (27f8 <ble_pair_request_handler+0x13c>)
    2766:	4798      	blx	r3
    2768:	017b      	lsls	r3, r7, #5
    276a:	1bdb      	subs	r3, r3, r7
    276c:	009b      	lsls	r3, r3, #2
    276e:	4a21      	ldr	r2, [pc, #132]	; (27f4 <ble_pair_request_handler+0x138>)
    2770:	18d3      	adds	r3, r2, r3
    2772:	1c1a      	adds	r2, r3, #0
    2774:	3270      	adds	r2, #112	; 0x70
    2776:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
    2778:	3378      	adds	r3, #120	; 0x78
    277a:	2210      	movs	r2, #16
    277c:	709a      	strb	r2, [r3, #2]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
    277e:	4643      	mov	r3, r8
    2780:	8818      	ldrh	r0, [r3, #0]
    2782:	017a      	lsls	r2, r7, #5
    2784:	1bd7      	subs	r7, r2, r7
    2786:	00bf      	lsls	r7, r7, #2
    2788:	3760      	adds	r7, #96	; 0x60
    278a:	4a1a      	ldr	r2, [pc, #104]	; (27f4 <ble_pair_request_handler+0x138>)
    278c:	18ba      	adds	r2, r7, r2
    278e:	a901      	add	r1, sp, #4
    2790:	2300      	movs	r3, #0
    2792:	4c1a      	ldr	r4, [pc, #104]	; (27fc <ble_pair_request_handler+0x140>)
    2794:	47a0      	blx	r4
    2796:	2800      	cmp	r0, #0
    2798:	d025      	beq.n	27e6 <ble_pair_request_handler+0x12a>
	{
		features.bond = false;
    279a:	ab01      	add	r3, sp, #4
    279c:	2200      	movs	r2, #0
    279e:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
    27a0:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
    27a2:	4817      	ldr	r0, [pc, #92]	; (2800 <ble_pair_request_handler+0x144>)
    27a4:	4b17      	ldr	r3, [pc, #92]	; (2804 <ble_pair_request_handler+0x148>)
    27a6:	4798      	blx	r3
    27a8:	4817      	ldr	r0, [pc, #92]	; (2808 <ble_pair_request_handler+0x14c>)
    27aa:	4b18      	ldr	r3, [pc, #96]	; (280c <ble_pair_request_handler+0x150>)
    27ac:	4798      	blx	r3
		return AT_BLE_FAILURE;
    27ae:	20e2      	movs	r0, #226	; 0xe2
    27b0:	e019      	b.n	27e6 <ble_pair_request_handler+0x12a>
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
	}
			
	features.max_key_size = 16;
    27b2:	aa01      	add	r2, sp, #4
    27b4:	2110      	movs	r1, #16
    27b6:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
    27b8:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
    27ba:	017a      	lsls	r2, r7, #5
    27bc:	1bd2      	subs	r2, r2, r7
    27be:	0092      	lsls	r2, r2, #2
    27c0:	490c      	ldr	r1, [pc, #48]	; (27f4 <ble_pair_request_handler+0x138>)
    27c2:	188a      	adds	r2, r1, r2
    27c4:	7e12      	ldrb	r2, [r2, #24]
    27c6:	2a40      	cmp	r2, #64	; 0x40
    27c8:	d1d9      	bne.n	277e <ble_pair_request_handler+0xc2>
    27ca:	015a      	lsls	r2, r3, #5
    27cc:	1ad3      	subs	r3, r2, r3
    27ce:	009b      	lsls	r3, r3, #2
    27d0:	469a      	mov	sl, r3
    27d2:	1c1d      	adds	r5, r3, #0
    27d4:	3560      	adds	r5, #96	; 0x60
    27d6:	186d      	adds	r5, r5, r1
    27d8:	4654      	mov	r4, sl
    27da:	3468      	adds	r4, #104	; 0x68
    27dc:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    27de:	4b06      	ldr	r3, [pc, #24]	; (27f8 <ble_pair_request_handler+0x13c>)
    27e0:	4699      	mov	r9, r3
    27e2:	260f      	movs	r6, #15
    27e4:	e7a8      	b.n	2738 <ble_pair_request_handler+0x7c>
		features.mitm_protection = false;
		DBG_LOG("Pair Request - Authentication Failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
    27e6:	b004      	add	sp, #16
    27e8:	bc1c      	pop	{r2, r3, r4}
    27ea:	4690      	mov	r8, r2
    27ec:	4699      	mov	r9, r3
    27ee:	46a2      	mov	sl, r4
    27f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27f2:	46c0      	nop			; (mov r8, r8)
    27f4:	20000f00 	.word	0x20000f00
    27f8:	00008551 	.word	0x00008551
    27fc:	00005ec5 	.word	0x00005ec5
    2800:	000096ac 	.word	0x000096ac
    2804:	0000853d 	.word	0x0000853d
    2808:	00009c80 	.word	0x00009c80
    280c:	0000841d 	.word	0x0000841d

00002810 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
    2810:	b5f0      	push	{r4, r5, r6, r7, lr}
    2812:	b085      	sub	sp, #20
    2814:	1c05      	adds	r5, r0, #0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
    2816:	a802      	add	r0, sp, #8
    2818:	4940      	ldr	r1, [pc, #256]	; (291c <ble_pair_key_request_handler+0x10c>)
    281a:	2206      	movs	r2, #6
    281c:	4e40      	ldr	r6, [pc, #256]	; (2920 <ble_pair_key_request_handler+0x110>)
    281e:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
    2820:	ac01      	add	r4, sp, #4
    2822:	1c20      	adds	r0, r4, #0
    2824:	1c29      	adds	r1, r5, #0
    2826:	2204      	movs	r2, #4
    2828:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
    282a:	78e3      	ldrb	r3, [r4, #3]
    282c:	2b00      	cmp	r3, #0
    282e:	d163      	bne.n	28f8 <ble_pair_key_request_handler+0xe8>
	  DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
    2830:	483c      	ldr	r0, [pc, #240]	; (2924 <ble_pair_key_request_handler+0x114>)
    2832:	4b3d      	ldr	r3, [pc, #244]	; (2928 <ble_pair_key_request_handler+0x118>)
    2834:	4798      	blx	r3
    2836:	483d      	ldr	r0, [pc, #244]	; (292c <ble_pair_key_request_handler+0x11c>)
    2838:	4b3d      	ldr	r3, [pc, #244]	; (2930 <ble_pair_key_request_handler+0x120>)
    283a:	4798      	blx	r3
    283c:	2400      	movs	r4, #0
	  for (idx = 0; idx < 6;) {          
		pin = getchar_timeout(PIN_TIMEOUT);
    283e:	4e3d      	ldr	r6, [pc, #244]	; (2934 <ble_pair_key_request_handler+0x124>)
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
	  DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
	  for (idx = 0; idx < 6;) {          
    2840:	b2e7      	uxtb	r7, r4
		pin = getchar_timeout(PIN_TIMEOUT);
    2842:	483d      	ldr	r0, [pc, #244]	; (2938 <ble_pair_key_request_handler+0x128>)
    2844:	47b0      	blx	r6
    2846:	1e02      	subs	r2, r0, #0
		if (!pin) {
    2848:	d11a      	bne.n	2880 <ble_pair_key_request_handler+0x70>
			DBG_LOG("Pin Timeout");
    284a:	4f36      	ldr	r7, [pc, #216]	; (2924 <ble_pair_key_request_handler+0x114>)
    284c:	1c38      	adds	r0, r7, #0
    284e:	4e36      	ldr	r6, [pc, #216]	; (2928 <ble_pair_key_request_handler+0x118>)
    2850:	47b0      	blx	r6
    2852:	483a      	ldr	r0, [pc, #232]	; (293c <ble_pair_key_request_handler+0x12c>)
    2854:	4c36      	ldr	r4, [pc, #216]	; (2930 <ble_pair_key_request_handler+0x120>)
    2856:	47a0      	blx	r4
			DBG_LOG("Disconnecting ...");
    2858:	1c38      	adds	r0, r7, #0
    285a:	47b0      	blx	r6
    285c:	4838      	ldr	r0, [pc, #224]	; (2940 <ble_pair_key_request_handler+0x130>)
    285e:	47a0      	blx	r4
			if (!(at_ble_disconnect(pair_key->handle,
    2860:	8828      	ldrh	r0, [r5, #0]
    2862:	2113      	movs	r1, #19
    2864:	4b37      	ldr	r3, [pc, #220]	; (2944 <ble_pair_key_request_handler+0x134>)
    2866:	4798      	blx	r3
    2868:	1c03      	adds	r3, r0, #0
						AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
				DBG_LOG("Disconnect Request Failed");
			}
			return AT_BLE_FAILURE;
    286a:	20e2      	movs	r0, #226	; 0xe2
	  for (idx = 0; idx < 6;) {          
		pin = getchar_timeout(PIN_TIMEOUT);
		if (!pin) {
			DBG_LOG("Pin Timeout");
			DBG_LOG("Disconnecting ...");
			if (!(at_ble_disconnect(pair_key->handle,
    286c:	2b00      	cmp	r3, #0
    286e:	d052      	beq.n	2916 <ble_pair_key_request_handler+0x106>
						AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
				DBG_LOG("Disconnect Request Failed");
    2870:	482c      	ldr	r0, [pc, #176]	; (2924 <ble_pair_key_request_handler+0x114>)
    2872:	4b2d      	ldr	r3, [pc, #180]	; (2928 <ble_pair_key_request_handler+0x118>)
    2874:	4798      	blx	r3
    2876:	4834      	ldr	r0, [pc, #208]	; (2948 <ble_pair_key_request_handler+0x138>)
    2878:	4b2d      	ldr	r3, [pc, #180]	; (2930 <ble_pair_key_request_handler+0x120>)
    287a:	4798      	blx	r3
			}
			return AT_BLE_FAILURE;
    287c:	20e2      	movs	r0, #226	; 0xe2
    287e:	e04a      	b.n	2916 <ble_pair_key_request_handler+0x106>
		}
		if ((pin >= '0') && ( pin <= '9')) {
    2880:	3830      	subs	r0, #48	; 0x30
    2882:	b2c3      	uxtb	r3, r0
    2884:	2b09      	cmp	r3, #9
    2886:	d808      	bhi.n	289a <ble_pair_key_request_handler+0x8a>
		  passkey[idx++] = pin;
    2888:	ab02      	add	r3, sp, #8
    288a:	54e2      	strb	r2, [r4, r3]
		  DBG_LOG_CONT("%c", pin);
    288c:	1c10      	adds	r0, r2, #0
    288e:	4b2f      	ldr	r3, [pc, #188]	; (294c <ble_pair_key_request_handler+0x13c>)
    2890:	4798      	blx	r3
    2892:	3401      	adds	r4, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
	  DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
	  for (idx = 0; idx < 6;) {          
    2894:	2c06      	cmp	r4, #6
    2896:	d028      	beq.n	28ea <ble_pair_key_request_handler+0xda>
    2898:	e7d2      	b.n	2840 <ble_pair_key_request_handler+0x30>
    289a:	2f05      	cmp	r7, #5
    289c:	d9d1      	bls.n	2842 <ble_pair_key_request_handler+0x32>
    289e:	e024      	b.n	28ea <ble_pair_key_request_handler+0xda>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
    28a0:	4820      	ldr	r0, [pc, #128]	; (2924 <ble_pair_key_request_handler+0x114>)
    28a2:	4b21      	ldr	r3, [pc, #132]	; (2928 <ble_pair_key_request_handler+0x118>)
    28a4:	4798      	blx	r3
    28a6:	482a      	ldr	r0, [pc, #168]	; (2950 <ble_pair_key_request_handler+0x140>)
    28a8:	4b21      	ldr	r3, [pc, #132]	; (2930 <ble_pair_key_request_handler+0x120>)
    28aa:	4798      	blx	r3
    28ac:	e02b      	b.n	2906 <ble_pair_key_request_handler+0xf6>
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
    28ae:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
    28b0:	5ce0      	ldrb	r0, [r4, r3]
    28b2:	47b0      	blx	r6
    28b4:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
    28b6:	2c06      	cmp	r4, #6
    28b8:	d1f9      	bne.n	28ae <ble_pair_key_request_handler+0x9e>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
    28ba:	8828      	ldrh	r0, [r5, #0]
    28bc:	ab01      	add	r3, sp, #4
    28be:	7899      	ldrb	r1, [r3, #2]
    28c0:	aa02      	add	r2, sp, #8
    28c2:	4b24      	ldr	r3, [pc, #144]	; (2954 <ble_pair_key_request_handler+0x144>)
    28c4:	4798      	blx	r3
    28c6:	2800      	cmp	r0, #0
    28c8:	d025      	beq.n	2916 <ble_pair_key_request_handler+0x106>
          {
                  DBG_LOG("Pair-key reply failed");
    28ca:	4816      	ldr	r0, [pc, #88]	; (2924 <ble_pair_key_request_handler+0x114>)
    28cc:	4b16      	ldr	r3, [pc, #88]	; (2928 <ble_pair_key_request_handler+0x118>)
    28ce:	4798      	blx	r3
    28d0:	4821      	ldr	r0, [pc, #132]	; (2958 <ble_pair_key_request_handler+0x148>)
    28d2:	4b17      	ldr	r3, [pc, #92]	; (2930 <ble_pair_key_request_handler+0x120>)
    28d4:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
    28d6:	2000      	movs	r0, #0
    28d8:	e01d      	b.n	2916 <ble_pair_key_request_handler+0x106>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
    28da:	4812      	ldr	r0, [pc, #72]	; (2924 <ble_pair_key_request_handler+0x114>)
    28dc:	4b12      	ldr	r3, [pc, #72]	; (2928 <ble_pair_key_request_handler+0x118>)
    28de:	4798      	blx	r3
    28e0:	481e      	ldr	r0, [pc, #120]	; (295c <ble_pair_key_request_handler+0x14c>)
    28e2:	4b13      	ldr	r3, [pc, #76]	; (2930 <ble_pair_key_request_handler+0x120>)
    28e4:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
    28e6:	2000      	movs	r0, #0
    28e8:	e015      	b.n	2916 <ble_pair_key_request_handler+0x106>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
    28ea:	480e      	ldr	r0, [pc, #56]	; (2924 <ble_pair_key_request_handler+0x114>)
    28ec:	4b0e      	ldr	r3, [pc, #56]	; (2928 <ble_pair_key_request_handler+0x118>)
    28ee:	4798      	blx	r3
    28f0:	481b      	ldr	r0, [pc, #108]	; (2960 <ble_pair_key_request_handler+0x150>)
    28f2:	4b0f      	ldr	r3, [pc, #60]	; (2930 <ble_pair_key_request_handler+0x120>)
    28f4:	4798      	blx	r3
    28f6:	e006      	b.n	2906 <ble_pair_key_request_handler+0xf6>
		} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
    28f8:	ab01      	add	r3, sp, #4
    28fa:	885a      	ldrh	r2, [r3, #2]
    28fc:	2380      	movs	r3, #128	; 0x80
    28fe:	005b      	lsls	r3, r3, #1
    2900:	429a      	cmp	r2, r3
    2902:	d103      	bne.n	290c <ble_pair_key_request_handler+0xfc>
    2904:	e7cc      	b.n	28a0 <ble_pair_key_request_handler+0x90>
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
	  DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
    2906:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
    2908:	4e10      	ldr	r6, [pc, #64]	; (294c <ble_pair_key_request_handler+0x13c>)
    290a:	e7d0      	b.n	28ae <ble_pair_key_request_handler+0x9e>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
    290c:	ab01      	add	r3, sp, #4
    290e:	789b      	ldrb	r3, [r3, #2]
    2910:	2b01      	cmp	r3, #1
    2912:	d0e2      	beq.n	28da <ble_pair_key_request_handler+0xca>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
    2914:	2000      	movs	r0, #0
}
    2916:	b005      	add	sp, #20
    2918:	bdf0      	pop	{r4, r5, r6, r7, pc}
    291a:	46c0      	nop			; (mov r8, r8)
    291c:	000099e8 	.word	0x000099e8
    2920:	000083fb 	.word	0x000083fb
    2924:	000096ac 	.word	0x000096ac
    2928:	0000853d 	.word	0x0000853d
    292c:	00009ca8 	.word	0x00009ca8
    2930:	0000841d 	.word	0x0000841d
    2934:	0000352d 	.word	0x0000352d
    2938:	00007530 	.word	0x00007530
    293c:	00009cd0 	.word	0x00009cd0
    2940:	00009cdc 	.word	0x00009cdc
    2944:	00004b39 	.word	0x00004b39
    2948:	00009bc4 	.word	0x00009bc4
    294c:	00008451 	.word	0x00008451
    2950:	00009cf0 	.word	0x00009cf0
    2954:	000060d1 	.word	0x000060d1
    2958:	00009d28 	.word	0x00009d28
    295c:	00009d40 	.word	0x00009d40
    2960:	00009d5c 	.word	0x00009d5c

00002964 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
    2964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2966:	1c06      	adds	r6, r0, #0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
    2968:	8801      	ldrh	r1, [r0, #0]
    296a:	4b30      	ldr	r3, [pc, #192]	; (2a2c <ble_encryption_request_handler+0xc8>)
    296c:	2400      	movs	r4, #0
    296e:	b2e5      	uxtb	r5, r4
    2970:	891a      	ldrh	r2, [r3, #8]
    2972:	428a      	cmp	r2, r1
    2974:	d116      	bne.n	29a4 <ble_encryption_request_handler+0x40>
    2976:	1c1a      	adds	r2, r3, #0
    2978:	325e      	adds	r2, #94	; 0x5e
    297a:	7812      	ldrb	r2, [r2, #0]
    297c:	2a01      	cmp	r2, #1
    297e:	d911      	bls.n	29a4 <ble_encryption_request_handler+0x40>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
    2980:	492a      	ldr	r1, [pc, #168]	; (2a2c <ble_encryption_request_handler+0xc8>)
    2982:	0162      	lsls	r2, r4, #5
    2984:	1b12      	subs	r2, r2, r4
    2986:	0092      	lsls	r2, r2, #2
    2988:	188a      	adds	r2, r1, r2
    298a:	3258      	adds	r2, #88	; 0x58
    298c:	2306      	movs	r3, #6
    298e:	7193      	strb	r3, [r2, #6]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
    2990:	016b      	lsls	r3, r5, #5
    2992:	1b5b      	subs	r3, r3, r5
    2994:	009b      	lsls	r3, r3, #2
    2996:	18cb      	adds	r3, r1, r3
    2998:	3370      	adds	r3, #112	; 0x70
    299a:	881a      	ldrh	r2, [r3, #0]
    299c:	8873      	ldrh	r3, [r6, #2]
    299e:	429a      	cmp	r2, r3
    29a0:	d113      	bne.n	29ca <ble_encryption_request_handler+0x66>
    29a2:	e006      	b.n	29b2 <ble_encryption_request_handler+0x4e>
    29a4:	3501      	adds	r5, #1
    29a6:	b2ed      	uxtb	r5, r5
    29a8:	3401      	adds	r4, #1
    29aa:	337c      	adds	r3, #124	; 0x7c
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    29ac:	2c05      	cmp	r4, #5
    29ae:	d1de      	bne.n	296e <ble_encryption_request_handler+0xa>
    29b0:	e00b      	b.n	29ca <ble_encryption_request_handler+0x66>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
    29b2:	1d30      	adds	r0, r6, #4
    29b4:	0169      	lsls	r1, r5, #5
    29b6:	1b49      	subs	r1, r1, r5
    29b8:	0089      	lsls	r1, r1, #2
    29ba:	4b1c      	ldr	r3, [pc, #112]	; (2a2c <ble_encryption_request_handler+0xc8>)
    29bc:	1859      	adds	r1, r3, r1
    29be:	3172      	adds	r1, #114	; 0x72
    29c0:	2208      	movs	r2, #8
    29c2:	4b1b      	ldr	r3, [pc, #108]	; (2a30 <ble_encryption_request_handler+0xcc>)
    29c4:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
    29c6:	2800      	cmp	r0, #0
    29c8:	d015      	beq.n	29f6 <ble_encryption_request_handler+0x92>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
    29ca:	4f1a      	ldr	r7, [pc, #104]	; (2a34 <ble_encryption_request_handler+0xd0>)
    29cc:	1c38      	adds	r0, r7, #0
    29ce:	4e1a      	ldr	r6, [pc, #104]	; (2a38 <ble_encryption_request_handler+0xd4>)
    29d0:	47b0      	blx	r6
    29d2:	481a      	ldr	r0, [pc, #104]	; (2a3c <ble_encryption_request_handler+0xd8>)
    29d4:	4c1a      	ldr	r4, [pc, #104]	; (2a40 <ble_encryption_request_handler+0xdc>)
    29d6:	47a0      	blx	r4
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
    29d8:	1c38      	adds	r0, r7, #0
    29da:	47b0      	blx	r6
    29dc:	4819      	ldr	r0, [pc, #100]	; (2a44 <ble_encryption_request_handler+0xe0>)
    29de:	47a0      	blx	r4
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
    29e0:	016b      	lsls	r3, r5, #5
    29e2:	1b5d      	subs	r5, r3, r5
    29e4:	00ad      	lsls	r5, r5, #2
    29e6:	4b11      	ldr	r3, [pc, #68]	; (2a2c <ble_encryption_request_handler+0xc8>)
    29e8:	195d      	adds	r5, r3, r5
    29ea:	8928      	ldrh	r0, [r5, #8]
    29ec:	2105      	movs	r1, #5
    29ee:	4b16      	ldr	r3, [pc, #88]	; (2a48 <ble_encryption_request_handler+0xe4>)
    29f0:	4798      	blx	r3
		return AT_BLE_FAILURE;
    29f2:	20e2      	movs	r0, #226	; 0xe2
    29f4:	e018      	b.n	2a28 <ble_encryption_request_handler+0xc4>
    29f6:	23ff      	movs	r3, #255	; 0xff
    29f8:	401c      	ands	r4, r3
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
    29fa:	8830      	ldrh	r0, [r6, #0]
    29fc:	4b0b      	ldr	r3, [pc, #44]	; (2a2c <ble_encryption_request_handler+0xc8>)
    29fe:	0162      	lsls	r2, r4, #5
    2a00:	1b11      	subs	r1, r2, r4
    2a02:	0089      	lsls	r1, r1, #2
    2a04:	1859      	adds	r1, r3, r1
    2a06:	7d09      	ldrb	r1, [r1, #20]
    2a08:	1b14      	subs	r4, r2, r4
    2a0a:	00a4      	lsls	r4, r4, #2
    2a0c:	3460      	adds	r4, #96	; 0x60
    2a0e:	18e3      	adds	r3, r4, r3
    2a10:	2201      	movs	r2, #1
    2a12:	4c0e      	ldr	r4, [pc, #56]	; (2a4c <ble_encryption_request_handler+0xe8>)
    2a14:	47a0      	blx	r4
    2a16:	2800      	cmp	r0, #0
    2a18:	d006      	beq.n	2a28 <ble_encryption_request_handler+0xc4>
	{
		DBG_LOG("Encryption Request Reply Failed");
    2a1a:	4806      	ldr	r0, [pc, #24]	; (2a34 <ble_encryption_request_handler+0xd0>)
    2a1c:	4b06      	ldr	r3, [pc, #24]	; (2a38 <ble_encryption_request_handler+0xd4>)
    2a1e:	4798      	blx	r3
    2a20:	480b      	ldr	r0, [pc, #44]	; (2a50 <ble_encryption_request_handler+0xec>)
    2a22:	4b07      	ldr	r3, [pc, #28]	; (2a40 <ble_encryption_request_handler+0xdc>)
    2a24:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
    2a26:	2000      	movs	r0, #0
}
    2a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	20000f00 	.word	0x20000f00
    2a30:	000083dd 	.word	0x000083dd
    2a34:	000096ac 	.word	0x000096ac
    2a38:	0000853d 	.word	0x0000853d
    2a3c:	00009d70 	.word	0x00009d70
    2a40:	0000841d 	.word	0x0000841d
    2a44:	00009da8 	.word	0x00009da8
    2a48:	00004b39 	.word	0x00004b39
    2a4c:	000062c1 	.word	0x000062c1
    2a50:	00009e00 	.word	0x00009e00

00002a54 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
    2a54:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
    2a56:	2a00      	cmp	r2, #0
    2a58:	d047      	beq.n	2aea <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
    2a5a:	2906      	cmp	r1, #6
    2a5c:	d847      	bhi.n	2aee <ble_mgr_events_callback_handler+0x9a>
    2a5e:	0089      	lsls	r1, r1, #2
    2a60:	4b28      	ldr	r3, [pc, #160]	; (2b04 <ble_mgr_events_callback_handler+0xb0>)
    2a62:	585b      	ldr	r3, [r3, r1]
    2a64:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
    2a66:	4b28      	ldr	r3, [pc, #160]	; (2b08 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
    2a68:	2405      	movs	r4, #5
    2a6a:	e00a      	b.n	2a82 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
    2a6c:	4b27      	ldr	r3, [pc, #156]	; (2b0c <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
    2a6e:	2401      	movs	r4, #1
			}
			break;
    2a70:	e007      	b.n	2a82 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
    2a72:	4b27      	ldr	r3, [pc, #156]	; (2b10 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
    2a74:	2405      	movs	r4, #5
			}
			break;
    2a76:	e004      	b.n	2a82 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
    2a78:	4b26      	ldr	r3, [pc, #152]	; (2b14 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
    2a7a:	2401      	movs	r4, #1
			}
			break;
    2a7c:	e001      	b.n	2a82 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
    2a7e:	4b26      	ldr	r3, [pc, #152]	; (2b18 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
    2a80:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
    2a82:	2800      	cmp	r0, #0
    2a84:	d116      	bne.n	2ab4 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
    2a86:	6819      	ldr	r1, [r3, #0]
    2a88:	2900      	cmp	r1, #0
    2a8a:	d10b      	bne.n	2aa4 <ble_mgr_events_callback_handler+0x50>
    2a8c:	e006      	b.n	2a9c <ble_mgr_events_callback_handler+0x48>
    2a8e:	1c1d      	adds	r5, r3, #0
    2a90:	3304      	adds	r3, #4
    2a92:	1f18      	subs	r0, r3, #4
    2a94:	6800      	ldr	r0, [r0, #0]
    2a96:	2800      	cmp	r0, #0
    2a98:	d106      	bne.n	2aa8 <ble_mgr_events_callback_handler+0x54>
    2a9a:	e000      	b.n	2a9e <ble_mgr_events_callback_handler+0x4a>
    2a9c:	1c1d      	adds	r5, r3, #0
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
    2a9e:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
    2aa0:	2101      	movs	r1, #1
						break;
    2aa2:	e02c      	b.n	2afe <ble_mgr_events_callback_handler+0xaa>
    2aa4:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
    2aa6:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
    2aa8:	3101      	adds	r1, #1
    2aaa:	b2c9      	uxtb	r1, r1
    2aac:	42a1      	cmp	r1, r4
    2aae:	d3ee      	bcc.n	2a8e <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
    2ab0:	2100      	movs	r1, #0
    2ab2:	e024      	b.n	2afe <ble_mgr_events_callback_handler+0xaa>
    2ab4:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
    2ab6:	2801      	cmp	r0, #1
    2ab8:	d121      	bne.n	2afe <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
    2aba:	6819      	ldr	r1, [r3, #0]
    2abc:	4291      	cmp	r1, r2
    2abe:	d10c      	bne.n	2ada <ble_mgr_events_callback_handler+0x86>
    2ac0:	e006      	b.n	2ad0 <ble_mgr_events_callback_handler+0x7c>
    2ac2:	1c1d      	adds	r5, r3, #0
    2ac4:	3304      	adds	r3, #4
    2ac6:	1f18      	subs	r0, r3, #4
    2ac8:	6800      	ldr	r0, [r0, #0]
    2aca:	4290      	cmp	r0, r2
    2acc:	d107      	bne.n	2ade <ble_mgr_events_callback_handler+0x8a>
    2ace:	e000      	b.n	2ad2 <ble_mgr_events_callback_handler+0x7e>
    2ad0:	1c1d      	adds	r5, r3, #0
					{
						ble_event_cb_ptr[idx] = NULL;
    2ad2:	2300      	movs	r3, #0
    2ad4:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
    2ad6:	2101      	movs	r1, #1
						break;
    2ad8:	e011      	b.n	2afe <ble_mgr_events_callback_handler+0xaa>
    2ada:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
    2adc:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
    2ade:	3101      	adds	r1, #1
    2ae0:	b2c9      	uxtb	r1, r1
    2ae2:	42a1      	cmp	r1, r4
    2ae4:	d3ed      	bcc.n	2ac2 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
    2ae6:	2100      	movs	r1, #0
    2ae8:	e009      	b.n	2afe <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
    2aea:	2100      	movs	r1, #0
    2aec:	e007      	b.n	2afe <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
    2aee:	2100      	movs	r1, #0
    2af0:	e005      	b.n	2afe <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
    2af2:	4b0a      	ldr	r3, [pc, #40]	; (2b1c <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
    2af4:	2405      	movs	r4, #5
    2af6:	e7c4      	b.n	2a82 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
    2af8:	4b09      	ldr	r3, [pc, #36]	; (2b20 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
    2afa:	2401      	movs	r4, #1
    2afc:	e7c1      	b.n	2a82 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
    2afe:	1c08      	adds	r0, r1, #0
    2b00:	bd30      	pop	{r4, r5, pc}
    2b02:	46c0      	nop			; (mov r8, r8)
    2b04:	000098e0 	.word	0x000098e0
    2b08:	20000eec 	.word	0x20000eec
    2b0c:	20000ee8 	.word	0x20000ee8
    2b10:	20001170 	.word	0x20001170
    2b14:	20001738 	.word	0x20001738
    2b18:	20001184 	.word	0x20001184
    2b1c:	20001198 	.word	0x20001198
    2b20:	200011f4 	.word	0x200011f4

00002b24 <ble_device_init>:

at_ble_init_config_t pf_cfg;

/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
    2b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b26:	4647      	mov	r7, r8
    2b28:	b480      	push	{r7}
    2b2a:	b090      	sub	sp, #64	; 0x40
    2b2c:	1c05      	adds	r5, r0, #0
	char *dev_name = NULL;

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
    2b2e:	4a6a      	ldr	r2, [pc, #424]	; (2cd8 <ble_device_init+0x1b4>)
    2b30:	2300      	movs	r3, #0
    2b32:	6013      	str	r3, [r2, #0]
    2b34:	6053      	str	r3, [r2, #4]
    2b36:	6093      	str	r3, [r2, #8]
    2b38:	60d3      	str	r3, [r2, #12]
    2b3a:	6113      	str	r3, [r2, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
    2b3c:	4a67      	ldr	r2, [pc, #412]	; (2cdc <ble_device_init+0x1b8>)
    2b3e:	6013      	str	r3, [r2, #0]
    2b40:	6053      	str	r3, [r2, #4]
    2b42:	6093      	str	r3, [r2, #8]
    2b44:	60d3      	str	r3, [r2, #12]
    2b46:	6113      	str	r3, [r2, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
    2b48:	4a65      	ldr	r2, [pc, #404]	; (2ce0 <ble_device_init+0x1bc>)
    2b4a:	6013      	str	r3, [r2, #0]
    2b4c:	6053      	str	r3, [r2, #4]
    2b4e:	6093      	str	r3, [r2, #8]
    2b50:	60d3      	str	r3, [r2, #12]
    2b52:	6113      	str	r3, [r2, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
    2b54:	4a63      	ldr	r2, [pc, #396]	; (2ce4 <ble_device_init+0x1c0>)
    2b56:	6013      	str	r3, [r2, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
    2b58:	4a63      	ldr	r2, [pc, #396]	; (2ce8 <ble_device_init+0x1c4>)
    2b5a:	6013      	str	r3, [r2, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
    2b5c:	4a63      	ldr	r2, [pc, #396]	; (2cec <ble_device_init+0x1c8>)
    2b5e:	6013      	str	r3, [r2, #0]
    2b60:	6053      	str	r3, [r2, #4]
    2b62:	6093      	str	r3, [r2, #8]
    2b64:	60d3      	str	r3, [r2, #12]
    2b66:	6113      	str	r3, [r2, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
    2b68:	4a61      	ldr	r2, [pc, #388]	; (2cf0 <ble_device_init+0x1cc>)
    2b6a:	6013      	str	r3, [r2, #0]
    2b6c:	4c61      	ldr	r4, [pc, #388]	; (2cf4 <ble_device_init+0x1d0>)
    2b6e:	239b      	movs	r3, #155	; 0x9b
    2b70:	009b      	lsls	r3, r3, #2
    2b72:	4698      	mov	r8, r3
    2b74:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
    2b76:	4f60      	ldr	r7, [pc, #384]	; (2cf8 <ble_device_init+0x1d4>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    2b78:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
    2b7a:	1c20      	adds	r0, r4, #0
    2b7c:	2100      	movs	r1, #0
    2b7e:	227c      	movs	r2, #124	; 0x7c
    2b80:	47b8      	blx	r7
    2b82:	1c23      	adds	r3, r4, #0
    2b84:	335e      	adds	r3, #94	; 0x5e
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
    2b86:	2200      	movs	r2, #0
    2b88:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    2b8a:	7626      	strb	r6, [r4, #24]
    2b8c:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    2b8e:	4544      	cmp	r4, r8
    2b90:	d1f3      	bne.n	2b7a <ble_device_init+0x56>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
    2b92:	4b5a      	ldr	r3, [pc, #360]	; (2cfc <ble_device_init+0x1d8>)
    2b94:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
    2b96:	4c5a      	ldr	r4, [pc, #360]	; (2d00 <ble_device_init+0x1dc>)
    2b98:	4b5a      	ldr	r3, [pc, #360]	; (2d04 <ble_device_init+0x1e0>)
    2b9a:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)&att_db_data;
    2b9c:	4b5a      	ldr	r3, [pc, #360]	; (2d08 <ble_device_init+0x1e4>)
    2b9e:	6023      	str	r3, [r4, #0]
#else
	pf_cfg.memPool.memSize = 0;
	pf_cfg.memPool.memStartAdd = NULL;
#endif
	/*Bus configuration*/
	pf_cfg.bus_info.bus_type = AT_BLE_UART;
    2ba0:	2301      	movs	r3, #1
    2ba2:	322c      	adds	r2, #44	; 0x2c
    2ba4:	54a3      	strb	r3, [r4, r2]

#if UART_FLOWCONTROL_6WIRE_MODE == true
	/* Enable Hardware Flow-control on BTLC1000 */
   pf_cfg.bus_info.bus_flow_control_enabled = true; // enable flow control
    2ba6:	3201      	adds	r2, #1
    2ba8:	54a3      	strb	r3, [r4, r2]
	/* Disable Hardware Flow-control on BTLC1000 */
   pf_cfg.bus_info.bus_flow_control_enabled = false; // Disable flow control
#endif

	/* Register Platform callback API's */
	pf_cfg.platform_api_list.at_ble_create_timer = platform_create_timer;
    2baa:	4b58      	ldr	r3, [pc, #352]	; (2d0c <ble_device_init+0x1e8>)
    2bac:	60a3      	str	r3, [r4, #8]
	pf_cfg.platform_api_list.at_ble_delete_timer = platform_delete_timer;
    2bae:	4b58      	ldr	r3, [pc, #352]	; (2d10 <ble_device_init+0x1ec>)
    2bb0:	60e3      	str	r3, [r4, #12]
	pf_cfg.platform_api_list.at_ble_start_timer = platform_start_timer;
    2bb2:	4b58      	ldr	r3, [pc, #352]	; (2d14 <ble_device_init+0x1f0>)
    2bb4:	6123      	str	r3, [r4, #16]
	pf_cfg.platform_api_list.at_ble_stop_timer = platform_stop_timer;
    2bb6:	4b58      	ldr	r3, [pc, #352]	; (2d18 <ble_device_init+0x1f4>)
    2bb8:	6163      	str	r3, [r4, #20]
	pf_cfg.platform_api_list.at_ble_sleep = platform_sleep;
    2bba:	4b58      	ldr	r3, [pc, #352]	; (2d1c <ble_device_init+0x1f8>)
    2bbc:	61a3      	str	r3, [r4, #24]
	pf_cfg.platform_api_list.at_ble_gpio_set = platform_gpio_set;
    2bbe:	4b58      	ldr	r3, [pc, #352]	; (2d20 <ble_device_init+0x1fc>)
    2bc0:	61e3      	str	r3, [r4, #28]
	pf_cfg.platform_api_list.at_ble_send_sync = platform_send_sync;
    2bc2:	4b58      	ldr	r3, [pc, #352]	; (2d24 <ble_device_init+0x200>)
    2bc4:	6223      	str	r3, [r4, #32]
	pf_cfg.platform_api_list.at_ble_recv_async = platform_recv_async;
    2bc6:	4b58      	ldr	r3, [pc, #352]	; (2d28 <ble_device_init+0x204>)
    2bc8:	6263      	str	r3, [r4, #36]	; 0x24
	pf_cfg.platform_api_list.at_ble_reconfigure_usart = platform_configure_hw_fc_uart;
    2bca:	4b58      	ldr	r3, [pc, #352]	; (2d2c <ble_device_init+0x208>)
    2bcc:	62a3      	str	r3, [r4, #40]	; 0x28
	
	platform_init(pf_cfg.bus_info.bus_type, pf_cfg.bus_info.bus_flow_control_enabled);
    2bce:	2001      	movs	r0, #1
    2bd0:	2101      	movs	r1, #1
    2bd2:	4b57      	ldr	r3, [pc, #348]	; (2d30 <ble_device_init+0x20c>)
    2bd4:	4798      	blx	r3

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing BTLC1000");
    2bd6:	4857      	ldr	r0, [pc, #348]	; (2d34 <ble_device_init+0x210>)
    2bd8:	4b57      	ldr	r3, [pc, #348]	; (2d38 <ble_device_init+0x214>)
    2bda:	4798      	blx	r3
    2bdc:	4857      	ldr	r0, [pc, #348]	; (2d3c <ble_device_init+0x218>)
    2bde:	4b58      	ldr	r3, [pc, #352]	; (2d40 <ble_device_init+0x21c>)
    2be0:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
    2be2:	1c20      	adds	r0, r4, #0
    2be4:	4b57      	ldr	r3, [pc, #348]	; (2d44 <ble_device_init+0x220>)
    2be6:	4798      	blx	r3
    2be8:	2800      	cmp	r0, #0
    2bea:	d00b      	beq.n	2c04 <ble_device_init+0xe0>
	{
		DBG_LOG("BTLC1000 Initialization failed");
    2bec:	4e51      	ldr	r6, [pc, #324]	; (2d34 <ble_device_init+0x210>)
    2bee:	1c30      	adds	r0, r6, #0
    2bf0:	4d51      	ldr	r5, [pc, #324]	; (2d38 <ble_device_init+0x214>)
    2bf2:	47a8      	blx	r5
    2bf4:	4854      	ldr	r0, [pc, #336]	; (2d48 <ble_device_init+0x224>)
    2bf6:	4c52      	ldr	r4, [pc, #328]	; (2d40 <ble_device_init+0x21c>)
    2bf8:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
    2bfa:	1c30      	adds	r0, r6, #0
    2bfc:	47a8      	blx	r5
    2bfe:	4853      	ldr	r0, [pc, #332]	; (2d4c <ble_device_init+0x228>)
    2c00:	47a0      	blx	r4
    2c02:	e7fe      	b.n	2c02 <ble_device_init+0xde>
	platform_init(pf_cfg.bus_info.bus_type, pf_cfg.bus_info.bus_flow_control_enabled);
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
    2c04:	2000      	movs	r0, #0
    2c06:	2100      	movs	r1, #0
    2c08:	4a51      	ldr	r2, [pc, #324]	; (2d50 <ble_device_init+0x22c>)
    2c0a:	4c52      	ldr	r4, [pc, #328]	; (2d54 <ble_device_init+0x230>)
    2c0c:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
    2c0e:	2000      	movs	r0, #0
    2c10:	2102      	movs	r1, #2
    2c12:	4a51      	ldr	r2, [pc, #324]	; (2d58 <ble_device_init+0x234>)
    2c14:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
    2c16:	4851      	ldr	r0, [pc, #324]	; (2d5c <ble_device_init+0x238>)
    2c18:	2105      	movs	r1, #5
    2c1a:	4b51      	ldr	r3, [pc, #324]	; (2d60 <ble_device_init+0x23c>)
    2c1c:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
    2c1e:	2800      	cmp	r0, #0
    2c20:	d005      	beq.n	2c2e <ble_device_init+0x10a>
	{
		DBG_LOG("Device name set failed");
    2c22:	4844      	ldr	r0, [pc, #272]	; (2d34 <ble_device_init+0x210>)
    2c24:	4b44      	ldr	r3, [pc, #272]	; (2d38 <ble_device_init+0x214>)
    2c26:	4798      	blx	r3
    2c28:	484e      	ldr	r0, [pc, #312]	; (2d64 <ble_device_init+0x240>)
    2c2a:	4b45      	ldr	r3, [pc, #276]	; (2d40 <ble_device_init+0x21c>)
    2c2c:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
    2c2e:	a804      	add	r0, sp, #16
    2c30:	494d      	ldr	r1, [pc, #308]	; (2d68 <ble_device_init+0x244>)
    2c32:	3108      	adds	r1, #8
    2c34:	2207      	movs	r2, #7
    2c36:	4b4d      	ldr	r3, [pc, #308]	; (2d6c <ble_device_init+0x248>)
    2c38:	4798      	blx	r3
	
	if (addr == NULL)
    2c3a:	2d00      	cmp	r5, #0
    2c3c:	d10c      	bne.n	2c58 <ble_device_init+0x134>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
    2c3e:	a804      	add	r0, sp, #16
    2c40:	4b4b      	ldr	r3, [pc, #300]	; (2d70 <ble_device_init+0x24c>)
    2c42:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
    2c44:	ad04      	add	r5, sp, #16
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
    2c46:	2800      	cmp	r0, #0
    2c48:	d006      	beq.n	2c58 <ble_device_init+0x134>
		{
			DBG_LOG("BD address get failed");
    2c4a:	483a      	ldr	r0, [pc, #232]	; (2d34 <ble_device_init+0x210>)
    2c4c:	4b3a      	ldr	r3, [pc, #232]	; (2d38 <ble_device_init+0x214>)
    2c4e:	4798      	blx	r3
    2c50:	4848      	ldr	r0, [pc, #288]	; (2d74 <ble_device_init+0x250>)
    2c52:	4b3b      	ldr	r3, [pc, #236]	; (2d40 <ble_device_init+0x21c>)
    2c54:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
    2c56:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
    2c58:	4836      	ldr	r0, [pc, #216]	; (2d34 <ble_device_init+0x210>)
    2c5a:	4b37      	ldr	r3, [pc, #220]	; (2d38 <ble_device_init+0x214>)
    2c5c:	4798      	blx	r3
    2c5e:	79a9      	ldrb	r1, [r5, #6]
    2c60:	796a      	ldrb	r2, [r5, #5]
    2c62:	792b      	ldrb	r3, [r5, #4]
    2c64:	78e8      	ldrb	r0, [r5, #3]
    2c66:	9000      	str	r0, [sp, #0]
    2c68:	78a8      	ldrb	r0, [r5, #2]
    2c6a:	9001      	str	r0, [sp, #4]
    2c6c:	7868      	ldrb	r0, [r5, #1]
    2c6e:	9002      	str	r0, [sp, #8]
    2c70:	7828      	ldrb	r0, [r5, #0]
    2c72:	9003      	str	r0, [sp, #12]
    2c74:	4840      	ldr	r0, [pc, #256]	; (2d78 <ble_device_init+0x254>)
    2c76:	4c32      	ldr	r4, [pc, #200]	; (2d40 <ble_device_init+0x21c>)
    2c78:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
    2c7a:	ac06      	add	r4, sp, #24
    2c7c:	230f      	movs	r3, #15
    2c7e:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
    2c80:	4b3e      	ldr	r3, [pc, #248]	; (2d7c <ble_device_init+0x258>)
    2c82:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
    2c84:	a807      	add	r0, sp, #28
    2c86:	1c29      	adds	r1, r5, #0
    2c88:	2207      	movs	r2, #7
    2c8a:	4b38      	ldr	r3, [pc, #224]	; (2d6c <ble_device_init+0x248>)
    2c8c:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
    2c8e:	2300      	movs	r3, #0
    2c90:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
    2c92:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
    2c94:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
    2c96:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
    2c98:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
    2c9a:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
    2c9c:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
    2c9e:	2380      	movs	r3, #128	; 0x80
    2ca0:	009b      	lsls	r3, r3, #2
    2ca2:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
    2ca4:	1c20      	adds	r0, r4, #0
    2ca6:	4b36      	ldr	r3, [pc, #216]	; (2d80 <ble_device_init+0x25c>)
    2ca8:	4798      	blx	r3
    2caa:	2800      	cmp	r0, #0
    2cac:	d005      	beq.n	2cba <ble_device_init+0x196>
	{
		DBG_LOG("Set BLE Device configuration failed");
    2cae:	4821      	ldr	r0, [pc, #132]	; (2d34 <ble_device_init+0x210>)
    2cb0:	4b21      	ldr	r3, [pc, #132]	; (2d38 <ble_device_init+0x214>)
    2cb2:	4798      	blx	r3
    2cb4:	4833      	ldr	r0, [pc, #204]	; (2d84 <ble_device_init+0x260>)
    2cb6:	4b22      	ldr	r3, [pc, #136]	; (2d40 <ble_device_init+0x21c>)
    2cb8:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
    2cba:	1c28      	adds	r0, r5, #0
    2cbc:	4b32      	ldr	r3, [pc, #200]	; (2d88 <ble_device_init+0x264>)
    2cbe:	4798      	blx	r3
    2cc0:	2800      	cmp	r0, #0
    2cc2:	d005      	beq.n	2cd0 <ble_device_init+0x1ac>
	{
		DBG_LOG("Set BLE Device Address failed");
    2cc4:	481b      	ldr	r0, [pc, #108]	; (2d34 <ble_device_init+0x210>)
    2cc6:	4b1c      	ldr	r3, [pc, #112]	; (2d38 <ble_device_init+0x214>)
    2cc8:	4798      	blx	r3
    2cca:	4830      	ldr	r0, [pc, #192]	; (2d8c <ble_device_init+0x268>)
    2ccc:	4b1c      	ldr	r3, [pc, #112]	; (2d40 <ble_device_init+0x21c>)
    2cce:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
    2cd0:	b010      	add	sp, #64	; 0x40
    2cd2:	bc04      	pop	{r2}
    2cd4:	4690      	mov	r8, r2
    2cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cd8:	20001184 	.word	0x20001184
    2cdc:	20001198 	.word	0x20001198
    2ce0:	20000eec 	.word	0x20000eec
    2ce4:	200011f4 	.word	0x200011f4
    2ce8:	20000ee8 	.word	0x20000ee8
    2cec:	20001170 	.word	0x20001170
    2cf0:	20001738 	.word	0x20001738
    2cf4:	20000f00 	.word	0x20000f00
    2cf8:	0000840d 	.word	0x0000840d
    2cfc:	2000116c 	.word	0x2000116c
    2d00:	200011c0 	.word	0x200011c0
    2d04:	000004e2 	.word	0x000004e2
    2d08:	20000108 	.word	0x20000108
    2d0c:	00003c65 	.word	0x00003c65
    2d10:	00003c71 	.word	0x00003c71
    2d14:	00003c91 	.word	0x00003c91
    2d18:	00003cb5 	.word	0x00003cb5
    2d1c:	00003cd5 	.word	0x00003cd5
    2d20:	00003be1 	.word	0x00003be1
    2d24:	00003bc5 	.word	0x00003bc5
    2d28:	00003c19 	.word	0x00003c19
    2d2c:	00003c59 	.word	0x00003c59
    2d30:	00003b5d 	.word	0x00003b5d
    2d34:	000096ac 	.word	0x000096ac
    2d38:	0000853d 	.word	0x0000853d
    2d3c:	00009e20 	.word	0x00009e20
    2d40:	0000841d 	.word	0x0000841d
    2d44:	0000479d 	.word	0x0000479d
    2d48:	00009e38 	.word	0x00009e38
    2d4c:	00009e58 	.word	0x00009e58
    2d50:	00009a2c 	.word	0x00009a2c
    2d54:	00002a55 	.word	0x00002a55
    2d58:	00009a04 	.word	0x00009a04
    2d5c:	00009e94 	.word	0x00009e94
    2d60:	00004619 	.word	0x00004619
    2d64:	00009e9c 	.word	0x00009e9c
    2d68:	000099e8 	.word	0x000099e8
    2d6c:	000083fb 	.word	0x000083fb
    2d70:	00004675 	.word	0x00004675
    2d74:	00009eb4 	.word	0x00009eb4
    2d78:	00009ecc 	.word	0x00009ecc
    2d7c:	00003a98 	.word	0x00003a98
    2d80:	00004699 	.word	0x00004699
    2d84:	00009f04 	.word	0x00009f04
    2d88:	00004905 	.word	0x00004905
    2d8c:	00009f28 	.word	0x00009f28

00002d90 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
    2d90:	b508      	push	{r3, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
    2d92:	2101      	movs	r1, #1
    2d94:	2201      	movs	r2, #1
    2d96:	4b06      	ldr	r3, [pc, #24]	; (2db0 <ble_send_slave_sec_request+0x20>)
    2d98:	4798      	blx	r3
    2d9a:	2800      	cmp	r0, #0
    2d9c:	d006      	beq.n	2dac <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
    2d9e:	4805      	ldr	r0, [pc, #20]	; (2db4 <ble_send_slave_sec_request+0x24>)
    2da0:	4b05      	ldr	r3, [pc, #20]	; (2db8 <ble_send_slave_sec_request+0x28>)
    2da2:	4798      	blx	r3
    2da4:	4805      	ldr	r0, [pc, #20]	; (2dbc <ble_send_slave_sec_request+0x2c>)
    2da6:	4b06      	ldr	r3, [pc, #24]	; (2dc0 <ble_send_slave_sec_request+0x30>)
    2da8:	4798      	blx	r3
		}
	#endif
        ALL_UNUSED(conn_handle);
	return AT_BLE_FAILURE;
    2daa:	20e2      	movs	r0, #226	; 0xe2
}
    2dac:	bd08      	pop	{r3, pc}
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	00006179 	.word	0x00006179
    2db4:	000096ac 	.word	0x000096ac
    2db8:	0000853d 	.word	0x0000853d
    2dbc:	00009f64 	.word	0x00009f64
    2dc0:	0000841d 	.word	0x0000841d

00002dc4 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
    2dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dc6:	465f      	mov	r7, fp
    2dc8:	464e      	mov	r6, r9
    2dca:	4645      	mov	r5, r8
    2dcc:	b4e0      	push	{r5, r6, r7}
    2dce:	b09a      	sub	sp, #104	; 0x68
    2dd0:	1c05      	adds	r5, r0, #0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
    2dd2:	7a83      	ldrb	r3, [r0, #10]
    2dd4:	4699      	mov	r9, r3
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d000      	beq.n	2ddc <ble_connected_state_handler+0x18>
    2dda:	e0ce      	b.n	2f7a <ble_connected_state_handler+0x1b6>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
    2ddc:	4e72      	ldr	r6, [pc, #456]	; (2fa8 <ble_connected_state_handler+0x1e4>)
    2dde:	1c30      	adds	r0, r6, #0
    2de0:	4f72      	ldr	r7, [pc, #456]	; (2fac <ble_connected_state_handler+0x1e8>)
    2de2:	47b8      	blx	r7
    2de4:	79a9      	ldrb	r1, [r5, #6]
    2de6:	796a      	ldrb	r2, [r5, #5]
    2de8:	792b      	ldrb	r3, [r5, #4]
    2dea:	78e8      	ldrb	r0, [r5, #3]
    2dec:	9000      	str	r0, [sp, #0]
    2dee:	78a8      	ldrb	r0, [r5, #2]
    2df0:	9001      	str	r0, [sp, #4]
    2df2:	7868      	ldrb	r0, [r5, #1]
    2df4:	9002      	str	r0, [sp, #8]
    2df6:	486e      	ldr	r0, [pc, #440]	; (2fb0 <ble_connected_state_handler+0x1ec>)
    2df8:	4c6e      	ldr	r4, [pc, #440]	; (2fb4 <ble_connected_state_handler+0x1f0>)
    2dfa:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
    2dfc:	1c30      	adds	r0, r6, #0
    2dfe:	47b8      	blx	r7
    2e00:	8929      	ldrh	r1, [r5, #8]
    2e02:	486d      	ldr	r0, [pc, #436]	; (2fb8 <ble_connected_state_handler+0x1f4>)
    2e04:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
    2e06:	486d      	ldr	r0, [pc, #436]	; (2fbc <ble_connected_state_handler+0x1f8>)
    2e08:	1c29      	adds	r1, r5, #0
    2e0a:	2212      	movs	r2, #18
    2e0c:	4b6c      	ldr	r3, [pc, #432]	; (2fc0 <ble_connected_state_handler+0x1fc>)
    2e0e:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
    2e10:	9504      	str	r5, [sp, #16]
    2e12:	486c      	ldr	r0, [pc, #432]	; (2fc4 <ble_connected_state_handler+0x200>)
    2e14:	1c29      	adds	r1, r5, #0
    2e16:	2207      	movs	r2, #7
    2e18:	4b6b      	ldr	r3, [pc, #428]	; (2fc8 <ble_connected_state_handler+0x204>)
    2e1a:	4798      	blx	r3
    2e1c:	2800      	cmp	r0, #0
    2e1e:	d002      	beq.n	2e26 <ble_connected_state_handler+0x62>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
    2e20:	782b      	ldrb	r3, [r5, #0]
    2e22:	2b02      	cmp	r3, #2
    2e24:	d004      	beq.n	2e30 <ble_connected_state_handler+0x6c>
    2e26:	4e69      	ldr	r6, [pc, #420]	; (2fcc <ble_connected_state_handler+0x208>)
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
						return AT_BLE_FAILURE;
    2e28:	2400      	movs	r4, #0
		
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
    2e2a:	4b67      	ldr	r3, [pc, #412]	; (2fc8 <ble_connected_state_handler+0x204>)
    2e2c:	469b      	mov	fp, r3
    2e2e:	e02a      	b.n	2e86 <ble_connected_state_handler+0xc2>
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
    2e30:	a806      	add	r0, sp, #24
    2e32:	2100      	movs	r1, #0
    2e34:	2250      	movs	r2, #80	; 0x50
    2e36:	4b66      	ldr	r3, [pc, #408]	; (2fd0 <ble_connected_state_handler+0x20c>)
    2e38:	4798      	blx	r3
    2e3a:	4f66      	ldr	r7, [pc, #408]	; (2fd4 <ble_connected_state_handler+0x210>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
    2e3c:	2300      	movs	r3, #0
    2e3e:	e00b      	b.n	2e58 <ble_connected_state_handler+0x94>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
    2e40:	1c59      	adds	r1, r3, #1
    2e42:	7814      	ldrb	r4, [r2, #0]
    2e44:	a806      	add	r0, sp, #24
    2e46:	54c4      	strb	r4, [r0, r3]
    2e48:	3201      	adds	r2, #1
    2e4a:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
    2e4c:	42b3      	cmp	r3, r6
    2e4e:	d1f7      	bne.n	2e40 <ble_connected_state_handler+0x7c>
    2e50:	377c      	adds	r7, #124	; 0x7c
    2e52:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
    2e54:	2b50      	cmp	r3, #80	; 0x50
    2e56:	d004      	beq.n	2e62 <ble_connected_state_handler+0x9e>
    2e58:	1c1e      	adds	r6, r3, #0
    2e5a:	3610      	adds	r6, #16
    2e5c:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
    2e5e:	1c3a      	adds	r2, r7, #0
    2e60:	e7ee      	b.n	2e40 <ble_connected_state_handler+0x7c>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
    2e62:	2005      	movs	r0, #5
    2e64:	1c29      	adds	r1, r5, #0
    2e66:	aa06      	add	r2, sp, #24
    2e68:	4b5b      	ldr	r3, [pc, #364]	; (2fd8 <ble_connected_state_handler+0x214>)
    2e6a:	4798      	blx	r3
    2e6c:	4681      	mov	r9, r0
    2e6e:	2800      	cmp	r0, #0
    2e70:	d100      	bne.n	2e74 <ble_connected_state_handler+0xb0>
    2e72:	e091      	b.n	2f98 <ble_connected_state_handler+0x1d4>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
    2e74:	484c      	ldr	r0, [pc, #304]	; (2fa8 <ble_connected_state_handler+0x1e4>)
    2e76:	4b4d      	ldr	r3, [pc, #308]	; (2fac <ble_connected_state_handler+0x1e8>)
    2e78:	4798      	blx	r3
    2e7a:	4858      	ldr	r0, [pc, #352]	; (2fdc <ble_connected_state_handler+0x218>)
    2e7c:	4b4d      	ldr	r3, [pc, #308]	; (2fb4 <ble_connected_state_handler+0x1f0>)
    2e7e:	4798      	blx	r3
						return AT_BLE_FAILURE;
    2e80:	23e2      	movs	r3, #226	; 0xe2
    2e82:	4699      	mov	r9, r3
    2e84:	e088      	b.n	2f98 <ble_connected_state_handler+0x1d4>
    2e86:	b2e7      	uxtb	r7, r4
		
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
    2e88:	9405      	str	r4, [sp, #20]
    2e8a:	1c30      	adds	r0, r6, #0
    2e8c:	9904      	ldr	r1, [sp, #16]
    2e8e:	2207      	movs	r2, #7
    2e90:	47d8      	blx	fp
    2e92:	2800      	cmp	r0, #0
    2e94:	d109      	bne.n	2eaa <ble_connected_state_handler+0xe6>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
    2e96:	9a05      	ldr	r2, [sp, #20]
    2e98:	0153      	lsls	r3, r2, #5
    2e9a:	1a9b      	subs	r3, r3, r2
    2e9c:	009a      	lsls	r2, r3, #2
    2e9e:	4b4b      	ldr	r3, [pc, #300]	; (2fcc <ble_connected_state_handler+0x208>)
    2ea0:	189b      	adds	r3, r3, r2
    2ea2:	3358      	adds	r3, #88	; 0x58
    2ea4:	2202      	movs	r2, #2
    2ea6:	719a      	strb	r2, [r3, #6]
    2ea8:	e041      	b.n	2f2e <ble_connected_state_handler+0x16a>
    2eaa:	3401      	adds	r4, #1
    2eac:	367c      	adds	r6, #124	; 0x7c
		}
			
		
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    2eae:	2c05      	cmp	r4, #5
    2eb0:	d1e9      	bne.n	2e86 <ble_connected_state_handler+0xc2>
    2eb2:	e06c      	b.n	2f8e <ble_connected_state_handler+0x1ca>
					at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
					return AT_BLE_FAILURE;
				}
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    2eb4:	235e      	movs	r3, #94	; 0x5e
    2eb6:	4a45      	ldr	r2, [pc, #276]	; (2fcc <ble_connected_state_handler+0x208>)
    2eb8:	5cd3      	ldrb	r3, [r2, r3]
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d110      	bne.n	2ee0 <ble_connected_state_handler+0x11c>
    2ebe:	e017      	b.n	2ef0 <ble_connected_state_handler+0x12c>
			
			if (!conn_exists)
			{
				if (ble_device_count == BLE_MAX_DEVICE_CONNECTED)
				{
					DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
    2ec0:	4839      	ldr	r0, [pc, #228]	; (2fa8 <ble_connected_state_handler+0x1e4>)
    2ec2:	4b3a      	ldr	r3, [pc, #232]	; (2fac <ble_connected_state_handler+0x1e8>)
    2ec4:	4798      	blx	r3
    2ec6:	4b46      	ldr	r3, [pc, #280]	; (2fe0 <ble_connected_state_handler+0x21c>)
    2ec8:	7819      	ldrb	r1, [r3, #0]
    2eca:	b2c9      	uxtb	r1, r1
    2ecc:	4845      	ldr	r0, [pc, #276]	; (2fe4 <ble_connected_state_handler+0x220>)
    2ece:	4b39      	ldr	r3, [pc, #228]	; (2fb4 <ble_connected_state_handler+0x1f0>)
    2ed0:	4798      	blx	r3
					at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
    2ed2:	8928      	ldrh	r0, [r5, #8]
    2ed4:	2113      	movs	r1, #19
    2ed6:	4b44      	ldr	r3, [pc, #272]	; (2fe8 <ble_connected_state_handler+0x224>)
    2ed8:	4798      	blx	r3
					return AT_BLE_FAILURE;
    2eda:	23e2      	movs	r3, #226	; 0xe2
    2edc:	4699      	mov	r9, r3
    2ede:	e05b      	b.n	2f98 <ble_connected_state_handler+0x1d4>
    2ee0:	4a42      	ldr	r2, [pc, #264]	; (2fec <ble_connected_state_handler+0x228>)
				}
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    2ee2:	2301      	movs	r3, #1
    2ee4:	b2df      	uxtb	r7, r3
    2ee6:	1c1c      	adds	r4, r3, #0
    2ee8:	7811      	ldrb	r1, [r2, #0]
    2eea:	2900      	cmp	r1, #0
    2eec:	d119      	bne.n	2f22 <ble_connected_state_handler+0x15e>
    2eee:	e001      	b.n	2ef4 <ble_connected_state_handler+0x130>
    2ef0:	2400      	movs	r4, #0
    2ef2:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
    2ef4:	0163      	lsls	r3, r4, #5
    2ef6:	4698      	mov	r8, r3
    2ef8:	1b18      	subs	r0, r3, r4
    2efa:	0080      	lsls	r0, r0, #2
    2efc:	4e33      	ldr	r6, [pc, #204]	; (2fcc <ble_connected_state_handler+0x208>)
    2efe:	1980      	adds	r0, r0, r6
    2f00:	1c29      	adds	r1, r5, #0
    2f02:	2212      	movs	r2, #18
    2f04:	4b2e      	ldr	r3, [pc, #184]	; (2fc0 <ble_connected_state_handler+0x1fc>)
    2f06:	4798      	blx	r3
						ble_device_count++;
    2f08:	4a35      	ldr	r2, [pc, #212]	; (2fe0 <ble_connected_state_handler+0x21c>)
    2f0a:	7813      	ldrb	r3, [r2, #0]
    2f0c:	3301      	adds	r3, #1
    2f0e:	b2db      	uxtb	r3, r3
    2f10:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
    2f12:	4643      	mov	r3, r8
    2f14:	1b1b      	subs	r3, r3, r4
    2f16:	009b      	lsls	r3, r3, #2
    2f18:	18f3      	adds	r3, r6, r3
    2f1a:	3358      	adds	r3, #88	; 0x58
    2f1c:	2202      	movs	r2, #2
    2f1e:	719a      	strb	r2, [r3, #6]
						break;
    2f20:	e005      	b.n	2f2e <ble_connected_state_handler+0x16a>
    2f22:	1c79      	adds	r1, r7, #1
    2f24:	b2cf      	uxtb	r7, r1
    2f26:	3301      	adds	r3, #1
    2f28:	327c      	adds	r2, #124	; 0x7c
				{
					DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
					at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
					return AT_BLE_FAILURE;
				}
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    2f2a:	2b05      	cmp	r3, #5
    2f2c:	d1da      	bne.n	2ee4 <ble_connected_state_handler+0x120>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
    2f2e:	4825      	ldr	r0, [pc, #148]	; (2fc4 <ble_connected_state_handler+0x200>)
    2f30:	1c29      	adds	r1, r5, #0
    2f32:	2207      	movs	r2, #7
    2f34:	4b24      	ldr	r3, [pc, #144]	; (2fc8 <ble_connected_state_handler+0x204>)
    2f36:	4798      	blx	r3
    2f38:	2800      	cmp	r0, #0
    2f3a:	d10c      	bne.n	2f56 <ble_connected_state_handler+0x192>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
    2f3c:	017b      	lsls	r3, r7, #5
    2f3e:	1bdb      	subs	r3, r3, r7
    2f40:	009b      	lsls	r3, r3, #2
    2f42:	4a22      	ldr	r2, [pc, #136]	; (2fcc <ble_connected_state_handler+0x208>)
    2f44:	18d3      	adds	r3, r2, r3
    2f46:	2205      	movs	r2, #5
    2f48:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
    2f4a:	4b1e      	ldr	r3, [pc, #120]	; (2fc4 <ble_connected_state_handler+0x200>)
    2f4c:	2200      	movs	r2, #0
    2f4e:	601a      	str	r2, [r3, #0]
    2f50:	809a      	strh	r2, [r3, #4]
    2f52:	719a      	strb	r2, [r3, #6]
    2f54:	e020      	b.n	2f98 <ble_connected_state_handler+0x1d4>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
    2f56:	017b      	lsls	r3, r7, #5
    2f58:	1bdb      	subs	r3, r3, r7
    2f5a:	009b      	lsls	r3, r3, #2
    2f5c:	4a1b      	ldr	r2, [pc, #108]	; (2fcc <ble_connected_state_handler+0x208>)
    2f5e:	18d3      	adds	r3, r2, r3
    2f60:	220a      	movs	r2, #10
    2f62:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
    2f64:	4b17      	ldr	r3, [pc, #92]	; (2fc4 <ble_connected_state_handler+0x200>)
    2f66:	2100      	movs	r1, #0
    2f68:	6019      	str	r1, [r3, #0]
    2f6a:	8099      	strh	r1, [r3, #4]
    2f6c:	7199      	strb	r1, [r3, #6]
		}
		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
    2f6e:	2a0a      	cmp	r2, #10
    2f70:	d112      	bne.n	2f98 <ble_connected_state_handler+0x1d4>
        {
	 		ble_send_slave_sec_request(conn_params->handle);
    2f72:	8928      	ldrh	r0, [r5, #8]
    2f74:	4b1e      	ldr	r3, [pc, #120]	; (2ff0 <ble_connected_state_handler+0x22c>)
    2f76:	4798      	blx	r3
    2f78:	e00e      	b.n	2f98 <ble_connected_state_handler+0x1d4>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
    2f7a:	480b      	ldr	r0, [pc, #44]	; (2fa8 <ble_connected_state_handler+0x1e4>)
    2f7c:	4b0b      	ldr	r3, [pc, #44]	; (2fac <ble_connected_state_handler+0x1e8>)
    2f7e:	4798      	blx	r3
    2f80:	7aa9      	ldrb	r1, [r5, #10]
    2f82:	481c      	ldr	r0, [pc, #112]	; (2ff4 <ble_connected_state_handler+0x230>)
    2f84:	4b0b      	ldr	r3, [pc, #44]	; (2fb4 <ble_connected_state_handler+0x1f0>)
    2f86:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
    2f88:	2300      	movs	r3, #0
    2f8a:	4699      	mov	r9, r3
    2f8c:	e004      	b.n	2f98 <ble_connected_state_handler+0x1d4>
				}
			}
			
			if (!conn_exists)
			{
				if (ble_device_count == BLE_MAX_DEVICE_CONNECTED)
    2f8e:	4b14      	ldr	r3, [pc, #80]	; (2fe0 <ble_connected_state_handler+0x21c>)
    2f90:	781b      	ldrb	r3, [r3, #0]
    2f92:	2b05      	cmp	r3, #5
    2f94:	d18e      	bne.n	2eb4 <ble_connected_state_handler+0xf0>
    2f96:	e793      	b.n	2ec0 <ble_connected_state_handler+0xfc>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
    2f98:	4648      	mov	r0, r9
    2f9a:	b01a      	add	sp, #104	; 0x68
    2f9c:	bc1c      	pop	{r2, r3, r4}
    2f9e:	4690      	mov	r8, r2
    2fa0:	4699      	mov	r9, r3
    2fa2:	46a3      	mov	fp, r4
    2fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fa6:	46c0      	nop			; (mov r8, r8)
    2fa8:	000096ac 	.word	0x000096ac
    2fac:	0000853d 	.word	0x0000853d
    2fb0:	00009f84 	.word	0x00009f84
    2fb4:	0000841d 	.word	0x0000841d
    2fb8:	00009fc8 	.word	0x00009fc8
    2fbc:	200011ac 	.word	0x200011ac
    2fc0:	000083fb 	.word	0x000083fb
    2fc4:	200005ec 	.word	0x200005ec
    2fc8:	000083dd 	.word	0x000083dd
    2fcc:	20000f00 	.word	0x20000f00
    2fd0:	0000840d 	.word	0x0000840d
    2fd4:	20000f46 	.word	0x20000f46
    2fd8:	00004b99 	.word	0x00004b99
    2fdc:	00009fe0 	.word	0x00009fe0
    2fe0:	2000116c 	.word	0x2000116c
    2fe4:	0000a004 	.word	0x0000a004
    2fe8:	00004b39 	.word	0x00004b39
    2fec:	20000fda 	.word	0x20000fda
    2ff0:	00002d91 	.word	0x00002d91
    2ff4:	0000a040 	.word	0x0000a040

00002ff8 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
    2ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ffa:	4647      	mov	r7, r8
    2ffc:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
    2ffe:	7803      	ldrb	r3, [r0, #0]
    3000:	2b00      	cmp	r3, #0
    3002:	d166      	bne.n	30d2 <ble_resolv_rand_addr_handler+0xda>
    3004:	4d3b      	ldr	r5, [pc, #236]	; (30f4 <ble_resolv_rand_addr_handler+0xfc>)
    3006:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
    3008:	1c46      	adds	r6, r0, #1
    300a:	4f3b      	ldr	r7, [pc, #236]	; (30f8 <ble_resolv_rand_addr_handler+0x100>)
    300c:	1c30      	adds	r0, r6, #0
    300e:	1c29      	adds	r1, r5, #0
    3010:	2210      	movs	r2, #16
    3012:	47b8      	blx	r7
    3014:	2800      	cmp	r0, #0
    3016:	d04b      	beq.n	30b0 <ble_resolv_rand_addr_handler+0xb8>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    3018:	3401      	adds	r4, #1
    301a:	b2e4      	uxtb	r4, r4
    301c:	357c      	adds	r5, #124	; 0x7c
    301e:	2c05      	cmp	r4, #5
    3020:	d1f4      	bne.n	300c <ble_resolv_rand_addr_handler+0x14>
    3022:	e056      	b.n	30d2 <ble_resolv_rand_addr_handler+0xda>
			at_ble_disconnect(connected_state_info.handle, AT_BLE_TERMINATED_BY_USER);
			return AT_BLE_FAILURE;
		}
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    3024:	235e      	movs	r3, #94	; 0x5e
    3026:	4a35      	ldr	r2, [pc, #212]	; (30fc <ble_resolv_rand_addr_handler+0x104>)
    3028:	5cd3      	ldrb	r3, [r2, r3]
    302a:	2b00      	cmp	r3, #0
    302c:	d110      	bne.n	3050 <ble_resolv_rand_addr_handler+0x58>
    302e:	e017      	b.n	3060 <ble_resolv_rand_addr_handler+0x68>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		if (ble_device_count == BLE_MAX_DEVICE_CONNECTED)
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
    3030:	4833      	ldr	r0, [pc, #204]	; (3100 <ble_resolv_rand_addr_handler+0x108>)
    3032:	4b34      	ldr	r3, [pc, #208]	; (3104 <ble_resolv_rand_addr_handler+0x10c>)
    3034:	4798      	blx	r3
    3036:	4b34      	ldr	r3, [pc, #208]	; (3108 <ble_resolv_rand_addr_handler+0x110>)
    3038:	7819      	ldrb	r1, [r3, #0]
    303a:	b2c9      	uxtb	r1, r1
    303c:	4833      	ldr	r0, [pc, #204]	; (310c <ble_resolv_rand_addr_handler+0x114>)
    303e:	4b34      	ldr	r3, [pc, #208]	; (3110 <ble_resolv_rand_addr_handler+0x118>)
    3040:	4798      	blx	r3
			at_ble_disconnect(connected_state_info.handle, AT_BLE_TERMINATED_BY_USER);
    3042:	4b34      	ldr	r3, [pc, #208]	; (3114 <ble_resolv_rand_addr_handler+0x11c>)
    3044:	8918      	ldrh	r0, [r3, #8]
    3046:	2113      	movs	r1, #19
    3048:	4b33      	ldr	r3, [pc, #204]	; (3118 <ble_resolv_rand_addr_handler+0x120>)
    304a:	4798      	blx	r3
			return AT_BLE_FAILURE;
    304c:	20e2      	movs	r0, #226	; 0xe2
    304e:	e04e      	b.n	30ee <ble_resolv_rand_addr_handler+0xf6>
    3050:	4a32      	ldr	r2, [pc, #200]	; (311c <ble_resolv_rand_addr_handler+0x124>)
		}
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    3052:	2301      	movs	r3, #1
    3054:	b2dc      	uxtb	r4, r3
    3056:	1c1d      	adds	r5, r3, #0
    3058:	7811      	ldrb	r1, [r2, #0]
    305a:	2900      	cmp	r1, #0
    305c:	d11c      	bne.n	3098 <ble_resolv_rand_addr_handler+0xa0>
    305e:	e001      	b.n	3064 <ble_resolv_rand_addr_handler+0x6c>
    3060:	2500      	movs	r5, #0
    3062:	2400      	movs	r4, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
    3064:	4b25      	ldr	r3, [pc, #148]	; (30fc <ble_resolv_rand_addr_handler+0x104>)
    3066:	4698      	mov	r8, r3
    3068:	016e      	lsls	r6, r5, #5
    306a:	1b77      	subs	r7, r6, r5
    306c:	00bf      	lsls	r7, r7, #2
    306e:	4447      	add	r7, r8
    3070:	1c38      	adds	r0, r7, #0
    3072:	4928      	ldr	r1, [pc, #160]	; (3114 <ble_resolv_rand_addr_handler+0x11c>)
    3074:	2212      	movs	r2, #18
    3076:	4b2a      	ldr	r3, [pc, #168]	; (3120 <ble_resolv_rand_addr_handler+0x128>)
    3078:	4798      	blx	r3
				ble_device_count++;
    307a:	4a23      	ldr	r2, [pc, #140]	; (3108 <ble_resolv_rand_addr_handler+0x110>)
    307c:	7813      	ldrb	r3, [r2, #0]
    307e:	3301      	adds	r3, #1
    3080:	b2db      	uxtb	r3, r3
    3082:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
    3084:	3758      	adds	r7, #88	; 0x58
    3086:	2302      	movs	r3, #2
    3088:	71bb      	strb	r3, [r7, #6]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
    308a:	1b75      	subs	r5, r6, r5
    308c:	00ad      	lsls	r5, r5, #2
    308e:	1c2b      	adds	r3, r5, #0
    3090:	4443      	add	r3, r8
    3092:	220a      	movs	r2, #10
    3094:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
				break;
    3096:	e021      	b.n	30dc <ble_resolv_rand_addr_handler+0xe4>
    3098:	3301      	adds	r3, #1
    309a:	327c      	adds	r2, #124	; 0x7c
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
			at_ble_disconnect(connected_state_info.handle, AT_BLE_TERMINATED_BY_USER);
			return AT_BLE_FAILURE;
		}
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    309c:	2b05      	cmp	r3, #5
    309e:	d1d9      	bne.n	3054 <ble_resolv_rand_addr_handler+0x5c>
		ble_send_slave_sec_request(connected_state_info.handle);
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
    30a0:	2000      	movs	r0, #0
    30a2:	e024      	b.n	30ee <ble_resolv_rand_addr_handler+0xf6>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
    30a4:	4b1b      	ldr	r3, [pc, #108]	; (3114 <ble_resolv_rand_addr_handler+0x11c>)
    30a6:	8918      	ldrh	r0, [r3, #8]
    30a8:	4b1e      	ldr	r3, [pc, #120]	; (3124 <ble_resolv_rand_addr_handler+0x12c>)
    30aa:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
    30ac:	2000      	movs	r0, #0
    30ae:	e01e      	b.n	30ee <ble_resolv_rand_addr_handler+0xf6>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
    30b0:	4912      	ldr	r1, [pc, #72]	; (30fc <ble_resolv_rand_addr_handler+0x104>)
    30b2:	0163      	lsls	r3, r4, #5
    30b4:	1b1a      	subs	r2, r3, r4
    30b6:	0092      	lsls	r2, r2, #2
    30b8:	188a      	adds	r2, r1, r2
    30ba:	1c10      	adds	r0, r2, #0
    30bc:	3058      	adds	r0, #88	; 0x58
    30be:	2502      	movs	r5, #2
    30c0:	7185      	strb	r5, [r0, #6]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
    30c2:	200a      	movs	r0, #10
    30c4:	7490      	strb	r0, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
    30c6:	1c10      	adds	r0, r2, #0
    30c8:	4912      	ldr	r1, [pc, #72]	; (3114 <ble_resolv_rand_addr_handler+0x11c>)
    30ca:	2212      	movs	r2, #18
    30cc:	4b14      	ldr	r3, [pc, #80]	; (3120 <ble_resolv_rand_addr_handler+0x128>)
    30ce:	4798      	blx	r3
    30d0:	e004      	b.n	30dc <ble_resolv_rand_addr_handler+0xe4>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		if (ble_device_count == BLE_MAX_DEVICE_CONNECTED)
    30d2:	4b0d      	ldr	r3, [pc, #52]	; (3108 <ble_resolv_rand_addr_handler+0x110>)
    30d4:	781b      	ldrb	r3, [r3, #0]
    30d6:	2b05      	cmp	r3, #5
    30d8:	d1a4      	bne.n	3024 <ble_resolv_rand_addr_handler+0x2c>
    30da:	e7a9      	b.n	3030 <ble_resolv_rand_addr_handler+0x38>
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
    30dc:	0163      	lsls	r3, r4, #5
    30de:	1b1c      	subs	r4, r3, r4
    30e0:	00a4      	lsls	r4, r4, #2
    30e2:	4b06      	ldr	r3, [pc, #24]	; (30fc <ble_resolv_rand_addr_handler+0x104>)
    30e4:	191c      	adds	r4, r3, r4
    30e6:	7ca3      	ldrb	r3, [r4, #18]
    30e8:	2b0a      	cmp	r3, #10
    30ea:	d0db      	beq.n	30a4 <ble_resolv_rand_addr_handler+0xac>
		ble_send_slave_sec_request(connected_state_info.handle);
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
    30ec:	2000      	movs	r0, #0
	
}
    30ee:	bc04      	pop	{r2}
    30f0:	4690      	mov	r8, r2
    30f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30f4:	20000f46 	.word	0x20000f46
    30f8:	000083dd 	.word	0x000083dd
    30fc:	20000f00 	.word	0x20000f00
    3100:	000096ac 	.word	0x000096ac
    3104:	0000853d 	.word	0x0000853d
    3108:	2000116c 	.word	0x2000116c
    310c:	0000a004 	.word	0x0000a004
    3110:	0000841d 	.word	0x0000841d
    3114:	200011ac 	.word	0x200011ac
    3118:	00004b39 	.word	0x00004b39
    311c:	20000fda 	.word	0x20000fda
    3120:	000083fb 	.word	0x000083fb
    3124:	00002d91 	.word	0x00002d91

00003128 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
    3128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    312a:	1c0d      	adds	r5, r1, #0
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
    312c:	283a      	cmp	r0, #58	; 0x3a
    312e:	d86c      	bhi.n	320a <ble_event_manager+0xe2>
    3130:	0083      	lsls	r3, r0, #2
    3132:	4a39      	ldr	r2, [pc, #228]	; (3218 <ble_event_manager+0xf0>)
    3134:	58d3      	ldr	r3, [r2, r3]
    3136:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    3138:	0084      	lsls	r4, r0, #2
    313a:	2600      	movs	r6, #0
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
    313c:	4f37      	ldr	r7, [pc, #220]	; (321c <ble_event_manager+0xf4>)
    313e:	59bb      	ldr	r3, [r7, r6]
    3140:	2b00      	cmp	r3, #0
    3142:	d004      	beq.n	314e <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    3144:	591b      	ldr	r3, [r3, r4]
    3146:	2b00      	cmp	r3, #0
    3148:	d001      	beq.n	314e <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);
    314a:	1c28      	adds	r0, r5, #0
    314c:	4798      	blx	r3
    314e:	3604      	adds	r6, #4
	case AT_BLE_SIGN_COUNTERS_IND:
	case AT_BLE_PEER_ATT_INFO_IND:
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
    3150:	2e14      	cmp	r6, #20
    3152:	d1f4      	bne.n	313e <ble_event_manager+0x16>
    3154:	e05f      	b.n	3216 <ble_event_manager+0xee>
	case AT_BLE_CHARACTERISTIC_WRITE_RESPONSE:
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
    3156:	3813      	subs	r0, #19
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    3158:	b2c4      	uxtb	r4, r0
    315a:	00a4      	lsls	r4, r4, #2
    315c:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
    315e:	4f30      	ldr	r7, [pc, #192]	; (3220 <ble_event_manager+0xf8>)
    3160:	59bb      	ldr	r3, [r7, r6]
    3162:	2b00      	cmp	r3, #0
    3164:	d004      	beq.n	3170 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    3166:	591b      	ldr	r3, [r3, r4]
    3168:	2b00      	cmp	r3, #0
    316a:	d001      	beq.n	3170 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
    316c:	1c28      	adds	r0, r5, #0
    316e:	4798      	blx	r3
    3170:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
    3172:	2e14      	cmp	r6, #20
    3174:	d1f4      	bne.n	3160 <ble_event_manager+0x38>
    3176:	e04e      	b.n	3216 <ble_event_manager+0xee>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
    3178:	381d      	subs	r0, #29
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    317a:	b2c4      	uxtb	r4, r0
    317c:	00a4      	lsls	r4, r4, #2
    317e:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
    3180:	4f28      	ldr	r7, [pc, #160]	; (3224 <ble_event_manager+0xfc>)
    3182:	59bb      	ldr	r3, [r7, r6]
    3184:	2b00      	cmp	r3, #0
    3186:	d004      	beq.n	3192 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    3188:	591b      	ldr	r3, [r3, r4]
    318a:	2b00      	cmp	r3, #0
    318c:	d001      	beq.n	3192 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
    318e:	1c28      	adds	r0, r5, #0
    3190:	4798      	blx	r3
    3192:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
    3194:	2e14      	cmp	r6, #20
    3196:	d1f4      	bne.n	3182 <ble_event_manager+0x5a>
    3198:	e03d      	b.n	3216 <ble_event_manager+0xee>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
    319a:	3827      	subs	r0, #39	; 0x27
    319c:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
    319e:	4b22      	ldr	r3, [pc, #136]	; (3228 <ble_event_manager+0x100>)
    31a0:	681b      	ldr	r3, [r3, #0]
    31a2:	2b00      	cmp	r3, #0
    31a4:	d037      	beq.n	3216 <ble_event_manager+0xee>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    31a6:	0080      	lsls	r0, r0, #2
    31a8:	58c3      	ldr	r3, [r0, r3]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d033      	beq.n	3216 <ble_event_manager+0xee>
				{
					event_cb_fn[events](event_params);
    31ae:	1c08      	adds	r0, r1, #0
    31b0:	4798      	blx	r3
    31b2:	e030      	b.n	3216 <ble_event_manager+0xee>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
    31b4:	382d      	subs	r0, #45	; 0x2d
    31b6:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
    31b8:	4b1c      	ldr	r3, [pc, #112]	; (322c <ble_event_manager+0x104>)
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	2b00      	cmp	r3, #0
    31be:	d02a      	beq.n	3216 <ble_event_manager+0xee>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    31c0:	0080      	lsls	r0, r0, #2
    31c2:	58c3      	ldr	r3, [r0, r3]
    31c4:	2b00      	cmp	r3, #0
    31c6:	d026      	beq.n	3216 <ble_event_manager+0xee>
				{
					event_cb_fn[events](event_params);
    31c8:	1c08      	adds	r0, r1, #0
    31ca:	4798      	blx	r3
    31cc:	e023      	b.n	3216 <ble_event_manager+0xee>
	
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
    31ce:	3836      	subs	r0, #54	; 0x36
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    31d0:	b2c4      	uxtb	r4, r0
    31d2:	00a4      	lsls	r4, r4, #2
    31d4:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
    31d6:	4f16      	ldr	r7, [pc, #88]	; (3230 <ble_event_manager+0x108>)
    31d8:	59bb      	ldr	r3, [r7, r6]
    31da:	2b00      	cmp	r3, #0
    31dc:	d004      	beq.n	31e8 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    31de:	591b      	ldr	r3, [r3, r4]
    31e0:	2b00      	cmp	r3, #0
    31e2:	d001      	beq.n	31e8 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
    31e4:	1c28      	adds	r0, r5, #0
    31e6:	4798      	blx	r3
    31e8:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
    31ea:	2e14      	cmp	r6, #20
    31ec:	d1f4      	bne.n	31d8 <ble_event_manager+0xb0>
    31ee:	e012      	b.n	3216 <ble_event_manager+0xee>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
    31f0:	3838      	subs	r0, #56	; 0x38
    31f2:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
    31f4:	4b0f      	ldr	r3, [pc, #60]	; (3234 <ble_event_manager+0x10c>)
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	2b00      	cmp	r3, #0
    31fa:	d00c      	beq.n	3216 <ble_event_manager+0xee>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    31fc:	0080      	lsls	r0, r0, #2
    31fe:	58c3      	ldr	r3, [r0, r3]
    3200:	2b00      	cmp	r3, #0
    3202:	d008      	beq.n	3216 <ble_event_manager+0xee>
				{
					event_cb_fn[events](event_params);
    3204:	1c08      	adds	r0, r1, #0
    3206:	4798      	blx	r3
    3208:	e005      	b.n	3216 <ble_event_manager+0xee>
	break;
	
	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
    320a:	4d0b      	ldr	r5, [pc, #44]	; (3238 <ble_event_manager+0x110>)
    320c:	1c28      	adds	r0, r5, #0
    320e:	4c0b      	ldr	r4, [pc, #44]	; (323c <ble_event_manager+0x114>)
    3210:	47a0      	blx	r4
    3212:	1c28      	adds	r0, r5, #0
    3214:	47a0      	blx	r4
	}
	break;		
	}
}
    3216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3218:	000098fc 	.word	0x000098fc
    321c:	20001184 	.word	0x20001184
    3220:	20001198 	.word	0x20001198
    3224:	20000eec 	.word	0x20000eec
    3228:	200011f4 	.word	0x200011f4
    322c:	20000ee8 	.word	0x20000ee8
    3230:	20001170 	.word	0x20001170
    3234:	20001738 	.word	0x20001738
    3238:	000096ac 	.word	0x000096ac
    323c:	0000853d 	.word	0x0000853d

00003240 <ble_event_task>:
/** @brief Set BLE Address, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr);

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(void)
{
    3240:	b510      	push	{r4, lr}
    if (at_ble_event_get(&event, ble_event_params, BLE_EVENT_TIMEOUT) == AT_BLE_SUCCESS) 
    3242:	4808      	ldr	r0, [pc, #32]	; (3264 <ble_event_task+0x24>)
    3244:	4908      	ldr	r1, [pc, #32]	; (3268 <ble_event_task+0x28>)
    3246:	2214      	movs	r2, #20
    3248:	4b08      	ldr	r3, [pc, #32]	; (326c <ble_event_task+0x2c>)
    324a:	4798      	blx	r3
    324c:	1e04      	subs	r4, r0, #0
    324e:	d105      	bne.n	325c <ble_event_task+0x1c>
    {
            ble_event_manager(event, ble_event_params);
    3250:	4b04      	ldr	r3, [pc, #16]	; (3264 <ble_event_task+0x24>)
    3252:	7818      	ldrb	r0, [r3, #0]
    3254:	4904      	ldr	r1, [pc, #16]	; (3268 <ble_event_task+0x28>)
    3256:	4b06      	ldr	r3, [pc, #24]	; (3270 <ble_event_task+0x30>)
    3258:	4798      	blx	r3
            return AT_BLE_SUCCESS;
    325a:	e000      	b.n	325e <ble_event_task+0x1e>
    }
    
    return AT_BLE_FAILURE;
    325c:	24e2      	movs	r4, #226	; 0xe2
}
    325e:	1c20      	adds	r0, r4, #0
    3260:	bd10      	pop	{r4, pc}
    3262:	46c0      	nop			; (mov r8, r8)
    3264:	200011f0 	.word	0x200011f0
    3268:	2000152c 	.word	0x2000152c
    326c:	00003f9d 	.word	0x00003f9d
    3270:	00003129 	.word	0x00003129

00003274 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
    3274:	b5f0      	push	{r4, r5, r6, r7, lr}
    3276:	b091      	sub	sp, #68	; 0x44
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
    3278:	ac08      	add	r4, sp, #32
    327a:	2303      	movs	r3, #3
    327c:	7063      	strb	r3, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
    327e:	2711      	movs	r7, #17
    3280:	70a7      	strb	r7, [r4, #2]
    3282:	2218      	movs	r2, #24
    3284:	70e2      	strb	r2, [r4, #3]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
    3286:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
    3288:	3303      	adds	r3, #3
    328a:	7123      	strb	r3, [r4, #4]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
    328c:	2609      	movs	r6, #9
    328e:	7166      	strb	r6, [r4, #5]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
    3290:	2026      	movs	r0, #38	; 0x26
    3292:	4468      	add	r0, sp
    3294:	4913      	ldr	r1, [pc, #76]	; (32e4 <ble_advertisement_data_set+0x70>)
    3296:	3a13      	subs	r2, #19
    3298:	4d13      	ldr	r5, [pc, #76]	; (32e8 <ble_advertisement_data_set+0x74>)
    329a:	47a8      	blx	r5
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
    329c:	2315      	movs	r3, #21
    329e:	466a      	mov	r2, sp
    32a0:	7053      	strb	r3, [r2, #1]
		MREPEAT(SERVICE_UUID128_MAX_NUM, _CONF_SERVICE_SOLTN_128BIT_UUID_SCAN_RSP, &scan_resp_data_element)
    32a2:	1c90      	adds	r0, r2, #2
    32a4:	4911      	ldr	r1, [pc, #68]	; (32ec <ble_advertisement_data_set+0x78>)
    32a6:	2210      	movs	r2, #16
    32a8:	47a8      	blx	r5
		scan_resp_element_len = scan_resp_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(scan_resp_element_len)
		{
			scn_resp[length_field_ind] = scan_resp_element_len + ADV_TYPE_SIZE;
    32aa:	466b      	mov	r3, sp
    32ac:	701f      	strb	r7, [r3, #0]
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
    32ae:	72e6      	strb	r6, [r4, #11]
		adv_buf[adv_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
    32b0:	23ff      	movs	r3, #255	; 0xff
    32b2:	7323      	strb	r3, [r4, #12]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
    32b4:	202d      	movs	r0, #45	; 0x2d
    32b6:	4468      	add	r0, sp
    32b8:	490d      	ldr	r1, [pc, #52]	; (32f0 <ble_advertisement_data_set+0x7c>)
    32ba:	3110      	adds	r1, #16
    32bc:	2208      	movs	r2, #8
    32be:	47a8      	blx	r5
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
    32c0:	1c20      	adds	r0, r4, #0
    32c2:	2115      	movs	r1, #21
    32c4:	466a      	mov	r2, sp
    32c6:	2312      	movs	r3, #18
    32c8:	4c0a      	ldr	r4, [pc, #40]	; (32f4 <ble_advertisement_data_set+0x80>)
    32ca:	47a0      	blx	r4
    32cc:	2800      	cmp	r0, #0
    32ce:	d005      	beq.n	32dc <ble_advertisement_data_set+0x68>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
    32d0:	4809      	ldr	r0, [pc, #36]	; (32f8 <ble_advertisement_data_set+0x84>)
    32d2:	4b0a      	ldr	r3, [pc, #40]	; (32fc <ble_advertisement_data_set+0x88>)
    32d4:	4798      	blx	r3
    32d6:	480a      	ldr	r0, [pc, #40]	; (3300 <ble_advertisement_data_set+0x8c>)
    32d8:	4b0a      	ldr	r3, [pc, #40]	; (3304 <ble_advertisement_data_set+0x90>)
    32da:	4798      	blx	r3
		return status;
		} else {
		DBG_LOG_DEV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
	}
}
    32dc:	2000      	movs	r0, #0
    32de:	b011      	add	sp, #68	; 0x44
    32e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32e2:	46c0      	nop			; (mov r8, r8)
    32e4:	00009e94 	.word	0x00009e94
    32e8:	000083fb 	.word	0x000083fb
    32ec:	0000a068 	.word	0x0000a068
    32f0:	000099e8 	.word	0x000099e8
    32f4:	00004959 	.word	0x00004959
    32f8:	000096ac 	.word	0x000096ac
    32fc:	0000853d 	.word	0x0000853d
    3300:	0000a07c 	.word	0x0000a07c
    3304:	0000841d 	.word	0x0000841d

00003308 <pndcs_primary_service_define>:
}

/**@brief defining a initialized service 
 */
at_ble_status_t pndcs_primary_service_define(void)
{
    3308:	b510      	push	{r4, lr}
    330a:	b082      	sub	sp, #8
	DBG_LOG("defining primary service");
    330c:	4809      	ldr	r0, [pc, #36]	; (3334 <pndcs_primary_service_define+0x2c>)
    330e:	4b0a      	ldr	r3, [pc, #40]	; (3338 <pndcs_primary_service_define+0x30>)
    3310:	4798      	blx	r3
    3312:	480a      	ldr	r0, [pc, #40]	; (333c <pndcs_primary_service_define+0x34>)
    3314:	4b0a      	ldr	r3, [pc, #40]	; (3340 <pndcs_primary_service_define+0x38>)
    3316:	4798      	blx	r3
	return(at_ble_primary_service_define(&pndcs_serv.serv_uuid,
    3318:	480a      	ldr	r0, [pc, #40]	; (3344 <pndcs_primary_service_define+0x3c>)
    331a:	1c01      	adds	r1, r0, #0
    331c:	3112      	adds	r1, #18
    331e:	1c03      	adds	r3, r0, #0
    3320:	3314      	adds	r3, #20
    3322:	9300      	str	r3, [sp, #0]
    3324:	2301      	movs	r3, #1
    3326:	9301      	str	r3, [sp, #4]
    3328:	2200      	movs	r2, #0
    332a:	2300      	movs	r3, #0
    332c:	4c06      	ldr	r4, [pc, #24]	; (3348 <pndcs_primary_service_define+0x40>)
    332e:	47a0      	blx	r4
	&pndcs_serv.serv_handle,
	NULL, 0,
	&pndcs_serv.serv_chars, 1));
	return AT_BLE_SUCCESS;
}
    3330:	b002      	add	sp, #8
    3332:	bd10      	pop	{r4, pc}
    3334:	000096ac 	.word	0x000096ac
    3338:	0000853d 	.word	0x0000853d
    333c:	0000a0a0 	.word	0x0000a0a0
    3340:	0000841d 	.word	0x0000841d
    3344:	20001744 	.word	0x20001744
    3348:	00005485 	.word	0x00005485

0000334c <pndcs_init_service>:
pndcs_gatt_service_handler_t pndcs_serv;

/**@brief Initialize the service with its included service, characteristics, and descriptors
 */
at_ble_status_t pndcs_init_service(uint8_t *buf, uint16_t len)
{
    334c:	b5f0      	push	{r4, r5, r6, r7, lr}
    334e:	465f      	mov	r7, fp
    3350:	4656      	mov	r6, sl
    3352:	464d      	mov	r5, r9
    3354:	b4e0      	push	{r5, r6, r7}
    3356:	4683      	mov	fp, r0
    3358:	1c0f      	adds	r7, r1, #0
	pndcs_serv.serv_handle = 0;
    335a:	4c1f      	ldr	r4, [pc, #124]	; (33d8 <pndcs_init_service+0x8c>)
    335c:	2500      	movs	r5, #0
    335e:	2600      	movs	r6, #0
    3360:	8265      	strh	r5, [r4, #18]
	pndcs_serv.serv_uuid.type = AT_BLE_UUID_128; //unique uuid
    3362:	2302      	movs	r3, #2
    3364:	469a      	mov	sl, r3
    3366:	7023      	strb	r3, [r4, #0]
	memcpy(&pndcs_serv.serv_uuid.uuid[0], PNDCS_SERVICE_UUID, UUID_128BIT_LEN);
    3368:	481c      	ldr	r0, [pc, #112]	; (33dc <pndcs_init_service+0x90>)
    336a:	491d      	ldr	r1, [pc, #116]	; (33e0 <pndcs_init_service+0x94>)
    336c:	2210      	movs	r2, #16
    336e:	4b1d      	ldr	r3, [pc, #116]	; (33e4 <pndcs_init_service+0x98>)
    3370:	4699      	mov	r9, r3
    3372:	4798      	blx	r3
	
	//PNDCS service characteristic for transferring spectrum data
	pndcs_serv.serv_chars.char_val_handle = 0;          /* handle stored here */
    3374:	82a5      	strh	r5, [r4, #20]
	pndcs_serv.serv_chars.uuid.type = AT_BLE_UUID_128;
    3376:	4653      	mov	r3, sl
    3378:	75a3      	strb	r3, [r4, #22]
	memcpy(&pndcs_serv.serv_uuid.uuid[0], PNDCS_CHAR_DATA_UUID, UUID_128BIT_LEN);
    337a:	4818      	ldr	r0, [pc, #96]	; (33dc <pndcs_init_service+0x90>)
    337c:	491a      	ldr	r1, [pc, #104]	; (33e8 <pndcs_init_service+0x9c>)
    337e:	2210      	movs	r2, #16
    3380:	47c8      	blx	r9
	
	pndcs_serv.serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); /* Properties */
    3382:	2312      	movs	r3, #18
    3384:	8523      	strh	r3, [r4, #40]	; 0x28
	pndcs_serv.serv_chars.init_value = buf;             /* value */
    3386:	465b      	mov	r3, fp
    3388:	62e3      	str	r3, [r4, #44]	; 0x2c
	pndcs_serv.serv_chars.value_init_len = len;
    338a:	8627      	strh	r7, [r4, #48]	; 0x30
	pndcs_serv.serv_chars.value_max_len = len;
    338c:	8667      	strh	r7, [r4, #50]	; 0x32
#if BLE_PAIR_ENABLE
	pndcs_serv.serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR |
    338e:	2233      	movs	r2, #51	; 0x33
    3390:	2334      	movs	r3, #52	; 0x34
    3392:	54e2      	strb	r2, [r4, r3]
												 AT_BLE_ATTR_WRITABLE_REQ_AUTHN_NO_AUTHR);   /* permissions */
#else
	pndcs_serv.serv_chars.value_permissions = AT_BLE_ATTR_NO_PERMISSIONS;   /* permissions */
#endif
	pndcs_serv.serv_chars.user_desc = NULL;           /* user defined name */
    3394:	63a5      	str	r5, [r4, #56]	; 0x38
	pndcs_serv.serv_chars.user_desc_len = 0;
    3396:	87a5      	strh	r5, [r4, #60]	; 0x3c
	pndcs_serv.serv_chars.user_desc_max_len = 0;
    3398:	87e5      	strh	r5, [r4, #62]	; 0x3e
	pndcs_serv.serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
    339a:	3310      	adds	r3, #16
    339c:	54e6      	strb	r6, [r4, r3]
	pndcs_serv.serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
    339e:	3301      	adds	r3, #1
    33a0:	54e6      	strb	r6, [r4, r3]
	pndcs_serv.serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
    33a2:	3301      	adds	r3, #1
    33a4:	54e6      	strb	r6, [r4, r3]
	pndcs_serv.serv_chars.user_desc_handle = 0;             /*user desc handles*/
    33a6:	3302      	adds	r3, #2
    33a8:	52e5      	strh	r5, [r4, r3]
	pndcs_serv.serv_chars.client_config_handle = 0;         /*client config handles*/
    33aa:	3302      	adds	r3, #2
    33ac:	52e5      	strh	r5, [r4, r3]
	pndcs_serv.serv_chars.server_config_handle = 0;         /*server config handles*/
    33ae:	3302      	adds	r3, #2
    33b0:	52e5      	strh	r5, [r4, r3]
	
	presentation_format.format = AT_BLE_PRES_FORMAT_UINT8;
    33b2:	4b0e      	ldr	r3, [pc, #56]	; (33ec <pndcs_init_service+0xa0>)
    33b4:	3a2f      	subs	r2, #47	; 0x2f
    33b6:	701a      	strb	r2, [r3, #0]
	presentation_format.exponent = PNDCS_CHAR_PRESENTATION_FORMAT_EXPONENT;
    33b8:	705e      	strb	r6, [r3, #1]
	presentation_format.unit = (uint8_t) PNDCS_CHAR_PRESENTATION_FORMAT_UNIT;
	presentation_format.unit = (uint8_t) (PNDCS_CHAR_PRESENTATION_FORMAT_UNIT >> 8);
    33ba:	3214      	adds	r2, #20
    33bc:	805a      	strh	r2, [r3, #2]
	presentation_format.name_space = PNDCS_CHAR_PRESENTATION_FORMAT_NAMESPACE;
    33be:	3a17      	subs	r2, #23
    33c0:	711a      	strb	r2, [r3, #4]
	presentation_format.description = (uint8_t) PNDCS_CHAR_PRESENTATION_FORMAT_DESCRIPTOR;
	presentation_format.description = (uint8_t) (PNDCS_CHAR_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
    33c2:	320f      	adds	r2, #15
    33c4:	80da      	strh	r2, [r3, #6]
	
	//pndcs_serv.serv_chars.presentation_format = &presentation_format;       /* presentation format */
	pndcs_serv.serv_chars.presentation_format = NULL;
    33c6:	6425      	str	r5, [r4, #64]	; 0x40
	//ALL_UNUSED(pndcs_value);
	
	return pndcs_primary_service_define();
    33c8:	4b09      	ldr	r3, [pc, #36]	; (33f0 <pndcs_init_service+0xa4>)
    33ca:	4798      	blx	r3
}
    33cc:	bc1c      	pop	{r2, r3, r4}
    33ce:	4691      	mov	r9, r2
    33d0:	469a      	mov	sl, r3
    33d2:	46a3      	mov	fp, r4
    33d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	20001744 	.word	0x20001744
    33dc:	20001745 	.word	0x20001745
    33e0:	0000a068 	.word	0x0000a068
    33e4:	000083fb 	.word	0x000083fb
    33e8:	0000a0bc 	.word	0x0000a0bc
    33ec:	2000173c 	.word	0x2000173c
    33f0:	00003309 	.word	0x00003309

000033f4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    33f4:	b570      	push	{r4, r5, r6, lr}
    33f6:	b082      	sub	sp, #8
    33f8:	1c05      	adds	r5, r0, #0
    33fa:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    33fc:	2200      	movs	r2, #0
    33fe:	466b      	mov	r3, sp
    3400:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3402:	4c06      	ldr	r4, [pc, #24]	; (341c <usart_serial_getchar+0x28>)
    3404:	1c28      	adds	r0, r5, #0
    3406:	466b      	mov	r3, sp
    3408:	1d99      	adds	r1, r3, #6
    340a:	47a0      	blx	r4
    340c:	2800      	cmp	r0, #0
    340e:	d1f9      	bne.n	3404 <usart_serial_getchar+0x10>

	*c = temp;
    3410:	466b      	mov	r3, sp
    3412:	3306      	adds	r3, #6
    3414:	881b      	ldrh	r3, [r3, #0]
    3416:	7033      	strb	r3, [r6, #0]
}
    3418:	b002      	add	sp, #8
    341a:	bd70      	pop	{r4, r5, r6, pc}
    341c:	00000cb1 	.word	0x00000cb1

00003420 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    3420:	b570      	push	{r4, r5, r6, lr}
    3422:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    3424:	b28c      	uxth	r4, r1
    3426:	4e03      	ldr	r6, [pc, #12]	; (3434 <usart_serial_putchar+0x14>)
    3428:	1c28      	adds	r0, r5, #0
    342a:	1c21      	adds	r1, r4, #0
    342c:	47b0      	blx	r6
    342e:	2800      	cmp	r0, #0
    3430:	d1fa      	bne.n	3428 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    3432:	bd70      	pop	{r4, r5, r6, pc}
    3434:	00000c85 	.word	0x00000c85

00003438 <serial_console_init>:

/**
 *  Configure console.
 */
void serial_console_init(void)
{
    3438:	b5f0      	push	{r4, r5, r6, r7, lr}
    343a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    343c:	2380      	movs	r3, #128	; 0x80
    343e:	05db      	lsls	r3, r3, #23
    3440:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3442:	2300      	movs	r3, #0
    3444:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3446:	22ff      	movs	r2, #255	; 0xff
    3448:	4669      	mov	r1, sp
    344a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    344c:	2200      	movs	r2, #0
    344e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3450:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3452:	2401      	movs	r4, #1
    3454:	2124      	movs	r1, #36	; 0x24
    3456:	4668      	mov	r0, sp
    3458:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    345a:	3101      	adds	r1, #1
    345c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    345e:	3101      	adds	r1, #1
    3460:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3462:	3101      	adds	r1, #1
    3464:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3466:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3468:	3105      	adds	r1, #5
    346a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    346c:	3101      	adds	r1, #1
    346e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3470:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3472:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3474:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3476:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3478:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    347a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    347c:	2313      	movs	r3, #19
    347e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3480:	7742      	strb	r2, [r0, #29]
 	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    3482:	2380      	movs	r3, #128	; 0x80
    3484:	035b      	lsls	r3, r3, #13
    3486:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    3488:	4b1a      	ldr	r3, [pc, #104]	; (34f4 <serial_console_init+0xbc>)
    348a:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    348c:	4b1a      	ldr	r3, [pc, #104]	; (34f8 <serial_console_init+0xc0>)
    348e:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    3490:	2301      	movs	r3, #1
    3492:	425b      	negs	r3, r3
    3494:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    3496:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    3498:	23e1      	movs	r3, #225	; 0xe1
    349a:	025b      	lsls	r3, r3, #9
    349c:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    349e:	4d17      	ldr	r5, [pc, #92]	; (34fc <serial_console_init+0xc4>)
    34a0:	4b17      	ldr	r3, [pc, #92]	; (3500 <serial_console_init+0xc8>)
    34a2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    34a4:	4a17      	ldr	r2, [pc, #92]	; (3504 <serial_console_init+0xcc>)
    34a6:	4b18      	ldr	r3, [pc, #96]	; (3508 <serial_console_init+0xd0>)
    34a8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    34aa:	4a18      	ldr	r2, [pc, #96]	; (350c <serial_console_init+0xd4>)
    34ac:	4b18      	ldr	r3, [pc, #96]	; (3510 <serial_console_init+0xd8>)
    34ae:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    34b0:	1c28      	adds	r0, r5, #0
    34b2:	4918      	ldr	r1, [pc, #96]	; (3514 <serial_console_init+0xdc>)
    34b4:	466a      	mov	r2, sp
    34b6:	4b18      	ldr	r3, [pc, #96]	; (3518 <serial_console_init+0xe0>)
    34b8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    34ba:	4f18      	ldr	r7, [pc, #96]	; (351c <serial_console_init+0xe4>)
    34bc:	683b      	ldr	r3, [r7, #0]
    34be:	6898      	ldr	r0, [r3, #8]
    34c0:	2100      	movs	r1, #0
    34c2:	4e17      	ldr	r6, [pc, #92]	; (3520 <serial_console_init+0xe8>)
    34c4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    34c6:	683b      	ldr	r3, [r7, #0]
    34c8:	6858      	ldr	r0, [r3, #4]
    34ca:	2100      	movs	r1, #0
    34cc:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    34ce:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    34d0:	1c30      	adds	r0, r6, #0
    34d2:	4b14      	ldr	r3, [pc, #80]	; (3524 <serial_console_init+0xec>)
    34d4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    34d6:	231f      	movs	r3, #31
    34d8:	4018      	ands	r0, r3
    34da:	4084      	lsls	r4, r0
    34dc:	4b12      	ldr	r3, [pc, #72]	; (3528 <serial_console_init+0xf0>)
    34de:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    34e0:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    34e2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    34e4:	2b00      	cmp	r3, #0
    34e6:	d1fc      	bne.n	34e2 <serial_console_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    34e8:	6832      	ldr	r2, [r6, #0]
    34ea:	3302      	adds	r3, #2
    34ec:	4313      	orrs	r3, r2
    34ee:	6033      	str	r3, [r6, #0]

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE, &usart_conf);
	usart_enable(&cdc_uart_module);
}
    34f0:	b011      	add	sp, #68	; 0x44
    34f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34f4:	00160002 	.word	0x00160002
    34f8:	00170002 	.word	0x00170002
    34fc:	200005f4 	.word	0x200005f4
    3500:	20000e80 	.word	0x20000e80
    3504:	00003421 	.word	0x00003421
    3508:	20000e7c 	.word	0x20000e7c
    350c:	000033f5 	.word	0x000033f5
    3510:	20000e78 	.word	0x20000e78
    3514:	42000c00 	.word	0x42000c00
    3518:	00000929 	.word	0x00000929
    351c:	200000a8 	.word	0x200000a8
    3520:	000085c9 	.word	0x000085c9
    3524:	0000089d 	.word	0x0000089d
    3528:	e000e100 	.word	0xe000e100

0000352c <getchar_timeout>:

uint8_t getchar_timeout(uint32_t timeout)
{
    352c:	b5f0      	push	{r4, r5, r6, r7, lr}
    352e:	b083      	sub	sp, #12
    3530:	1c04      	adds	r4, r0, #0
	uint16_t temp = NULL;
    3532:	2200      	movs	r2, #0
    3534:	466b      	mov	r3, sp
    3536:	80da      	strh	r2, [r3, #6]

	while((STATUS_OK != usart_read_wait(&cdc_uart_module, &temp)) && timeout){
    3538:	4e09      	ldr	r6, [pc, #36]	; (3560 <getchar_timeout+0x34>)
    353a:	4d0a      	ldr	r5, [pc, #40]	; (3564 <getchar_timeout+0x38>)
		timeout--;
		delay_ms(1);
    353c:	4f0a      	ldr	r7, [pc, #40]	; (3568 <getchar_timeout+0x3c>)

uint8_t getchar_timeout(uint32_t timeout)
{
	uint16_t temp = NULL;

	while((STATUS_OK != usart_read_wait(&cdc_uart_module, &temp)) && timeout){
    353e:	e002      	b.n	3546 <getchar_timeout+0x1a>
		timeout--;
    3540:	3c01      	subs	r4, #1
		delay_ms(1);
    3542:	2001      	movs	r0, #1
    3544:	47b8      	blx	r7

uint8_t getchar_timeout(uint32_t timeout)
{
	uint16_t temp = NULL;

	while((STATUS_OK != usart_read_wait(&cdc_uart_module, &temp)) && timeout){
    3546:	1c30      	adds	r0, r6, #0
    3548:	466b      	mov	r3, sp
    354a:	1d99      	adds	r1, r3, #6
    354c:	47a8      	blx	r5
    354e:	2800      	cmp	r0, #0
    3550:	d001      	beq.n	3556 <getchar_timeout+0x2a>
    3552:	2c00      	cmp	r4, #0
    3554:	d1f4      	bne.n	3540 <getchar_timeout+0x14>
		timeout--;
		delay_ms(1);
	}

	return ((uint8_t)temp);	
    3556:	466b      	mov	r3, sp
    3558:	7998      	ldrb	r0, [r3, #6]
}
    355a:	b003      	add	sp, #12
    355c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    355e:	46c0      	nop			; (mov r8, r8)
    3560:	200005f4 	.word	0x200005f4
    3564:	00000cb1 	.word	0x00000cb1
    3568:	00000151 	.word	0x00000151

0000356c <serial_drv_write_cb>:
}

static void serial_drv_write_cb(struct usart_module *const usart_module)
{
	/* USART Tx callback */	
}
    356c:	4770      	bx	lr
    356e:	46c0      	nop			; (mov r8, r8)

00003570 <serial_drv_read_cb>:
	return STATUS_OK;
}

extern void platform_process_rxdata(uint8_t t_rx_data);
static void serial_drv_read_cb(struct usart_module *const module)
{	 
    3570:	b508      	push	{r3, lr}
	platform_process_rxdata((uint8_t)rx_data);
    3572:	4b02      	ldr	r3, [pc, #8]	; (357c <serial_drv_read_cb+0xc>)
    3574:	7818      	ldrb	r0, [r3, #0]
    3576:	4b02      	ldr	r3, [pc, #8]	; (3580 <serial_drv_read_cb+0x10>)
    3578:	4798      	blx	r3
}
    357a:	bd08      	pop	{r3, pc}
    357c:	20000628 	.word	0x20000628
    3580:	00003c39 	.word	0x00003c39

00003584 <serial_drv_send>:
	usart_configure_flowcontrol();
	#endif	
}

uint16_t serial_drv_send(uint8_t* data, uint16_t len)
{  
    3584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3586:	1c06      	adds	r6, r0, #0
    3588:	1c0d      	adds	r5, r1, #0
	while (STATUS_OK != usart_write_buffer_job(&usart_instance, data, len));
    358a:	4c08      	ldr	r4, [pc, #32]	; (35ac <serial_drv_send+0x28>)
    358c:	4f08      	ldr	r7, [pc, #32]	; (35b0 <serial_drv_send+0x2c>)
    358e:	1c20      	adds	r0, r4, #0
    3590:	1c31      	adds	r1, r6, #0
    3592:	1c2a      	adds	r2, r5, #0
    3594:	47b8      	blx	r7
    3596:	2800      	cmp	r0, #0
    3598:	d1f9      	bne.n	358e <serial_drv_send+0xa>
	/* Wait for ongoing transmission complete */
	while (STATUS_OK != usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX));
    359a:	4d04      	ldr	r5, [pc, #16]	; (35ac <serial_drv_send+0x28>)
    359c:	4c05      	ldr	r4, [pc, #20]	; (35b4 <serial_drv_send+0x30>)
    359e:	1c28      	adds	r0, r5, #0
    35a0:	2101      	movs	r1, #1
    35a2:	47a0      	blx	r4
    35a4:	2800      	cmp	r0, #0
    35a6:	d1fa      	bne.n	359e <serial_drv_send+0x1a>
	
	return STATUS_OK;
}
    35a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35aa:	46c0      	nop			; (mov r8, r8)
    35ac:	20001794 	.word	0x20001794
    35b0:	00000ddd 	.word	0x00000ddd
    35b4:	00000dfd 	.word	0x00000dfd

000035b8 <serial_read_byte>:
{
	serial_read_byte(&rx_data);
}

uint8_t serial_read_byte(uint16_t* data)
{
    35b8:	b508      	push	{r3, lr}
    35ba:	1c01      	adds	r1, r0, #0
	return usart_read_job(&usart_instance, data);
    35bc:	4801      	ldr	r0, [pc, #4]	; (35c4 <serial_read_byte+0xc>)
    35be:	4b02      	ldr	r3, [pc, #8]	; (35c8 <serial_read_byte+0x10>)
    35c0:	4798      	blx	r3
}
    35c2:	bd08      	pop	{r3, pc}
    35c4:	20001794 	.word	0x20001794
    35c8:	00000dcd 	.word	0x00000dcd

000035cc <configure_serial_drv>:
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	serial_read_byte(&rx_data);
}

uint8_t configure_serial_drv(void)
{
    35cc:	b570      	push	{r4, r5, r6, lr}
    35ce:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    35d0:	2380      	movs	r3, #128	; 0x80
    35d2:	05db      	lsls	r3, r3, #23
    35d4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    35d6:	2300      	movs	r3, #0
    35d8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    35da:	22ff      	movs	r2, #255	; 0xff
    35dc:	4669      	mov	r1, sp
    35de:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    35e0:	2200      	movs	r2, #0
    35e2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    35e4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    35e6:	2101      	movs	r1, #1
    35e8:	2024      	movs	r0, #36	; 0x24
    35ea:	466c      	mov	r4, sp
    35ec:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    35ee:	3001      	adds	r0, #1
    35f0:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    35f2:	3125      	adds	r1, #37	; 0x25
    35f4:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    35f6:	3101      	adds	r1, #1
    35f8:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    35fa:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    35fc:	3105      	adds	r1, #5
    35fe:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3600:	3101      	adds	r1, #1
    3602:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3604:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3606:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3608:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    360a:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    360c:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    360e:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    3610:	2313      	movs	r3, #19
    3612:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3614:	7762      	strb	r2, [r4, #29]
		usart_configure_flowcontrol();
		#warning "This mode works only if Flow Control Permanently Enabled in the BTLC1000"
	#else
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = CONF_BLE_BAUDRATE;
    3616:	23e1      	movs	r3, #225	; 0xe1
    3618:	025b      	lsls	r3, r3, #9
    361a:	9308      	str	r3, [sp, #32]
	config_usart.generator_source = CONF_BLE_UART_CLOCK;
	config_usart.mux_setting = CONF_BLE_MUX_SETTING;
    361c:	2380      	movs	r3, #128	; 0x80
    361e:	035b      	lsls	r3, r3, #13
    3620:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = CONF_BLE_PINMUX_PAD0;
    3622:	4b1d      	ldr	r3, [pc, #116]	; (3698 <configure_serial_drv+0xcc>)
    3624:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = CONF_BLE_PINMUX_PAD1;
    3626:	4b1d      	ldr	r3, [pc, #116]	; (369c <configure_serial_drv+0xd0>)
    3628:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = CONF_BLE_PINMUX_PAD2;
    362a:	2301      	movs	r3, #1
    362c:	425b      	negs	r3, r3
    362e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = CONF_BLE_PINMUX_PAD3;
    3630:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance, CONF_BLE_USART_MODULE, &config_usart) != STATUS_OK);
    3632:	4e1b      	ldr	r6, [pc, #108]	; (36a0 <configure_serial_drv+0xd4>)
    3634:	4d1b      	ldr	r5, [pc, #108]	; (36a4 <configure_serial_drv+0xd8>)
    3636:	4c1c      	ldr	r4, [pc, #112]	; (36a8 <configure_serial_drv+0xdc>)
    3638:	1c30      	adds	r0, r6, #0
    363a:	1c29      	adds	r1, r5, #0
    363c:	466a      	mov	r2, sp
    363e:	47a0      	blx	r4
    3640:	2800      	cmp	r0, #0
    3642:	d1f9      	bne.n	3638 <configure_serial_drv+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3644:	4d16      	ldr	r5, [pc, #88]	; (36a0 <configure_serial_drv+0xd4>)
    3646:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3648:	1c20      	adds	r0, r4, #0
    364a:	4b18      	ldr	r3, [pc, #96]	; (36ac <configure_serial_drv+0xe0>)
    364c:	4798      	blx	r3
    364e:	231f      	movs	r3, #31
    3650:	4018      	ands	r0, r3
    3652:	3b1e      	subs	r3, #30
    3654:	4083      	lsls	r3, r0
    3656:	1c18      	adds	r0, r3, #0
    3658:	4b15      	ldr	r3, [pc, #84]	; (36b0 <configure_serial_drv+0xe4>)
    365a:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    365c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    365e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3660:	2b00      	cmp	r3, #0
    3662:	d1fc      	bne.n	365e <configure_serial_drv+0x92>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3664:	6822      	ldr	r2, [r4, #0]
    3666:	3302      	adds	r3, #2
    3668:	4313      	orrs	r3, r2
    366a:	6023      	str	r3, [r4, #0]

	usart_enable(&usart_instance);
	
	/* register and enable usart callbacks */
	usart_register_callback(&usart_instance,
    366c:	4c0c      	ldr	r4, [pc, #48]	; (36a0 <configure_serial_drv+0xd4>)
    366e:	1c20      	adds	r0, r4, #0
    3670:	4910      	ldr	r1, [pc, #64]	; (36b4 <configure_serial_drv+0xe8>)
    3672:	2201      	movs	r2, #1
    3674:	4d10      	ldr	r5, [pc, #64]	; (36b8 <configure_serial_drv+0xec>)
    3676:	47a8      	blx	r5
		serial_drv_read_cb, USART_CALLBACK_BUFFER_RECEIVED);
	usart_register_callback(&usart_instance,
    3678:	1c20      	adds	r0, r4, #0
    367a:	4910      	ldr	r1, [pc, #64]	; (36bc <configure_serial_drv+0xf0>)
    367c:	2200      	movs	r2, #0
    367e:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    3680:	2231      	movs	r2, #49	; 0x31
    3682:	5ca1      	ldrb	r1, [r4, r2]
    3684:	2303      	movs	r3, #3
    3686:	430b      	orrs	r3, r1
    3688:	54a3      	strb	r3, [r4, r2]
		serial_drv_write_cb, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	serial_read_byte(&rx_data);
    368a:	480d      	ldr	r0, [pc, #52]	; (36c0 <configure_serial_drv+0xf4>)
    368c:	4b0d      	ldr	r3, [pc, #52]	; (36c4 <configure_serial_drv+0xf8>)
    368e:	4798      	blx	r3
	#endif
	
	return STATUS_OK;
}
    3690:	2000      	movs	r0, #0
    3692:	b010      	add	sp, #64	; 0x40
    3694:	bd70      	pop	{r4, r5, r6, pc}
    3696:	46c0      	nop			; (mov r8, r8)
    3698:	00280003 	.word	0x00280003
    369c:	00290003 	.word	0x00290003
    36a0:	20001794 	.word	0x20001794
    36a4:	42001000 	.word	0x42001000
    36a8:	00000929 	.word	0x00000929
    36ac:	0000089d 	.word	0x0000089d
    36b0:	e000e100 	.word	0xe000e100
    36b4:	00003571 	.word	0x00003571
    36b8:	00000db5 	.word	0x00000db5
    36bc:	0000356d 	.word	0x0000356d
    36c0:	20000628 	.word	0x20000628
    36c4:	000035b9 	.word	0x000035b9

000036c8 <configure_usart_after_patch>:

void configure_usart_after_patch(void)
{
    36c8:	b570      	push	{r4, r5, r6, lr}
    36ca:	b090      	sub	sp, #64	; 0x40
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    36cc:	4d49      	ldr	r5, [pc, #292]	; (37f4 <configure_usart_after_patch+0x12c>)
    36ce:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    36d0:	1c20      	adds	r0, r4, #0
    36d2:	4b49      	ldr	r3, [pc, #292]	; (37f8 <configure_usart_after_patch+0x130>)
    36d4:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    36d6:	231f      	movs	r3, #31
    36d8:	4018      	ands	r0, r3
    36da:	3b1e      	subs	r3, #30
    36dc:	4083      	lsls	r3, r0
    36de:	1c18      	adds	r0, r3, #0
    36e0:	2380      	movs	r3, #128	; 0x80
    36e2:	4a46      	ldr	r2, [pc, #280]	; (37fc <configure_usart_after_patch+0x134>)
    36e4:	50d0      	str	r0, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    36e6:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    36e8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    36ea:	2b00      	cmp	r3, #0
    36ec:	d1fc      	bne.n	36e8 <configure_usart_after_patch+0x20>
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    36ee:	6823      	ldr	r3, [r4, #0]
    36f0:	2202      	movs	r2, #2
    36f2:	4393      	bics	r3, r2
    36f4:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    36f6:	4d3f      	ldr	r5, [pc, #252]	; (37f4 <configure_usart_after_patch+0x12c>)
    36f8:	682c      	ldr	r4, [r5, #0]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    36fa:	1c20      	adds	r0, r4, #0
    36fc:	4b3e      	ldr	r3, [pc, #248]	; (37f8 <configure_usart_after_patch+0x130>)
    36fe:	4798      	blx	r3
    3700:	231f      	movs	r3, #31
    3702:	4018      	ands	r0, r3
    3704:	3b1e      	subs	r3, #30
    3706:	4083      	lsls	r3, r0
    3708:	1c18      	adds	r0, r3, #0
    370a:	2380      	movs	r3, #128	; 0x80
    370c:	4a3b      	ldr	r2, [pc, #236]	; (37fc <configure_usart_after_patch+0x134>)
    370e:	50d0      	str	r0, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3710:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3712:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3714:	2b00      	cmp	r3, #0
    3716:	d1fc      	bne.n	3712 <configure_usart_after_patch+0x4a>
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3718:	6823      	ldr	r3, [r4, #0]
    371a:	2202      	movs	r2, #2
    371c:	4393      	bics	r3, r2
    371e:	6023      	str	r3, [r4, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3720:	4b34      	ldr	r3, [pc, #208]	; (37f4 <configure_usart_after_patch+0x12c>)
    3722:	681a      	ldr	r2, [r3, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3724:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3726:	2b00      	cmp	r3, #0
    3728:	d1fc      	bne.n	3724 <configure_usart_after_patch+0x5c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
    372a:	2101      	movs	r1, #1
    372c:	6021      	str	r1, [r4, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    372e:	2380      	movs	r3, #128	; 0x80
    3730:	05db      	lsls	r3, r3, #23
    3732:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3734:	2300      	movs	r3, #0
    3736:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3738:	22ff      	movs	r2, #255	; 0xff
    373a:	4668      	mov	r0, sp
    373c:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    373e:	2200      	movs	r2, #0
    3740:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3742:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3744:	2024      	movs	r0, #36	; 0x24
    3746:	466c      	mov	r4, sp
    3748:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    374a:	3001      	adds	r0, #1
    374c:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    374e:	3125      	adds	r1, #37	; 0x25
    3750:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    3752:	3101      	adds	r1, #1
    3754:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    3756:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3758:	3105      	adds	r1, #5
    375a:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    375c:	3101      	adds	r1, #1
    375e:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3760:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3762:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3764:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3766:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3768:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    376a:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    376c:	2313      	movs	r3, #19
    376e:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3770:	7762      	strb	r2, [r4, #29]
	usart_disable(&usart_instance);
	usart_reset(&usart_instance);
#endif
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate = CONF_FLCR_BLE_BAUDRATE;
    3772:	23e1      	movs	r3, #225	; 0xe1
    3774:	025b      	lsls	r3, r3, #9
    3776:	9308      	str	r3, [sp, #32]
	config_usart.generator_source = CONF_FLCR_BLE_UART_CLOCK;
	config_usart.mux_setting = CONF_FLCR_BLE_MUX_SETTING;
    3778:	2390      	movs	r3, #144	; 0x90
    377a:	035b      	lsls	r3, r3, #13
    377c:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = CONF_FLCR_BLE_PINMUX_PAD0;
    377e:	4b20      	ldr	r3, [pc, #128]	; (3800 <configure_usart_after_patch+0x138>)
    3780:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = CONF_FLCR_BLE_PINMUX_PAD1;
    3782:	4b20      	ldr	r3, [pc, #128]	; (3804 <configure_usart_after_patch+0x13c>)
    3784:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = CONF_FLCR_BLE_PINMUX_PAD2;
    3786:	4b20      	ldr	r3, [pc, #128]	; (3808 <configure_usart_after_patch+0x140>)
    3788:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = CONF_FLCR_BLE_PINMUX_PAD3;
    378a:	4b20      	ldr	r3, [pc, #128]	; (380c <configure_usart_after_patch+0x144>)
    378c:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance, CONF_FLCR_BLE_USART_MODULE, &config_usart) != STATUS_OK);
    378e:	4e19      	ldr	r6, [pc, #100]	; (37f4 <configure_usart_after_patch+0x12c>)
    3790:	2584      	movs	r5, #132	; 0x84
    3792:	05ed      	lsls	r5, r5, #23
    3794:	4c1e      	ldr	r4, [pc, #120]	; (3810 <configure_usart_after_patch+0x148>)
    3796:	1c30      	adds	r0, r6, #0
    3798:	1c29      	adds	r1, r5, #0
    379a:	466a      	mov	r2, sp
    379c:	47a0      	blx	r4
    379e:	2800      	cmp	r0, #0
    37a0:	d1f9      	bne.n	3796 <configure_usart_after_patch+0xce>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    37a2:	4d14      	ldr	r5, [pc, #80]	; (37f4 <configure_usart_after_patch+0x12c>)
    37a4:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    37a6:	1c20      	adds	r0, r4, #0
    37a8:	4b13      	ldr	r3, [pc, #76]	; (37f8 <configure_usart_after_patch+0x130>)
    37aa:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    37ac:	231f      	movs	r3, #31
    37ae:	4018      	ands	r0, r3
    37b0:	3b1e      	subs	r3, #30
    37b2:	4083      	lsls	r3, r0
    37b4:	1c18      	adds	r0, r3, #0
    37b6:	4b11      	ldr	r3, [pc, #68]	; (37fc <configure_usart_after_patch+0x134>)
    37b8:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    37ba:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    37bc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    37be:	2b00      	cmp	r3, #0
    37c0:	d1fc      	bne.n	37bc <configure_usart_after_patch+0xf4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    37c2:	6822      	ldr	r2, [r4, #0]
    37c4:	3302      	adds	r3, #2
    37c6:	4313      	orrs	r3, r2
    37c8:	6023      	str	r3, [r4, #0]

	usart_enable(&usart_instance);
	
	/* register and enable usart callbacks */
	usart_register_callback(&usart_instance,
    37ca:	4c0a      	ldr	r4, [pc, #40]	; (37f4 <configure_usart_after_patch+0x12c>)
    37cc:	1c20      	adds	r0, r4, #0
    37ce:	4911      	ldr	r1, [pc, #68]	; (3814 <configure_usart_after_patch+0x14c>)
    37d0:	2201      	movs	r2, #1
    37d2:	4d11      	ldr	r5, [pc, #68]	; (3818 <configure_usart_after_patch+0x150>)
    37d4:	47a8      	blx	r5
	serial_drv_read_cb, USART_CALLBACK_BUFFER_RECEIVED);
	usart_register_callback(&usart_instance,
    37d6:	1c20      	adds	r0, r4, #0
    37d8:	4910      	ldr	r1, [pc, #64]	; (381c <configure_usart_after_patch+0x154>)
    37da:	2200      	movs	r2, #0
    37dc:	47a8      	blx	r5
    37de:	2231      	movs	r2, #49	; 0x31
    37e0:	5ca1      	ldrb	r1, [r4, r2]
    37e2:	2303      	movs	r3, #3
    37e4:	430b      	orrs	r3, r1
    37e6:	54a3      	strb	r3, [r4, r2]
	serial_drv_write_cb, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	serial_read_byte(&rx_data);
    37e8:	480d      	ldr	r0, [pc, #52]	; (3820 <configure_usart_after_patch+0x158>)
    37ea:	4b0e      	ldr	r3, [pc, #56]	; (3824 <configure_usart_after_patch+0x15c>)
    37ec:	4798      	blx	r3
void configure_usart_after_patch(void)
{
	#if UART_FLOWCONTROL_6WIRE_MODE == true
	usart_configure_flowcontrol();
	#endif	
}
    37ee:	b010      	add	sp, #64	; 0x40
    37f0:	bd70      	pop	{r4, r5, r6, pc}
    37f2:	46c0      	nop			; (mov r8, r8)
    37f4:	20001794 	.word	0x20001794
    37f8:	0000089d 	.word	0x0000089d
    37fc:	e000e100 	.word	0xe000e100
    3800:	00040003 	.word	0x00040003
    3804:	00050003 	.word	0x00050003
    3808:	00060003 	.word	0x00060003
    380c:	00070003 	.word	0x00070003
    3810:	00000929 	.word	0x00000929
    3814:	00003571 	.word	0x00003571
    3818:	00000db5 	.word	0x00000db5
    381c:	0000356d 	.word	0x0000356d
    3820:	20000628 	.word	0x20000628
    3824:	000035b9 	.word	0x000035b9

00003828 <platfrom_start_rx>:
{
 return usart_read_buffer_job(&usart_instance, data, max_len);
}

void platfrom_start_rx(void)
{
    3828:	b508      	push	{r3, lr}
	serial_read_byte(&rx_data);
    382a:	4802      	ldr	r0, [pc, #8]	; (3834 <platfrom_start_rx+0xc>)
    382c:	4b02      	ldr	r3, [pc, #8]	; (3838 <platfrom_start_rx+0x10>)
    382e:	4798      	blx	r3
}
    3830:	bd08      	pop	{r3, pc}
    3832:	46c0      	nop			; (mov r8, r8)
    3834:	20000628 	.word	0x20000628
    3838:	000035b9 	.word	0x000035b9

0000383c <platform_enter_critical_section>:
{
	return(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX));
}

void platform_enter_critical_section(void)
{
    383c:	b508      	push	{r3, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    383e:	4b01      	ldr	r3, [pc, #4]	; (3844 <platform_enter_critical_section+0x8>)
    3840:	4798      	blx	r3
	system_interrupt_enter_critical_section();
}
    3842:	bd08      	pop	{r3, pc}
    3844:	0000017d 	.word	0x0000017d

00003848 <platform_leave_critical_section>:

void platform_leave_critical_section(void)
{
    3848:	b508      	push	{r3, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    384a:	4b01      	ldr	r3, [pc, #4]	; (3850 <platform_leave_critical_section+0x8>)
    384c:	4798      	blx	r3
	system_interrupt_leave_critical_section();
}
    384e:	bd08      	pop	{r3, pc}
    3850:	000001bd 	.word	0x000001bd

00003854 <tc_cc1_cb>:
{
	tc_disable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
}

void tc_cc1_cb(struct tc_module *const module_inst)
{
    3854:	b508      	push	{r3, lr}
	platform_cc1_cb(module_inst);
    3856:	4b02      	ldr	r3, [pc, #8]	; (3860 <tc_cc1_cb+0xc>)
    3858:	681b      	ldr	r3, [r3, #0]
    385a:	4798      	blx	r3
}
    385c:	bd08      	pop	{r3, pc}
    385e:	46c0      	nop			; (mov r8, r8)
    3860:	200017cc 	.word	0x200017cc

00003864 <tc_cc0_cb>:
{
	timer_callback = cb_ptr;
}

void tc_cc0_cb(struct tc_module *const module_inst)
{
    3864:	b508      	push	{r3, lr}
	static uint16_t tc_count;
	tc_set_count_value(&tc_instance, 0);
    3866:	480b      	ldr	r0, [pc, #44]	; (3894 <tc_cc0_cb+0x30>)
    3868:	2100      	movs	r1, #0
    386a:	4b0b      	ldr	r3, [pc, #44]	; (3898 <tc_cc0_cb+0x34>)
    386c:	4798      	blx	r3
	tc_count += 1;
    386e:	4a0b      	ldr	r2, [pc, #44]	; (389c <tc_cc0_cb+0x38>)
    3870:	8813      	ldrh	r3, [r2, #0]
    3872:	3301      	adds	r3, #1
    3874:	b29b      	uxth	r3, r3
    3876:	8013      	strh	r3, [r2, #0]
	if (tc_count >= timeout_count)
    3878:	4a09      	ldr	r2, [pc, #36]	; (38a0 <tc_cc0_cb+0x3c>)
    387a:	6812      	ldr	r2, [r2, #0]
    387c:	4293      	cmp	r3, r2
    387e:	d307      	bcc.n	3890 <tc_cc0_cb+0x2c>
	{
		tc_count = 0;
    3880:	2200      	movs	r2, #0
    3882:	4b06      	ldr	r3, [pc, #24]	; (389c <tc_cc0_cb+0x38>)
    3884:	801a      	strh	r2, [r3, #0]
		if (timer_callback != NULL)
    3886:	4b07      	ldr	r3, [pc, #28]	; (38a4 <tc_cc0_cb+0x40>)
    3888:	681b      	ldr	r3, [r3, #0]
    388a:	2b00      	cmp	r3, #0
    388c:	d000      	beq.n	3890 <tc_cc0_cb+0x2c>
		{
			timer_callback();
    388e:	4798      	blx	r3
		}
	}
}
    3890:	bd08      	pop	{r3, pc}
    3892:	46c0      	nop			; (mov r8, r8)
    3894:	200017d8 	.word	0x200017d8
    3898:	00001c59 	.word	0x00001c59
    389c:	2000062a 	.word	0x2000062a
    38a0:	200017d0 	.word	0x200017d0
    38a4:	200017c8 	.word	0x200017c8

000038a8 <hw_timer_init>:

void tc_cc0_cb(struct tc_module *const module_inst);
void tc_cc1_cb(struct tc_module *const module_inst);

void hw_timer_init(void)
{
    38a8:	b510      	push	{r4, lr}
    38aa:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    38ac:	2300      	movs	r3, #0
    38ae:	466a      	mov	r2, sp
    38b0:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    38b2:	70d3      	strb	r3, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    38b4:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    38b6:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    38b8:	7053      	strb	r3, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
    38ba:	7093      	strb	r3, [r2, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    38bc:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    38be:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    38c0:	7293      	strb	r3, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    38c2:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    38c4:	7313      	strb	r3, [r2, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    38c6:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    38c8:	7353      	strb	r3, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    38ca:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    38cc:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    38ce:	9306      	str	r3, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    38d0:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    38d2:	9308      	str	r3, [sp, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    38d4:	9309      	str	r3, [sp, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    38d6:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    38d8:	3334      	adds	r3, #52	; 0x34
    38da:	2200      	movs	r2, #0
    38dc:	4669      	mov	r1, sp
    38de:	54ca      	strb	r2, [r1, r3]

	tc_get_config_defaults(&config_tc);

	config_tc.counter_size = TC_COUNTER_SIZE_16BIT;
	config_tc.clock_source = GCLK_GENERATOR_0;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
    38e0:	23e0      	movs	r3, #224	; 0xe0
    38e2:	00db      	lsls	r3, r3, #3
    38e4:	808b      	strh	r3, [r1, #4]
	config_tc.counter_8_bit.period = 0;
    38e6:	2329      	movs	r3, #41	; 0x29
    38e8:	2200      	movs	r2, #0
    38ea:	54ca      	strb	r2, [r1, r3]
	config_tc.counter_16_bit.compare_capture_channel[0] = TC_COUNT_1SEC;
    38ec:	4b0c      	ldr	r3, [pc, #48]	; (3920 <hw_timer_init+0x78>)
    38ee:	466a      	mov	r2, sp
    38f0:	854b      	strh	r3, [r1, #42]	; 0x2a
	config_tc.counter_16_bit.compare_capture_channel[1] = 0xFFFF;
    38f2:	2301      	movs	r3, #1
    38f4:	425b      	negs	r3, r3
    38f6:	858b      	strh	r3, [r1, #44]	; 0x2c

	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
    38f8:	4c0a      	ldr	r4, [pc, #40]	; (3924 <hw_timer_init+0x7c>)
    38fa:	1c20      	adds	r0, r4, #0
    38fc:	490a      	ldr	r1, [pc, #40]	; (3928 <hw_timer_init+0x80>)
    38fe:	4b0b      	ldr	r3, [pc, #44]	; (392c <hw_timer_init+0x84>)
    3900:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3902:	6822      	ldr	r2, [r4, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    3904:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3906:	2b00      	cmp	r3, #0
    3908:	d1fc      	bne.n	3904 <hw_timer_init+0x5c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    390a:	6811      	ldr	r1, [r2, #0]
    390c:	3302      	adds	r3, #2
    390e:	430b      	orrs	r3, r1
    3910:	6013      	str	r3, [r2, #0]

	tc_enable(&tc_instance);
	
	tc_register_callback(&tc_instance, tc_cc0_cb,
    3912:	4804      	ldr	r0, [pc, #16]	; (3924 <hw_timer_init+0x7c>)
    3914:	4906      	ldr	r1, [pc, #24]	; (3930 <hw_timer_init+0x88>)
    3916:	2202      	movs	r2, #2
    3918:	4b06      	ldr	r3, [pc, #24]	; (3934 <hw_timer_init+0x8c>)
    391a:	4798      	blx	r3
						TC_CALLBACK_CC_CHANNEL0);
}
    391c:	b00e      	add	sp, #56	; 0x38
    391e:	bd10      	pop	{r4, pc}
    3920:	ffffb71b 	.word	0xffffb71b
    3924:	200017d8 	.word	0x200017d8
    3928:	42002c00 	.word	0x42002c00
    392c:	00001975 	.word	0x00001975
    3930:	00003865 	.word	0x00003865
    3934:	00001859 	.word	0x00001859

00003938 <hw_timer_register_callback>:

void hw_timer_register_callback(hw_timer_callback_t cb_ptr)
{
	timer_callback = cb_ptr;
    3938:	4b01      	ldr	r3, [pc, #4]	; (3940 <hw_timer_register_callback+0x8>)
    393a:	6018      	str	r0, [r3, #0]
}
    393c:	4770      	bx	lr
    393e:	46c0      	nop			; (mov r8, r8)
    3940:	200017c8 	.word	0x200017c8

00003944 <hw_timer_start>:
		}
	}
}

void hw_timer_start(uint32_t timer_val)
{
    3944:	b510      	push	{r4, lr}
	timeout_count = timer_val;
    3946:	4b0d      	ldr	r3, [pc, #52]	; (397c <hw_timer_start+0x38>)
    3948:	6018      	str	r0, [r3, #0]
	tc_set_count_value(&tc_instance, 0);
    394a:	4c0d      	ldr	r4, [pc, #52]	; (3980 <hw_timer_start+0x3c>)
    394c:	1c20      	adds	r0, r4, #0
    394e:	2100      	movs	r1, #0
    3950:	4b0c      	ldr	r3, [pc, #48]	; (3984 <hw_timer_start+0x40>)
    3952:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3954:	6820      	ldr	r0, [r4, #0]
    3956:	4b0c      	ldr	r3, [pc, #48]	; (3988 <hw_timer_start+0x44>)
    3958:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    395a:	4b0c      	ldr	r3, [pc, #48]	; (398c <hw_timer_start+0x48>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    395c:	5c1b      	ldrb	r3, [r3, r0]
    395e:	221f      	movs	r2, #31
    3960:	4013      	ands	r3, r2
    3962:	3a1e      	subs	r2, #30
    3964:	409a      	lsls	r2, r3
    3966:	1c13      	adds	r3, r2, #0
    3968:	4a09      	ldr	r2, [pc, #36]	; (3990 <hw_timer_start+0x4c>)
    396a:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    396c:	7e62      	ldrb	r2, [r4, #25]
    396e:	2310      	movs	r3, #16
    3970:	4313      	orrs	r3, r2
    3972:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3974:	6823      	ldr	r3, [r4, #0]
    3976:	2210      	movs	r2, #16
    3978:	725a      	strb	r2, [r3, #9]
	tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
}
    397a:	bd10      	pop	{r4, pc}
    397c:	200017d0 	.word	0x200017d0
    3980:	200017d8 	.word	0x200017d8
    3984:	00001c59 	.word	0x00001c59
    3988:	00001939 	.word	0x00001939
    398c:	0000a118 	.word	0x0000a118
    3990:	e000e100 	.word	0xe000e100

00003994 <hw_timer_stop>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    3994:	4b03      	ldr	r3, [pc, #12]	; (39a4 <hw_timer_stop+0x10>)
    3996:	2110      	movs	r1, #16
    3998:	681a      	ldr	r2, [r3, #0]
    399a:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    399c:	7e5a      	ldrb	r2, [r3, #25]
    399e:	438a      	bics	r2, r1
    39a0:	765a      	strb	r2, [r3, #25]

void hw_timer_stop(void)
{
	tc_disable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
}
    39a2:	4770      	bx	lr
    39a4:	200017d8 	.word	0x200017d8

000039a8 <platform_configure_timer>:
	platform_cc1_cb(module_inst);
}


void *platform_configure_timer(platform_hw_timer_callback_t bus_tc_cb_ptr)
{
    39a8:	b530      	push	{r4, r5, lr}
    39aa:	b08f      	sub	sp, #60	; 0x3c
    39ac:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    39ae:	4b3e      	ldr	r3, [pc, #248]	; (3aa8 <platform_configure_timer+0x100>)
    39b0:	4798      	blx	r3
	struct tc_config timer_config;
	
	system_interrupt_enter_critical_section();
	if (hw_timers[0].timer_usage == 0)
    39b2:	4b3e      	ldr	r3, [pc, #248]	; (3aac <platform_configure_timer+0x104>)
    39b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    39b6:	2b00      	cmp	r3, #0
    39b8:	d170      	bne.n	3a9c <platform_configure_timer+0xf4>
	{
		hw_timers[0].timer_usage = 1;
    39ba:	2101      	movs	r1, #1
    39bc:	4b3b      	ldr	r3, [pc, #236]	; (3aac <platform_configure_timer+0x104>)
    39be:	6259      	str	r1, [r3, #36]	; 0x24
		platform_cc1_cb = bus_tc_cb_ptr;
    39c0:	4b3b      	ldr	r3, [pc, #236]	; (3ab0 <platform_configure_timer+0x108>)
    39c2:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    39c4:	2200      	movs	r2, #0
    39c6:	2300      	movs	r3, #0
    39c8:	4668      	mov	r0, sp
    39ca:	7002      	strb	r2, [r0, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    39cc:	2000      	movs	r0, #0
    39ce:	466c      	mov	r4, sp
    39d0:	80a2      	strh	r2, [r4, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    39d2:	71a0      	strb	r0, [r4, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    39d4:	71e3      	strb	r3, [r4, #7]
	config->run_in_standby             = false;
    39d6:	7063      	strb	r3, [r4, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
    39d8:	70a3      	strb	r3, [r4, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    39da:	7223      	strb	r3, [r4, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    39dc:	7263      	strb	r3, [r4, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    39de:	72a3      	strb	r3, [r4, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    39e0:	72e3      	strb	r3, [r4, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    39e2:	7323      	strb	r3, [r4, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    39e4:	73a3      	strb	r3, [r4, #14]
	config->oneshot                    = false;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    39e6:	7423      	strb	r3, [r4, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    39e8:	9205      	str	r2, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    39ea:	9206      	str	r2, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    39ec:	7723      	strb	r3, [r4, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    39ee:	9208      	str	r2, [sp, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    39f0:	9209      	str	r2, [sp, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    39f2:	8522      	strh	r2, [r4, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    39f4:	8562      	strh	r2, [r4, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    39f6:	85a2      	strh	r2, [r4, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    39f8:	2334      	movs	r3, #52	; 0x34
    39fa:	466a      	mov	r2, sp
    39fc:	54e0      	strb	r0, [r4, r3]

		tc_get_config_defaults(&timer_config);
		timer_config.clock_prescaler		= TC_CLOCK_PRESCALER_DIV1;
		timer_config.oneshot				= true;
    39fe:	7361      	strb	r1, [r4, #13]
		timer_config.counter_size			= TC_COUNTER_SIZE_32BIT;
    3a00:	2308      	movs	r3, #8
    3a02:	70e3      	strb	r3, [r4, #3]
		timer_config.count_direction		= TC_COUNT_DIRECTION_UP;
		tc_init(&bus_tc_instance, CONF_BUS_TC_MODULE, &timer_config);
    3a04:	4c2b      	ldr	r4, [pc, #172]	; (3ab4 <platform_configure_timer+0x10c>)
    3a06:	1c20      	adds	r0, r4, #0
    3a08:	492b      	ldr	r1, [pc, #172]	; (3ab8 <platform_configure_timer+0x110>)
    3a0a:	4b2c      	ldr	r3, [pc, #176]	; (3abc <platform_configure_timer+0x114>)
    3a0c:	4798      	blx	r3
		timer_count_per_ms = ((system_gclk_gen_get_hz(timer_config.clock_source)) /1000);
    3a0e:	466b      	mov	r3, sp
    3a10:	7818      	ldrb	r0, [r3, #0]
    3a12:	4b2b      	ldr	r3, [pc, #172]	; (3ac0 <platform_configure_timer+0x118>)
    3a14:	4798      	blx	r3
    3a16:	21fa      	movs	r1, #250	; 0xfa
    3a18:	0089      	lsls	r1, r1, #2
    3a1a:	4b2a      	ldr	r3, [pc, #168]	; (3ac4 <platform_configure_timer+0x11c>)
    3a1c:	4798      	blx	r3
    3a1e:	4b2a      	ldr	r3, [pc, #168]	; (3ac8 <platform_configure_timer+0x120>)
    3a20:	6018      	str	r0, [r3, #0]
		tc_set_count_value(&bus_tc_instance, 0);
    3a22:	1c20      	adds	r0, r4, #0
    3a24:	2100      	movs	r1, #0
    3a26:	4b29      	ldr	r3, [pc, #164]	; (3acc <platform_configure_timer+0x124>)
    3a28:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3a2a:	6822      	ldr	r2, [r4, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    3a2c:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3a2e:	2b00      	cmp	r3, #0
    3a30:	d1fc      	bne.n	3a2c <platform_configure_timer+0x84>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3a32:	6811      	ldr	r1, [r2, #0]
    3a34:	3302      	adds	r3, #2
    3a36:	430b      	orrs	r3, r1
    3a38:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3a3a:	4b1e      	ldr	r3, [pc, #120]	; (3ab4 <platform_configure_timer+0x10c>)
    3a3c:	681a      	ldr	r2, [r3, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    3a3e:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3a40:	2b00      	cmp	r3, #0
    3a42:	d1fc      	bne.n	3a3e <platform_configure_timer+0x96>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    3a44:	3340      	adds	r3, #64	; 0x40
    3a46:	7153      	strb	r3, [r2, #5]
		tc_enable(&bus_tc_instance);
		tc_stop_counter(&bus_tc_instance);
		tc_register_callback(&bus_tc_instance, tc_cc1_cb,
    3a48:	4c1a      	ldr	r4, [pc, #104]	; (3ab4 <platform_configure_timer+0x10c>)
    3a4a:	1c20      	adds	r0, r4, #0
    3a4c:	4920      	ldr	r1, [pc, #128]	; (3ad0 <platform_configure_timer+0x128>)
    3a4e:	2200      	movs	r2, #0
    3a50:	4b20      	ldr	r3, [pc, #128]	; (3ad4 <platform_configure_timer+0x12c>)
    3a52:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3a54:	6820      	ldr	r0, [r4, #0]
    3a56:	4b20      	ldr	r3, [pc, #128]	; (3ad8 <platform_configure_timer+0x130>)
    3a58:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3a5a:	4b20      	ldr	r3, [pc, #128]	; (3adc <platform_configure_timer+0x134>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3a5c:	5c1b      	ldrb	r3, [r3, r0]
    3a5e:	221f      	movs	r2, #31
    3a60:	4013      	ands	r3, r2
    3a62:	3a1e      	subs	r2, #30
    3a64:	1c11      	adds	r1, r2, #0
    3a66:	4099      	lsls	r1, r3
    3a68:	1c0b      	adds	r3, r1, #0
    3a6a:	491d      	ldr	r1, [pc, #116]	; (3ae0 <platform_configure_timer+0x138>)
    3a6c:	600b      	str	r3, [r1, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    3a6e:	7e61      	ldrb	r1, [r4, #25]
    3a70:	2301      	movs	r3, #1
    3a72:	430b      	orrs	r3, r1
    3a74:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    3a76:	6823      	ldr	r3, [r4, #0]
    3a78:	725a      	strb	r2, [r3, #9]
		TC_CALLBACK_OVERFLOW);
		tc_enable_callback(&bus_tc_instance, TC_CALLBACK_OVERFLOW);
		
		hw_timers[0].timer_frequency = (system_gclk_gen_get_hz(timer_config.clock_source));
    3a7a:	466b      	mov	r3, sp
    3a7c:	7818      	ldrb	r0, [r3, #0]
    3a7e:	4b10      	ldr	r3, [pc, #64]	; (3ac0 <platform_configure_timer+0x118>)
    3a80:	4798      	blx	r3
    3a82:	4d0a      	ldr	r5, [pc, #40]	; (3aac <platform_configure_timer+0x104>)
    3a84:	6228      	str	r0, [r5, #32]
		hw_timers[0].timer_instance = bus_tc_instance;
    3a86:	1c2b      	adds	r3, r5, #0
    3a88:	cc07      	ldmia	r4!, {r0, r1, r2}
    3a8a:	c307      	stmia	r3!, {r0, r1, r2}
    3a8c:	cc07      	ldmia	r4!, {r0, r1, r2}
    3a8e:	c307      	stmia	r3!, {r0, r1, r2}
    3a90:	6822      	ldr	r2, [r4, #0]
    3a92:	601a      	str	r2, [r3, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3a94:	4b13      	ldr	r3, [pc, #76]	; (3ae4 <platform_configure_timer+0x13c>)
    3a96:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return (&hw_timers[0]);
    3a98:	1c28      	adds	r0, r5, #0
    3a9a:	e002      	b.n	3aa2 <platform_configure_timer+0xfa>
    3a9c:	4b11      	ldr	r3, [pc, #68]	; (3ae4 <platform_configure_timer+0x13c>)
    3a9e:	4798      	blx	r3
	}
	system_interrupt_leave_critical_section();
	return NULL;
    3aa0:	2000      	movs	r0, #0
}
    3aa2:	b00f      	add	sp, #60	; 0x3c
    3aa4:	bd30      	pop	{r4, r5, pc}
    3aa6:	46c0      	nop			; (mov r8, r8)
    3aa8:	0000017d 	.word	0x0000017d
    3aac:	2000000c 	.word	0x2000000c
    3ab0:	200017cc 	.word	0x200017cc
    3ab4:	200017f4 	.word	0x200017f4
    3ab8:	43000800 	.word	0x43000800
    3abc:	00001975 	.word	0x00001975
    3ac0:	00001629 	.word	0x00001629
    3ac4:	00008219 	.word	0x00008219
    3ac8:	200017d4 	.word	0x200017d4
    3acc:	00001c59 	.word	0x00001c59
    3ad0:	00003855 	.word	0x00003855
    3ad4:	00001859 	.word	0x00001859
    3ad8:	00001939 	.word	0x00001939
    3adc:	0000a118 	.word	0x0000a118
    3ae0:	e000e100 	.word	0xe000e100
    3ae4:	000001bd 	.word	0x000001bd

00003ae8 <platform_start_bus_timer>:


void platform_start_bus_timer(void *timer_handle, uint32_t ms)
{
    3ae8:	b510      	push	{r4, lr}
	tc_set_count_value(&bus_tc_instance, (0xFFFFFFFF - (timer_count_per_ms * ms)));
    3aea:	4c09      	ldr	r4, [pc, #36]	; (3b10 <platform_start_bus_timer+0x28>)
    3aec:	4b09      	ldr	r3, [pc, #36]	; (3b14 <platform_start_bus_timer+0x2c>)
    3aee:	681b      	ldr	r3, [r3, #0]
    3af0:	4359      	muls	r1, r3
    3af2:	43c9      	mvns	r1, r1
    3af4:	1c20      	adds	r0, r4, #0
    3af6:	4b08      	ldr	r3, [pc, #32]	; (3b18 <platform_start_bus_timer+0x30>)
    3af8:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3afa:	6823      	ldr	r3, [r4, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    3afc:	691a      	ldr	r2, [r3, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3afe:	2a00      	cmp	r2, #0
    3b00:	d1fc      	bne.n	3afc <platform_start_bus_timer+0x14>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    3b02:	711a      	strb	r2, [r3, #4]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    3b04:	691a      	ldr	r2, [r3, #16]
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;

	while (tc_is_syncing(module_inst)) {
    3b06:	2a00      	cmp	r2, #0
    3b08:	d1fc      	bne.n	3b04 <platform_start_bus_timer+0x1c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    3b0a:	3220      	adds	r2, #32
    3b0c:	715a      	strb	r2, [r3, #5]
	tc_start_counter(&bus_tc_instance);
}
    3b0e:	bd10      	pop	{r4, pc}
    3b10:	200017f4 	.word	0x200017f4
    3b14:	200017d4 	.word	0x200017d4
    3b18:	00001c59 	.word	0x00001c59

00003b1c <platform_delete_bus_timer>:

void platform_delete_bus_timer(void *timer_handle)
{
    3b1c:	b508      	push	{r3, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3b1e:	4b07      	ldr	r3, [pc, #28]	; (3b3c <platform_delete_bus_timer+0x20>)
    3b20:	681a      	ldr	r2, [r3, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    3b22:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3b24:	2b00      	cmp	r3, #0
    3b26:	d1fc      	bne.n	3b22 <platform_delete_bus_timer+0x6>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    3b28:	3340      	adds	r3, #64	; 0x40
    3b2a:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&bus_tc_instance);
	tc_reset(&bus_tc_instance);
    3b2c:	4803      	ldr	r0, [pc, #12]	; (3b3c <platform_delete_bus_timer+0x20>)
    3b2e:	4b04      	ldr	r3, [pc, #16]	; (3b40 <platform_delete_bus_timer+0x24>)
    3b30:	4798      	blx	r3
	hw_timers[0].timer_usage = 0;
    3b32:	2200      	movs	r2, #0
    3b34:	4b03      	ldr	r3, [pc, #12]	; (3b44 <platform_delete_bus_timer+0x28>)
    3b36:	625a      	str	r2, [r3, #36]	; 0x24
}
    3b38:	bd08      	pop	{r3, pc}
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	200017f4 	.word	0x200017f4
    3b40:	00001c8d 	.word	0x00001c8d
    3b44:	2000000c 	.word	0x2000000c

00003b48 <platform_stop_bus_timer>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3b48:	4b03      	ldr	r3, [pc, #12]	; (3b58 <platform_stop_bus_timer+0x10>)
    3b4a:	681a      	ldr	r2, [r3, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    3b4c:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3b4e:	2b00      	cmp	r3, #0
    3b50:	d1fc      	bne.n	3b4c <platform_stop_bus_timer+0x4>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    3b52:	3340      	adds	r3, #64	; 0x40
    3b54:	7153      	strb	r3, [r2, #5]

void platform_stop_bus_timer(void *timer_handle)
{
	tc_stop_counter(&bus_tc_instance);
}
    3b56:	4770      	bx	lr
    3b58:	200017f4 	.word	0x200017f4

00003b5c <platform_init>:

//#define BLE_DBG_ENABLE
#define DBG_LOG_BLE		DBG_LOG

at_ble_status_t platform_init(uint8_t bus_type, uint8_t bus_flow_control_enabled)
{	
    3b5c:	b570      	push	{r4, r5, r6, lr}
    3b5e:	b082      	sub	sp, #8
        (void)bus_flow_control_enabled;
	platform_bus_type = bus_type;
    3b60:	4b12      	ldr	r3, [pc, #72]	; (3bac <platform_init+0x50>)
    3b62:	7018      	strb	r0, [r3, #0]
		
		configure_serial_drv();
		
		return AT_BLE_SUCCESS;
	}
	return AT_BLE_INVALID_PARAM;	
    3b64:	23cf      	movs	r3, #207	; 0xcf

at_ble_status_t platform_init(uint8_t bus_type, uint8_t bus_flow_control_enabled)
{	
        (void)bus_flow_control_enabled;
	platform_bus_type = bus_type;
	if (platform_bus_type == AT_BLE_UART)
    3b66:	2801      	cmp	r0, #1
    3b68:	d11d      	bne.n	3ba6 <platform_init+0x4a>
static inline void ble_configure_control_pin(void)
{
	struct port_config pin_conf;
	
	/* initialize the delay before use */
	delay_init();
    3b6a:	4b11      	ldr	r3, [pc, #68]	; (3bb0 <platform_init+0x54>)
    3b6c:	4798      	blx	r3
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
    3b6e:	ac01      	add	r4, sp, #4
    3b70:	2300      	movs	r3, #0
    3b72:	70a3      	strb	r3, [r4, #2]
	
	/* get the default values for port pin configuration */
	port_get_config_defaults(&pin_conf);

	/* Configure control pins as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3b74:	3301      	adds	r3, #1
    3b76:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_DOWN;
    3b78:	3301      	adds	r3, #1
    3b7a:	7063      	strb	r3, [r4, #1]
	
	port_pin_set_config(BTLC1000_WAKEUP_PIN, &pin_conf);
    3b7c:	2027      	movs	r0, #39	; 0x27
    3b7e:	1c21      	adds	r1, r4, #0
    3b80:	4e0c      	ldr	r6, [pc, #48]	; (3bb4 <platform_init+0x58>)
    3b82:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3b84:	4d0c      	ldr	r5, [pc, #48]	; (3bb8 <platform_init+0x5c>)
    3b86:	1c2b      	adds	r3, r5, #0
    3b88:	3380      	adds	r3, #128	; 0x80
    3b8a:	2280      	movs	r2, #128	; 0x80
    3b8c:	619a      	str	r2, [r3, #24]
	/* set wakeup pin to low */
	ble_wakeup_pin_set_high();
	
	port_pin_set_config(BTLC1000_CHIP_ENABLE_PIN, &pin_conf);
    3b8e:	2003      	movs	r0, #3
    3b90:	1c21      	adds	r1, r4, #0
    3b92:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3b94:	2408      	movs	r4, #8
    3b96:	616c      	str	r4, [r5, #20]
	/* set chip enable to low */
	ble_enable_pin_set_low();
	
	/* Delay for 50ms */
	delay_ms(BTLC1000_RESET_MS);
    3b98:	2032      	movs	r0, #50	; 0x32
    3b9a:	4b08      	ldr	r3, [pc, #32]	; (3bbc <platform_init+0x60>)
    3b9c:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3b9e:	61ac      	str	r4, [r5, #24]
	{
		ble_configure_control_pin();
		
		configure_serial_drv();
    3ba0:	4b07      	ldr	r3, [pc, #28]	; (3bc0 <platform_init+0x64>)
    3ba2:	4798      	blx	r3
		
		return AT_BLE_SUCCESS;
    3ba4:	2300      	movs	r3, #0
	}
	return AT_BLE_INVALID_PARAM;	
}
    3ba6:	1c18      	adds	r0, r3, #0
    3ba8:	b002      	add	sp, #8
    3baa:	bd70      	pop	{r4, r5, r6, pc}
    3bac:	20000630 	.word	0x20000630
    3bb0:	00000115 	.word	0x00000115
    3bb4:	0000043d 	.word	0x0000043d
    3bb8:	40002800 	.word	0x40002800
    3bbc:	00000151 	.word	0x00000151
    3bc0:	000035cd 	.word	0x000035cd

00003bc4 <platform_send_sync>:

void platform_send_sync(uint8_t *data, uint32_t len)
{
    3bc4:	b508      	push	{r3, lr}
	{
		DBG_LOG_CONT("0x%X, ", data[i]);
		
	}
#endif
	 if (AT_BLE_UART == platform_bus_type)
    3bc6:	4b04      	ldr	r3, [pc, #16]	; (3bd8 <platform_send_sync+0x14>)
    3bc8:	781b      	ldrb	r3, [r3, #0]
    3bca:	2b01      	cmp	r3, #1
    3bcc:	d102      	bne.n	3bd4 <platform_send_sync+0x10>
	 {
		serial_drv_send(data, (uint16_t)len);
    3bce:	b289      	uxth	r1, r1
    3bd0:	4b02      	ldr	r3, [pc, #8]	; (3bdc <platform_send_sync+0x18>)
    3bd2:	4798      	blx	r3
	 }
}
    3bd4:	bd08      	pop	{r3, pc}
    3bd6:	46c0      	nop			; (mov r8, r8)
    3bd8:	20000630 	.word	0x20000630
    3bdc:	00003585 	.word	0x00003585

00003be0 <platform_gpio_set>:

void platform_gpio_set(at_ble_gpio_pin_t pin, at_ble_gpio_status_t status)
{
	if (pin == AT_BLE_CHIP_ENABLE)
    3be0:	2800      	cmp	r0, #0
    3be2:	d109      	bne.n	3bf8 <platform_gpio_set+0x18>
	{
		if (status == AT_BLE_HIGH)
    3be4:	2901      	cmp	r1, #1
    3be6:	d103      	bne.n	3bf0 <platform_gpio_set+0x10>
    3be8:	2208      	movs	r2, #8
    3bea:	4b09      	ldr	r3, [pc, #36]	; (3c10 <platform_gpio_set+0x30>)
    3bec:	619a      	str	r2, [r3, #24]
    3bee:	e00e      	b.n	3c0e <platform_gpio_set+0x2e>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3bf0:	2208      	movs	r2, #8
    3bf2:	4b07      	ldr	r3, [pc, #28]	; (3c10 <platform_gpio_set+0x30>)
    3bf4:	615a      	str	r2, [r3, #20]
    3bf6:	e00a      	b.n	3c0e <platform_gpio_set+0x2e>
		else
		{
			ble_enable_pin_set_low();
		}
	}
	else if (pin == AT_BLE_EXTERNAL_WAKEUP)
    3bf8:	2801      	cmp	r0, #1
    3bfa:	d108      	bne.n	3c0e <platform_gpio_set+0x2e>
	{
		if (status == AT_BLE_HIGH)
    3bfc:	2901      	cmp	r1, #1
    3bfe:	d103      	bne.n	3c08 <platform_gpio_set+0x28>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3c00:	4b04      	ldr	r3, [pc, #16]	; (3c14 <platform_gpio_set+0x34>)
    3c02:	2280      	movs	r2, #128	; 0x80
    3c04:	619a      	str	r2, [r3, #24]
    3c06:	e002      	b.n	3c0e <platform_gpio_set+0x2e>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3c08:	4b02      	ldr	r3, [pc, #8]	; (3c14 <platform_gpio_set+0x34>)
    3c0a:	2280      	movs	r2, #128	; 0x80
    3c0c:	615a      	str	r2, [r3, #20]
		else
		{
			ble_wakeup_pin_set_low();
		}
	}
}
    3c0e:	4770      	bx	lr
    3c10:	40002800 	.word	0x40002800
    3c14:	40002880 	.word	0x40002880

00003c18 <platform_recv_async>:

void platform_recv_async(void (*recv_async_callback)(uint8_t))
{
    3c18:	b508      	push	{r3, lr}
	if (AT_BLE_UART == platform_bus_type)
    3c1a:	4b04      	ldr	r3, [pc, #16]	; (3c2c <platform_recv_async+0x14>)
    3c1c:	781b      	ldrb	r3, [r3, #0]
    3c1e:	2b01      	cmp	r3, #1
    3c20:	d103      	bne.n	3c2a <platform_recv_async+0x12>
    {
		recv_async_cb = recv_async_callback;
    3c22:	4b03      	ldr	r3, [pc, #12]	; (3c30 <platform_recv_async+0x18>)
    3c24:	6018      	str	r0, [r3, #0]
        platfrom_start_rx();		
    3c26:	4b03      	ldr	r3, [pc, #12]	; (3c34 <platform_recv_async+0x1c>)
    3c28:	4798      	blx	r3
    }
}
    3c2a:	bd08      	pop	{r3, pc}
    3c2c:	20000630 	.word	0x20000630
    3c30:	2000062c 	.word	0x2000062c
    3c34:	00003829 	.word	0x00003829

00003c38 <platform_process_rxdata>:

void platform_process_rxdata(uint8_t t_rx_data)
{
    3c38:	b508      	push	{r3, lr}
	if (AT_BLE_UART == platform_bus_type)
    3c3a:	4b05      	ldr	r3, [pc, #20]	; (3c50 <platform_process_rxdata+0x18>)
    3c3c:	781b      	ldrb	r3, [r3, #0]
    3c3e:	2b01      	cmp	r3, #1
    3c40:	d104      	bne.n	3c4c <platform_process_rxdata+0x14>
	{
		if(recv_async_cb != NULL)
    3c42:	4b04      	ldr	r3, [pc, #16]	; (3c54 <platform_process_rxdata+0x1c>)
    3c44:	681b      	ldr	r3, [r3, #0]
    3c46:	2b00      	cmp	r3, #0
    3c48:	d000      	beq.n	3c4c <platform_process_rxdata+0x14>
        {
			recv_async_cb(t_rx_data);
    3c4a:	4798      	blx	r3
        }
	}
}
    3c4c:	bd08      	pop	{r3, pc}
    3c4e:	46c0      	nop			; (mov r8, r8)
    3c50:	20000630 	.word	0x20000630
    3c54:	2000062c 	.word	0x2000062c

00003c58 <platform_configure_hw_fc_uart>:
		}
	}
}

void platform_configure_hw_fc_uart(void)
{
    3c58:	b508      	push	{r3, lr}
	configure_usart_after_patch();
    3c5a:	4b01      	ldr	r3, [pc, #4]	; (3c60 <platform_configure_hw_fc_uart+0x8>)
    3c5c:	4798      	blx	r3
}
    3c5e:	bd08      	pop	{r3, pc}
    3c60:	000036c9 	.word	0x000036c9

00003c64 <platform_create_timer>:

void *platform_create_timer(void (*timer_cb)(void *))
{
    3c64:	b508      	push	{r3, lr}
	return (platform_configure_timer(timer_cb));
    3c66:	4b01      	ldr	r3, [pc, #4]	; (3c6c <platform_create_timer+0x8>)
    3c68:	4798      	blx	r3
}
    3c6a:	bd08      	pop	{r3, pc}
    3c6c:	000039a9 	.word	0x000039a9

00003c70 <platform_delete_timer>:

void platform_delete_timer(void *timer_handle)
{
    3c70:	b510      	push	{r4, lr}
    3c72:	1c04      	adds	r4, r0, #0
  platform_enter_critical_section();
    3c74:	4b03      	ldr	r3, [pc, #12]	; (3c84 <platform_delete_timer+0x14>)
    3c76:	4798      	blx	r3
  platform_delete_bus_timer(timer_handle);
    3c78:	1c20      	adds	r0, r4, #0
    3c7a:	4b03      	ldr	r3, [pc, #12]	; (3c88 <platform_delete_timer+0x18>)
    3c7c:	4798      	blx	r3
  platform_leave_critical_section();
    3c7e:	4b03      	ldr	r3, [pc, #12]	; (3c8c <platform_delete_timer+0x1c>)
    3c80:	4798      	blx	r3
}
    3c82:	bd10      	pop	{r4, pc}
    3c84:	0000383d 	.word	0x0000383d
    3c88:	00003b1d 	.word	0x00003b1d
    3c8c:	00003849 	.word	0x00003849

00003c90 <platform_start_timer>:

void platform_start_timer(void *timer_handle, uint32_t ms)
{
    3c90:	b538      	push	{r3, r4, r5, lr}
    3c92:	1c05      	adds	r5, r0, #0
    3c94:	1c0c      	adds	r4, r1, #0
	platform_enter_critical_section();
    3c96:	4b04      	ldr	r3, [pc, #16]	; (3ca8 <platform_start_timer+0x18>)
    3c98:	4798      	blx	r3
	platform_start_bus_timer(timer_handle, ms);
    3c9a:	1c28      	adds	r0, r5, #0
    3c9c:	1c21      	adds	r1, r4, #0
    3c9e:	4b03      	ldr	r3, [pc, #12]	; (3cac <platform_start_timer+0x1c>)
    3ca0:	4798      	blx	r3
	platform_leave_critical_section();
    3ca2:	4b03      	ldr	r3, [pc, #12]	; (3cb0 <platform_start_timer+0x20>)
    3ca4:	4798      	blx	r3
}
    3ca6:	bd38      	pop	{r3, r4, r5, pc}
    3ca8:	0000383d 	.word	0x0000383d
    3cac:	00003ae9 	.word	0x00003ae9
    3cb0:	00003849 	.word	0x00003849

00003cb4 <platform_stop_timer>:

void platform_stop_timer(void *timer_handle)
{
    3cb4:	b510      	push	{r4, lr}
    3cb6:	1c04      	adds	r4, r0, #0
	platform_enter_critical_section();
    3cb8:	4b03      	ldr	r3, [pc, #12]	; (3cc8 <platform_stop_timer+0x14>)
    3cba:	4798      	blx	r3
	platform_stop_bus_timer(timer_handle);
    3cbc:	1c20      	adds	r0, r4, #0
    3cbe:	4b03      	ldr	r3, [pc, #12]	; (3ccc <platform_stop_timer+0x18>)
    3cc0:	4798      	blx	r3
	platform_leave_critical_section();
    3cc2:	4b03      	ldr	r3, [pc, #12]	; (3cd0 <platform_stop_timer+0x1c>)
    3cc4:	4798      	blx	r3
}
    3cc6:	bd10      	pop	{r4, pc}
    3cc8:	0000383d 	.word	0x0000383d
    3ccc:	00003b49 	.word	0x00003b49
    3cd0:	00003849 	.word	0x00003849

00003cd4 <platform_sleep>:

void platform_sleep(uint32_t ms)
{
    3cd4:	b508      	push	{r3, lr}
	delay_ms(ms);
    3cd6:	4b01      	ldr	r3, [pc, #4]	; (3cdc <platform_sleep+0x8>)
    3cd8:	4798      	blx	r3
}
    3cda:	bd08      	pop	{r3, pc}
    3cdc:	00000151 	.word	0x00000151

00003ce0 <timer_callback_handler>:
* \Timer callback handler called on timer expiry
*/
static void timer_callback_handler(void)
{
	//Timer call back
	timer_cb_done = true;
    3ce0:	2201      	movs	r2, #1
    3ce2:	4b01      	ldr	r3, [pc, #4]	; (3ce8 <timer_callback_handler+0x8>)
    3ce4:	701a      	strb	r2, [r3, #0]
}
    3ce6:	4770      	bx	lr
    3ce8:	20000631 	.word	0x20000631

00003cec <ble_connected_app_event>:
	ble_paired_app_event(param);
	#else
	ALL_UNUSED(param);
	#endif
	return AT_BLE_SUCCESS;
}
    3cec:	2000      	movs	r0, #0
    3cee:	4770      	bx	lr

00003cf0 <button_cb>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    3cf0:	2280      	movs	r2, #128	; 0x80
    3cf2:	05d2      	lsls	r2, r2, #23
    3cf4:	4b01      	ldr	r3, [pc, #4]	; (3cfc <button_cb+0xc>)
    3cf6:	61da      	str	r2, [r3, #28]

void button_cb(void)
{
	//debugging button
	port_pin_toggle_output_level(EXT3_PIN_GPIO_0);
}
    3cf8:	4770      	bx	lr
    3cfa:	46c0      	nop			; (mov r8, r8)
    3cfc:	40002880 	.word	0x40002880

00003d00 <ble_paired_app_event>:
	timer_cb_done = true;
}

/* Callback registered for AT_BLE_PAIR_DONE event from stack */
static at_ble_status_t ble_paired_app_event(void *param)
{
    3d00:	b508      	push	{r3, lr}
	timer_cb_done = false;
    3d02:	2200      	movs	r2, #0
    3d04:	4b03      	ldr	r3, [pc, #12]	; (3d14 <ble_paired_app_event+0x14>)
    3d06:	701a      	strb	r2, [r3, #0]
	hw_timer_start(SPECTRUM_UPDATE_INTERVAL);
    3d08:	2001      	movs	r0, #1
    3d0a:	4b03      	ldr	r3, [pc, #12]	; (3d18 <ble_paired_app_event+0x18>)
    3d0c:	4798      	blx	r3
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
    3d0e:	2000      	movs	r0, #0
    3d10:	bd08      	pop	{r3, pc}
    3d12:	46c0      	nop			; (mov r8, r8)
    3d14:	20000631 	.word	0x20000631
    3d18:	00003945 	.word	0x00003945

00003d1c <start_advertisement>:
bool volatile flag = true;
bool volatile data_flag = true;
at_ble_handle_t pndcs_connection_handle;

static at_ble_status_t start_advertisement(void)
{
    3d1c:	b510      	push	{r4, lr}
    3d1e:	b084      	sub	sp, #16
	/* Start of advertisement */
	if(at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, \
    3d20:	23c8      	movs	r3, #200	; 0xc8
    3d22:	00db      	lsls	r3, r3, #3
    3d24:	9300      	str	r3, [sp, #0]
    3d26:	4b0e      	ldr	r3, [pc, #56]	; (3d60 <start_advertisement+0x44>)
    3d28:	9301      	str	r3, [sp, #4]
    3d2a:	2300      	movs	r3, #0
    3d2c:	9302      	str	r3, [sp, #8]
    3d2e:	2000      	movs	r0, #0
    3d30:	2101      	movs	r1, #1
    3d32:	2200      	movs	r2, #0
    3d34:	4c0b      	ldr	r4, [pc, #44]	; (3d64 <start_advertisement+0x48>)
    3d36:	47a0      	blx	r4
    3d38:	1e04      	subs	r4, r0, #0
    3d3a:	d106      	bne.n	3d4a <start_advertisement+0x2e>
		NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0) == \
		AT_BLE_SUCCESS)
	{
		DBG_LOG("BLE Started Advertisement");
    3d3c:	480a      	ldr	r0, [pc, #40]	; (3d68 <start_advertisement+0x4c>)
    3d3e:	4b0b      	ldr	r3, [pc, #44]	; (3d6c <start_advertisement+0x50>)
    3d40:	4798      	blx	r3
    3d42:	480b      	ldr	r0, [pc, #44]	; (3d70 <start_advertisement+0x54>)
    3d44:	4b0b      	ldr	r3, [pc, #44]	; (3d74 <start_advertisement+0x58>)
    3d46:	4798      	blx	r3
		return AT_BLE_SUCCESS;
    3d48:	e006      	b.n	3d58 <start_advertisement+0x3c>
	}
	else
	{
		DBG_LOG("BLE Advertisement start Failed");
    3d4a:	4807      	ldr	r0, [pc, #28]	; (3d68 <start_advertisement+0x4c>)
    3d4c:	4b07      	ldr	r3, [pc, #28]	; (3d6c <start_advertisement+0x50>)
    3d4e:	4798      	blx	r3
    3d50:	4809      	ldr	r0, [pc, #36]	; (3d78 <start_advertisement+0x5c>)
    3d52:	4b08      	ldr	r3, [pc, #32]	; (3d74 <start_advertisement+0x58>)
    3d54:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
    3d56:	24e2      	movs	r4, #226	; 0xe2
}
    3d58:	1c20      	adds	r0, r4, #0
    3d5a:	b004      	add	sp, #16
    3d5c:	bd10      	pop	{r4, pc}
    3d5e:	46c0      	nop			; (mov r8, r8)
    3d60:	0000028f 	.word	0x0000028f
    3d64:	000049dd 	.word	0x000049dd
    3d68:	000096ac 	.word	0x000096ac
    3d6c:	0000853d 	.word	0x0000853d
    3d70:	0000a120 	.word	0x0000a120
    3d74:	0000841d 	.word	0x0000841d
    3d78:	0000a13c 	.word	0x0000a13c

00003d7c <ble_disconnected_app_event>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCONNECTED event from stack */
static at_ble_status_t ble_disconnected_app_event(void *param)
{
    3d7c:	b508      	push	{r3, lr}
	timer_cb_done = false;
    3d7e:	2200      	movs	r2, #0
    3d80:	4b05      	ldr	r3, [pc, #20]	; (3d98 <ble_disconnected_app_event+0x1c>)
    3d82:	701a      	strb	r2, [r3, #0]
	flag = true;
    3d84:	3201      	adds	r2, #1
    3d86:	4b05      	ldr	r3, [pc, #20]	; (3d9c <ble_disconnected_app_event+0x20>)
    3d88:	701a      	strb	r2, [r3, #0]
	hw_timer_stop();
    3d8a:	4b05      	ldr	r3, [pc, #20]	; (3da0 <ble_disconnected_app_event+0x24>)
    3d8c:	4798      	blx	r3
	start_advertisement();
    3d8e:	4b05      	ldr	r3, [pc, #20]	; (3da4 <ble_disconnected_app_event+0x28>)
    3d90:	4798      	blx	r3
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;	
}
    3d92:	2000      	movs	r0, #0
    3d94:	bd08      	pop	{r3, pc}
    3d96:	46c0      	nop			; (mov r8, r8)
    3d98:	20000631 	.word	0x20000631
    3d9c:	20000034 	.word	0x20000034
    3da0:	00003995 	.word	0x00003995
    3da4:	00003d1d 	.word	0x00003d1d

00003da8 <main>:
	pndcs_prf_send_data(spectrum_data, 1);
}


int main(void)
{
    3da8:	b510      	push	{r4, lr}
    3daa:	b084      	sub	sp, #16
	#if SAMG55 || SAM4S
	/* Initialize the SAM system. */
	sysclk_init();
	board_init();
	#elif SAM0
	system_init();
    3dac:	4b1e      	ldr	r3, [pc, #120]	; (3e28 <main+0x80>)
    3dae:	4798      	blx	r3
	#endif
	
	/* Initialize serial console */
	serial_console_init();
    3db0:	4b1e      	ldr	r3, [pc, #120]	; (3e2c <main+0x84>)
    3db2:	4798      	blx	r3
	
	/* Hardware timer */
	hw_timer_init();
    3db4:	4b1e      	ldr	r3, [pc, #120]	; (3e30 <main+0x88>)
    3db6:	4798      	blx	r3

/* Button Initialize */
static inline void button_init(void)
{
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    3db8:	ac01      	add	r4, sp, #4
    3dba:	1c20      	adds	r0, r4, #0
    3dbc:	4b1d      	ldr	r3, [pc, #116]	; (3e34 <main+0x8c>)
    3dbe:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = SW0_EIC_PIN;
    3dc0:	2202      	movs	r2, #2
    3dc2:	9201      	str	r2, [sp, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_UP;
    3dc4:	2301      	movs	r3, #1
    3dc6:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.gpio_pin_mux       = SW0_EIC_PINMUX;
    3dc8:	2180      	movs	r1, #128	; 0x80
    3dca:	0289      	lsls	r1, r1, #10
    3dcc:	6061      	str	r1, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_FALLING;
    3dce:	72e2      	strb	r2, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3dd0:	72a3      	strb	r3, [r4, #10]
	extint_chan_set_config(SW0_EIC_LINE, &eint_chan_conf);
    3dd2:	2002      	movs	r0, #2
    3dd4:	1c21      	adds	r1, r4, #0
    3dd6:	4b18      	ldr	r3, [pc, #96]	; (3e38 <main+0x90>)
    3dd8:	4798      	blx	r3
	
	extint_register_callback(button_cb,
    3dda:	4818      	ldr	r0, [pc, #96]	; (3e3c <main+0x94>)
    3ddc:	2102      	movs	r1, #2
    3dde:	2200      	movs	r2, #0
    3de0:	4b17      	ldr	r3, [pc, #92]	; (3e40 <main+0x98>)
    3de2:	4798      	blx	r3
							SW0_EIC_LINE,
							EXTINT_CALLBACK_TYPE_DETECT);
	
	extint_chan_enable_callback(SW0_EIC_LINE,
    3de4:	2002      	movs	r0, #2
    3de6:	2100      	movs	r1, #0
    3de8:	4b16      	ldr	r3, [pc, #88]	; (3e44 <main+0x9c>)
    3dea:	4798      	blx	r3
	
	/* button initialization */
	button_init();
	
	hw_timer_register_callback(timer_callback_handler);
    3dec:	4816      	ldr	r0, [pc, #88]	; (3e48 <main+0xa0>)
    3dee:	4b17      	ldr	r3, [pc, #92]	; (3e4c <main+0xa4>)
    3df0:	4798      	blx	r3

	DBG_LOG("Initializing BLE Application");
    3df2:	4817      	ldr	r0, [pc, #92]	; (3e50 <main+0xa8>)
    3df4:	4b17      	ldr	r3, [pc, #92]	; (3e54 <main+0xac>)
    3df6:	4798      	blx	r3
    3df8:	4817      	ldr	r0, [pc, #92]	; (3e58 <main+0xb0>)
    3dfa:	4b18      	ldr	r3, [pc, #96]	; (3e5c <main+0xb4>)
    3dfc:	4798      	blx	r3
		
	/* initialize the BLE chip  and Set the Device Address */
	ble_device_init(NULL);
    3dfe:	2000      	movs	r0, #0
    3e00:	4b17      	ldr	r3, [pc, #92]	; (3e60 <main+0xb8>)
    3e02:	4798      	blx	r3
	
	pndcs_prf_buf_init(&spectrum_data[0], APP_TX_BUF_SIZE);
    3e04:	4817      	ldr	r0, [pc, #92]	; (3e64 <main+0xbc>)
    3e06:	2196      	movs	r1, #150	; 0x96
    3e08:	4b17      	ldr	r3, [pc, #92]	; (3e68 <main+0xc0>)
    3e0a:	4798      	blx	r3
	
	/* Register Primary/Included service in case of GATT Server */
	pndcs_prf_init(NULL);
    3e0c:	2000      	movs	r0, #0
    3e0e:	4b17      	ldr	r3, [pc, #92]	; (3e6c <main+0xc4>)
    3e10:	4798      	blx	r3
	
	/* Start the advertisement */
	start_advertisement();
    3e12:	4b17      	ldr	r3, [pc, #92]	; (3e70 <main+0xc8>)
    3e14:	4798      	blx	r3
	
	/* Register callbacks for gap related events */ //(TODO)
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
    3e16:	2000      	movs	r0, #0
    3e18:	2100      	movs	r1, #0
    3e1a:	4a16      	ldr	r2, [pc, #88]	; (3e74 <main+0xcc>)
    3e1c:	4b16      	ldr	r3, [pc, #88]	; (3e78 <main+0xd0>)
    3e1e:	4798      	blx	r3
									//pndcs_app_gatt_server_cb);
	
	
	while(true)
	{
		ble_event_task();
    3e20:	4c16      	ldr	r4, [pc, #88]	; (3e7c <main+0xd4>)
    3e22:	47a0      	blx	r4
	}
    3e24:	e7fd      	b.n	3e22 <main+0x7a>
    3e26:	46c0      	nop			; (mov r8, r8)
    3e28:	0000182d 	.word	0x0000182d
    3e2c:	00003439 	.word	0x00003439
    3e30:	000038a9 	.word	0x000038a9
    3e34:	0000039d 	.word	0x0000039d
    3e38:	000003b1 	.word	0x000003b1
    3e3c:	00003cf1 	.word	0x00003cf1
    3e40:	00000225 	.word	0x00000225
    3e44:	00000251 	.word	0x00000251
    3e48:	00003ce1 	.word	0x00003ce1
    3e4c:	00003939 	.word	0x00003939
    3e50:	000096ac 	.word	0x000096ac
    3e54:	0000853d 	.word	0x0000853d
    3e58:	0000a15c 	.word	0x0000a15c
    3e5c:	0000841d 	.word	0x0000841d
    3e60:	00002b25 	.word	0x00002b25
    3e64:	20001810 	.word	0x20001810
    3e68:	000020dd 	.word	0x000020dd
    3e6c:	000020e9 	.word	0x000020e9
    3e70:	00003d1d 	.word	0x00003d1d
    3e74:	0000a17c 	.word	0x0000a17c
    3e78:	00002a55 	.word	0x00002a55
    3e7c:	00003241 	.word	0x00003241

00003e80 <internal_event_post>:
    3e80:	b570      	push	{r4, r5, r6, lr}
    3e82:	4d0c      	ldr	r5, [pc, #48]	; (3eb4 <internal_event_post+0x34>)
    3e84:	682c      	ldr	r4, [r5, #0]
    3e86:	2c00      	cmp	r4, #0
    3e88:	d013      	beq.n	3eb2 <internal_event_post+0x32>
    3e8a:	6826      	ldr	r6, [r4, #0]
    3e8c:	60e2      	str	r2, [r4, #12]
    3e8e:	602e      	str	r6, [r5, #0]
    3e90:	2500      	movs	r5, #0
    3e92:	4a09      	ldr	r2, [pc, #36]	; (3eb8 <internal_event_post+0x38>)
    3e94:	8123      	strh	r3, [r4, #8]
    3e96:	6813      	ldr	r3, [r2, #0]
    3e98:	6025      	str	r5, [r4, #0]
    3e9a:	80a0      	strh	r0, [r4, #4]
    3e9c:	80e1      	strh	r1, [r4, #6]
    3e9e:	42ab      	cmp	r3, r5
    3ea0:	d101      	bne.n	3ea6 <internal_event_post+0x26>
    3ea2:	6014      	str	r4, [r2, #0]
    3ea4:	e005      	b.n	3eb2 <internal_event_post+0x32>
    3ea6:	681a      	ldr	r2, [r3, #0]
    3ea8:	2a00      	cmp	r2, #0
    3eaa:	d001      	beq.n	3eb0 <internal_event_post+0x30>
    3eac:	1c13      	adds	r3, r2, #0
    3eae:	e7fa      	b.n	3ea6 <internal_event_post+0x26>
    3eb0:	601c      	str	r4, [r3, #0]
    3eb2:	bd70      	pop	{r4, r5, r6, pc}
    3eb4:	200006dc 	.word	0x200006dc
    3eb8:	200006d4 	.word	0x200006d4

00003ebc <internal_event_init>:
    3ebc:	4b0a      	ldr	r3, [pc, #40]	; (3ee8 <internal_event_init+0x2c>)
    3ebe:	2200      	movs	r2, #0
    3ec0:	1c19      	adds	r1, r3, #0
    3ec2:	b510      	push	{r4, lr}
    3ec4:	6818      	ldr	r0, [r3, #0]
    3ec6:	4b09      	ldr	r3, [pc, #36]	; (3eec <internal_event_init+0x30>)
    3ec8:	189c      	adds	r4, r3, r2
    3eca:	50d0      	str	r0, [r2, r3]
    3ecc:	3210      	adds	r2, #16
    3ece:	1c20      	adds	r0, r4, #0
    3ed0:	2aa0      	cmp	r2, #160	; 0xa0
    3ed2:	d1f8      	bne.n	3ec6 <internal_event_init+0xa>
    3ed4:	3390      	adds	r3, #144	; 0x90
    3ed6:	600b      	str	r3, [r1, #0]
    3ed8:	4b05      	ldr	r3, [pc, #20]	; (3ef0 <internal_event_init+0x34>)
    3eda:	3aa1      	subs	r2, #161	; 0xa1
    3edc:	805a      	strh	r2, [r3, #2]
    3ede:	801a      	strh	r2, [r3, #0]
    3ee0:	2200      	movs	r2, #0
    3ee2:	609a      	str	r2, [r3, #8]
    3ee4:	60da      	str	r2, [r3, #12]
    3ee6:	bd10      	pop	{r4, pc}
    3ee8:	200006dc 	.word	0x200006dc
    3eec:	20000634 	.word	0x20000634
    3ef0:	200018fc 	.word	0x200018fc

00003ef4 <special_events_handler>:
    3ef4:	b538      	push	{r3, r4, r5, lr}
    3ef6:	4c20      	ldr	r4, [pc, #128]	; (3f78 <special_events_handler+0x84>)
    3ef8:	1c05      	adds	r5, r0, #0
    3efa:	1c08      	adds	r0, r1, #0
    3efc:	8821      	ldrh	r1, [r4, #0]
    3efe:	1c23      	adds	r3, r4, #0
    3f00:	42a9      	cmp	r1, r5
    3f02:	d10e      	bne.n	3f22 <special_events_handler+0x2e>
    3f04:	88a1      	ldrh	r1, [r4, #4]
    3f06:	4281      	cmp	r1, r0
    3f08:	d10b      	bne.n	3f22 <special_events_handler+0x2e>
    3f0a:	2301      	movs	r3, #1
    3f0c:	425b      	negs	r3, r3
    3f0e:	8023      	strh	r3, [r4, #0]
    3f10:	60a2      	str	r2, [r4, #8]
    3f12:	4b1a      	ldr	r3, [pc, #104]	; (3f7c <special_events_handler+0x88>)
    3f14:	8862      	ldrh	r2, [r4, #2]
    3f16:	2101      	movs	r1, #1
    3f18:	429a      	cmp	r2, r3
    3f1a:	d12b      	bne.n	3f74 <special_events_handler+0x80>
    3f1c:	4b18      	ldr	r3, [pc, #96]	; (3f80 <special_events_handler+0x8c>)
    3f1e:	4798      	blx	r3
    3f20:	e01c      	b.n	3f5c <special_events_handler+0x68>
    3f22:	8859      	ldrh	r1, [r3, #2]
    3f24:	42a9      	cmp	r1, r5
    3f26:	d10c      	bne.n	3f42 <special_events_handler+0x4e>
    3f28:	8899      	ldrh	r1, [r3, #4]
    3f2a:	4281      	cmp	r1, r0
    3f2c:	d109      	bne.n	3f42 <special_events_handler+0x4e>
    3f2e:	2101      	movs	r1, #1
    3f30:	4249      	negs	r1, r1
    3f32:	8059      	strh	r1, [r3, #2]
    3f34:	6899      	ldr	r1, [r3, #8]
    3f36:	2900      	cmp	r1, #0
    3f38:	d101      	bne.n	3f3e <special_events_handler+0x4a>
    3f3a:	609a      	str	r2, [r3, #8]
    3f3c:	e7ee      	b.n	3f1c <special_events_handler+0x28>
    3f3e:	60da      	str	r2, [r3, #12]
    3f40:	e7ec      	b.n	3f1c <special_events_handler+0x28>
    3f42:	4b10      	ldr	r3, [pc, #64]	; (3f84 <special_events_handler+0x90>)
    3f44:	429d      	cmp	r5, r3
    3f46:	d00f      	beq.n	3f68 <special_events_handler+0x74>
    3f48:	4b0f      	ldr	r3, [pc, #60]	; (3f88 <special_events_handler+0x94>)
    3f4a:	429d      	cmp	r5, r3
    3f4c:	d008      	beq.n	3f60 <special_events_handler+0x6c>
    3f4e:	4b0f      	ldr	r3, [pc, #60]	; (3f8c <special_events_handler+0x98>)
    3f50:	2100      	movs	r1, #0
    3f52:	429d      	cmp	r5, r3
    3f54:	d10e      	bne.n	3f74 <special_events_handler+0x80>
    3f56:	1c10      	adds	r0, r2, #0
    3f58:	4b0d      	ldr	r3, [pc, #52]	; (3f90 <special_events_handler+0x9c>)
    3f5a:	4798      	blx	r3
    3f5c:	2101      	movs	r1, #1
    3f5e:	e009      	b.n	3f74 <special_events_handler+0x80>
    3f60:	1c11      	adds	r1, r2, #0
    3f62:	4b0c      	ldr	r3, [pc, #48]	; (3f94 <special_events_handler+0xa0>)
    3f64:	2200      	movs	r2, #0
    3f66:	e002      	b.n	3f6e <special_events_handler+0x7a>
    3f68:	1c11      	adds	r1, r2, #0
    3f6a:	2200      	movs	r2, #0
    3f6c:	4b0a      	ldr	r3, [pc, #40]	; (3f98 <special_events_handler+0xa4>)
    3f6e:	4798      	blx	r3
    3f70:	4241      	negs	r1, r0
    3f72:	4141      	adcs	r1, r0
    3f74:	1c08      	adds	r0, r1, #0
    3f76:	bd38      	pop	{r3, r4, r5, pc}
    3f78:	200018fc 	.word	0x200018fc
    3f7c:	0000ffff 	.word	0x0000ffff
    3f80:	00005d29 	.word	0x00005d29
    3f84:	00000e13 	.word	0x00000e13
    3f88:	00000e15 	.word	0x00000e15
    3f8c:	00000e01 	.word	0x00000e01
    3f90:	0000686d 	.word	0x0000686d
    3f94:	00006a3d 	.word	0x00006a3d
    3f98:	00006b15 	.word	0x00006b15

00003f9c <at_ble_event_get>:
    3f9c:	2300      	movs	r3, #0
    3f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fa0:	1c0d      	adds	r5, r1, #0
    3fa2:	b085      	sub	sp, #20
    3fa4:	9002      	str	r0, [sp, #8]
    3fa6:	9203      	str	r2, [sp, #12]
    3fa8:	7003      	strb	r3, [r0, #0]
    3faa:	4bb8      	ldr	r3, [pc, #736]	; (428c <at_ble_event_get+0x2f0>)
    3fac:	9803      	ldr	r0, [sp, #12]
    3fae:	4798      	blx	r3
    3fb0:	2300      	movs	r3, #0
    3fb2:	9301      	str	r3, [sp, #4]
    3fb4:	4cb6      	ldr	r4, [pc, #728]	; (4290 <at_ble_event_get+0x2f4>)
    3fb6:	6823      	ldr	r3, [r4, #0]
    3fb8:	2b00      	cmp	r3, #0
    3fba:	d104      	bne.n	3fc6 <at_ble_event_get+0x2a>
    3fbc:	4bb5      	ldr	r3, [pc, #724]	; (4294 <at_ble_event_get+0x2f8>)
    3fbe:	4798      	blx	r3
    3fc0:	9001      	str	r0, [sp, #4]
    3fc2:	28d0      	cmp	r0, #208	; 0xd0
    3fc4:	d1f6      	bne.n	3fb4 <at_ble_event_get+0x18>
    3fc6:	4bb4      	ldr	r3, [pc, #720]	; (4298 <at_ble_event_get+0x2fc>)
    3fc8:	4798      	blx	r3
    3fca:	9b01      	ldr	r3, [sp, #4]
    3fcc:	2bd0      	cmp	r3, #208	; 0xd0
    3fce:	d100      	bne.n	3fd2 <at_ble_event_get+0x36>
    3fd0:	e28b      	b.n	44ea <at_ble_event_get+0x54e>
    3fd2:	6823      	ldr	r3, [r4, #0]
    3fd4:	681a      	ldr	r2, [r3, #0]
    3fd6:	68d9      	ldr	r1, [r3, #12]
    3fd8:	6022      	str	r2, [r4, #0]
    3fda:	88da      	ldrh	r2, [r3, #6]
    3fdc:	9200      	str	r2, [sp, #0]
    3fde:	4aaf      	ldr	r2, [pc, #700]	; (429c <at_ble_event_get+0x300>)
    3fe0:	889c      	ldrh	r4, [r3, #4]
    3fe2:	6810      	ldr	r0, [r2, #0]
    3fe4:	6013      	str	r3, [r2, #0]
    3fe6:	6018      	str	r0, [r3, #0]
    3fe8:	9b01      	ldr	r3, [sp, #4]
    3fea:	2b00      	cmp	r3, #0
    3fec:	d000      	beq.n	3ff0 <at_ble_event_get+0x54>
    3fee:	e27c      	b.n	44ea <at_ble_event_get+0x54e>
    3ff0:	4bab      	ldr	r3, [pc, #684]	; (42a0 <at_ble_event_get+0x304>)
    3ff2:	429c      	cmp	r4, r3
    3ff4:	d108      	bne.n	4008 <at_ble_event_get+0x6c>
    3ff6:	9b00      	ldr	r3, [sp, #0]
    3ff8:	42a3      	cmp	r3, r4
    3ffa:	d000      	beq.n	3ffe <at_ble_event_get+0x62>
    3ffc:	e265      	b.n	44ca <at_ble_event_get+0x52e>
    3ffe:	2338      	movs	r3, #56	; 0x38
    4000:	9a02      	ldr	r2, [sp, #8]
    4002:	7013      	strb	r3, [r2, #0]
    4004:	6029      	str	r1, [r5, #0]
    4006:	e270      	b.n	44ea <at_ble_event_get+0x54e>
    4008:	9b00      	ldr	r3, [sp, #0]
    400a:	2bbb      	cmp	r3, #187	; 0xbb
    400c:	d125      	bne.n	405a <at_ble_event_get+0xbe>
    400e:	2cbb      	cmp	r4, #187	; 0xbb
    4010:	d123      	bne.n	405a <at_ble_event_get+0xbe>
    4012:	466b      	mov	r3, sp
    4014:	889b      	ldrh	r3, [r3, #4]
    4016:	80ab      	strh	r3, [r5, #4]
    4018:	788b      	ldrb	r3, [r1, #2]
    401a:	784a      	ldrb	r2, [r1, #1]
    401c:	021b      	lsls	r3, r3, #8
    401e:	78cc      	ldrb	r4, [r1, #3]
    4020:	7908      	ldrb	r0, [r1, #4]
    4022:	4313      	orrs	r3, r2
    4024:	794a      	ldrb	r2, [r1, #5]
    4026:	499f      	ldr	r1, [pc, #636]	; (42a4 <at_ble_event_get+0x308>)
    4028:	70ac      	strb	r4, [r5, #2]
    402a:	802b      	strh	r3, [r5, #0]
    402c:	428b      	cmp	r3, r1
    402e:	d806      	bhi.n	403e <at_ble_event_get+0xa2>
    4030:	4a9d      	ldr	r2, [pc, #628]	; (42a8 <at_ble_event_get+0x30c>)
    4032:	4293      	cmp	r3, r2
    4034:	d20b      	bcs.n	404e <at_ble_event_get+0xb2>
    4036:	4a9d      	ldr	r2, [pc, #628]	; (42ac <at_ble_event_get+0x310>)
    4038:	4293      	cmp	r3, r2
    403a:	d008      	beq.n	404e <at_ble_event_get+0xb2>
    403c:	e009      	b.n	4052 <at_ble_event_get+0xb6>
    403e:	499c      	ldr	r1, [pc, #624]	; (42b0 <at_ble_event_get+0x314>)
    4040:	428b      	cmp	r3, r1
    4042:	d106      	bne.n	4052 <at_ble_event_get+0xb6>
    4044:	0213      	lsls	r3, r2, #8
    4046:	4303      	orrs	r3, r0
    4048:	80ab      	strh	r3, [r5, #4]
    404a:	2337      	movs	r3, #55	; 0x37
    404c:	e002      	b.n	4054 <at_ble_event_get+0xb8>
    404e:	2336      	movs	r3, #54	; 0x36
    4050:	e000      	b.n	4054 <at_ble_event_get+0xb8>
    4052:	2300      	movs	r3, #0
    4054:	9a02      	ldr	r2, [sp, #8]
    4056:	7013      	strb	r3, [r2, #0]
    4058:	e247      	b.n	44ea <at_ble_event_get+0x54e>
    405a:	4b96      	ldr	r3, [pc, #600]	; (42b4 <at_ble_event_get+0x318>)
    405c:	429c      	cmp	r4, r3
    405e:	d100      	bne.n	4062 <at_ble_event_get+0xc6>
    4060:	e1a2      	b.n	43a8 <at_ble_event_get+0x40c>
    4062:	d900      	bls.n	4066 <at_ble_event_get+0xca>
    4064:	e083      	b.n	416e <at_ble_event_get+0x1d2>
    4066:	4b94      	ldr	r3, [pc, #592]	; (42b8 <at_ble_event_get+0x31c>)
    4068:	429c      	cmp	r4, r3
    406a:	d100      	bne.n	406e <at_ble_event_get+0xd2>
    406c:	e1fd      	b.n	446a <at_ble_event_get+0x4ce>
    406e:	d83c      	bhi.n	40ea <at_ble_event_get+0x14e>
    4070:	4b92      	ldr	r3, [pc, #584]	; (42bc <at_ble_event_get+0x320>)
    4072:	429c      	cmp	r4, r3
    4074:	d100      	bne.n	4078 <at_ble_event_get+0xdc>
    4076:	e1fc      	b.n	4472 <at_ble_event_get+0x4d6>
    4078:	d816      	bhi.n	40a8 <at_ble_event_get+0x10c>
    407a:	4b91      	ldr	r3, [pc, #580]	; (42c0 <at_ble_event_get+0x324>)
    407c:	429c      	cmp	r4, r3
    407e:	d100      	bne.n	4082 <at_ble_event_get+0xe6>
    4080:	e1d5      	b.n	442e <at_ble_event_get+0x492>
    4082:	d804      	bhi.n	408e <at_ble_event_get+0xf2>
    4084:	2638      	movs	r6, #56	; 0x38
    4086:	42b4      	cmp	r4, r6
    4088:	d100      	bne.n	408c <at_ble_event_get+0xf0>
    408a:	e22c      	b.n	44e6 <at_ble_event_get+0x54a>
    408c:	e21d      	b.n	44ca <at_ble_event_get+0x52e>
    408e:	4b8d      	ldr	r3, [pc, #564]	; (42c4 <at_ble_event_get+0x328>)
    4090:	429c      	cmp	r4, r3
    4092:	d100      	bne.n	4096 <at_ble_event_get+0xfa>
    4094:	e1d1      	b.n	443a <at_ble_event_get+0x49e>
    4096:	33fe      	adds	r3, #254	; 0xfe
    4098:	33ff      	adds	r3, #255	; 0xff
    409a:	429c      	cmp	r4, r3
    409c:	d000      	beq.n	40a0 <at_ble_event_get+0x104>
    409e:	e214      	b.n	44ca <at_ble_event_get+0x52e>
    40a0:	9800      	ldr	r0, [sp, #0]
    40a2:	1c2a      	adds	r2, r5, #0
    40a4:	4b88      	ldr	r3, [pc, #544]	; (42c8 <at_ble_event_get+0x32c>)
    40a6:	e194      	b.n	43d2 <at_ble_event_get+0x436>
    40a8:	4b88      	ldr	r3, [pc, #544]	; (42cc <at_ble_event_get+0x330>)
    40aa:	429c      	cmp	r4, r3
    40ac:	d100      	bne.n	40b0 <at_ble_event_get+0x114>
    40ae:	e1d0      	b.n	4452 <at_ble_event_get+0x4b6>
    40b0:	d80d      	bhi.n	40ce <at_ble_event_get+0x132>
    40b2:	4b87      	ldr	r3, [pc, #540]	; (42d0 <at_ble_event_get+0x334>)
    40b4:	429c      	cmp	r4, r3
    40b6:	d100      	bne.n	40ba <at_ble_event_get+0x11e>
    40b8:	e1c5      	b.n	4446 <at_ble_event_get+0x4aa>
    40ba:	4b86      	ldr	r3, [pc, #536]	; (42d4 <at_ble_event_get+0x338>)
    40bc:	429c      	cmp	r4, r3
    40be:	d000      	beq.n	40c2 <at_ble_event_get+0x126>
    40c0:	e203      	b.n	44ca <at_ble_event_get+0x52e>
    40c2:	9800      	ldr	r0, [sp, #0]
    40c4:	1c2a      	adds	r2, r5, #0
    40c6:	4b84      	ldr	r3, [pc, #528]	; (42d8 <at_ble_event_get+0x33c>)
    40c8:	4798      	blx	r3
    40ca:	2614      	movs	r6, #20
    40cc:	e20b      	b.n	44e6 <at_ble_event_get+0x54a>
    40ce:	4b83      	ldr	r3, [pc, #524]	; (42dc <at_ble_event_get+0x340>)
    40d0:	429c      	cmp	r4, r3
    40d2:	d100      	bne.n	40d6 <at_ble_event_get+0x13a>
    40d4:	e1c3      	b.n	445e <at_ble_event_get+0x4c2>
    40d6:	4b82      	ldr	r3, [pc, #520]	; (42e0 <at_ble_event_get+0x344>)
    40d8:	429c      	cmp	r4, r3
    40da:	d000      	beq.n	40de <at_ble_event_get+0x142>
    40dc:	e1f5      	b.n	44ca <at_ble_event_get+0x52e>
    40de:	9800      	ldr	r0, [sp, #0]
    40e0:	1c2a      	adds	r2, r5, #0
    40e2:	4b80      	ldr	r3, [pc, #512]	; (42e4 <at_ble_event_get+0x348>)
    40e4:	4798      	blx	r3
    40e6:	2618      	movs	r6, #24
    40e8:	e1fd      	b.n	44e6 <at_ble_event_get+0x54a>
    40ea:	4b7f      	ldr	r3, [pc, #508]	; (42e8 <at_ble_event_get+0x34c>)
    40ec:	429c      	cmp	r4, r3
    40ee:	d100      	bne.n	40f2 <at_ble_event_get+0x156>
    40f0:	e1cc      	b.n	448c <at_ble_event_get+0x4f0>
    40f2:	d81e      	bhi.n	4132 <at_ble_event_get+0x196>
    40f4:	4b7d      	ldr	r3, [pc, #500]	; (42ec <at_ble_event_get+0x350>)
    40f6:	429c      	cmp	r4, r3
    40f8:	d100      	bne.n	40fc <at_ble_event_get+0x160>
    40fa:	e1ce      	b.n	449a <at_ble_event_get+0x4fe>
    40fc:	d80d      	bhi.n	411a <at_ble_event_get+0x17e>
    40fe:	4b7c      	ldr	r3, [pc, #496]	; (42f0 <at_ble_event_get+0x354>)
    4100:	429c      	cmp	r4, r3
    4102:	d000      	beq.n	4106 <at_ble_event_get+0x16a>
    4104:	e1e1      	b.n	44ca <at_ble_event_get+0x52e>
    4106:	9800      	ldr	r0, [sp, #0]
    4108:	1c2a      	adds	r2, r5, #0
    410a:	4b7a      	ldr	r3, [pc, #488]	; (42f4 <at_ble_event_get+0x358>)
    410c:	4798      	blx	r3
    410e:	88a9      	ldrh	r1, [r5, #4]
    4110:	1c06      	adds	r6, r0, #0
    4112:	4b79      	ldr	r3, [pc, #484]	; (42f8 <at_ble_event_get+0x35c>)
    4114:	8828      	ldrh	r0, [r5, #0]
    4116:	4798      	blx	r3
    4118:	e1e5      	b.n	44e6 <at_ble_event_get+0x54a>
    411a:	4b78      	ldr	r3, [pc, #480]	; (42fc <at_ble_event_get+0x360>)
    411c:	429c      	cmp	r4, r3
    411e:	d100      	bne.n	4122 <at_ble_event_get+0x186>
    4120:	e1ad      	b.n	447e <at_ble_event_get+0x4e2>
    4122:	4b77      	ldr	r3, [pc, #476]	; (4300 <at_ble_event_get+0x364>)
    4124:	429c      	cmp	r4, r3
    4126:	d000      	beq.n	412a <at_ble_event_get+0x18e>
    4128:	e1cf      	b.n	44ca <at_ble_event_get+0x52e>
    412a:	9800      	ldr	r0, [sp, #0]
    412c:	1c2a      	adds	r2, r5, #0
    412e:	4b75      	ldr	r3, [pc, #468]	; (4304 <at_ble_event_get+0x368>)
    4130:	e14f      	b.n	43d2 <at_ble_event_get+0x436>
    4132:	4b75      	ldr	r3, [pc, #468]	; (4308 <at_ble_event_get+0x36c>)
    4134:	429c      	cmp	r4, r3
    4136:	d100      	bne.n	413a <at_ble_event_get+0x19e>
    4138:	e12a      	b.n	4390 <at_ble_event_get+0x3f4>
    413a:	d809      	bhi.n	4150 <at_ble_event_get+0x1b4>
    413c:	3b08      	subs	r3, #8
    413e:	429c      	cmp	r4, r3
    4140:	d100      	bne.n	4144 <at_ble_event_get+0x1a8>
    4142:	e09e      	b.n	4282 <at_ble_event_get+0x2e6>
    4144:	4b71      	ldr	r3, [pc, #452]	; (430c <at_ble_event_get+0x370>)
    4146:	2639      	movs	r6, #57	; 0x39
    4148:	429c      	cmp	r4, r3
    414a:	d100      	bne.n	414e <at_ble_event_get+0x1b2>
    414c:	e1cb      	b.n	44e6 <at_ble_event_get+0x54a>
    414e:	e1bc      	b.n	44ca <at_ble_event_get+0x52e>
    4150:	23d1      	movs	r3, #209	; 0xd1
    4152:	011b      	lsls	r3, r3, #4
    4154:	429c      	cmp	r4, r3
    4156:	d100      	bne.n	415a <at_ble_event_get+0x1be>
    4158:	e120      	b.n	439c <at_ble_event_get+0x400>
    415a:	4b6d      	ldr	r3, [pc, #436]	; (4310 <at_ble_event_get+0x374>)
    415c:	429c      	cmp	r4, r3
    415e:	d000      	beq.n	4162 <at_ble_event_get+0x1c6>
    4160:	e1b3      	b.n	44ca <at_ble_event_get+0x52e>
    4162:	1c08      	adds	r0, r1, #0
    4164:	4b6b      	ldr	r3, [pc, #428]	; (4314 <at_ble_event_get+0x378>)
    4166:	1c29      	adds	r1, r5, #0
    4168:	4798      	blx	r3
    416a:	260f      	movs	r6, #15
    416c:	e1bb      	b.n	44e6 <at_ble_event_get+0x54a>
    416e:	4b6a      	ldr	r3, [pc, #424]	; (4318 <at_ble_event_get+0x37c>)
    4170:	429c      	cmp	r4, r3
    4172:	d100      	bne.n	4176 <at_ble_event_get+0x1da>
    4174:	e135      	b.n	43e2 <at_ble_event_get+0x446>
    4176:	d83d      	bhi.n	41f4 <at_ble_event_get+0x258>
    4178:	4b68      	ldr	r3, [pc, #416]	; (431c <at_ble_event_get+0x380>)
    417a:	429c      	cmp	r4, r3
    417c:	d100      	bne.n	4180 <at_ble_event_get+0x1e4>
    417e:	e152      	b.n	4426 <at_ble_event_get+0x48a>
    4180:	d819      	bhi.n	41b6 <at_ble_event_get+0x21a>
    4182:	4b67      	ldr	r3, [pc, #412]	; (4320 <at_ble_event_get+0x384>)
    4184:	429c      	cmp	r4, r3
    4186:	d100      	bne.n	418a <at_ble_event_get+0x1ee>
    4188:	e11a      	b.n	43c0 <at_ble_event_get+0x424>
    418a:	d807      	bhi.n	419c <at_ble_event_get+0x200>
    418c:	3b03      	subs	r3, #3
    418e:	429c      	cmp	r4, r3
    4190:	d000      	beq.n	4194 <at_ble_event_get+0x1f8>
    4192:	e19a      	b.n	44ca <at_ble_event_get+0x52e>
    4194:	9800      	ldr	r0, [sp, #0]
    4196:	1c2a      	adds	r2, r5, #0
    4198:	4b62      	ldr	r3, [pc, #392]	; (4324 <at_ble_event_get+0x388>)
    419a:	e11a      	b.n	43d2 <at_ble_event_get+0x436>
    419c:	4b62      	ldr	r3, [pc, #392]	; (4328 <at_ble_event_get+0x38c>)
    419e:	429c      	cmp	r4, r3
    41a0:	d100      	bne.n	41a4 <at_ble_event_get+0x208>
    41a2:	e107      	b.n	43b4 <at_ble_event_get+0x418>
    41a4:	4b61      	ldr	r3, [pc, #388]	; (432c <at_ble_event_get+0x390>)
    41a6:	429c      	cmp	r4, r3
    41a8:	d000      	beq.n	41ac <at_ble_event_get+0x210>
    41aa:	e18e      	b.n	44ca <at_ble_event_get+0x52e>
    41ac:	9800      	ldr	r0, [sp, #0]
    41ae:	1c2a      	adds	r2, r5, #0
    41b0:	4b5f      	ldr	r3, [pc, #380]	; (4330 <at_ble_event_get+0x394>)
    41b2:	4798      	blx	r3
    41b4:	e16f      	b.n	4496 <at_ble_event_get+0x4fa>
    41b6:	4b5f      	ldr	r3, [pc, #380]	; (4334 <at_ble_event_get+0x398>)
    41b8:	429c      	cmp	r4, r3
    41ba:	d100      	bne.n	41be <at_ble_event_get+0x222>
    41bc:	e106      	b.n	43cc <at_ble_event_get+0x430>
    41be:	d80b      	bhi.n	41d8 <at_ble_event_get+0x23c>
    41c0:	4b5d      	ldr	r3, [pc, #372]	; (4338 <at_ble_event_get+0x39c>)
    41c2:	429c      	cmp	r4, r3
    41c4:	d100      	bne.n	41c8 <at_ble_event_get+0x22c>
    41c6:	e12a      	b.n	441e <at_ble_event_get+0x482>
    41c8:	4b5c      	ldr	r3, [pc, #368]	; (433c <at_ble_event_get+0x3a0>)
    41ca:	429c      	cmp	r4, r3
    41cc:	d000      	beq.n	41d0 <at_ble_event_get+0x234>
    41ce:	e17c      	b.n	44ca <at_ble_event_get+0x52e>
    41d0:	9800      	ldr	r0, [sp, #0]
    41d2:	1c2a      	adds	r2, r5, #0
    41d4:	4b5a      	ldr	r3, [pc, #360]	; (4340 <at_ble_event_get+0x3a4>)
    41d6:	e0fc      	b.n	43d2 <at_ble_event_get+0x436>
    41d8:	4b5a      	ldr	r3, [pc, #360]	; (4344 <at_ble_event_get+0x3a8>)
    41da:	429c      	cmp	r4, r3
    41dc:	d100      	bne.n	41e0 <at_ble_event_get+0x244>
    41de:	e0fa      	b.n	43d6 <at_ble_event_get+0x43a>
    41e0:	4b59      	ldr	r3, [pc, #356]	; (4348 <at_ble_event_get+0x3ac>)
    41e2:	429c      	cmp	r4, r3
    41e4:	d000      	beq.n	41e8 <at_ble_event_get+0x24c>
    41e6:	e170      	b.n	44ca <at_ble_event_get+0x52e>
    41e8:	9800      	ldr	r0, [sp, #0]
    41ea:	1c2a      	adds	r2, r5, #0
    41ec:	4b57      	ldr	r3, [pc, #348]	; (434c <at_ble_event_get+0x3b0>)
    41ee:	4798      	blx	r3
    41f0:	260e      	movs	r6, #14
    41f2:	e178      	b.n	44e6 <at_ble_event_get+0x54a>
    41f4:	4b56      	ldr	r3, [pc, #344]	; (4350 <at_ble_event_get+0x3b4>)
    41f6:	429c      	cmp	r4, r3
    41f8:	d100      	bne.n	41fc <at_ble_event_get+0x260>
    41fa:	e104      	b.n	4406 <at_ble_event_get+0x46a>
    41fc:	d820      	bhi.n	4240 <at_ble_event_get+0x2a4>
    41fe:	4b55      	ldr	r3, [pc, #340]	; (4354 <at_ble_event_get+0x3b8>)
    4200:	429c      	cmp	r4, r3
    4202:	d100      	bne.n	4206 <at_ble_event_get+0x26a>
    4204:	e105      	b.n	4412 <at_ble_event_get+0x476>
    4206:	d80d      	bhi.n	4224 <at_ble_event_get+0x288>
    4208:	4b53      	ldr	r3, [pc, #332]	; (4358 <at_ble_event_get+0x3bc>)
    420a:	429c      	cmp	r4, r3
    420c:	d100      	bne.n	4210 <at_ble_event_get+0x274>
    420e:	e0ee      	b.n	43ee <at_ble_event_get+0x452>
    4210:	4b52      	ldr	r3, [pc, #328]	; (435c <at_ble_event_get+0x3c0>)
    4212:	429c      	cmp	r4, r3
    4214:	d000      	beq.n	4218 <at_ble_event_get+0x27c>
    4216:	e158      	b.n	44ca <at_ble_event_get+0x52e>
    4218:	9800      	ldr	r0, [sp, #0]
    421a:	1c2a      	adds	r2, r5, #0
    421c:	4b50      	ldr	r3, [pc, #320]	; (4360 <at_ble_event_get+0x3c4>)
    421e:	4798      	blx	r3
    4220:	2612      	movs	r6, #18
    4222:	e160      	b.n	44e6 <at_ble_event_get+0x54a>
    4224:	4b4f      	ldr	r3, [pc, #316]	; (4364 <at_ble_event_get+0x3c8>)
    4226:	429c      	cmp	r4, r3
    4228:	d100      	bne.n	422c <at_ble_event_get+0x290>
    422a:	e0e6      	b.n	43fa <at_ble_event_get+0x45e>
    422c:	4b4e      	ldr	r3, [pc, #312]	; (4368 <at_ble_event_get+0x3cc>)
    422e:	429c      	cmp	r4, r3
    4230:	d000      	beq.n	4234 <at_ble_event_get+0x298>
    4232:	e14a      	b.n	44ca <at_ble_event_get+0x52e>
    4234:	1c08      	adds	r0, r1, #0
    4236:	4b4d      	ldr	r3, [pc, #308]	; (436c <at_ble_event_get+0x3d0>)
    4238:	1c29      	adds	r1, r5, #0
    423a:	4798      	blx	r3
    423c:	262a      	movs	r6, #42	; 0x2a
    423e:	e152      	b.n	44e6 <at_ble_event_get+0x54a>
    4240:	4b4b      	ldr	r3, [pc, #300]	; (4370 <at_ble_event_get+0x3d4>)
    4242:	429c      	cmp	r4, r3
    4244:	d100      	bne.n	4248 <at_ble_event_get+0x2ac>
    4246:	e134      	b.n	44b2 <at_ble_event_get+0x516>
    4248:	d80d      	bhi.n	4266 <at_ble_event_get+0x2ca>
    424a:	4b4a      	ldr	r3, [pc, #296]	; (4374 <at_ble_event_get+0x3d8>)
    424c:	429c      	cmp	r4, r3
    424e:	d100      	bne.n	4252 <at_ble_event_get+0x2b6>
    4250:	e129      	b.n	44a6 <at_ble_event_get+0x50a>
    4252:	4b49      	ldr	r3, [pc, #292]	; (4378 <at_ble_event_get+0x3dc>)
    4254:	429c      	cmp	r4, r3
    4256:	d000      	beq.n	425a <at_ble_event_get+0x2be>
    4258:	e137      	b.n	44ca <at_ble_event_get+0x52e>
    425a:	9800      	ldr	r0, [sp, #0]
    425c:	1c2a      	adds	r2, r5, #0
    425e:	4b47      	ldr	r3, [pc, #284]	; (437c <at_ble_event_get+0x3e0>)
    4260:	4798      	blx	r3
    4262:	2630      	movs	r6, #48	; 0x30
    4264:	e13f      	b.n	44e6 <at_ble_event_get+0x54a>
    4266:	4b46      	ldr	r3, [pc, #280]	; (4380 <at_ble_event_get+0x3e4>)
    4268:	429c      	cmp	r4, r3
    426a:	d100      	bne.n	426e <at_ble_event_get+0x2d2>
    426c:	e127      	b.n	44be <at_ble_event_get+0x522>
    426e:	4b45      	ldr	r3, [pc, #276]	; (4384 <at_ble_event_get+0x3e8>)
    4270:	429c      	cmp	r4, r3
    4272:	d000      	beq.n	4276 <at_ble_event_get+0x2da>
    4274:	e129      	b.n	44ca <at_ble_event_get+0x52e>
    4276:	9800      	ldr	r0, [sp, #0]
    4278:	1c2a      	adds	r2, r5, #0
    427a:	4b43      	ldr	r3, [pc, #268]	; (4388 <at_ble_event_get+0x3ec>)
    427c:	4798      	blx	r3
    427e:	2632      	movs	r6, #50	; 0x32
    4280:	e131      	b.n	44e6 <at_ble_event_get+0x54a>
    4282:	1c08      	adds	r0, r1, #0
    4284:	4b41      	ldr	r3, [pc, #260]	; (438c <at_ble_event_get+0x3f0>)
    4286:	1c29      	adds	r1, r5, #0
    4288:	e091      	b.n	43ae <at_ble_event_get+0x412>
    428a:	46c0      	nop			; (mov r8, r8)
    428c:	00005cb9 	.word	0x00005cb9
    4290:	200006d4 	.word	0x200006d4
    4294:	00005d35 	.word	0x00005d35
    4298:	00005cdd 	.word	0x00005cdd
    429c:	200006dc 	.word	0x200006dc
    42a0:	0000ffff 	.word	0x0000ffff
    42a4:	0000201e 	.word	0x0000201e
    42a8:	0000201d 	.word	0x0000201d
    42ac:	00000c03 	.word	0x00000c03
    42b0:	0000201f 	.word	0x0000201f
    42b4:	00000d1c 	.word	0x00000d1c
    42b8:	00000c0c 	.word	0x00000c0c
    42bc:	00000c02 	.word	0x00000c02
    42c0:	00000a02 	.word	0x00000a02
    42c4:	00000a03 	.word	0x00000a03
    42c8:	00007bed 	.word	0x00007bed
    42cc:	00000c06 	.word	0x00000c06
    42d0:	00000c04 	.word	0x00000c04
    42d4:	00000c05 	.word	0x00000c05
    42d8:	00007ad9 	.word	0x00007ad9
    42dc:	00000c07 	.word	0x00000c07
    42e0:	00000c09 	.word	0x00000c09
    42e4:	00007ccd 	.word	0x00007ccd
    42e8:	00000c17 	.word	0x00000c17
    42ec:	00000c12 	.word	0x00000c12
    42f0:	00000c0d 	.word	0x00000c0d
    42f4:	00007b99 	.word	0x00007b99
    42f8:	00007a55 	.word	0x00007a55
    42fc:	00000c13 	.word	0x00000c13
    4300:	00000c15 	.word	0x00000c15
    4304:	00005629 	.word	0x00005629
    4308:	00000d08 	.word	0x00000d08
    430c:	00000d01 	.word	0x00000d01
    4310:	00000d15 	.word	0x00000d15
    4314:	00007789 	.word	0x00007789
    4318:	00000e1b 	.word	0x00000e1b
    431c:	00000e0f 	.word	0x00000e0f
    4320:	00000e03 	.word	0x00000e03
    4324:	00006641 	.word	0x00006641
    4328:	00000e06 	.word	0x00000e06
    432c:	00000e0a 	.word	0x00000e0a
    4330:	00006f1d 	.word	0x00006f1d
    4334:	00000e15 	.word	0x00000e15
    4338:	00000e11 	.word	0x00000e11
    433c:	00000e13 	.word	0x00000e13
    4340:	00006b15 	.word	0x00006b15
    4344:	00000e17 	.word	0x00000e17
    4348:	00000e19 	.word	0x00000e19
    434c:	00006e61 	.word	0x00006e61
    4350:	00000e27 	.word	0x00000e27
    4354:	00000e21 	.word	0x00000e21
    4358:	00000e1c 	.word	0x00000e1c
    435c:	00000e1d 	.word	0x00000e1d
    4360:	0000703d 	.word	0x0000703d
    4364:	00000e22 	.word	0x00000e22
    4368:	00000e25 	.word	0x00000e25
    436c:	000070c3 	.word	0x000070c3
    4370:	00001b05 	.word	0x00001b05
    4374:	00001b01 	.word	0x00001b01
    4378:	00001b03 	.word	0x00001b03
    437c:	00007fdb 	.word	0x00007fdb
    4380:	00001b06 	.word	0x00001b06
    4384:	00001b08 	.word	0x00001b08
    4388:	00007ff3 	.word	0x00007ff3
    438c:	000073f1 	.word	0x000073f1
    4390:	1c08      	adds	r0, r1, #0
    4392:	4b5b      	ldr	r3, [pc, #364]	; (4500 <at_ble_event_get+0x564>)
    4394:	1c29      	adds	r1, r5, #0
    4396:	4798      	blx	r3
    4398:	2604      	movs	r6, #4
    439a:	e0a4      	b.n	44e6 <at_ble_event_get+0x54a>
    439c:	1c08      	adds	r0, r1, #0
    439e:	4b59      	ldr	r3, [pc, #356]	; (4504 <at_ble_event_get+0x568>)
    43a0:	1c29      	adds	r1, r5, #0
    43a2:	4798      	blx	r3
    43a4:	2601      	movs	r6, #1
    43a6:	e09e      	b.n	44e6 <at_ble_event_get+0x54a>
    43a8:	1c08      	adds	r0, r1, #0
    43aa:	1c29      	adds	r1, r5, #0
    43ac:	4b56      	ldr	r3, [pc, #344]	; (4508 <at_ble_event_get+0x56c>)
    43ae:	4798      	blx	r3
    43b0:	1c06      	adds	r6, r0, #0
    43b2:	e098      	b.n	44e6 <at_ble_event_get+0x54a>
    43b4:	9800      	ldr	r0, [sp, #0]
    43b6:	1c2a      	adds	r2, r5, #0
    43b8:	4b54      	ldr	r3, [pc, #336]	; (450c <at_ble_event_get+0x570>)
    43ba:	4798      	blx	r3
    43bc:	2611      	movs	r6, #17
    43be:	e092      	b.n	44e6 <at_ble_event_get+0x54a>
    43c0:	1c08      	adds	r0, r1, #0
    43c2:	4b53      	ldr	r3, [pc, #332]	; (4510 <at_ble_event_get+0x574>)
    43c4:	1c29      	adds	r1, r5, #0
    43c6:	4798      	blx	r3
    43c8:	2606      	movs	r6, #6
    43ca:	e08c      	b.n	44e6 <at_ble_event_get+0x54a>
    43cc:	1c2a      	adds	r2, r5, #0
    43ce:	9800      	ldr	r0, [sp, #0]
    43d0:	4b50      	ldr	r3, [pc, #320]	; (4514 <at_ble_event_get+0x578>)
    43d2:	4798      	blx	r3
    43d4:	e7ec      	b.n	43b0 <at_ble_event_get+0x414>
    43d6:	9800      	ldr	r0, [sp, #0]
    43d8:	1c2a      	adds	r2, r5, #0
    43da:	4b4f      	ldr	r3, [pc, #316]	; (4518 <at_ble_event_get+0x57c>)
    43dc:	4798      	blx	r3
    43de:	260d      	movs	r6, #13
    43e0:	e081      	b.n	44e6 <at_ble_event_get+0x54a>
    43e2:	9800      	ldr	r0, [sp, #0]
    43e4:	1c2a      	adds	r2, r5, #0
    43e6:	4b4d      	ldr	r3, [pc, #308]	; (451c <at_ble_event_get+0x580>)
    43e8:	4798      	blx	r3
    43ea:	260b      	movs	r6, #11
    43ec:	e07b      	b.n	44e6 <at_ble_event_get+0x54a>
    43ee:	9800      	ldr	r0, [sp, #0]
    43f0:	1c2a      	adds	r2, r5, #0
    43f2:	4b4b      	ldr	r3, [pc, #300]	; (4520 <at_ble_event_get+0x584>)
    43f4:	4798      	blx	r3
    43f6:	2610      	movs	r6, #16
    43f8:	e075      	b.n	44e6 <at_ble_event_get+0x54a>
    43fa:	1c08      	adds	r0, r1, #0
    43fc:	4b49      	ldr	r3, [pc, #292]	; (4524 <at_ble_event_get+0x588>)
    43fe:	1c29      	adds	r1, r5, #0
    4400:	4798      	blx	r3
    4402:	2628      	movs	r6, #40	; 0x28
    4404:	e06f      	b.n	44e6 <at_ble_event_get+0x54a>
    4406:	1c08      	adds	r0, r1, #0
    4408:	4b47      	ldr	r3, [pc, #284]	; (4528 <at_ble_event_get+0x58c>)
    440a:	1c29      	adds	r1, r5, #0
    440c:	4798      	blx	r3
    440e:	2629      	movs	r6, #41	; 0x29
    4410:	e069      	b.n	44e6 <at_ble_event_get+0x54a>
    4412:	1c08      	adds	r0, r1, #0
    4414:	4b45      	ldr	r3, [pc, #276]	; (452c <at_ble_event_get+0x590>)
    4416:	1c29      	adds	r1, r5, #0
    4418:	4798      	blx	r3
    441a:	2627      	movs	r6, #39	; 0x27
    441c:	e063      	b.n	44e6 <at_ble_event_get+0x54a>
    441e:	9800      	ldr	r0, [sp, #0]
    4420:	1c2a      	adds	r2, r5, #0
    4422:	4b43      	ldr	r3, [pc, #268]	; (4530 <at_ble_event_get+0x594>)
    4424:	e7d5      	b.n	43d2 <at_ble_event_get+0x436>
    4426:	9800      	ldr	r0, [sp, #0]
    4428:	1c2a      	adds	r2, r5, #0
    442a:	4b42      	ldr	r3, [pc, #264]	; (4534 <at_ble_event_get+0x598>)
    442c:	e7d1      	b.n	43d2 <at_ble_event_get+0x436>
    442e:	1c08      	adds	r0, r1, #0
    4430:	4b41      	ldr	r3, [pc, #260]	; (4538 <at_ble_event_get+0x59c>)
    4432:	1c29      	adds	r1, r5, #0
    4434:	4798      	blx	r3
    4436:	262b      	movs	r6, #43	; 0x2b
    4438:	e055      	b.n	44e6 <at_ble_event_get+0x54a>
    443a:	1c08      	adds	r0, r1, #0
    443c:	4b3f      	ldr	r3, [pc, #252]	; (453c <at_ble_event_get+0x5a0>)
    443e:	1c29      	adds	r1, r5, #0
    4440:	4798      	blx	r3
    4442:	262c      	movs	r6, #44	; 0x2c
    4444:	e04f      	b.n	44e6 <at_ble_event_get+0x54a>
    4446:	9800      	ldr	r0, [sp, #0]
    4448:	1c2a      	adds	r2, r5, #0
    444a:	4b3d      	ldr	r3, [pc, #244]	; (4540 <at_ble_event_get+0x5a4>)
    444c:	4798      	blx	r3
    444e:	2613      	movs	r6, #19
    4450:	e049      	b.n	44e6 <at_ble_event_get+0x54a>
    4452:	9800      	ldr	r0, [sp, #0]
    4454:	1c2a      	adds	r2, r5, #0
    4456:	4b3b      	ldr	r3, [pc, #236]	; (4544 <at_ble_event_get+0x5a8>)
    4458:	4798      	blx	r3
    445a:	2615      	movs	r6, #21
    445c:	e043      	b.n	44e6 <at_ble_event_get+0x54a>
    445e:	9800      	ldr	r0, [sp, #0]
    4460:	1c2a      	adds	r2, r5, #0
    4462:	4b39      	ldr	r3, [pc, #228]	; (4548 <at_ble_event_get+0x5ac>)
    4464:	4798      	blx	r3
    4466:	2616      	movs	r6, #22
    4468:	e03d      	b.n	44e6 <at_ble_event_get+0x54a>
    446a:	9800      	ldr	r0, [sp, #0]
    446c:	1c2a      	adds	r2, r5, #0
    446e:	4b37      	ldr	r3, [pc, #220]	; (454c <at_ble_event_get+0x5b0>)
    4470:	e7af      	b.n	43d2 <at_ble_event_get+0x436>
    4472:	9800      	ldr	r0, [sp, #0]
    4474:	1c2a      	adds	r2, r5, #0
    4476:	4b36      	ldr	r3, [pc, #216]	; (4550 <at_ble_event_get+0x5b4>)
    4478:	4798      	blx	r3
    447a:	2623      	movs	r6, #35	; 0x23
    447c:	e033      	b.n	44e6 <at_ble_event_get+0x54a>
    447e:	9b00      	ldr	r3, [sp, #0]
    4480:	1c08      	adds	r0, r1, #0
    4482:	0a1f      	lsrs	r7, r3, #8
    4484:	802f      	strh	r7, [r5, #0]
    4486:	1c29      	adds	r1, r5, #0
    4488:	4b32      	ldr	r3, [pc, #200]	; (4554 <at_ble_event_get+0x5b8>)
    448a:	e790      	b.n	43ae <at_ble_event_get+0x412>
    448c:	1c08      	adds	r0, r1, #0
    448e:	9a00      	ldr	r2, [sp, #0]
    4490:	1c29      	adds	r1, r5, #0
    4492:	4b31      	ldr	r3, [pc, #196]	; (4558 <at_ble_event_get+0x5bc>)
    4494:	4798      	blx	r3
    4496:	263a      	movs	r6, #58	; 0x3a
    4498:	e025      	b.n	44e6 <at_ble_event_get+0x54a>
    449a:	9800      	ldr	r0, [sp, #0]
    449c:	1c2a      	adds	r2, r5, #0
    449e:	4b2f      	ldr	r3, [pc, #188]	; (455c <at_ble_event_get+0x5c0>)
    44a0:	4798      	blx	r3
    44a2:	2620      	movs	r6, #32
    44a4:	e01f      	b.n	44e6 <at_ble_event_get+0x54a>
    44a6:	9800      	ldr	r0, [sp, #0]
    44a8:	1c2a      	adds	r2, r5, #0
    44aa:	4b2d      	ldr	r3, [pc, #180]	; (4560 <at_ble_event_get+0x5c4>)
    44ac:	4798      	blx	r3
    44ae:	2633      	movs	r6, #51	; 0x33
    44b0:	e019      	b.n	44e6 <at_ble_event_get+0x54a>
    44b2:	9800      	ldr	r0, [sp, #0]
    44b4:	1c2a      	adds	r2, r5, #0
    44b6:	4b2b      	ldr	r3, [pc, #172]	; (4564 <at_ble_event_get+0x5c8>)
    44b8:	4798      	blx	r3
    44ba:	2634      	movs	r6, #52	; 0x34
    44bc:	e013      	b.n	44e6 <at_ble_event_get+0x54a>
    44be:	9800      	ldr	r0, [sp, #0]
    44c0:	1c2a      	adds	r2, r5, #0
    44c2:	4b29      	ldr	r3, [pc, #164]	; (4568 <at_ble_event_get+0x5cc>)
    44c4:	4798      	blx	r3
    44c6:	2635      	movs	r6, #53	; 0x35
    44c8:	e00d      	b.n	44e6 <at_ble_event_get+0x54a>
    44ca:	22c5      	movs	r2, #197	; 0xc5
    44cc:	4e27      	ldr	r6, [pc, #156]	; (456c <at_ble_event_get+0x5d0>)
    44ce:	4928      	ldr	r1, [pc, #160]	; (4570 <at_ble_event_get+0x5d4>)
    44d0:	0052      	lsls	r2, r2, #1
    44d2:	4b28      	ldr	r3, [pc, #160]	; (4574 <at_ble_event_get+0x5d8>)
    44d4:	6837      	ldr	r7, [r6, #0]
    44d6:	4828      	ldr	r0, [pc, #160]	; (4578 <at_ble_event_get+0x5dc>)
    44d8:	47b8      	blx	r7
    44da:	6833      	ldr	r3, [r6, #0]
    44dc:	4827      	ldr	r0, [pc, #156]	; (457c <at_ble_event_get+0x5e0>)
    44de:	9900      	ldr	r1, [sp, #0]
    44e0:	1c22      	adds	r2, r4, #0
    44e2:	4798      	blx	r3
    44e4:	2600      	movs	r6, #0
    44e6:	9b02      	ldr	r3, [sp, #8]
    44e8:	701e      	strb	r6, [r3, #0]
    44ea:	9b02      	ldr	r3, [sp, #8]
    44ec:	781b      	ldrb	r3, [r3, #0]
    44ee:	2b3a      	cmp	r3, #58	; 0x3a
    44f0:	d103      	bne.n	44fa <at_ble_event_get+0x55e>
    44f2:	9b01      	ldr	r3, [sp, #4]
    44f4:	2b00      	cmp	r3, #0
    44f6:	d100      	bne.n	44fa <at_ble_event_get+0x55e>
    44f8:	e557      	b.n	3faa <at_ble_event_get+0xe>
    44fa:	9801      	ldr	r0, [sp, #4]
    44fc:	b005      	add	sp, #20
    44fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4500:	000073d5 	.word	0x000073d5
    4504:	00007691 	.word	0x00007691
    4508:	000077ad 	.word	0x000077ad
    450c:	00006fc1 	.word	0x00006fc1
    4510:	00006995 	.word	0x00006995
    4514:	00006a3d 	.word	0x00006a3d
    4518:	00006dbd 	.word	0x00006dbd
    451c:	00006f75 	.word	0x00006f75
    4520:	00006f8b 	.word	0x00006f8b
    4524:	00007055 	.word	0x00007055
    4528:	00007083 	.word	0x00007083
    452c:	00007099 	.word	0x00007099
    4530:	00006ec1 	.word	0x00006ec1
    4534:	00006eeb 	.word	0x00006eeb
    4538:	00005dc1 	.word	0x00005dc1
    453c:	00005ded 	.word	0x00005ded
    4540:	00007a9d 	.word	0x00007a9d
    4544:	00007b21 	.word	0x00007b21
    4548:	00007b65 	.word	0x00007b65
    454c:	00007b99 	.word	0x00007b99
    4550:	00007cbd 	.word	0x00007cbd
    4554:	000055bd 	.word	0x000055bd
    4558:	000055ed 	.word	0x000055ed
    455c:	00007d0d 	.word	0x00007d0d
    4560:	00007fd1 	.word	0x00007fd1
    4564:	00007fe1 	.word	0x00007fe1
    4568:	00007fe7 	.word	0x00007fe7
    456c:	20000044 	.word	0x20000044
    4570:	0000a1f6 	.word	0x0000a1f6
    4574:	0000a1c8 	.word	0x0000a1c8
    4578:	0000a1d9 	.word	0x0000a1d9
    457c:	0000a21d 	.word	0x0000a21d

00004580 <internal_event_flush>:
    4580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4582:	490e      	ldr	r1, [pc, #56]	; (45bc <internal_event_flush+0x3c>)
    4584:	2400      	movs	r4, #0
    4586:	680b      	ldr	r3, [r1, #0]
    4588:	1c0f      	adds	r7, r1, #0
    458a:	1c1e      	adds	r6, r3, #0
    458c:	4a0c      	ldr	r2, [pc, #48]	; (45c0 <internal_event_flush+0x40>)
    458e:	6815      	ldr	r5, [r2, #0]
    4590:	9201      	str	r2, [sp, #4]
    4592:	2b00      	cmp	r3, #0
    4594:	d00e      	beq.n	45b4 <internal_event_flush+0x34>
    4596:	889a      	ldrh	r2, [r3, #4]
    4598:	6819      	ldr	r1, [r3, #0]
    459a:	4282      	cmp	r2, r0
    459c:	d107      	bne.n	45ae <internal_event_flush+0x2e>
    459e:	2c00      	cmp	r4, #0
    45a0:	d001      	beq.n	45a6 <internal_event_flush+0x26>
    45a2:	6021      	str	r1, [r4, #0]
    45a4:	e000      	b.n	45a8 <internal_event_flush+0x28>
    45a6:	1c0e      	adds	r6, r1, #0
    45a8:	601d      	str	r5, [r3, #0]
    45aa:	1c1d      	adds	r5, r3, #0
    45ac:	1c23      	adds	r3, r4, #0
    45ae:	1c1c      	adds	r4, r3, #0
    45b0:	1c0b      	adds	r3, r1, #0
    45b2:	e7ee      	b.n	4592 <internal_event_flush+0x12>
    45b4:	9b01      	ldr	r3, [sp, #4]
    45b6:	603e      	str	r6, [r7, #0]
    45b8:	601d      	str	r5, [r3, #0]
    45ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    45bc:	200006d4 	.word	0x200006d4
    45c0:	200006dc 	.word	0x200006dc

000045c4 <internal_conn_flush>:
    45c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    45c6:	4a12      	ldr	r2, [pc, #72]	; (4610 <internal_conn_flush+0x4c>)
    45c8:	9000      	str	r0, [sp, #0]
    45ca:	6813      	ldr	r3, [r2, #0]
    45cc:	4811      	ldr	r0, [pc, #68]	; (4614 <internal_conn_flush+0x50>)
    45ce:	1c1f      	adds	r7, r3, #0
    45d0:	2100      	movs	r1, #0
    45d2:	4684      	mov	ip, r0
    45d4:	6804      	ldr	r4, [r0, #0]
    45d6:	9201      	str	r2, [sp, #4]
    45d8:	2b00      	cmp	r3, #0
    45da:	d014      	beq.n	4606 <internal_conn_flush+0x42>
    45dc:	88d8      	ldrh	r0, [r3, #6]
    45de:	9a00      	ldr	r2, [sp, #0]
    45e0:	681d      	ldr	r5, [r3, #0]
    45e2:	0a06      	lsrs	r6, r0, #8
    45e4:	4296      	cmp	r6, r2
    45e6:	d10b      	bne.n	4600 <internal_conn_flush+0x3c>
    45e8:	26fd      	movs	r6, #253	; 0xfd
    45ea:	4006      	ands	r6, r0
    45ec:	2e0c      	cmp	r6, #12
    45ee:	d107      	bne.n	4600 <internal_conn_flush+0x3c>
    45f0:	2900      	cmp	r1, #0
    45f2:	d001      	beq.n	45f8 <internal_conn_flush+0x34>
    45f4:	600d      	str	r5, [r1, #0]
    45f6:	e000      	b.n	45fa <internal_conn_flush+0x36>
    45f8:	1c2f      	adds	r7, r5, #0
    45fa:	601c      	str	r4, [r3, #0]
    45fc:	1c1c      	adds	r4, r3, #0
    45fe:	1c0b      	adds	r3, r1, #0
    4600:	1c19      	adds	r1, r3, #0
    4602:	1c2b      	adds	r3, r5, #0
    4604:	e7e8      	b.n	45d8 <internal_conn_flush+0x14>
    4606:	9b01      	ldr	r3, [sp, #4]
    4608:	601f      	str	r7, [r3, #0]
    460a:	4663      	mov	r3, ip
    460c:	601c      	str	r4, [r3, #0]
    460e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4610:	200006d4 	.word	0x200006d4
    4614:	200006dc 	.word	0x200006dc

00004618 <at_ble_device_name_set>:
    4618:	b538      	push	{r3, r4, r5, lr}
    461a:	2800      	cmp	r0, #0
    461c:	d002      	beq.n	4624 <at_ble_device_name_set+0xc>
    461e:	1e4b      	subs	r3, r1, #1
    4620:	2b1f      	cmp	r3, #31
    4622:	d90b      	bls.n	463c <at_ble_device_name_set+0x24>
    4624:	4c0d      	ldr	r4, [pc, #52]	; (465c <at_ble_device_name_set+0x44>)
    4626:	490e      	ldr	r1, [pc, #56]	; (4660 <at_ble_device_name_set+0x48>)
    4628:	22f7      	movs	r2, #247	; 0xf7
    462a:	4b0e      	ldr	r3, [pc, #56]	; (4664 <at_ble_device_name_set+0x4c>)
    462c:	480e      	ldr	r0, [pc, #56]	; (4668 <at_ble_device_name_set+0x50>)
    462e:	6825      	ldr	r5, [r4, #0]
    4630:	47a8      	blx	r5
    4632:	6823      	ldr	r3, [r4, #0]
    4634:	480d      	ldr	r0, [pc, #52]	; (466c <at_ble_device_name_set+0x54>)
    4636:	4798      	blx	r3
    4638:	20cf      	movs	r0, #207	; 0xcf
    463a:	e00d      	b.n	4658 <at_ble_device_name_set+0x40>
    463c:	4a0c      	ldr	r2, [pc, #48]	; (4670 <at_ble_device_name_set+0x58>)
    463e:	1c13      	adds	r3, r2, #0
    4640:	33aa      	adds	r3, #170	; 0xaa
    4642:	8019      	strh	r1, [r3, #0]
    4644:	2300      	movs	r3, #0
    4646:	1c1c      	adds	r4, r3, #0
    4648:	5cc5      	ldrb	r5, [r0, r3]
    464a:	34ac      	adds	r4, #172	; 0xac
    464c:	3301      	adds	r3, #1
    464e:	5515      	strb	r5, [r2, r4]
    4650:	b2dc      	uxtb	r4, r3
    4652:	428c      	cmp	r4, r1
    4654:	d3f7      	bcc.n	4646 <at_ble_device_name_set+0x2e>
    4656:	2000      	movs	r0, #0
    4658:	bd38      	pop	{r3, r4, r5, pc}
    465a:	46c0      	nop			; (mov r8, r8)
    465c:	20000044 	.word	0x20000044
    4660:	0000a290 	.word	0x0000a290
    4664:	0000a4e1 	.word	0x0000a4e1
    4668:	0000a1d9 	.word	0x0000a1d9
    466c:	0000a2df 	.word	0x0000a2df
    4670:	2000199c 	.word	0x2000199c

00004674 <at_ble_addr_get>:
    4674:	b510      	push	{r4, lr}
    4676:	1c04      	adds	r4, r0, #0
    4678:	20cf      	movs	r0, #207	; 0xcf
    467a:	2c00      	cmp	r4, #0
    467c:	d006      	beq.n	468c <at_ble_addr_get+0x18>
    467e:	4b04      	ldr	r3, [pc, #16]	; (4690 <at_ble_addr_get+0x1c>)
    4680:	38ce      	subs	r0, #206	; 0xce
    4682:	1c21      	adds	r1, r4, #0
    4684:	4798      	blx	r3
    4686:	4b03      	ldr	r3, [pc, #12]	; (4694 <at_ble_addr_get+0x20>)
    4688:	791b      	ldrb	r3, [r3, #4]
    468a:	7023      	strb	r3, [r4, #0]
    468c:	bd10      	pop	{r4, pc}
    468e:	46c0      	nop			; (mov r8, r8)
    4690:	00007299 	.word	0x00007299
    4694:	2000199c 	.word	0x2000199c

00004698 <at_ble_set_dev_config>:
    4698:	b5f0      	push	{r4, r5, r6, r7, lr}
    469a:	7906      	ldrb	r6, [r0, #4]
    469c:	b089      	sub	sp, #36	; 0x24
    469e:	1c04      	adds	r4, r0, #0
    46a0:	2e03      	cmp	r6, #3
    46a2:	d90c      	bls.n	46be <at_ble_set_dev_config+0x26>
    46a4:	22a7      	movs	r2, #167	; 0xa7
    46a6:	4d33      	ldr	r5, [pc, #204]	; (4774 <at_ble_set_dev_config+0xdc>)
    46a8:	4933      	ldr	r1, [pc, #204]	; (4778 <at_ble_set_dev_config+0xe0>)
    46aa:	0052      	lsls	r2, r2, #1
    46ac:	4b33      	ldr	r3, [pc, #204]	; (477c <at_ble_set_dev_config+0xe4>)
    46ae:	682e      	ldr	r6, [r5, #0]
    46b0:	4833      	ldr	r0, [pc, #204]	; (4780 <at_ble_set_dev_config+0xe8>)
    46b2:	47b0      	blx	r6
    46b4:	7921      	ldrb	r1, [r4, #4]
    46b6:	682b      	ldr	r3, [r5, #0]
    46b8:	4832      	ldr	r0, [pc, #200]	; (4784 <at_ble_set_dev_config+0xec>)
    46ba:	4798      	blx	r3
    46bc:	e020      	b.n	4700 <at_ble_set_dev_config+0x68>
    46be:	7803      	ldrb	r3, [r0, #0]
    46c0:	2b0f      	cmp	r3, #15
    46c2:	d90d      	bls.n	46e0 <at_ble_set_dev_config+0x48>
    46c4:	2254      	movs	r2, #84	; 0x54
    46c6:	4d2b      	ldr	r5, [pc, #172]	; (4774 <at_ble_set_dev_config+0xdc>)
    46c8:	492b      	ldr	r1, [pc, #172]	; (4778 <at_ble_set_dev_config+0xe0>)
    46ca:	32ff      	adds	r2, #255	; 0xff
    46cc:	4b2b      	ldr	r3, [pc, #172]	; (477c <at_ble_set_dev_config+0xe4>)
    46ce:	682e      	ldr	r6, [r5, #0]
    46d0:	482b      	ldr	r0, [pc, #172]	; (4780 <at_ble_set_dev_config+0xe8>)
    46d2:	47b0      	blx	r6
    46d4:	682b      	ldr	r3, [r5, #0]
    46d6:	7821      	ldrb	r1, [r4, #0]
    46d8:	482b      	ldr	r0, [pc, #172]	; (4788 <at_ble_set_dev_config+0xf0>)
    46da:	4798      	blx	r3
    46dc:	25e0      	movs	r5, #224	; 0xe0
    46de:	e046      	b.n	476e <at_ble_set_dev_config+0xd6>
    46e0:	2380      	movs	r3, #128	; 0x80
    46e2:	8c87      	ldrh	r7, [r0, #36]	; 0x24
    46e4:	009b      	lsls	r3, r3, #2
    46e6:	429f      	cmp	r7, r3
    46e8:	d90c      	bls.n	4704 <at_ble_set_dev_config+0x6c>
    46ea:	225a      	movs	r2, #90	; 0x5a
    46ec:	4c21      	ldr	r4, [pc, #132]	; (4774 <at_ble_set_dev_config+0xdc>)
    46ee:	4b23      	ldr	r3, [pc, #140]	; (477c <at_ble_set_dev_config+0xe4>)
    46f0:	4823      	ldr	r0, [pc, #140]	; (4780 <at_ble_set_dev_config+0xe8>)
    46f2:	4921      	ldr	r1, [pc, #132]	; (4778 <at_ble_set_dev_config+0xe0>)
    46f4:	32ff      	adds	r2, #255	; 0xff
    46f6:	6825      	ldr	r5, [r4, #0]
    46f8:	47a8      	blx	r5
    46fa:	6823      	ldr	r3, [r4, #0]
    46fc:	4823      	ldr	r0, [pc, #140]	; (478c <at_ble_set_dev_config+0xf4>)
    46fe:	4798      	blx	r3
    4700:	25cf      	movs	r5, #207	; 0xcf
    4702:	e034      	b.n	476e <at_ble_set_dev_config+0xd6>
    4704:	7fc5      	ldrb	r5, [r0, #31]
    4706:	7f83      	ldrb	r3, [r0, #30]
    4708:	01ad      	lsls	r5, r5, #6
    470a:	015b      	lsls	r3, r3, #5
    470c:	431d      	orrs	r5, r3
    470e:	7ec3      	ldrb	r3, [r0, #27]
    4710:	431d      	orrs	r5, r3
    4712:	7f43      	ldrb	r3, [r0, #29]
    4714:	011b      	lsls	r3, r3, #4
    4716:	431d      	orrs	r5, r3
    4718:	7f03      	ldrb	r3, [r0, #28]
    471a:	009b      	lsls	r3, r3, #2
    471c:	431d      	orrs	r5, r3
    471e:	4b1c      	ldr	r3, [pc, #112]	; (4790 <at_ble_set_dev_config+0xf8>)
    4720:	b2ed      	uxtb	r5, r5
    4722:	711e      	strb	r6, [r3, #4]
    4724:	7900      	ldrb	r0, [r0, #4]
    4726:	2803      	cmp	r0, #3
    4728:	d809      	bhi.n	473e <at_ble_set_dev_config+0xa6>
    472a:	f003 fd6b 	bl	8204 <__gnu_thumb1_case_uqi>
    472e:	0402      	.short	0x0402
    4730:	0606      	.short	0x0606
    4732:	2300      	movs	r3, #0
    4734:	e002      	b.n	473c <at_ble_set_dev_config+0xa4>
    4736:	2301      	movs	r3, #1
    4738:	e000      	b.n	473c <at_ble_set_dev_config+0xa4>
    473a:	2302      	movs	r3, #2
    473c:	7123      	strb	r3, [r4, #4]
    473e:	1c23      	adds	r3, r4, #0
    4740:	330b      	adds	r3, #11
    4742:	8861      	ldrh	r1, [r4, #2]
    4744:	9307      	str	r3, [sp, #28]
    4746:	7923      	ldrb	r3, [r4, #4]
    4748:	7820      	ldrb	r0, [r4, #0]
    474a:	9300      	str	r3, [sp, #0]
    474c:	9501      	str	r5, [sp, #4]
    474e:	8c25      	ldrh	r5, [r4, #32]
    4750:	1d62      	adds	r2, r4, #5
    4752:	9502      	str	r5, [sp, #8]
    4754:	8c65      	ldrh	r5, [r4, #34]	; 0x22
    4756:	9b07      	ldr	r3, [sp, #28]
    4758:	9503      	str	r5, [sp, #12]
    475a:	9704      	str	r7, [sp, #16]
    475c:	4d0d      	ldr	r5, [pc, #52]	; (4794 <at_ble_set_dev_config+0xfc>)
    475e:	47a8      	blx	r5
    4760:	7126      	strb	r6, [r4, #4]
    4762:	1c05      	adds	r5, r0, #0
    4764:	1c21      	adds	r1, r4, #0
    4766:	480a      	ldr	r0, [pc, #40]	; (4790 <at_ble_set_dev_config+0xf8>)
    4768:	2226      	movs	r2, #38	; 0x26
    476a:	4b0b      	ldr	r3, [pc, #44]	; (4798 <at_ble_set_dev_config+0x100>)
    476c:	4798      	blx	r3
    476e:	1c28      	adds	r0, r5, #0
    4770:	b009      	add	sp, #36	; 0x24
    4772:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4774:	20000044 	.word	0x20000044
    4778:	0000a290 	.word	0x0000a290
    477c:	0000a252 	.word	0x0000a252
    4780:	0000a1d9 	.word	0x0000a1d9
    4784:	0000a2f2 	.word	0x0000a2f2
    4788:	0000a310 	.word	0x0000a310
    478c:	0000a32d 	.word	0x0000a32d
    4790:	2000199c 	.word	0x2000199c
    4794:	00007175 	.word	0x00007175
    4798:	000083fb 	.word	0x000083fb

0000479c <at_ble_init>:
    479c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    479e:	1c04      	adds	r4, r0, #0
    47a0:	4946      	ldr	r1, [pc, #280]	; (48bc <at_ble_init+0x120>)
    47a2:	220b      	movs	r2, #11
    47a4:	4b46      	ldr	r3, [pc, #280]	; (48c0 <at_ble_init+0x124>)
    47a6:	a801      	add	r0, sp, #4
    47a8:	4798      	blx	r3
    47aa:	1c20      	adds	r0, r4, #0
    47ac:	4b45      	ldr	r3, [pc, #276]	; (48c4 <at_ble_init+0x128>)
    47ae:	4798      	blx	r3
    47b0:	1c05      	adds	r5, r0, #0
    47b2:	1e04      	subs	r4, r0, #0
    47b4:	d009      	beq.n	47ca <at_ble_init+0x2e>
    47b6:	4c44      	ldr	r4, [pc, #272]	; (48c8 <at_ble_init+0x12c>)
    47b8:	4b44      	ldr	r3, [pc, #272]	; (48cc <at_ble_init+0x130>)
    47ba:	4845      	ldr	r0, [pc, #276]	; (48d0 <at_ble_init+0x134>)
    47bc:	4945      	ldr	r1, [pc, #276]	; (48d4 <at_ble_init+0x138>)
    47be:	222d      	movs	r2, #45	; 0x2d
    47c0:	6826      	ldr	r6, [r4, #0]
    47c2:	47b0      	blx	r6
    47c4:	6823      	ldr	r3, [r4, #0]
    47c6:	4844      	ldr	r0, [pc, #272]	; (48d8 <at_ble_init+0x13c>)
    47c8:	e072      	b.n	48b0 <at_ble_init+0x114>
    47ca:	4b44      	ldr	r3, [pc, #272]	; (48dc <at_ble_init+0x140>)
    47cc:	4798      	blx	r3
    47ce:	1c23      	adds	r3, r4, #0
    47d0:	1e05      	subs	r5, r0, #0
    47d2:	d009      	beq.n	47e8 <at_ble_init+0x4c>
    47d4:	4c3c      	ldr	r4, [pc, #240]	; (48c8 <at_ble_init+0x12c>)
    47d6:	4b3d      	ldr	r3, [pc, #244]	; (48cc <at_ble_init+0x130>)
    47d8:	483d      	ldr	r0, [pc, #244]	; (48d0 <at_ble_init+0x134>)
    47da:	493e      	ldr	r1, [pc, #248]	; (48d4 <at_ble_init+0x138>)
    47dc:	2233      	movs	r2, #51	; 0x33
    47de:	6826      	ldr	r6, [r4, #0]
    47e0:	47b0      	blx	r6
    47e2:	6823      	ldr	r3, [r4, #0]
    47e4:	483e      	ldr	r0, [pc, #248]	; (48e0 <at_ble_init+0x144>)
    47e6:	e063      	b.n	48b0 <at_ble_init+0x114>
    47e8:	2101      	movs	r1, #1
    47ea:	4a3e      	ldr	r2, [pc, #248]	; (48e4 <at_ble_init+0x148>)
    47ec:	4249      	negs	r1, r1
    47ee:	189a      	adds	r2, r3, r2
    47f0:	3312      	adds	r3, #18
    47f2:	8151      	strh	r1, [r2, #10]
    47f4:	2b90      	cmp	r3, #144	; 0x90
    47f6:	d1f7      	bne.n	47e8 <at_ble_init+0x4c>
    47f8:	4c3b      	ldr	r4, [pc, #236]	; (48e8 <at_ble_init+0x14c>)
    47fa:	3b81      	subs	r3, #129	; 0x81
    47fc:	7023      	strb	r3, [r4, #0]
    47fe:	4b3b      	ldr	r3, [pc, #236]	; (48ec <at_ble_init+0x150>)
    4800:	4a3b      	ldr	r2, [pc, #236]	; (48f0 <at_ble_init+0x154>)
    4802:	8063      	strh	r3, [r4, #2]
    4804:	2300      	movs	r3, #0
    4806:	7123      	strb	r3, [r4, #4]
    4808:	3301      	adds	r3, #1
    480a:	1e58      	subs	r0, r3, #1
    480c:	0119      	lsls	r1, r3, #4
    480e:	4301      	orrs	r1, r0
    4810:	3302      	adds	r3, #2
    4812:	7011      	strb	r1, [r2, #0]
    4814:	3201      	adds	r2, #1
    4816:	2b21      	cmp	r3, #33	; 0x21
    4818:	d1f7      	bne.n	480a <at_ble_init+0x6e>
    481a:	2280      	movs	r2, #128	; 0x80
    481c:	0092      	lsls	r2, r2, #2
    481e:	84a2      	strh	r2, [r4, #36]	; 0x24
    4820:	1c22      	adds	r2, r4, #0
    4822:	2300      	movs	r3, #0
    4824:	3273      	adds	r2, #115	; 0x73
    4826:	7013      	strb	r3, [r2, #0]
    4828:	1c22      	adds	r2, r4, #0
    482a:	3272      	adds	r2, #114	; 0x72
    482c:	7013      	strb	r3, [r2, #0]
    482e:	1c22      	adds	r2, r4, #0
    4830:	3276      	adds	r2, #118	; 0x76
    4832:	7013      	strb	r3, [r2, #0]
    4834:	1c22      	adds	r2, r4, #0
    4836:	32cc      	adds	r2, #204	; 0xcc
    4838:	8013      	strh	r3, [r2, #0]
    483a:	1c21      	adds	r1, r4, #0
    483c:	22a0      	movs	r2, #160	; 0xa0
    483e:	31d0      	adds	r1, #208	; 0xd0
    4840:	0052      	lsls	r2, r2, #1
    4842:	800a      	strh	r2, [r1, #0]
    4844:	1c21      	adds	r1, r4, #0
    4846:	31ce      	adds	r1, #206	; 0xce
    4848:	800a      	strh	r2, [r1, #0]
    484a:	1c22      	adds	r2, r4, #0
    484c:	32d2      	adds	r2, #210	; 0xd2
    484e:	8013      	strh	r3, [r2, #0]
    4850:	21fa      	movs	r1, #250	; 0xfa
    4852:	1c22      	adds	r2, r4, #0
    4854:	0049      	lsls	r1, r1, #1
    4856:	32d4      	adds	r2, #212	; 0xd4
    4858:	8011      	strh	r1, [r2, #0]
    485a:	1c22      	adds	r2, r4, #0
    485c:	32d6      	adds	r2, #214	; 0xd6
    485e:	76e3      	strb	r3, [r4, #27]
    4860:	7723      	strb	r3, [r4, #28]
    4862:	7763      	strb	r3, [r4, #29]
    4864:	77a3      	strb	r3, [r4, #30]
    4866:	77e3      	strb	r3, [r4, #31]
    4868:	8423      	strh	r3, [r4, #32]
    486a:	8463      	strh	r3, [r4, #34]	; 0x22
    486c:	7013      	strb	r3, [r2, #0]
    486e:	1c20      	adds	r0, r4, #0
    4870:	4b20      	ldr	r3, [pc, #128]	; (48f4 <at_ble_init+0x158>)
    4872:	4798      	blx	r3
    4874:	1e05      	subs	r5, r0, #0
    4876:	d009      	beq.n	488c <at_ble_init+0xf0>
    4878:	4c13      	ldr	r4, [pc, #76]	; (48c8 <at_ble_init+0x12c>)
    487a:	4b14      	ldr	r3, [pc, #80]	; (48cc <at_ble_init+0x130>)
    487c:	4814      	ldr	r0, [pc, #80]	; (48d0 <at_ble_init+0x134>)
    487e:	4915      	ldr	r1, [pc, #84]	; (48d4 <at_ble_init+0x138>)
    4880:	225d      	movs	r2, #93	; 0x5d
    4882:	6826      	ldr	r6, [r4, #0]
    4884:	47b0      	blx	r6
    4886:	6823      	ldr	r3, [r4, #0]
    4888:	481b      	ldr	r0, [pc, #108]	; (48f8 <at_ble_init+0x15c>)
    488a:	e011      	b.n	48b0 <at_ble_init+0x114>
    488c:	2307      	movs	r3, #7
    488e:	3474      	adds	r4, #116	; 0x74
    4890:	7023      	strb	r3, [r4, #0]
    4892:	a801      	add	r0, sp, #4
    4894:	210b      	movs	r1, #11
    4896:	4b19      	ldr	r3, [pc, #100]	; (48fc <at_ble_init+0x160>)
    4898:	4798      	blx	r3
    489a:	1e05      	subs	r5, r0, #0
    489c:	d00a      	beq.n	48b4 <at_ble_init+0x118>
    489e:	4c0a      	ldr	r4, [pc, #40]	; (48c8 <at_ble_init+0x12c>)
    48a0:	4b0a      	ldr	r3, [pc, #40]	; (48cc <at_ble_init+0x130>)
    48a2:	480b      	ldr	r0, [pc, #44]	; (48d0 <at_ble_init+0x134>)
    48a4:	490b      	ldr	r1, [pc, #44]	; (48d4 <at_ble_init+0x138>)
    48a6:	2266      	movs	r2, #102	; 0x66
    48a8:	6826      	ldr	r6, [r4, #0]
    48aa:	47b0      	blx	r6
    48ac:	6823      	ldr	r3, [r4, #0]
    48ae:	4814      	ldr	r0, [pc, #80]	; (4900 <at_ble_init+0x164>)
    48b0:	1c29      	adds	r1, r5, #0
    48b2:	4798      	blx	r3
    48b4:	1c28      	adds	r0, r5, #0
    48b6:	b004      	add	sp, #16
    48b8:	bd70      	pop	{r4, r5, r6, pc}
    48ba:	46c0      	nop			; (mov r8, r8)
    48bc:	0000a247 	.word	0x0000a247
    48c0:	000083fb 	.word	0x000083fb
    48c4:	00005b65 	.word	0x00005b65
    48c8:	20000044 	.word	0x20000044
    48cc:	0000a4f8 	.word	0x0000a4f8
    48d0:	0000a1d9 	.word	0x0000a1d9
    48d4:	0000a290 	.word	0x0000a290
    48d8:	0000a357 	.word	0x0000a357
    48dc:	000070e5 	.word	0x000070e5
    48e0:	0000a373 	.word	0x0000a373
    48e4:	2000190c 	.word	0x2000190c
    48e8:	2000199c 	.word	0x2000199c
    48ec:	00003a98 	.word	0x00003a98
    48f0:	200019a7 	.word	0x200019a7
    48f4:	00004699 	.word	0x00004699
    48f8:	0000a38c 	.word	0x0000a38c
    48fc:	00004619 	.word	0x00004619
    4900:	0000a3af 	.word	0x0000a3af

00004904 <at_ble_addr_set>:
    4904:	b538      	push	{r3, r4, r5, lr}
    4906:	1c45      	adds	r5, r0, #1
    4908:	1c03      	adds	r3, r0, #0
    490a:	20cf      	movs	r0, #207	; 0xcf
    490c:	2d00      	cmp	r5, #0
    490e:	d018      	beq.n	4942 <at_ble_addr_set+0x3e>
    4910:	781a      	ldrb	r2, [r3, #0]
    4912:	2a03      	cmp	r2, #3
    4914:	d815      	bhi.n	4942 <at_ble_addr_set+0x3e>
    4916:	2a01      	cmp	r2, #1
    4918:	d102      	bne.n	4920 <at_ble_addr_set+0x1c>
    491a:	785a      	ldrb	r2, [r3, #1]
    491c:	2a00      	cmp	r2, #0
    491e:	d010      	beq.n	4942 <at_ble_addr_set+0x3e>
    4920:	1c1c      	adds	r4, r3, #0
    4922:	1c29      	adds	r1, r5, #0
    4924:	2206      	movs	r2, #6
    4926:	4b07      	ldr	r3, [pc, #28]	; (4944 <at_ble_addr_set+0x40>)
    4928:	4807      	ldr	r0, [pc, #28]	; (4948 <at_ble_addr_set+0x44>)
    492a:	4798      	blx	r3
    492c:	7823      	ldrb	r3, [r4, #0]
    492e:	4807      	ldr	r0, [pc, #28]	; (494c <at_ble_addr_set+0x48>)
    4930:	7103      	strb	r3, [r0, #4]
    4932:	4b07      	ldr	r3, [pc, #28]	; (4950 <at_ble_addr_set+0x4c>)
    4934:	4798      	blx	r3
    4936:	7823      	ldrb	r3, [r4, #0]
    4938:	2b00      	cmp	r3, #0
    493a:	d102      	bne.n	4942 <at_ble_addr_set+0x3e>
    493c:	1c28      	adds	r0, r5, #0
    493e:	4b05      	ldr	r3, [pc, #20]	; (4954 <at_ble_addr_set+0x50>)
    4940:	4798      	blx	r3
    4942:	bd38      	pop	{r3, r4, r5, pc}
    4944:	000083fb 	.word	0x000083fb
    4948:	200019a1 	.word	0x200019a1
    494c:	2000199c 	.word	0x2000199c
    4950:	00004699 	.word	0x00004699
    4954:	00006499 	.word	0x00006499

00004958 <at_ble_adv_data_set>:
    4958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    495a:	4684      	mov	ip, r0
    495c:	1c0f      	adds	r7, r1, #0
    495e:	1c16      	adds	r6, r2, #0
    4960:	1c1c      	adds	r4, r3, #0
    4962:	2800      	cmp	r0, #0
    4964:	d102      	bne.n	496c <at_ble_adv_data_set+0x14>
    4966:	20e2      	movs	r0, #226	; 0xe2
    4968:	2a00      	cmp	r2, #0
    496a:	d02b      	beq.n	49c4 <at_ble_adv_data_set+0x6c>
    496c:	20cf      	movs	r0, #207	; 0xcf
    496e:	2f1f      	cmp	r7, #31
    4970:	d828      	bhi.n	49c4 <at_ble_adv_data_set+0x6c>
    4972:	2c1f      	cmp	r4, #31
    4974:	d826      	bhi.n	49c4 <at_ble_adv_data_set+0x6c>
    4976:	4663      	mov	r3, ip
    4978:	2b00      	cmp	r3, #0
    497a:	d00e      	beq.n	499a <at_ble_adv_data_set+0x42>
    497c:	4812      	ldr	r0, [pc, #72]	; (49c8 <at_ble_adv_data_set+0x70>)
    497e:	4d13      	ldr	r5, [pc, #76]	; (49cc <at_ble_adv_data_set+0x74>)
    4980:	2f00      	cmp	r7, #0
    4982:	d104      	bne.n	498e <at_ble_adv_data_set+0x36>
    4984:	1c39      	adds	r1, r7, #0
    4986:	221f      	movs	r2, #31
    4988:	4b11      	ldr	r3, [pc, #68]	; (49d0 <at_ble_adv_data_set+0x78>)
    498a:	4798      	blx	r3
    498c:	e003      	b.n	4996 <at_ble_adv_data_set+0x3e>
    498e:	4661      	mov	r1, ip
    4990:	1c3a      	adds	r2, r7, #0
    4992:	4b10      	ldr	r3, [pc, #64]	; (49d4 <at_ble_adv_data_set+0x7c>)
    4994:	4798      	blx	r3
    4996:	3572      	adds	r5, #114	; 0x72
    4998:	702f      	strb	r7, [r5, #0]
    499a:	1e30      	subs	r0, r6, #0
    499c:	d012      	beq.n	49c4 <at_ble_adv_data_set+0x6c>
    499e:	4d0b      	ldr	r5, [pc, #44]	; (49cc <at_ble_adv_data_set+0x74>)
    49a0:	480d      	ldr	r0, [pc, #52]	; (49d8 <at_ble_adv_data_set+0x80>)
    49a2:	2c00      	cmp	r4, #0
    49a4:	d107      	bne.n	49b6 <at_ble_adv_data_set+0x5e>
    49a6:	1c21      	adds	r1, r4, #0
    49a8:	221f      	movs	r2, #31
    49aa:	4b09      	ldr	r3, [pc, #36]	; (49d0 <at_ble_adv_data_set+0x78>)
    49ac:	3573      	adds	r5, #115	; 0x73
    49ae:	4798      	blx	r3
    49b0:	702c      	strb	r4, [r5, #0]
    49b2:	1c20      	adds	r0, r4, #0
    49b4:	e006      	b.n	49c4 <at_ble_adv_data_set+0x6c>
    49b6:	1c31      	adds	r1, r6, #0
    49b8:	1c22      	adds	r2, r4, #0
    49ba:	4b06      	ldr	r3, [pc, #24]	; (49d4 <at_ble_adv_data_set+0x7c>)
    49bc:	4798      	blx	r3
    49be:	2000      	movs	r0, #0
    49c0:	3573      	adds	r5, #115	; 0x73
    49c2:	702c      	strb	r4, [r5, #0]
    49c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49c6:	46c0      	nop			; (mov r8, r8)
    49c8:	200019d0 	.word	0x200019d0
    49cc:	2000199c 	.word	0x2000199c
    49d0:	0000840d 	.word	0x0000840d
    49d4:	000083fb 	.word	0x000083fb
    49d8:	200019ef 	.word	0x200019ef

000049dc <at_ble_adv_start>:
    49dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    49de:	b091      	sub	sp, #68	; 0x44
    49e0:	1c1f      	adds	r7, r3, #0
    49e2:	ab16      	add	r3, sp, #88	; 0x58
    49e4:	881d      	ldrh	r5, [r3, #0]
    49e6:	ab17      	add	r3, sp, #92	; 0x5c
    49e8:	881b      	ldrh	r3, [r3, #0]
    49ea:	910d      	str	r1, [sp, #52]	; 0x34
    49ec:	930e      	str	r3, [sp, #56]	; 0x38
    49ee:	ab18      	add	r3, sp, #96	; 0x60
    49f0:	781b      	ldrb	r3, [r3, #0]
    49f2:	1c04      	adds	r4, r0, #0
    49f4:	930f      	str	r3, [sp, #60]	; 0x3c
    49f6:	4b42      	ldr	r3, [pc, #264]	; (4b00 <at_ble_adv_start+0x124>)
    49f8:	1c16      	adds	r6, r2, #0
    49fa:	3373      	adds	r3, #115	; 0x73
    49fc:	781b      	ldrb	r3, [r3, #0]
    49fe:	20cf      	movs	r0, #207	; 0xcf
    4a00:	930c      	str	r3, [sp, #48]	; 0x30
    4a02:	2c01      	cmp	r4, #1
    4a04:	d103      	bne.n	4a0e <at_ble_adv_start+0x32>
    4a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4a08:	2b00      	cmp	r3, #0
    4a0a:	d176      	bne.n	4afa <at_ble_adv_start+0x11e>
    4a0c:	e024      	b.n	4a58 <at_ble_adv_start+0x7c>
    4a0e:	2c04      	cmp	r4, #4
    4a10:	d873      	bhi.n	4afa <at_ble_adv_start+0x11e>
    4a12:	2380      	movs	r3, #128	; 0x80
    4a14:	01db      	lsls	r3, r3, #7
    4a16:	429d      	cmp	r5, r3
    4a18:	d86f      	bhi.n	4afa <at_ble_adv_start+0x11e>
    4a1a:	2c00      	cmp	r4, #0
    4a1c:	d102      	bne.n	4a24 <at_ble_adv_start+0x48>
    4a1e:	2d1f      	cmp	r5, #31
    4a20:	d96b      	bls.n	4afa <at_ble_adv_start+0x11e>
    4a22:	e003      	b.n	4a2c <at_ble_adv_start+0x50>
    4a24:	2d9f      	cmp	r5, #159	; 0x9f
    4a26:	d801      	bhi.n	4a2c <at_ble_adv_start+0x50>
    4a28:	2c01      	cmp	r4, #1
    4a2a:	d166      	bne.n	4afa <at_ble_adv_start+0x11e>
    4a2c:	2f00      	cmp	r7, #0
    4a2e:	d009      	beq.n	4a44 <at_ble_adv_start+0x68>
    4a30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4a32:	20cf      	movs	r0, #207	; 0xcf
    4a34:	3b01      	subs	r3, #1
    4a36:	2b01      	cmp	r3, #1
    4a38:	d95f      	bls.n	4afa <at_ble_adv_start+0x11e>
    4a3a:	2c01      	cmp	r4, #1
    4a3c:	d102      	bne.n	4a44 <at_ble_adv_start+0x68>
    4a3e:	2d00      	cmp	r5, #0
    4a40:	d100      	bne.n	4a44 <at_ble_adv_start+0x68>
    4a42:	3520      	adds	r5, #32
    4a44:	4b2f      	ldr	r3, [pc, #188]	; (4b04 <at_ble_adv_start+0x128>)
    4a46:	4798      	blx	r3
    4a48:	1c01      	adds	r1, r0, #0
    4a4a:	2e00      	cmp	r6, #0
    4a4c:	d043      	beq.n	4ad6 <at_ble_adv_start+0xfa>
    4a4e:	7833      	ldrb	r3, [r6, #0]
    4a50:	1e60      	subs	r0, r4, #1
    4a52:	2b00      	cmp	r3, #0
    4a54:	d109      	bne.n	4a6a <at_ble_adv_start+0x8e>
    4a56:	e03b      	b.n	4ad0 <at_ble_adv_start+0xf4>
    4a58:	2380      	movs	r3, #128	; 0x80
    4a5a:	01db      	lsls	r3, r3, #7
    4a5c:	429d      	cmp	r5, r3
    4a5e:	d84c      	bhi.n	4afa <at_ble_adv_start+0x11e>
    4a60:	2e00      	cmp	r6, #0
    4a62:	d04a      	beq.n	4afa <at_ble_adv_start+0x11e>
    4a64:	2f00      	cmp	r7, #0
    4a66:	d1e3      	bne.n	4a30 <at_ble_adv_start+0x54>
    4a68:	e02b      	b.n	4ac2 <at_ble_adv_start+0xe6>
    4a6a:	2301      	movs	r3, #1
    4a6c:	2803      	cmp	r0, #3
    4a6e:	d93a      	bls.n	4ae6 <at_ble_adv_start+0x10a>
    4a70:	200d      	movs	r0, #13
    4a72:	1c72      	adds	r2, r6, #1
    4a74:	e002      	b.n	4a7c <at_ble_adv_start+0xa0>
    4a76:	200e      	movs	r0, #14
    4a78:	1e32      	subs	r2, r6, #0
    4a7a:	d1fa      	bne.n	4a72 <at_ble_adv_start+0x96>
    4a7c:	4c20      	ldr	r4, [pc, #128]	; (4b00 <at_ble_adv_start+0x124>)
    4a7e:	3474      	adds	r4, #116	; 0x74
    4a80:	7826      	ldrb	r6, [r4, #0]
    4a82:	2407      	movs	r4, #7
    4a84:	2e00      	cmp	r6, #0
    4a86:	d000      	beq.n	4a8a <at_ble_adv_start+0xae>
    4a88:	1c34      	adds	r4, r6, #0
    4a8a:	9200      	str	r2, [sp, #0]
    4a8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4a8e:	9403      	str	r4, [sp, #12]
    4a90:	9204      	str	r2, [sp, #16]
    4a92:	4a1b      	ldr	r2, [pc, #108]	; (4b00 <at_ble_adv_start+0x124>)
    4a94:	9501      	str	r5, [sp, #4]
    4a96:	9502      	str	r5, [sp, #8]
    4a98:	9705      	str	r7, [sp, #20]
    4a9a:	3272      	adds	r2, #114	; 0x72
    4a9c:	7812      	ldrb	r2, [r2, #0]
    4a9e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    4aa0:	9206      	str	r2, [sp, #24]
    4aa2:	4a19      	ldr	r2, [pc, #100]	; (4b08 <at_ble_adv_start+0x12c>)
    4aa4:	9207      	str	r2, [sp, #28]
    4aa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4aa8:	9208      	str	r2, [sp, #32]
    4aaa:	4a18      	ldr	r2, [pc, #96]	; (4b0c <at_ble_adv_start+0x130>)
    4aac:	9209      	str	r2, [sp, #36]	; 0x24
    4aae:	2264      	movs	r2, #100	; 0x64
    4ab0:	4362      	muls	r2, r4
    4ab2:	b292      	uxth	r2, r2
    4ab4:	920a      	str	r2, [sp, #40]	; 0x28
    4ab6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4ab8:	4c15      	ldr	r4, [pc, #84]	; (4b10 <at_ble_adv_start+0x134>)
    4aba:	920b      	str	r2, [sp, #44]	; 0x2c
    4abc:	4a15      	ldr	r2, [pc, #84]	; (4b14 <at_ble_adv_start+0x138>)
    4abe:	47a0      	blx	r4
    4ac0:	e01b      	b.n	4afa <at_ble_adv_start+0x11e>
    4ac2:	2d00      	cmp	r5, #0
    4ac4:	d1be      	bne.n	4a44 <at_ble_adv_start+0x68>
    4ac6:	4b0f      	ldr	r3, [pc, #60]	; (4b04 <at_ble_adv_start+0x128>)
    4ac8:	4798      	blx	r3
    4aca:	2520      	movs	r5, #32
    4acc:	1c01      	adds	r1, r0, #0
    4ace:	e7be      	b.n	4a4e <at_ble_adv_start+0x72>
    4ad0:	2803      	cmp	r0, #3
    4ad2:	d8cd      	bhi.n	4a70 <at_ble_adv_start+0x94>
    4ad4:	e006      	b.n	4ae4 <at_ble_adv_start+0x108>
    4ad6:	1e60      	subs	r0, r4, #1
    4ad8:	2803      	cmp	r0, #3
    4ada:	d903      	bls.n	4ae4 <at_ble_adv_start+0x108>
    4adc:	1c33      	adds	r3, r6, #0
    4ade:	200d      	movs	r0, #13
    4ae0:	1c32      	adds	r2, r6, #0
    4ae2:	e7cb      	b.n	4a7c <at_ble_adv_start+0xa0>
    4ae4:	2300      	movs	r3, #0
    4ae6:	f003 fb83 	bl	81f0 <__gnu_thumb1_case_sqi>
    4aea:	06c6      	.short	0x06c6
    4aec:	0204      	.short	0x0204
    4aee:	200f      	movs	r0, #15
    4af0:	e7c2      	b.n	4a78 <at_ble_adv_start+0x9c>
    4af2:	2200      	movs	r2, #0
    4af4:	920c      	str	r2, [sp, #48]	; 0x30
    4af6:	200c      	movs	r0, #12
    4af8:	e7be      	b.n	4a78 <at_ble_adv_start+0x9c>
    4afa:	b011      	add	sp, #68	; 0x44
    4afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4afe:	46c0      	nop			; (mov r8, r8)
    4b00:	2000199c 	.word	0x2000199c
    4b04:	00007679 	.word	0x00007679
    4b08:	200019d0 	.word	0x200019d0
    4b0c:	200019ef 	.word	0x200019ef
    4b10:	00007565 	.word	0x00007565
    4b14:	00003a98 	.word	0x00003a98

00004b18 <at_ble_scan_stop>:
    4b18:	b510      	push	{r4, lr}
    4b1a:	4b05      	ldr	r3, [pc, #20]	; (4b30 <at_ble_scan_stop+0x18>)
    4b1c:	4798      	blx	r3
    4b1e:	1e04      	subs	r4, r0, #0
    4b20:	d103      	bne.n	4b2a <at_ble_scan_stop+0x12>
    4b22:	20d1      	movs	r0, #209	; 0xd1
    4b24:	4b03      	ldr	r3, [pc, #12]	; (4b34 <at_ble_scan_stop+0x1c>)
    4b26:	0100      	lsls	r0, r0, #4
    4b28:	4798      	blx	r3
    4b2a:	1c20      	adds	r0, r4, #0
    4b2c:	bd10      	pop	{r4, pc}
    4b2e:	46c0      	nop			; (mov r8, r8)
    4b30:	00007371 	.word	0x00007371
    4b34:	00004581 	.word	0x00004581

00004b38 <at_ble_disconnect>:
    4b38:	b538      	push	{r3, r4, r5, lr}
    4b3a:	1c04      	adds	r4, r0, #0
    4b3c:	4b04      	ldr	r3, [pc, #16]	; (4b50 <at_ble_disconnect+0x18>)
    4b3e:	1c08      	adds	r0, r1, #0
    4b40:	1c21      	adds	r1, r4, #0
    4b42:	4798      	blx	r3
    4b44:	1c05      	adds	r5, r0, #0
    4b46:	4b03      	ldr	r3, [pc, #12]	; (4b54 <at_ble_disconnect+0x1c>)
    4b48:	1c20      	adds	r0, r4, #0
    4b4a:	4798      	blx	r3
    4b4c:	1c28      	adds	r0, r5, #0
    4b4e:	bd38      	pop	{r3, r4, r5, pc}
    4b50:	0000694d 	.word	0x0000694d
    4b54:	000045c5 	.word	0x000045c5

00004b58 <at_ble_conn_update_reply>:
    4b58:	b570      	push	{r4, r5, r6, lr}
    4b5a:	4c09      	ldr	r4, [pc, #36]	; (4b80 <at_ble_conn_update_reply+0x28>)
    4b5c:	47a0      	blx	r4
    4b5e:	1e04      	subs	r4, r0, #0
    4b60:	d00b      	beq.n	4b7a <at_ble_conn_update_reply+0x22>
    4b62:	22d0      	movs	r2, #208	; 0xd0
    4b64:	4d07      	ldr	r5, [pc, #28]	; (4b84 <at_ble_conn_update_reply+0x2c>)
    4b66:	4908      	ldr	r1, [pc, #32]	; (4b88 <at_ble_conn_update_reply+0x30>)
    4b68:	4b08      	ldr	r3, [pc, #32]	; (4b8c <at_ble_conn_update_reply+0x34>)
    4b6a:	4809      	ldr	r0, [pc, #36]	; (4b90 <at_ble_conn_update_reply+0x38>)
    4b6c:	0092      	lsls	r2, r2, #2
    4b6e:	682e      	ldr	r6, [r5, #0]
    4b70:	47b0      	blx	r6
    4b72:	682b      	ldr	r3, [r5, #0]
    4b74:	4807      	ldr	r0, [pc, #28]	; (4b94 <at_ble_conn_update_reply+0x3c>)
    4b76:	1c21      	adds	r1, r4, #0
    4b78:	4798      	blx	r3
    4b7a:	1c20      	adds	r0, r4, #0
    4b7c:	bd70      	pop	{r4, r5, r6, pc}
    4b7e:	46c0      	nop			; (mov r8, r8)
    4b80:	00006e71 	.word	0x00006e71
    4b84:	20000044 	.word	0x20000044
    4b88:	0000a290 	.word	0x0000a290
    4b8c:	0000a268 	.word	0x0000a268
    4b90:	0000a1d9 	.word	0x0000a1d9
    4b94:	0000a2ce 	.word	0x0000a2ce

00004b98 <at_ble_random_address_resolve>:
    4b98:	b510      	push	{r4, lr}
    4b9a:	23cf      	movs	r3, #207	; 0xcf
    4b9c:	2800      	cmp	r0, #0
    4b9e:	d00a      	beq.n	4bb6 <at_ble_random_address_resolve+0x1e>
    4ba0:	2900      	cmp	r1, #0
    4ba2:	d008      	beq.n	4bb6 <at_ble_random_address_resolve+0x1e>
    4ba4:	2a00      	cmp	r2, #0
    4ba6:	d006      	beq.n	4bb6 <at_ble_random_address_resolve+0x1e>
    4ba8:	780c      	ldrb	r4, [r1, #0]
    4baa:	2c02      	cmp	r4, #2
    4bac:	d103      	bne.n	4bb6 <at_ble_random_address_resolve+0x1e>
    4bae:	4b03      	ldr	r3, [pc, #12]	; (4bbc <at_ble_random_address_resolve+0x24>)
    4bb0:	3101      	adds	r1, #1
    4bb2:	4798      	blx	r3
    4bb4:	2300      	movs	r3, #0
    4bb6:	1c18      	adds	r0, r3, #0
    4bb8:	bd10      	pop	{r4, pc}
    4bba:	46c0      	nop			; (mov r8, r8)
    4bbc:	00007719 	.word	0x00007719

00004bc0 <at_ble_uuid_type2len>:
    4bc0:	23cf      	movs	r3, #207	; 0xcf
    4bc2:	2802      	cmp	r0, #2
    4bc4:	d801      	bhi.n	4bca <at_ble_uuid_type2len+0xa>
    4bc6:	4b02      	ldr	r3, [pc, #8]	; (4bd0 <at_ble_uuid_type2len+0x10>)
    4bc8:	5c1b      	ldrb	r3, [r3, r0]
    4bca:	1c18      	adds	r0, r3, #0
    4bcc:	4770      	bx	lr
    4bce:	46c0      	nop			; (mov r8, r8)
    4bd0:	0000a504 	.word	0x0000a504

00004bd4 <at_ble_uuid_len2type>:
    4bd4:	1e83      	subs	r3, r0, #2
    4bd6:	b2db      	uxtb	r3, r3
    4bd8:	2003      	movs	r0, #3
    4bda:	2b0e      	cmp	r3, #14
    4bdc:	d801      	bhi.n	4be2 <at_ble_uuid_len2type+0xe>
    4bde:	4a01      	ldr	r2, [pc, #4]	; (4be4 <at_ble_uuid_len2type+0x10>)
    4be0:	5cd0      	ldrb	r0, [r2, r3]
    4be2:	4770      	bx	lr
    4be4:	0000a281 	.word	0x0000a281

00004be8 <at_ble_primary_service_discover_by_uuid>:
    4be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bea:	b087      	sub	sp, #28
    4bec:	9005      	str	r0, [sp, #20]
    4bee:	9102      	str	r1, [sp, #8]
    4bf0:	9204      	str	r2, [sp, #16]
    4bf2:	1e1d      	subs	r5, r3, #0
    4bf4:	d109      	bne.n	4c0a <at_ble_primary_service_discover_by_uuid+0x22>
    4bf6:	4c2a      	ldr	r4, [pc, #168]	; (4ca0 <at_ble_primary_service_discover_by_uuid+0xb8>)
    4bf8:	4b2a      	ldr	r3, [pc, #168]	; (4ca4 <at_ble_primary_service_discover_by_uuid+0xbc>)
    4bfa:	482b      	ldr	r0, [pc, #172]	; (4ca8 <at_ble_primary_service_discover_by_uuid+0xc0>)
    4bfc:	492b      	ldr	r1, [pc, #172]	; (4cac <at_ble_primary_service_discover_by_uuid+0xc4>)
    4bfe:	2231      	movs	r2, #49	; 0x31
    4c00:	6825      	ldr	r5, [r4, #0]
    4c02:	47a8      	blx	r5
    4c04:	6823      	ldr	r3, [r4, #0]
    4c06:	482a      	ldr	r0, [pc, #168]	; (4cb0 <at_ble_primary_service_discover_by_uuid+0xc8>)
    4c08:	e00f      	b.n	4c2a <at_ble_primary_service_discover_by_uuid+0x42>
    4c0a:	9b02      	ldr	r3, [sp, #8]
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	d003      	beq.n	4c18 <at_ble_primary_service_discover_by_uuid+0x30>
    4c10:	9b04      	ldr	r3, [sp, #16]
    4c12:	9a02      	ldr	r2, [sp, #8]
    4c14:	4293      	cmp	r3, r2
    4c16:	d20b      	bcs.n	4c30 <at_ble_primary_service_discover_by_uuid+0x48>
    4c18:	2237      	movs	r2, #55	; 0x37
    4c1a:	4c21      	ldr	r4, [pc, #132]	; (4ca0 <at_ble_primary_service_discover_by_uuid+0xb8>)
    4c1c:	4822      	ldr	r0, [pc, #136]	; (4ca8 <at_ble_primary_service_discover_by_uuid+0xc0>)
    4c1e:	4923      	ldr	r1, [pc, #140]	; (4cac <at_ble_primary_service_discover_by_uuid+0xc4>)
    4c20:	4b20      	ldr	r3, [pc, #128]	; (4ca4 <at_ble_primary_service_discover_by_uuid+0xbc>)
    4c22:	6825      	ldr	r5, [r4, #0]
    4c24:	47a8      	blx	r5
    4c26:	6823      	ldr	r3, [r4, #0]
    4c28:	4822      	ldr	r0, [pc, #136]	; (4cb4 <at_ble_primary_service_discover_by_uuid+0xcc>)
    4c2a:	4798      	blx	r3
    4c2c:	20cf      	movs	r0, #207	; 0xcf
    4c2e:	e035      	b.n	4c9c <at_ble_primary_service_discover_by_uuid+0xb4>
    4c30:	4b21      	ldr	r3, [pc, #132]	; (4cb8 <at_ble_primary_service_discover_by_uuid+0xd0>)
    4c32:	7828      	ldrb	r0, [r5, #0]
    4c34:	4798      	blx	r3
    4c36:	1c2b      	adds	r3, r5, #0
    4c38:	1e04      	subs	r4, r0, #0
    4c3a:	2ccf      	cmp	r4, #207	; 0xcf
    4c3c:	d108      	bne.n	4c50 <at_ble_primary_service_discover_by_uuid+0x68>
    4c3e:	4d18      	ldr	r5, [pc, #96]	; (4ca0 <at_ble_primary_service_discover_by_uuid+0xb8>)
    4c40:	4b18      	ldr	r3, [pc, #96]	; (4ca4 <at_ble_primary_service_discover_by_uuid+0xbc>)
    4c42:	4819      	ldr	r0, [pc, #100]	; (4ca8 <at_ble_primary_service_discover_by_uuid+0xc0>)
    4c44:	4919      	ldr	r1, [pc, #100]	; (4cac <at_ble_primary_service_discover_by_uuid+0xc4>)
    4c46:	223e      	movs	r2, #62	; 0x3e
    4c48:	682e      	ldr	r6, [r5, #0]
    4c4a:	47b0      	blx	r6
    4c4c:	682b      	ldr	r3, [r5, #0]
    4c4e:	e7eb      	b.n	4c28 <at_ble_primary_service_discover_by_uuid+0x40>
    4c50:	1b5a      	subs	r2, r3, r5
    4c52:	b2d2      	uxtb	r2, r2
    4c54:	9203      	str	r2, [sp, #12]
    4c56:	42a2      	cmp	r2, r4
    4c58:	d20d      	bcs.n	4c76 <at_ble_primary_service_discover_by_uuid+0x8e>
    4c5a:	3301      	adds	r3, #1
    4c5c:	781a      	ldrb	r2, [r3, #0]
    4c5e:	2a00      	cmp	r2, #0
    4c60:	d0f6      	beq.n	4c50 <at_ble_primary_service_discover_by_uuid+0x68>
    4c62:	4f0f      	ldr	r7, [pc, #60]	; (4ca0 <at_ble_primary_service_discover_by_uuid+0xb8>)
    4c64:	4b0f      	ldr	r3, [pc, #60]	; (4ca4 <at_ble_primary_service_discover_by_uuid+0xbc>)
    4c66:	4810      	ldr	r0, [pc, #64]	; (4ca8 <at_ble_primary_service_discover_by_uuid+0xc0>)
    4c68:	4910      	ldr	r1, [pc, #64]	; (4cac <at_ble_primary_service_discover_by_uuid+0xc4>)
    4c6a:	2246      	movs	r2, #70	; 0x46
    4c6c:	683e      	ldr	r6, [r7, #0]
    4c6e:	47b0      	blx	r6
    4c70:	683b      	ldr	r3, [r7, #0]
    4c72:	4810      	ldr	r0, [pc, #64]	; (4cb4 <at_ble_primary_service_discover_by_uuid+0xcc>)
    4c74:	4798      	blx	r3
    4c76:	9b03      	ldr	r3, [sp, #12]
    4c78:	42a3      	cmp	r3, r4
    4c7a:	d104      	bne.n	4c86 <at_ble_primary_service_discover_by_uuid+0x9e>
    4c7c:	4c08      	ldr	r4, [pc, #32]	; (4ca0 <at_ble_primary_service_discover_by_uuid+0xb8>)
    4c7e:	480a      	ldr	r0, [pc, #40]	; (4ca8 <at_ble_primary_service_discover_by_uuid+0xc0>)
    4c80:	490a      	ldr	r1, [pc, #40]	; (4cac <at_ble_primary_service_discover_by_uuid+0xc4>)
    4c82:	224c      	movs	r2, #76	; 0x4c
    4c84:	e7cc      	b.n	4c20 <at_ble_primary_service_discover_by_uuid+0x38>
    4c86:	9b05      	ldr	r3, [sp, #20]
    4c88:	3501      	adds	r5, #1
    4c8a:	9301      	str	r3, [sp, #4]
    4c8c:	2003      	movs	r0, #3
    4c8e:	1c21      	adds	r1, r4, #0
    4c90:	9500      	str	r5, [sp, #0]
    4c92:	9a02      	ldr	r2, [sp, #8]
    4c94:	9b04      	ldr	r3, [sp, #16]
    4c96:	4c09      	ldr	r4, [pc, #36]	; (4cbc <at_ble_primary_service_discover_by_uuid+0xd4>)
    4c98:	47a0      	blx	r4
    4c9a:	2000      	movs	r0, #0
    4c9c:	b007      	add	sp, #28
    4c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ca0:	20000044 	.word	0x20000044
    4ca4:	0000a632 	.word	0x0000a632
    4ca8:	0000a1d9 	.word	0x0000a1d9
    4cac:	0000a54d 	.word	0x0000a54d
    4cb0:	0000a407 	.word	0x0000a407
    4cb4:	0000a2b5 	.word	0x0000a2b5
    4cb8:	00004bc1 	.word	0x00004bc1
    4cbc:	00007925 	.word	0x00007925

00004cc0 <at_ble_characteristic_discover_by_uuid>:
    4cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cc2:	b085      	sub	sp, #20
    4cc4:	9003      	str	r0, [sp, #12]
    4cc6:	1c0e      	adds	r6, r1, #0
    4cc8:	1c17      	adds	r7, r2, #0
    4cca:	1e1d      	subs	r5, r3, #0
    4ccc:	d109      	bne.n	4ce2 <at_ble_characteristic_discover_by_uuid+0x22>
    4cce:	4c23      	ldr	r4, [pc, #140]	; (4d5c <at_ble_characteristic_discover_by_uuid+0x9c>)
    4cd0:	4b23      	ldr	r3, [pc, #140]	; (4d60 <at_ble_characteristic_discover_by_uuid+0xa0>)
    4cd2:	4824      	ldr	r0, [pc, #144]	; (4d64 <at_ble_characteristic_discover_by_uuid+0xa4>)
    4cd4:	4924      	ldr	r1, [pc, #144]	; (4d68 <at_ble_characteristic_discover_by_uuid+0xa8>)
    4cd6:	2294      	movs	r2, #148	; 0x94
    4cd8:	6825      	ldr	r5, [r4, #0]
    4cda:	47a8      	blx	r5
    4cdc:	6823      	ldr	r3, [r4, #0]
    4cde:	4823      	ldr	r0, [pc, #140]	; (4d6c <at_ble_characteristic_discover_by_uuid+0xac>)
    4ce0:	e00c      	b.n	4cfc <at_ble_characteristic_discover_by_uuid+0x3c>
    4ce2:	2900      	cmp	r1, #0
    4ce4:	d001      	beq.n	4cea <at_ble_characteristic_discover_by_uuid+0x2a>
    4ce6:	428a      	cmp	r2, r1
    4ce8:	d20b      	bcs.n	4d02 <at_ble_characteristic_discover_by_uuid+0x42>
    4cea:	229a      	movs	r2, #154	; 0x9a
    4cec:	4c1b      	ldr	r4, [pc, #108]	; (4d5c <at_ble_characteristic_discover_by_uuid+0x9c>)
    4cee:	481d      	ldr	r0, [pc, #116]	; (4d64 <at_ble_characteristic_discover_by_uuid+0xa4>)
    4cf0:	491d      	ldr	r1, [pc, #116]	; (4d68 <at_ble_characteristic_discover_by_uuid+0xa8>)
    4cf2:	4b1b      	ldr	r3, [pc, #108]	; (4d60 <at_ble_characteristic_discover_by_uuid+0xa0>)
    4cf4:	6825      	ldr	r5, [r4, #0]
    4cf6:	47a8      	blx	r5
    4cf8:	6823      	ldr	r3, [r4, #0]
    4cfa:	481d      	ldr	r0, [pc, #116]	; (4d70 <at_ble_characteristic_discover_by_uuid+0xb0>)
    4cfc:	4798      	blx	r3
    4cfe:	20cf      	movs	r0, #207	; 0xcf
    4d00:	e029      	b.n	4d56 <at_ble_characteristic_discover_by_uuid+0x96>
    4d02:	7818      	ldrb	r0, [r3, #0]
    4d04:	4b1b      	ldr	r3, [pc, #108]	; (4d74 <at_ble_characteristic_discover_by_uuid+0xb4>)
    4d06:	4798      	blx	r3
    4d08:	1c2a      	adds	r2, r5, #0
    4d0a:	1e04      	subs	r4, r0, #0
    4d0c:	2ccf      	cmp	r4, #207	; 0xcf
    4d0e:	d10c      	bne.n	4d2a <at_ble_characteristic_discover_by_uuid+0x6a>
    4d10:	4d12      	ldr	r5, [pc, #72]	; (4d5c <at_ble_characteristic_discover_by_uuid+0x9c>)
    4d12:	4b13      	ldr	r3, [pc, #76]	; (4d60 <at_ble_characteristic_discover_by_uuid+0xa0>)
    4d14:	4813      	ldr	r0, [pc, #76]	; (4d64 <at_ble_characteristic_discover_by_uuid+0xa4>)
    4d16:	4914      	ldr	r1, [pc, #80]	; (4d68 <at_ble_characteristic_discover_by_uuid+0xa8>)
    4d18:	22a1      	movs	r2, #161	; 0xa1
    4d1a:	682e      	ldr	r6, [r5, #0]
    4d1c:	47b0      	blx	r6
    4d1e:	682b      	ldr	r3, [r5, #0]
    4d20:	e7eb      	b.n	4cfa <at_ble_characteristic_discover_by_uuid+0x3a>
    4d22:	3201      	adds	r2, #1
    4d24:	7811      	ldrb	r1, [r2, #0]
    4d26:	2900      	cmp	r1, #0
    4d28:	d103      	bne.n	4d32 <at_ble_characteristic_discover_by_uuid+0x72>
    4d2a:	1b53      	subs	r3, r2, r5
    4d2c:	b2db      	uxtb	r3, r3
    4d2e:	42a3      	cmp	r3, r4
    4d30:	d3f7      	bcc.n	4d22 <at_ble_characteristic_discover_by_uuid+0x62>
    4d32:	42a3      	cmp	r3, r4
    4d34:	d104      	bne.n	4d40 <at_ble_characteristic_discover_by_uuid+0x80>
    4d36:	4c09      	ldr	r4, [pc, #36]	; (4d5c <at_ble_characteristic_discover_by_uuid+0x9c>)
    4d38:	480a      	ldr	r0, [pc, #40]	; (4d64 <at_ble_characteristic_discover_by_uuid+0xa4>)
    4d3a:	490b      	ldr	r1, [pc, #44]	; (4d68 <at_ble_characteristic_discover_by_uuid+0xa8>)
    4d3c:	22af      	movs	r2, #175	; 0xaf
    4d3e:	e7d8      	b.n	4cf2 <at_ble_characteristic_discover_by_uuid+0x32>
    4d40:	9b03      	ldr	r3, [sp, #12]
    4d42:	3501      	adds	r5, #1
    4d44:	9301      	str	r3, [sp, #4]
    4d46:	2006      	movs	r0, #6
    4d48:	1c21      	adds	r1, r4, #0
    4d4a:	9500      	str	r5, [sp, #0]
    4d4c:	1c32      	adds	r2, r6, #0
    4d4e:	1c3b      	adds	r3, r7, #0
    4d50:	4c09      	ldr	r4, [pc, #36]	; (4d78 <at_ble_characteristic_discover_by_uuid+0xb8>)
    4d52:	47a0      	blx	r4
    4d54:	2000      	movs	r0, #0
    4d56:	b005      	add	sp, #20
    4d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d5a:	46c0      	nop			; (mov r8, r8)
    4d5c:	20000044 	.word	0x20000044
    4d60:	0000a507 	.word	0x0000a507
    4d64:	0000a1d9 	.word	0x0000a1d9
    4d68:	0000a54d 	.word	0x0000a54d
    4d6c:	0000a407 	.word	0x0000a407
    4d70:	0000a2b5 	.word	0x0000a2b5
    4d74:	00004bc1 	.word	0x00004bc1
    4d78:	00007925 	.word	0x00007925

00004d7c <at_ble_descriptor_discover_all>:
    4d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4d7e:	1c13      	adds	r3, r2, #0
    4d80:	1e0d      	subs	r5, r1, #0
    4d82:	d001      	beq.n	4d88 <at_ble_descriptor_discover_all+0xc>
    4d84:	428a      	cmp	r2, r1
    4d86:	d20b      	bcs.n	4da0 <at_ble_descriptor_discover_all+0x24>
    4d88:	4c0a      	ldr	r4, [pc, #40]	; (4db4 <at_ble_descriptor_discover_all+0x38>)
    4d8a:	490b      	ldr	r1, [pc, #44]	; (4db8 <at_ble_descriptor_discover_all+0x3c>)
    4d8c:	22c6      	movs	r2, #198	; 0xc6
    4d8e:	4b0b      	ldr	r3, [pc, #44]	; (4dbc <at_ble_descriptor_discover_all+0x40>)
    4d90:	480b      	ldr	r0, [pc, #44]	; (4dc0 <at_ble_descriptor_discover_all+0x44>)
    4d92:	6825      	ldr	r5, [r4, #0]
    4d94:	47a8      	blx	r5
    4d96:	6823      	ldr	r3, [r4, #0]
    4d98:	480a      	ldr	r0, [pc, #40]	; (4dc4 <at_ble_descriptor_discover_all+0x48>)
    4d9a:	4798      	blx	r3
    4d9c:	20cf      	movs	r0, #207	; 0xcf
    4d9e:	e008      	b.n	4db2 <at_ble_descriptor_discover_all+0x36>
    4da0:	2400      	movs	r4, #0
    4da2:	9001      	str	r0, [sp, #4]
    4da4:	1c2a      	adds	r2, r5, #0
    4da6:	2007      	movs	r0, #7
    4da8:	9400      	str	r4, [sp, #0]
    4daa:	1c21      	adds	r1, r4, #0
    4dac:	4d06      	ldr	r5, [pc, #24]	; (4dc8 <at_ble_descriptor_discover_all+0x4c>)
    4dae:	47a8      	blx	r5
    4db0:	1c20      	adds	r0, r4, #0
    4db2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    4db4:	20000044 	.word	0x20000044
    4db8:	0000a54d 	.word	0x0000a54d
    4dbc:	0000a52e 	.word	0x0000a52e
    4dc0:	0000a1d9 	.word	0x0000a1d9
    4dc4:	0000a2df 	.word	0x0000a2df
    4dc8:	00007925 	.word	0x00007925

00004dcc <at_ble_characteristic_write>:
    4dcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4dce:	1c14      	adds	r4, r2, #0
    4dd0:	aa08      	add	r2, sp, #32
    4dd2:	1c0d      	adds	r5, r1, #0
    4dd4:	ca02      	ldmia	r2!, {r1}
    4dd6:	1c06      	adds	r6, r0, #0
    4dd8:	a80a      	add	r0, sp, #40	; 0x28
    4dda:	7812      	ldrb	r2, [r2, #0]
    4ddc:	7800      	ldrb	r0, [r0, #0]
    4dde:	2900      	cmp	r1, #0
    4de0:	d109      	bne.n	4df6 <at_ble_characteristic_write+0x2a>
    4de2:	4c1b      	ldr	r4, [pc, #108]	; (4e50 <at_ble_characteristic_write+0x84>)
    4de4:	4b1b      	ldr	r3, [pc, #108]	; (4e54 <at_ble_characteristic_write+0x88>)
    4de6:	481c      	ldr	r0, [pc, #112]	; (4e58 <at_ble_characteristic_write+0x8c>)
    4de8:	491c      	ldr	r1, [pc, #112]	; (4e5c <at_ble_characteristic_write+0x90>)
    4dea:	22df      	movs	r2, #223	; 0xdf
    4dec:	6825      	ldr	r5, [r4, #0]
    4dee:	47a8      	blx	r5
    4df0:	6823      	ldr	r3, [r4, #0]
    4df2:	481b      	ldr	r0, [pc, #108]	; (4e60 <at_ble_characteristic_write+0x94>)
    4df4:	e00a      	b.n	4e0c <at_ble_characteristic_write+0x40>
    4df6:	2b00      	cmp	r3, #0
    4df8:	d10b      	bne.n	4e12 <at_ble_characteristic_write+0x46>
    4dfa:	4c15      	ldr	r4, [pc, #84]	; (4e50 <at_ble_characteristic_write+0x84>)
    4dfc:	4b15      	ldr	r3, [pc, #84]	; (4e54 <at_ble_characteristic_write+0x88>)
    4dfe:	4816      	ldr	r0, [pc, #88]	; (4e58 <at_ble_characteristic_write+0x8c>)
    4e00:	4916      	ldr	r1, [pc, #88]	; (4e5c <at_ble_characteristic_write+0x90>)
    4e02:	22e5      	movs	r2, #229	; 0xe5
    4e04:	6825      	ldr	r5, [r4, #0]
    4e06:	47a8      	blx	r5
    4e08:	6823      	ldr	r3, [r4, #0]
    4e0a:	4816      	ldr	r0, [pc, #88]	; (4e64 <at_ble_characteristic_write+0x98>)
    4e0c:	4798      	blx	r3
    4e0e:	20cf      	movs	r0, #207	; 0xcf
    4e10:	e01b      	b.n	4e4a <at_ble_characteristic_write+0x7e>
    4e12:	2800      	cmp	r0, #0
    4e14:	d00c      	beq.n	4e30 <at_ble_characteristic_write+0x64>
    4e16:	200c      	movs	r0, #12
    4e18:	2a00      	cmp	r2, #0
    4e1a:	d00d      	beq.n	4e38 <at_ble_characteristic_write+0x6c>
    4e1c:	4c0c      	ldr	r4, [pc, #48]	; (4e50 <at_ble_characteristic_write+0x84>)
    4e1e:	4b0d      	ldr	r3, [pc, #52]	; (4e54 <at_ble_characteristic_write+0x88>)
    4e20:	480d      	ldr	r0, [pc, #52]	; (4e58 <at_ble_characteristic_write+0x8c>)
    4e22:	490e      	ldr	r1, [pc, #56]	; (4e5c <at_ble_characteristic_write+0x90>)
    4e24:	22ea      	movs	r2, #234	; 0xea
    4e26:	6825      	ldr	r5, [r4, #0]
    4e28:	47a8      	blx	r5
    4e2a:	6823      	ldr	r3, [r4, #0]
    4e2c:	480e      	ldr	r0, [pc, #56]	; (4e68 <at_ble_characteristic_write+0x9c>)
    4e2e:	e7ed      	b.n	4e0c <at_ble_characteristic_write+0x40>
    4e30:	1e50      	subs	r0, r2, #1
    4e32:	4182      	sbcs	r2, r0
    4e34:	320d      	adds	r2, #13
    4e36:	1c10      	adds	r0, r2, #0
    4e38:	9300      	str	r3, [sp, #0]
    4e3a:	9101      	str	r1, [sp, #4]
    4e3c:	1c23      	adds	r3, r4, #0
    4e3e:	9602      	str	r6, [sp, #8]
    4e40:	2101      	movs	r1, #1
    4e42:	1c2a      	adds	r2, r5, #0
    4e44:	4c09      	ldr	r4, [pc, #36]	; (4e6c <at_ble_characteristic_write+0xa0>)
    4e46:	47a0      	blx	r4
    4e48:	2000      	movs	r0, #0
    4e4a:	b004      	add	sp, #16
    4e4c:	bd70      	pop	{r4, r5, r6, pc}
    4e4e:	46c0      	nop			; (mov r8, r8)
    4e50:	20000044 	.word	0x20000044
    4e54:	0000a616 	.word	0x0000a616
    4e58:	0000a1d9 	.word	0x0000a1d9
    4e5c:	0000a54d 	.word	0x0000a54d
    4e60:	0000a3f8 	.word	0x0000a3f8
    4e64:	0000a57a 	.word	0x0000a57a
    4e68:	0000a58f 	.word	0x0000a58f
    4e6c:	000079c1 	.word	0x000079c1

00004e70 <db_searchATT>:
    4e70:	b570      	push	{r4, r5, r6, lr}
    4e72:	1c05      	adds	r5, r0, #0
    4e74:	2400      	movs	r4, #0
    4e76:	4b0c      	ldr	r3, [pc, #48]	; (4ea8 <db_searchATT+0x38>)
    4e78:	6819      	ldr	r1, [r3, #0]
    4e7a:	4b0c      	ldr	r3, [pc, #48]	; (4eac <db_searchATT+0x3c>)
    4e7c:	681e      	ldr	r6, [r3, #0]
    4e7e:	428c      	cmp	r4, r1
    4e80:	dc10      	bgt.n	4ea4 <db_searchATT+0x34>
    4e82:	200c      	movs	r0, #12
    4e84:	1863      	adds	r3, r4, r1
    4e86:	0fda      	lsrs	r2, r3, #31
    4e88:	18d3      	adds	r3, r2, r3
    4e8a:	1c02      	adds	r2, r0, #0
    4e8c:	105b      	asrs	r3, r3, #1
    4e8e:	435a      	muls	r2, r3
    4e90:	18b0      	adds	r0, r6, r2
    4e92:	8802      	ldrh	r2, [r0, #0]
    4e94:	42aa      	cmp	r2, r5
    4e96:	d201      	bcs.n	4e9c <db_searchATT+0x2c>
    4e98:	1e59      	subs	r1, r3, #1
    4e9a:	e7f0      	b.n	4e7e <db_searchATT+0xe>
    4e9c:	42aa      	cmp	r2, r5
    4e9e:	d902      	bls.n	4ea6 <db_searchATT+0x36>
    4ea0:	1c5c      	adds	r4, r3, #1
    4ea2:	e7ec      	b.n	4e7e <db_searchATT+0xe>
    4ea4:	2000      	movs	r0, #0
    4ea6:	bd70      	pop	{r4, r5, r6, pc}
    4ea8:	200006f4 	.word	0x200006f4
    4eac:	200006ec 	.word	0x200006ec

00004eb0 <att_permissions>:
    4eb0:	b510      	push	{r4, lr}
    4eb2:	2403      	movs	r4, #3
    4eb4:	0683      	lsls	r3, r0, #26
    4eb6:	4004      	ands	r4, r0
    4eb8:	0640      	lsls	r0, r0, #25
    4eba:	0f9b      	lsrs	r3, r3, #30
    4ebc:	0fc0      	lsrs	r0, r0, #31
    4ebe:	2c00      	cmp	r4, #0
    4ec0:	d001      	beq.n	4ec6 <att_permissions+0x16>
    4ec2:	b2a1      	uxth	r1, r4
    4ec4:	e002      	b.n	4ecc <att_permissions+0x1c>
    4ec6:	1e4c      	subs	r4, r1, #1
    4ec8:	41a1      	sbcs	r1, r4
    4eca:	b289      	uxth	r1, r1
    4ecc:	2b00      	cmp	r3, #0
    4ece:	d001      	beq.n	4ed4 <att_permissions+0x24>
    4ed0:	009b      	lsls	r3, r3, #2
    4ed2:	e002      	b.n	4eda <att_permissions+0x2a>
    4ed4:	2a00      	cmp	r2, #0
    4ed6:	d001      	beq.n	4edc <att_permissions+0x2c>
    4ed8:	2304      	movs	r3, #4
    4eda:	4319      	orrs	r1, r3
    4edc:	2800      	cmp	r0, #0
    4ede:	d101      	bne.n	4ee4 <att_permissions+0x34>
    4ee0:	2080      	movs	r0, #128	; 0x80
    4ee2:	e000      	b.n	4ee6 <att_permissions+0x36>
    4ee4:	2090      	movs	r0, #144	; 0x90
    4ee6:	0180      	lsls	r0, r0, #6
    4ee8:	4308      	orrs	r0, r1
    4eea:	bd10      	pop	{r4, pc}

00004eec <char_permissions>:
    4eec:	b570      	push	{r4, r5, r6, lr}
    4eee:	2503      	movs	r5, #3
    4ef0:	068c      	lsls	r4, r1, #26
    4ef2:	400d      	ands	r5, r1
    4ef4:	0649      	lsls	r1, r1, #25
    4ef6:	0fa4      	lsrs	r4, r4, #30
    4ef8:	0fc9      	lsrs	r1, r1, #31
    4efa:	2300      	movs	r3, #0
    4efc:	0786      	lsls	r6, r0, #30
    4efe:	d500      	bpl.n	4f02 <char_permissions+0x16>
    4f00:	b2ab      	uxth	r3, r5
    4f02:	0706      	lsls	r6, r0, #28
    4f04:	d504      	bpl.n	4f10 <char_permissions+0x24>
    4f06:	00a6      	lsls	r6, r4, #2
    4f08:	4333      	orrs	r3, r6
    4f0a:	2680      	movs	r6, #128	; 0x80
    4f0c:	01b6      	lsls	r6, r6, #6
    4f0e:	4333      	orrs	r3, r6
    4f10:	0686      	lsls	r6, r0, #26
    4f12:	d501      	bpl.n	4f18 <char_permissions+0x2c>
    4f14:	012e      	lsls	r6, r5, #4
    4f16:	4333      	orrs	r3, r6
    4f18:	06c6      	lsls	r6, r0, #27
    4f1a:	d501      	bpl.n	4f20 <char_permissions+0x34>
    4f1c:	01ad      	lsls	r5, r5, #6
    4f1e:	432b      	orrs	r3, r5
    4f20:	2580      	movs	r5, #128	; 0x80
    4f22:	006d      	lsls	r5, r5, #1
    4f24:	4228      	tst	r0, r5
    4f26:	d000      	beq.n	4f2a <char_permissions+0x3e>
    4f28:	432b      	orrs	r3, r5
    4f2a:	07c5      	lsls	r5, r0, #31
    4f2c:	d502      	bpl.n	4f34 <char_permissions+0x48>
    4f2e:	2580      	movs	r5, #128	; 0x80
    4f30:	00ad      	lsls	r5, r5, #2
    4f32:	432b      	orrs	r3, r5
    4f34:	2900      	cmp	r1, #0
    4f36:	d002      	beq.n	4f3e <char_permissions+0x52>
    4f38:	2180      	movs	r1, #128	; 0x80
    4f3a:	00c9      	lsls	r1, r1, #3
    4f3c:	430b      	orrs	r3, r1
    4f3e:	0741      	lsls	r1, r0, #29
    4f40:	d504      	bpl.n	4f4c <char_permissions+0x60>
    4f42:	00a1      	lsls	r1, r4, #2
    4f44:	430b      	orrs	r3, r1
    4f46:	2180      	movs	r1, #128	; 0x80
    4f48:	0109      	lsls	r1, r1, #4
    4f4a:	430b      	orrs	r3, r1
    4f4c:	0641      	lsls	r1, r0, #25
    4f4e:	d502      	bpl.n	4f56 <char_permissions+0x6a>
    4f50:	4907      	ldr	r1, [pc, #28]	; (4f70 <char_permissions+0x84>)
    4f52:	430b      	orrs	r3, r1
    4f54:	b29b      	uxth	r3, r3
    4f56:	0601      	lsls	r1, r0, #24
    4f58:	d505      	bpl.n	4f66 <char_permissions+0x7a>
    4f5a:	00a4      	lsls	r4, r4, #2
    4f5c:	4323      	orrs	r3, r4
    4f5e:	b29c      	uxth	r4, r3
    4f60:	2384      	movs	r3, #132	; 0x84
    4f62:	019b      	lsls	r3, r3, #6
    4f64:	4323      	orrs	r3, r4
    4f66:	0390      	lsls	r0, r2, #14
    4f68:	4303      	orrs	r3, r0
    4f6a:	b298      	uxth	r0, r3
    4f6c:	bd70      	pop	{r4, r5, r6, pc}
    4f6e:	46c0      	nop			; (mov r8, r8)
    4f70:	00001004 	.word	0x00001004

00004f74 <presentation_format_define>:
    4f74:	b507      	push	{r0, r1, r2, lr}
    4f76:	466a      	mov	r2, sp
    4f78:	780b      	ldrb	r3, [r1, #0]
    4f7a:	7013      	strb	r3, [r2, #0]
    4f7c:	784b      	ldrb	r3, [r1, #1]
    4f7e:	7053      	strb	r3, [r2, #1]
    4f80:	884b      	ldrh	r3, [r1, #2]
    4f82:	7093      	strb	r3, [r2, #2]
    4f84:	0a1b      	lsrs	r3, r3, #8
    4f86:	70d3      	strb	r3, [r2, #3]
    4f88:	790b      	ldrb	r3, [r1, #4]
    4f8a:	7113      	strb	r3, [r2, #4]
    4f8c:	88cb      	ldrh	r3, [r1, #6]
    4f8e:	2107      	movs	r1, #7
    4f90:	7153      	strb	r3, [r2, #5]
    4f92:	0a1b      	lsrs	r3, r3, #8
    4f94:	7193      	strb	r3, [r2, #6]
    4f96:	4b01      	ldr	r3, [pc, #4]	; (4f9c <presentation_format_define+0x28>)
    4f98:	4798      	blx	r3
    4f9a:	bd0e      	pop	{r1, r2, r3, pc}
    4f9c:	00007ebd 	.word	0x00007ebd

00004fa0 <db_addATT>:
    4fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4fa2:	4c25      	ldr	r4, [pc, #148]	; (5038 <db_addATT+0x98>)
    4fa4:	1c1d      	adds	r5, r3, #0
    4fa6:	6823      	ldr	r3, [r4, #0]
    4fa8:	9001      	str	r0, [sp, #4]
    4faa:	26d3      	movs	r6, #211	; 0xd3
    4fac:	2b00      	cmp	r3, #0
    4fae:	d040      	beq.n	5032 <db_addATT+0x92>
    4fb0:	1c1e      	adds	r6, r3, #0
    4fb2:	3e0c      	subs	r6, #12
    4fb4:	6026      	str	r6, [r4, #0]
    4fb6:	2900      	cmp	r1, #0
    4fb8:	d005      	beq.n	4fc6 <db_addATT+0x26>
    4fba:	4f20      	ldr	r7, [pc, #128]	; (503c <db_addATT+0x9c>)
    4fbc:	46bc      	mov	ip, r7
    4fbe:	4660      	mov	r0, ip
    4fc0:	683f      	ldr	r7, [r7, #0]
    4fc2:	18bf      	adds	r7, r7, r2
    4fc4:	6007      	str	r7, [r0, #0]
    4fc6:	481d      	ldr	r0, [pc, #116]	; (503c <db_addATT+0x9c>)
    4fc8:	6807      	ldr	r7, [r0, #0]
    4fca:	4684      	mov	ip, r0
    4fcc:	42be      	cmp	r6, r7
    4fce:	d92a      	bls.n	5026 <db_addATT+0x86>
    4fd0:	4668      	mov	r0, sp
    4fd2:	8880      	ldrh	r0, [r0, #4]
    4fd4:	3b0c      	subs	r3, #12
    4fd6:	8018      	strh	r0, [r3, #0]
    4fd8:	6823      	ldr	r3, [r4, #0]
    4fda:	2900      	cmp	r1, #0
    4fdc:	d009      	beq.n	4ff2 <db_addATT+0x52>
    4fde:	2a00      	cmp	r2, #0
    4fe0:	d007      	beq.n	4ff2 <db_addATT+0x52>
    4fe2:	4660      	mov	r0, ip
    4fe4:	6800      	ldr	r0, [r0, #0]
    4fe6:	809a      	strh	r2, [r3, #4]
    4fe8:	1a80      	subs	r0, r0, r2
    4fea:	6098      	str	r0, [r3, #8]
    4fec:	4b14      	ldr	r3, [pc, #80]	; (5040 <db_addATT+0xa0>)
    4fee:	4798      	blx	r3
    4ff0:	e002      	b.n	4ff8 <db_addATT+0x58>
    4ff2:	2100      	movs	r1, #0
    4ff4:	809a      	strh	r2, [r3, #4]
    4ff6:	6099      	str	r1, [r3, #8]
    4ff8:	2300      	movs	r3, #0
    4ffa:	6822      	ldr	r2, [r4, #0]
    4ffc:	7093      	strb	r3, [r2, #2]
    4ffe:	072b      	lsls	r3, r5, #28
    5000:	d504      	bpl.n	500c <db_addATT+0x6c>
    5002:	2101      	movs	r1, #1
    5004:	6822      	ldr	r2, [r4, #0]
    5006:	7893      	ldrb	r3, [r2, #2]
    5008:	430b      	orrs	r3, r1
    500a:	7093      	strb	r3, [r2, #2]
    500c:	09ed      	lsrs	r5, r5, #7
    500e:	d004      	beq.n	501a <db_addATT+0x7a>
    5010:	2102      	movs	r1, #2
    5012:	6822      	ldr	r2, [r4, #0]
    5014:	7893      	ldrb	r3, [r2, #2]
    5016:	430b      	orrs	r3, r1
    5018:	7093      	strb	r3, [r2, #2]
    501a:	4a0a      	ldr	r2, [pc, #40]	; (5044 <db_addATT+0xa4>)
    501c:	2600      	movs	r6, #0
    501e:	6813      	ldr	r3, [r2, #0]
    5020:	3301      	adds	r3, #1
    5022:	6013      	str	r3, [r2, #0]
    5024:	e005      	b.n	5032 <db_addATT+0x92>
    5026:	6023      	str	r3, [r4, #0]
    5028:	2611      	movs	r6, #17
    502a:	2900      	cmp	r1, #0
    502c:	d001      	beq.n	5032 <db_addATT+0x92>
    502e:	1aba      	subs	r2, r7, r2
    5030:	6002      	str	r2, [r0, #0]
    5032:	1c30      	adds	r0, r6, #0
    5034:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5036:	46c0      	nop			; (mov r8, r8)
    5038:	200006ec 	.word	0x200006ec
    503c:	200006f0 	.word	0x200006f0
    5040:	000083fb 	.word	0x000083fb
    5044:	200006f4 	.word	0x200006f4

00005048 <user_description_define>:
    5048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    504a:	1c05      	adds	r5, r0, #0
    504c:	1c0e      	adds	r6, r1, #0
    504e:	1c14      	adds	r4, r2, #0
    5050:	1c1f      	adds	r7, r3, #0
    5052:	2a00      	cmp	r2, #0
    5054:	d015      	beq.n	5082 <user_description_define+0x3a>
    5056:	070a      	lsls	r2, r1, #28
    5058:	4b10      	ldr	r3, [pc, #64]	; (509c <user_description_define+0x54>)
    505a:	0fd2      	lsrs	r2, r2, #31
    505c:	03d2      	lsls	r2, r2, #15
    505e:	469c      	mov	ip, r3
    5060:	d004      	beq.n	506c <user_description_define+0x24>
    5062:	1c21      	adds	r1, r4, #0
    5064:	1c3a      	adds	r2, r7, #0
    5066:	1c33      	adds	r3, r6, #0
    5068:	47e0      	blx	ip
    506a:	e015      	b.n	5098 <user_description_define+0x50>
    506c:	1c11      	adds	r1, r2, #0
    506e:	1c33      	adds	r3, r6, #0
    5070:	47e0      	blx	ip
    5072:	2800      	cmp	r0, #0
    5074:	d110      	bne.n	5098 <user_description_define+0x50>
    5076:	1c28      	adds	r0, r5, #0
    5078:	1c39      	adds	r1, r7, #0
    507a:	1c22      	adds	r2, r4, #0
    507c:	4b08      	ldr	r3, [pc, #32]	; (50a0 <user_description_define+0x58>)
    507e:	4798      	blx	r3
    5080:	e00a      	b.n	5098 <user_description_define+0x50>
    5082:	4c08      	ldr	r4, [pc, #32]	; (50a4 <user_description_define+0x5c>)
    5084:	4908      	ldr	r1, [pc, #32]	; (50a8 <user_description_define+0x60>)
    5086:	22fb      	movs	r2, #251	; 0xfb
    5088:	4b08      	ldr	r3, [pc, #32]	; (50ac <user_description_define+0x64>)
    508a:	4809      	ldr	r0, [pc, #36]	; (50b0 <user_description_define+0x68>)
    508c:	6825      	ldr	r5, [r4, #0]
    508e:	47a8      	blx	r5
    5090:	6823      	ldr	r3, [r4, #0]
    5092:	4808      	ldr	r0, [pc, #32]	; (50b4 <user_description_define+0x6c>)
    5094:	4798      	blx	r3
    5096:	20cf      	movs	r0, #207	; 0xcf
    5098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    509a:	46c0      	nop			; (mov r8, r8)
    509c:	00004fa1 	.word	0x00004fa1
    50a0:	00007ebd 	.word	0x00007ebd
    50a4:	20000044 	.word	0x20000044
    50a8:	0000a672 	.word	0x0000a672
    50ac:	0000a65a 	.word	0x0000a65a
    50b0:	0000a1d9 	.word	0x0000a1d9
    50b4:	0000a355 	.word	0x0000a355

000050b8 <at_ble_read_authorize_reply.part.2>:
    50b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    50ba:	4b09      	ldr	r3, [pc, #36]	; (50e0 <at_ble_read_authorize_reply.part.2+0x28>)
    50bc:	1c05      	adds	r5, r0, #0
    50be:	1c08      	adds	r0, r1, #0
    50c0:	1c0c      	adds	r4, r1, #0
    50c2:	4798      	blx	r3
    50c4:	2800      	cmp	r0, #0
    50c6:	d009      	beq.n	50dc <at_ble_read_authorize_reply.part.2+0x24>
    50c8:	6882      	ldr	r2, [r0, #8]
    50ca:	2a00      	cmp	r2, #0
    50cc:	d006      	beq.n	50dc <at_ble_read_authorize_reply.part.2+0x24>
    50ce:	8883      	ldrh	r3, [r0, #4]
    50d0:	1c29      	adds	r1, r5, #0
    50d2:	9200      	str	r2, [sp, #0]
    50d4:	1c20      	adds	r0, r4, #0
    50d6:	2200      	movs	r2, #0
    50d8:	4c02      	ldr	r4, [pc, #8]	; (50e4 <at_ble_read_authorize_reply.part.2+0x2c>)
    50da:	47a0      	blx	r4
    50dc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    50de:	46c0      	nop			; (mov r8, r8)
    50e0:	00004e71 	.word	0x00004e71
    50e4:	0000781d 	.word	0x0000781d

000050e8 <internal_at_ble_service_define.part.1>:
    50e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    50ea:	b08b      	sub	sp, #44	; 0x2c
    50ec:	9304      	str	r3, [sp, #16]
    50ee:	ab10      	add	r3, sp, #64	; 0x40
    50f0:	2400      	movs	r4, #0
    50f2:	9202      	str	r2, [sp, #8]
    50f4:	cb04      	ldmia	r3!, {r2}
    50f6:	2210      	movs	r2, #16
    50f8:	1c05      	adds	r5, r0, #0
    50fa:	881b      	ldrh	r3, [r3, #0]
    50fc:	9106      	str	r1, [sp, #24]
    50fe:	9305      	str	r3, [sp, #20]
    5100:	ab12      	add	r3, sp, #72	; 0x48
    5102:	781b      	ldrb	r3, [r3, #0]
    5104:	1c21      	adds	r1, r4, #0
    5106:	9303      	str	r3, [sp, #12]
    5108:	4bbb      	ldr	r3, [pc, #748]	; (53f8 <internal_at_ble_service_define.part.1+0x310>)
    510a:	681e      	ldr	r6, [r3, #0]
    510c:	4bbb      	ldr	r3, [pc, #748]	; (53fc <internal_at_ble_service_define.part.1+0x314>)
    510e:	1db7      	adds	r7, r6, #6
    5110:	8072      	strh	r2, [r6, #2]
    5112:	8034      	strh	r4, [r6, #0]
    5114:	1c38      	adds	r0, r7, #0
    5116:	4798      	blx	r3
    5118:	4bb9      	ldr	r3, [pc, #740]	; (5400 <internal_at_ble_service_define.part.1+0x318>)
    511a:	7828      	ldrb	r0, [r5, #0]
    511c:	4798      	blx	r3
    511e:	4bb9      	ldr	r3, [pc, #740]	; (5404 <internal_at_ble_service_define.part.1+0x31c>)
    5120:	1c02      	adds	r2, r0, #0
    5122:	1c69      	adds	r1, r5, #1
    5124:	1c38      	adds	r0, r7, #0
    5126:	4798      	blx	r3
    5128:	2204      	movs	r2, #4
    512a:	782b      	ldrb	r3, [r5, #0]
    512c:	7174      	strb	r4, [r6, #5]
    512e:	011b      	lsls	r3, r3, #4
    5130:	4313      	orrs	r3, r2
    5132:	9a03      	ldr	r2, [sp, #12]
    5134:	9c02      	ldr	r4, [sp, #8]
    5136:	0192      	lsls	r2, r2, #6
    5138:	4313      	orrs	r3, r2
    513a:	7133      	strb	r3, [r6, #4]
    513c:	2316      	movs	r3, #22
    513e:	9a04      	ldr	r2, [sp, #16]
    5140:	3412      	adds	r4, #18
    5142:	4353      	muls	r3, r2
    5144:	9a02      	ldr	r2, [sp, #8]
    5146:	3312      	adds	r3, #18
    5148:	18d7      	adds	r7, r2, r3
    514a:	42bc      	cmp	r4, r7
    514c:	d00f      	beq.n	516e <internal_at_ble_service_define.part.1+0x86>
    514e:	4bae      	ldr	r3, [pc, #696]	; (5408 <internal_at_ble_service_define.part.1+0x320>)
    5150:	8821      	ldrh	r1, [r4, #0]
    5152:	9300      	str	r3, [sp, #0]
    5154:	230e      	movs	r3, #14
    5156:	aa06      	add	r2, sp, #24
    5158:	189b      	adds	r3, r3, r2
    515a:	9301      	str	r3, [sp, #4]
    515c:	4dab      	ldr	r5, [pc, #684]	; (540c <internal_at_ble_service_define.part.1+0x324>)
    515e:	1c30      	adds	r0, r6, #0
    5160:	2201      	movs	r2, #1
    5162:	2302      	movs	r3, #2
    5164:	47a8      	blx	r5
    5166:	3416      	adds	r4, #22
    5168:	1e05      	subs	r5, r0, #0
    516a:	d0ee      	beq.n	514a <internal_at_ble_service_define.part.1+0x62>
    516c:	e140      	b.n	53f0 <internal_at_ble_service_define.part.1+0x308>
    516e:	9f10      	ldr	r7, [sp, #64]	; 0x40
    5170:	2300      	movs	r3, #0
    5172:	3714      	adds	r7, #20
    5174:	1c3c      	adds	r4, r7, #0
    5176:	9302      	str	r3, [sp, #8]
    5178:	9b02      	ldr	r3, [sp, #8]
    517a:	9a05      	ldr	r2, [sp, #20]
    517c:	4293      	cmp	r3, r2
    517e:	db00      	blt.n	5182 <internal_at_ble_service_define.part.1+0x9a>
    5180:	e0b0      	b.n	52e4 <internal_at_ble_service_define.part.1+0x1fc>
    5182:	4ba3      	ldr	r3, [pc, #652]	; (5410 <internal_at_ble_service_define.part.1+0x328>)
    5184:	aa06      	add	r2, sp, #24
    5186:	9300      	str	r3, [sp, #0]
    5188:	230e      	movs	r3, #14
    518a:	189b      	adds	r3, r3, r2
    518c:	9301      	str	r3, [sp, #4]
    518e:	4d9f      	ldr	r5, [pc, #636]	; (540c <internal_at_ble_service_define.part.1+0x324>)
    5190:	1c30      	adds	r0, r6, #0
    5192:	2104      	movs	r1, #4
    5194:	2201      	movs	r2, #1
    5196:	2302      	movs	r3, #2
    5198:	47a8      	blx	r5
    519a:	1e05      	subs	r5, r0, #0
    519c:	d000      	beq.n	51a0 <internal_at_ble_service_define.part.1+0xb8>
    519e:	e127      	b.n	53f0 <internal_at_ble_service_define.part.1+0x308>
    51a0:	1c23      	adds	r3, r4, #0
    51a2:	3b12      	subs	r3, #18
    51a4:	781b      	ldrb	r3, [r3, #0]
    51a6:	7b25      	ldrb	r5, [r4, #12]
    51a8:	1c1a      	adds	r2, r3, #0
    51aa:	1c29      	adds	r1, r5, #0
    51ac:	9303      	str	r3, [sp, #12]
    51ae:	8820      	ldrh	r0, [r4, #0]
    51b0:	4b98      	ldr	r3, [pc, #608]	; (5414 <internal_at_ble_service_define.part.1+0x32c>)
    51b2:	4798      	blx	r3
    51b4:	072d      	lsls	r5, r5, #28
    51b6:	8963      	ldrh	r3, [r4, #10]
    51b8:	0fed      	lsrs	r5, r5, #31
    51ba:	03ed      	lsls	r5, r5, #15
    51bc:	431d      	orrs	r5, r3
    51be:	9007      	str	r0, [sp, #28]
    51c0:	4b8f      	ldr	r3, [pc, #572]	; (5400 <internal_at_ble_service_define.part.1+0x318>)
    51c2:	9803      	ldr	r0, [sp, #12]
    51c4:	4798      	blx	r3
    51c6:	1c22      	adds	r2, r4, #0
    51c8:	3a11      	subs	r2, #17
    51ca:	9200      	str	r2, [sp, #0]
    51cc:	3a03      	subs	r2, #3
    51ce:	1c03      	adds	r3, r0, #0
    51d0:	9201      	str	r2, [sp, #4]
    51d2:	1c29      	adds	r1, r5, #0
    51d4:	1c30      	adds	r0, r6, #0
    51d6:	4d8d      	ldr	r5, [pc, #564]	; (540c <internal_at_ble_service_define.part.1+0x324>)
    51d8:	9a07      	ldr	r2, [sp, #28]
    51da:	47a8      	blx	r5
    51dc:	1e05      	subs	r5, r0, #0
    51de:	d000      	beq.n	51e2 <internal_at_ble_service_define.part.1+0xfa>
    51e0:	e106      	b.n	53f0 <internal_at_ble_service_define.part.1+0x308>
    51e2:	22c0      	movs	r2, #192	; 0xc0
    51e4:	8823      	ldrh	r3, [r4, #0]
    51e6:	0052      	lsls	r2, r2, #1
    51e8:	4213      	tst	r3, r2
    51ea:	d104      	bne.n	51f6 <internal_at_ble_service_define.part.1+0x10e>
    51ec:	8aa3      	ldrh	r3, [r4, #20]
    51ee:	9303      	str	r3, [sp, #12]
    51f0:	2b00      	cmp	r3, #0
    51f2:	d115      	bne.n	5220 <internal_at_ble_service_define.part.1+0x138>
    51f4:	e032      	b.n	525c <internal_at_ble_service_define.part.1+0x174>
    51f6:	0619      	lsls	r1, r3, #24
    51f8:	0fc9      	lsrs	r1, r1, #31
    51fa:	05db      	lsls	r3, r3, #23
    51fc:	d501      	bpl.n	5202 <internal_at_ble_service_define.part.1+0x11a>
    51fe:	2302      	movs	r3, #2
    5200:	4319      	orrs	r1, r3
    5202:	4b85      	ldr	r3, [pc, #532]	; (5418 <internal_at_ble_service_define.part.1+0x330>)
    5204:	aa06      	add	r2, sp, #24
    5206:	9300      	str	r3, [sp, #0]
    5208:	230e      	movs	r3, #14
    520a:	189b      	adds	r3, r3, r2
    520c:	9301      	str	r3, [sp, #4]
    520e:	4d7f      	ldr	r5, [pc, #508]	; (540c <internal_at_ble_service_define.part.1+0x324>)
    5210:	0209      	lsls	r1, r1, #8
    5212:	1c30      	adds	r0, r6, #0
    5214:	2201      	movs	r2, #1
    5216:	2302      	movs	r3, #2
    5218:	47a8      	blx	r5
    521a:	1e05      	subs	r5, r0, #0
    521c:	d0e6      	beq.n	51ec <internal_at_ble_service_define.part.1+0x104>
    521e:	e0e7      	b.n	53f0 <internal_at_ble_service_define.part.1+0x308>
    5220:	2380      	movs	r3, #128	; 0x80
    5222:	8822      	ldrh	r2, [r4, #0]
    5224:	7f25      	ldrb	r5, [r4, #28]
    5226:	005b      	lsls	r3, r3, #1
    5228:	401a      	ands	r2, r3
    522a:	1c28      	adds	r0, r5, #0
    522c:	2101      	movs	r1, #1
    522e:	2a00      	cmp	r2, #0
    5230:	d000      	beq.n	5234 <internal_at_ble_service_define.part.1+0x14c>
    5232:	1c0a      	adds	r2, r1, #0
    5234:	4b79      	ldr	r3, [pc, #484]	; (541c <internal_at_ble_service_define.part.1+0x334>)
    5236:	4798      	blx	r3
    5238:	4b79      	ldr	r3, [pc, #484]	; (5420 <internal_at_ble_service_define.part.1+0x338>)
    523a:	072d      	lsls	r5, r5, #28
    523c:	9300      	str	r3, [sp, #0]
    523e:	1c23      	adds	r3, r4, #0
    5240:	0fed      	lsrs	r5, r5, #31
    5242:	03ed      	lsls	r5, r5, #15
    5244:	4328      	orrs	r0, r5
    5246:	3320      	adds	r3, #32
    5248:	b282      	uxth	r2, r0
    524a:	9301      	str	r3, [sp, #4]
    524c:	4d6f      	ldr	r5, [pc, #444]	; (540c <internal_at_ble_service_define.part.1+0x324>)
    524e:	1c30      	adds	r0, r6, #0
    5250:	9903      	ldr	r1, [sp, #12]
    5252:	2302      	movs	r3, #2
    5254:	47a8      	blx	r5
    5256:	1e05      	subs	r5, r0, #0
    5258:	d000      	beq.n	525c <internal_at_ble_service_define.part.1+0x174>
    525a:	e0c9      	b.n	53f0 <internal_at_ble_service_define.part.1+0x308>
    525c:	2101      	movs	r1, #1
    525e:	8823      	ldrh	r3, [r4, #0]
    5260:	420b      	tst	r3, r1
    5262:	d011      	beq.n	5288 <internal_at_ble_service_define.part.1+0x1a0>
    5264:	7fa0      	ldrb	r0, [r4, #30]
    5266:	4b6d      	ldr	r3, [pc, #436]	; (541c <internal_at_ble_service_define.part.1+0x334>)
    5268:	2200      	movs	r2, #0
    526a:	4798      	blx	r3
    526c:	4b6d      	ldr	r3, [pc, #436]	; (5424 <internal_at_ble_service_define.part.1+0x33c>)
    526e:	1c02      	adds	r2, r0, #0
    5270:	9300      	str	r3, [sp, #0]
    5272:	1c23      	adds	r3, r4, #0
    5274:	3324      	adds	r3, #36	; 0x24
    5276:	9301      	str	r3, [sp, #4]
    5278:	4d64      	ldr	r5, [pc, #400]	; (540c <internal_at_ble_service_define.part.1+0x324>)
    527a:	1c30      	adds	r0, r6, #0
    527c:	496a      	ldr	r1, [pc, #424]	; (5428 <internal_at_ble_service_define.part.1+0x340>)
    527e:	2302      	movs	r3, #2
    5280:	47a8      	blx	r5
    5282:	1e05      	subs	r5, r0, #0
    5284:	d000      	beq.n	5288 <internal_at_ble_service_define.part.1+0x1a0>
    5286:	e0b3      	b.n	53f0 <internal_at_ble_service_define.part.1+0x308>
    5288:	2330      	movs	r3, #48	; 0x30
    528a:	8822      	ldrh	r2, [r4, #0]
    528c:	421a      	tst	r2, r3
    528e:	d012      	beq.n	52b6 <internal_at_ble_service_define.part.1+0x1ce>
    5290:	2101      	movs	r1, #1
    5292:	7f60      	ldrb	r0, [r4, #29]
    5294:	1c0a      	adds	r2, r1, #0
    5296:	4b61      	ldr	r3, [pc, #388]	; (541c <internal_at_ble_service_define.part.1+0x334>)
    5298:	4798      	blx	r3
    529a:	4b64      	ldr	r3, [pc, #400]	; (542c <internal_at_ble_service_define.part.1+0x344>)
    529c:	1c02      	adds	r2, r0, #0
    529e:	9300      	str	r3, [sp, #0]
    52a0:	1c23      	adds	r3, r4, #0
    52a2:	3322      	adds	r3, #34	; 0x22
    52a4:	9301      	str	r3, [sp, #4]
    52a6:	4d59      	ldr	r5, [pc, #356]	; (540c <internal_at_ble_service_define.part.1+0x324>)
    52a8:	1c30      	adds	r0, r6, #0
    52aa:	495f      	ldr	r1, [pc, #380]	; (5428 <internal_at_ble_service_define.part.1+0x340>)
    52ac:	2302      	movs	r3, #2
    52ae:	47a8      	blx	r5
    52b0:	1e05      	subs	r5, r0, #0
    52b2:	d000      	beq.n	52b6 <internal_at_ble_service_define.part.1+0x1ce>
    52b4:	e09c      	b.n	53f0 <internal_at_ble_service_define.part.1+0x308>
    52b6:	69a3      	ldr	r3, [r4, #24]
    52b8:	2b00      	cmp	r3, #0
    52ba:	d00e      	beq.n	52da <internal_at_ble_service_define.part.1+0x1f2>
    52bc:	4b5c      	ldr	r3, [pc, #368]	; (5430 <internal_at_ble_service_define.part.1+0x348>)
    52be:	aa06      	add	r2, sp, #24
    52c0:	9300      	str	r3, [sp, #0]
    52c2:	230e      	movs	r3, #14
    52c4:	189b      	adds	r3, r3, r2
    52c6:	9301      	str	r3, [sp, #4]
    52c8:	4d50      	ldr	r5, [pc, #320]	; (540c <internal_at_ble_service_define.part.1+0x324>)
    52ca:	1c30      	adds	r0, r6, #0
    52cc:	2107      	movs	r1, #7
    52ce:	2201      	movs	r2, #1
    52d0:	2302      	movs	r3, #2
    52d2:	47a8      	blx	r5
    52d4:	1e05      	subs	r5, r0, #0
    52d6:	d000      	beq.n	52da <internal_at_ble_service_define.part.1+0x1f2>
    52d8:	e08a      	b.n	53f0 <internal_at_ble_service_define.part.1+0x308>
    52da:	9b02      	ldr	r3, [sp, #8]
    52dc:	343c      	adds	r4, #60	; 0x3c
    52de:	3301      	adds	r3, #1
    52e0:	9302      	str	r3, [sp, #8]
    52e2:	e749      	b.n	5178 <internal_at_ble_service_define.part.1+0x90>
    52e4:	1c30      	adds	r0, r6, #0
    52e6:	4b53      	ldr	r3, [pc, #332]	; (5434 <internal_at_ble_service_define.part.1+0x34c>)
    52e8:	4798      	blx	r3
    52ea:	1e05      	subs	r5, r0, #0
    52ec:	d000      	beq.n	52f0 <internal_at_ble_service_define.part.1+0x208>
    52ee:	e07f      	b.n	53f0 <internal_at_ble_service_define.part.1+0x308>
    52f0:	8833      	ldrh	r3, [r6, #0]
    52f2:	9a06      	ldr	r2, [sp, #24]
    52f4:	8013      	strh	r3, [r2, #0]
    52f6:	8836      	ldrh	r6, [r6, #0]
    52f8:	9b04      	ldr	r3, [sp, #16]
    52fa:	9a05      	ldr	r2, [sp, #20]
    52fc:	18f6      	adds	r6, r6, r3
    52fe:	b2b3      	uxth	r3, r6
    5300:	9302      	str	r3, [sp, #8]
    5302:	233c      	movs	r3, #60	; 0x3c
    5304:	4353      	muls	r3, r2
    5306:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5308:	3314      	adds	r3, #20
    530a:	18d3      	adds	r3, r2, r3
    530c:	9304      	str	r3, [sp, #16]
    530e:	9b04      	ldr	r3, [sp, #16]
    5310:	429f      	cmp	r7, r3
    5312:	d06d      	beq.n	53f0 <internal_at_ble_service_define.part.1+0x308>
    5314:	9b02      	ldr	r3, [sp, #8]
    5316:	1c9c      	adds	r4, r3, #2
    5318:	1c3b      	adds	r3, r7, #0
    531a:	b2a4      	uxth	r4, r4
    531c:	3b14      	subs	r3, #20
    531e:	801c      	strh	r4, [r3, #0]
    5320:	9303      	str	r3, [sp, #12]
    5322:	893b      	ldrh	r3, [r7, #8]
    5324:	2b00      	cmp	r3, #0
    5326:	d108      	bne.n	533a <internal_at_ble_service_define.part.1+0x252>
    5328:	23c0      	movs	r3, #192	; 0xc0
    532a:	883a      	ldrh	r2, [r7, #0]
    532c:	005b      	lsls	r3, r3, #1
    532e:	421a      	tst	r2, r3
    5330:	d01f      	beq.n	5372 <internal_at_ble_service_define.part.1+0x28a>
    5332:	9e02      	ldr	r6, [sp, #8]
    5334:	3603      	adds	r6, #3
    5336:	b2b4      	uxth	r4, r6
    5338:	e01b      	b.n	5372 <internal_at_ble_service_define.part.1+0x28a>
    533a:	7b3b      	ldrb	r3, [r7, #12]
    533c:	897a      	ldrh	r2, [r7, #10]
    533e:	0719      	lsls	r1, r3, #28
    5340:	0fc9      	lsrs	r1, r1, #31
    5342:	03c9      	lsls	r1, r1, #15
    5344:	d007      	beq.n	5356 <internal_at_ble_service_define.part.1+0x26e>
    5346:	6879      	ldr	r1, [r7, #4]
    5348:	2900      	cmp	r1, #0
    534a:	d100      	bne.n	534e <internal_at_ble_service_define.part.1+0x266>
    534c:	493a      	ldr	r1, [pc, #232]	; (5438 <internal_at_ble_service_define.part.1+0x350>)
    534e:	1c20      	adds	r0, r4, #0
    5350:	4e3a      	ldr	r6, [pc, #232]	; (543c <internal_at_ble_service_define.part.1+0x354>)
    5352:	47b0      	blx	r6
    5354:	e00a      	b.n	536c <internal_at_ble_service_define.part.1+0x284>
    5356:	1c20      	adds	r0, r4, #0
    5358:	4e38      	ldr	r6, [pc, #224]	; (543c <internal_at_ble_service_define.part.1+0x354>)
    535a:	47b0      	blx	r6
    535c:	2800      	cmp	r0, #0
    535e:	d146      	bne.n	53ee <internal_at_ble_service_define.part.1+0x306>
    5360:	9b03      	ldr	r3, [sp, #12]
    5362:	8939      	ldrh	r1, [r7, #8]
    5364:	8818      	ldrh	r0, [r3, #0]
    5366:	687a      	ldr	r2, [r7, #4]
    5368:	4b35      	ldr	r3, [pc, #212]	; (5440 <internal_at_ble_service_define.part.1+0x358>)
    536a:	4798      	blx	r3
    536c:	2800      	cmp	r0, #0
    536e:	d0db      	beq.n	5328 <internal_at_ble_service_define.part.1+0x240>
    5370:	e03d      	b.n	53ee <internal_at_ble_service_define.part.1+0x306>
    5372:	8abb      	ldrh	r3, [r7, #20]
    5374:	2b00      	cmp	r3, #0
    5376:	d00a      	beq.n	538e <internal_at_ble_service_define.part.1+0x2a6>
    5378:	3401      	adds	r4, #1
    537a:	b2a4      	uxth	r4, r4
    537c:	843c      	strh	r4, [r7, #32]
    537e:	7f39      	ldrb	r1, [r7, #28]
    5380:	8afb      	ldrh	r3, [r7, #22]
    5382:	1c20      	adds	r0, r4, #0
    5384:	693a      	ldr	r2, [r7, #16]
    5386:	4e2f      	ldr	r6, [pc, #188]	; (5444 <internal_at_ble_service_define.part.1+0x35c>)
    5388:	47b0      	blx	r6
    538a:	2800      	cmp	r0, #0
    538c:	d12f      	bne.n	53ee <internal_at_ble_service_define.part.1+0x306>
    538e:	883b      	ldrh	r3, [r7, #0]
    5390:	07db      	lsls	r3, r3, #31
    5392:	d50d      	bpl.n	53b0 <internal_at_ble_service_define.part.1+0x2c8>
    5394:	2200      	movs	r2, #0
    5396:	3401      	adds	r4, #1
    5398:	b2a4      	uxth	r4, r4
    539a:	a909      	add	r1, sp, #36	; 0x24
    539c:	84bc      	strh	r4, [r7, #36]	; 0x24
    539e:	7fbb      	ldrb	r3, [r7, #30]
    53a0:	1c20      	adds	r0, r4, #0
    53a2:	700a      	strb	r2, [r1, #0]
    53a4:	704a      	strb	r2, [r1, #1]
    53a6:	4e25      	ldr	r6, [pc, #148]	; (543c <internal_at_ble_service_define.part.1+0x354>)
    53a8:	3202      	adds	r2, #2
    53aa:	47b0      	blx	r6
    53ac:	2800      	cmp	r0, #0
    53ae:	d11e      	bne.n	53ee <internal_at_ble_service_define.part.1+0x306>
    53b0:	2330      	movs	r3, #48	; 0x30
    53b2:	883a      	ldrh	r2, [r7, #0]
    53b4:	421a      	tst	r2, r3
    53b6:	d00d      	beq.n	53d4 <internal_at_ble_service_define.part.1+0x2ec>
    53b8:	2200      	movs	r2, #0
    53ba:	3401      	adds	r4, #1
    53bc:	b2a4      	uxth	r4, r4
    53be:	a909      	add	r1, sp, #36	; 0x24
    53c0:	847c      	strh	r4, [r7, #34]	; 0x22
    53c2:	7f7b      	ldrb	r3, [r7, #29]
    53c4:	1c20      	adds	r0, r4, #0
    53c6:	700a      	strb	r2, [r1, #0]
    53c8:	704a      	strb	r2, [r1, #1]
    53ca:	4e1c      	ldr	r6, [pc, #112]	; (543c <internal_at_ble_service_define.part.1+0x354>)
    53cc:	3202      	adds	r2, #2
    53ce:	47b0      	blx	r6
    53d0:	2800      	cmp	r0, #0
    53d2:	d10c      	bne.n	53ee <internal_at_ble_service_define.part.1+0x306>
    53d4:	69b9      	ldr	r1, [r7, #24]
    53d6:	2900      	cmp	r1, #0
    53d8:	d006      	beq.n	53e8 <internal_at_ble_service_define.part.1+0x300>
    53da:	3401      	adds	r4, #1
    53dc:	b2a4      	uxth	r4, r4
    53de:	1c20      	adds	r0, r4, #0
    53e0:	4b19      	ldr	r3, [pc, #100]	; (5448 <internal_at_ble_service_define.part.1+0x360>)
    53e2:	4798      	blx	r3
    53e4:	2800      	cmp	r0, #0
    53e6:	d102      	bne.n	53ee <internal_at_ble_service_define.part.1+0x306>
    53e8:	373c      	adds	r7, #60	; 0x3c
    53ea:	9402      	str	r4, [sp, #8]
    53ec:	e78f      	b.n	530e <internal_at_ble_service_define.part.1+0x226>
    53ee:	1c05      	adds	r5, r0, #0
    53f0:	1c28      	adds	r0, r5, #0
    53f2:	b00b      	add	sp, #44	; 0x2c
    53f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53f6:	46c0      	nop			; (mov r8, r8)
    53f8:	200006f8 	.word	0x200006f8
    53fc:	0000840d 	.word	0x0000840d
    5400:	00004bc1 	.word	0x00004bc1
    5404:	000083fb 	.word	0x000083fb
    5408:	20000035 	.word	0x20000035
    540c:	00007e25 	.word	0x00007e25
    5410:	20000037 	.word	0x20000037
    5414:	00004eed 	.word	0x00004eed
    5418:	20000041 	.word	0x20000041
    541c:	00004eb1 	.word	0x00004eb1
    5420:	2000003f 	.word	0x2000003f
    5424:	2000003d 	.word	0x2000003d
    5428:	00008002 	.word	0x00008002
    542c:	20000039 	.word	0x20000039
    5430:	2000003b 	.word	0x2000003b
    5434:	00007d1d 	.word	0x00007d1d
    5438:	200006e8 	.word	0x200006e8
    543c:	00004fa1 	.word	0x00004fa1
    5440:	00007ebd 	.word	0x00007ebd
    5444:	00005049 	.word	0x00005049
    5448:	00004f75 	.word	0x00004f75

0000544c <db_init>:
    544c:	4b08      	ldr	r3, [pc, #32]	; (5470 <db_init+0x24>)
    544e:	4a09      	ldr	r2, [pc, #36]	; (5474 <db_init+0x28>)
    5450:	6018      	str	r0, [r3, #0]
    5452:	084b      	lsrs	r3, r1, #1
    5454:	6013      	str	r3, [r2, #0]
    5456:	4a08      	ldr	r2, [pc, #32]	; (5478 <db_init+0x2c>)
    5458:	18c3      	adds	r3, r0, r3
    545a:	6013      	str	r3, [r2, #0]
    545c:	4a07      	ldr	r2, [pc, #28]	; (547c <db_init+0x30>)
    545e:	1841      	adds	r1, r0, r1
    5460:	6013      	str	r3, [r2, #0]
    5462:	2303      	movs	r3, #3
    5464:	3103      	adds	r1, #3
    5466:	4399      	bics	r1, r3
    5468:	4b05      	ldr	r3, [pc, #20]	; (5480 <db_init+0x34>)
    546a:	3904      	subs	r1, #4
    546c:	6019      	str	r1, [r3, #0]
    546e:	4770      	bx	lr
    5470:	200006f8 	.word	0x200006f8
    5474:	200006e0 	.word	0x200006e0
    5478:	200006e4 	.word	0x200006e4
    547c:	200006f0 	.word	0x200006f0
    5480:	200006ec 	.word	0x200006ec

00005484 <at_ble_primary_service_define>:
    5484:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5486:	ac08      	add	r4, sp, #32
    5488:	cc40      	ldmia	r4!, {r6}
    548a:	1c05      	adds	r5, r0, #0
    548c:	8824      	ldrh	r4, [r4, #0]
    548e:	20cf      	movs	r0, #207	; 0xcf
    5490:	2d00      	cmp	r5, #0
    5492:	d00c      	beq.n	54ae <at_ble_primary_service_define+0x2a>
    5494:	2900      	cmp	r1, #0
    5496:	d00a      	beq.n	54ae <at_ble_primary_service_define+0x2a>
    5498:	2e00      	cmp	r6, #0
    549a:	d008      	beq.n	54ae <at_ble_primary_service_define+0x2a>
    549c:	2c00      	cmp	r4, #0
    549e:	d006      	beq.n	54ae <at_ble_primary_service_define+0x2a>
    54a0:	38ce      	subs	r0, #206	; 0xce
    54a2:	9401      	str	r4, [sp, #4]
    54a4:	9002      	str	r0, [sp, #8]
    54a6:	9600      	str	r6, [sp, #0]
    54a8:	1c28      	adds	r0, r5, #0
    54aa:	4c02      	ldr	r4, [pc, #8]	; (54b4 <at_ble_primary_service_define+0x30>)
    54ac:	47a0      	blx	r4
    54ae:	b004      	add	sp, #16
    54b0:	bd70      	pop	{r4, r5, r6, pc}
    54b2:	46c0      	nop			; (mov r8, r8)
    54b4:	000050e9 	.word	0x000050e9

000054b8 <at_ble_characteristic_value_set>:
    54b8:	b570      	push	{r4, r5, r6, lr}
    54ba:	4b0b      	ldr	r3, [pc, #44]	; (54e8 <at_ble_characteristic_value_set+0x30>)
    54bc:	1c06      	adds	r6, r0, #0
    54be:	1c0c      	adds	r4, r1, #0
    54c0:	1c15      	adds	r5, r2, #0
    54c2:	4798      	blx	r3
    54c4:	2800      	cmp	r0, #0
    54c6:	d008      	beq.n	54da <at_ble_characteristic_value_set+0x22>
    54c8:	6880      	ldr	r0, [r0, #8]
    54ca:	2800      	cmp	r0, #0
    54cc:	d005      	beq.n	54da <at_ble_characteristic_value_set+0x22>
    54ce:	1c21      	adds	r1, r4, #0
    54d0:	1c2a      	adds	r2, r5, #0
    54d2:	4b06      	ldr	r3, [pc, #24]	; (54ec <at_ble_characteristic_value_set+0x34>)
    54d4:	4798      	blx	r3
    54d6:	2000      	movs	r0, #0
    54d8:	e004      	b.n	54e4 <at_ble_characteristic_value_set+0x2c>
    54da:	1c30      	adds	r0, r6, #0
    54dc:	1c29      	adds	r1, r5, #0
    54de:	1c22      	adds	r2, r4, #0
    54e0:	4b03      	ldr	r3, [pc, #12]	; (54f0 <at_ble_characteristic_value_set+0x38>)
    54e2:	4798      	blx	r3
    54e4:	bd70      	pop	{r4, r5, r6, pc}
    54e6:	46c0      	nop			; (mov r8, r8)
    54e8:	00004e71 	.word	0x00004e71
    54ec:	000083fb 	.word	0x000083fb
    54f0:	00007ebd 	.word	0x00007ebd

000054f4 <at_ble_characteristic_value_get>:
    54f4:	b570      	push	{r4, r5, r6, lr}
    54f6:	4b0c      	ldr	r3, [pc, #48]	; (5528 <at_ble_characteristic_value_get+0x34>)
    54f8:	1c06      	adds	r6, r0, #0
    54fa:	1c0c      	adds	r4, r1, #0
    54fc:	1c15      	adds	r5, r2, #0
    54fe:	4798      	blx	r3
    5500:	2800      	cmp	r0, #0
    5502:	d00b      	beq.n	551c <at_ble_characteristic_value_get+0x28>
    5504:	6883      	ldr	r3, [r0, #8]
    5506:	2b00      	cmp	r3, #0
    5508:	d008      	beq.n	551c <at_ble_characteristic_value_get+0x28>
    550a:	8883      	ldrh	r3, [r0, #4]
    550c:	802b      	strh	r3, [r5, #0]
    550e:	8882      	ldrh	r2, [r0, #4]
    5510:	6881      	ldr	r1, [r0, #8]
    5512:	4b06      	ldr	r3, [pc, #24]	; (552c <at_ble_characteristic_value_get+0x38>)
    5514:	1c20      	adds	r0, r4, #0
    5516:	4798      	blx	r3
    5518:	2000      	movs	r0, #0
    551a:	e004      	b.n	5526 <at_ble_characteristic_value_get+0x32>
    551c:	1c30      	adds	r0, r6, #0
    551e:	1c29      	adds	r1, r5, #0
    5520:	1c22      	adds	r2, r4, #0
    5522:	4b03      	ldr	r3, [pc, #12]	; (5530 <at_ble_characteristic_value_get+0x3c>)
    5524:	4798      	blx	r3
    5526:	bd70      	pop	{r4, r5, r6, pc}
    5528:	00004e71 	.word	0x00004e71
    552c:	000083fb 	.word	0x000083fb
    5530:	00007f45 	.word	0x00007f45

00005534 <at_ble_write_authorize_reply>:
    5534:	b5f0      	push	{r4, r5, r6, r7, lr}
    5536:	b085      	sub	sp, #20
    5538:	1c04      	adds	r4, r0, #0
    553a:	9101      	str	r1, [sp, #4]
    553c:	2900      	cmp	r1, #0
    553e:	d129      	bne.n	5594 <at_ble_write_authorize_reply+0x60>
    5540:	8847      	ldrh	r7, [r0, #2]
    5542:	4b18      	ldr	r3, [pc, #96]	; (55a4 <at_ble_write_authorize_reply+0x70>)
    5544:	1c38      	adds	r0, r7, #0
    5546:	1c26      	adds	r6, r4, #0
    5548:	4798      	blx	r3
    554a:	3608      	adds	r6, #8
    554c:	2800      	cmp	r0, #0
    554e:	d009      	beq.n	5564 <at_ble_write_authorize_reply+0x30>
    5550:	6880      	ldr	r0, [r0, #8]
    5552:	2800      	cmp	r0, #0
    5554:	d006      	beq.n	5564 <at_ble_write_authorize_reply+0x30>
    5556:	88a3      	ldrh	r3, [r4, #4]
    5558:	88e2      	ldrh	r2, [r4, #6]
    555a:	18c0      	adds	r0, r0, r3
    555c:	1c31      	adds	r1, r6, #0
    555e:	4b12      	ldr	r3, [pc, #72]	; (55a8 <at_ble_write_authorize_reply+0x74>)
    5560:	4798      	blx	r3
    5562:	e017      	b.n	5594 <at_ble_write_authorize_reply+0x60>
    5564:	ab02      	add	r3, sp, #8
    5566:	1d9d      	adds	r5, r3, #6
    5568:	2300      	movs	r3, #0
    556a:	802b      	strh	r3, [r5, #0]
    556c:	4b0f      	ldr	r3, [pc, #60]	; (55ac <at_ble_write_authorize_reply+0x78>)
    556e:	1c2a      	adds	r2, r5, #0
    5570:	681b      	ldr	r3, [r3, #0]
    5572:	1c38      	adds	r0, r7, #0
    5574:	1c19      	adds	r1, r3, #0
    5576:	9300      	str	r3, [sp, #0]
    5578:	4b0d      	ldr	r3, [pc, #52]	; (55b0 <at_ble_write_authorize_reply+0x7c>)
    557a:	4798      	blx	r3
    557c:	9b00      	ldr	r3, [sp, #0]
    557e:	88a0      	ldrh	r0, [r4, #4]
    5580:	88e2      	ldrh	r2, [r4, #6]
    5582:	1818      	adds	r0, r3, r0
    5584:	1c31      	adds	r1, r6, #0
    5586:	4b08      	ldr	r3, [pc, #32]	; (55a8 <at_ble_write_authorize_reply+0x74>)
    5588:	4798      	blx	r3
    558a:	8860      	ldrh	r0, [r4, #2]
    558c:	882a      	ldrh	r2, [r5, #0]
    558e:	9900      	ldr	r1, [sp, #0]
    5590:	4b08      	ldr	r3, [pc, #32]	; (55b4 <at_ble_write_authorize_reply+0x80>)
    5592:	4798      	blx	r3
    5594:	8860      	ldrh	r0, [r4, #2]
    5596:	8821      	ldrh	r1, [r4, #0]
    5598:	9a01      	ldr	r2, [sp, #4]
    559a:	4b07      	ldr	r3, [pc, #28]	; (55b8 <at_ble_write_authorize_reply+0x84>)
    559c:	4798      	blx	r3
    559e:	2000      	movs	r0, #0
    55a0:	b005      	add	sp, #20
    55a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55a4:	00004e71 	.word	0x00004e71
    55a8:	000083fb 	.word	0x000083fb
    55ac:	0000a6a8 	.word	0x0000a6a8
    55b0:	000054f5 	.word	0x000054f5
    55b4:	000054b9 	.word	0x000054b9
    55b8:	00007891 	.word	0x00007891

000055bc <gatts_handle_read_req>:
    55bc:	b538      	push	{r3, r4, r5, lr}
    55be:	1c0c      	adds	r4, r1, #0
    55c0:	4b07      	ldr	r3, [pc, #28]	; (55e0 <gatts_handle_read_req+0x24>)
    55c2:	4798      	blx	r3
    55c4:	8865      	ldrh	r5, [r4, #2]
    55c6:	4b07      	ldr	r3, [pc, #28]	; (55e4 <gatts_handle_read_req+0x28>)
    55c8:	1c28      	adds	r0, r5, #0
    55ca:	4798      	blx	r3
    55cc:	7883      	ldrb	r3, [r0, #2]
    55ce:	2026      	movs	r0, #38	; 0x26
    55d0:	07db      	lsls	r3, r3, #31
    55d2:	d404      	bmi.n	55de <gatts_handle_read_req+0x22>
    55d4:	8820      	ldrh	r0, [r4, #0]
    55d6:	1c29      	adds	r1, r5, #0
    55d8:	4b03      	ldr	r3, [pc, #12]	; (55e8 <gatts_handle_read_req+0x2c>)
    55da:	4798      	blx	r3
    55dc:	203a      	movs	r0, #58	; 0x3a
    55de:	bd38      	pop	{r3, r4, r5, pc}
    55e0:	000077cd 	.word	0x000077cd
    55e4:	00004e71 	.word	0x00004e71
    55e8:	000050b9 	.word	0x000050b9

000055ec <gatts_handle_att_info_req>:
    55ec:	b538      	push	{r3, r4, r5, lr}
    55ee:	1c0d      	adds	r5, r1, #0
    55f0:	4b0a      	ldr	r3, [pc, #40]	; (561c <gatts_handle_att_info_req+0x30>)
    55f2:	1c14      	adds	r4, r2, #0
    55f4:	4798      	blx	r3
    55f6:	882d      	ldrh	r5, [r5, #0]
    55f8:	4b09      	ldr	r3, [pc, #36]	; (5620 <gatts_handle_att_info_req+0x34>)
    55fa:	1c28      	adds	r0, r5, #0
    55fc:	4798      	blx	r3
    55fe:	0a22      	lsrs	r2, r4, #8
    5600:	1c03      	adds	r3, r0, #0
    5602:	4c08      	ldr	r4, [pc, #32]	; (5624 <gatts_handle_att_info_req+0x38>)
    5604:	b291      	uxth	r1, r2
    5606:	2800      	cmp	r0, #0
    5608:	d003      	beq.n	5612 <gatts_handle_att_info_req+0x26>
    560a:	8882      	ldrh	r2, [r0, #4]
    560c:	2300      	movs	r3, #0
    560e:	1c28      	adds	r0, r5, #0
    5610:	e001      	b.n	5616 <gatts_handle_att_info_req+0x2a>
    5612:	1c28      	adds	r0, r5, #0
    5614:	2201      	movs	r2, #1
    5616:	47a0      	blx	r4
    5618:	203a      	movs	r0, #58	; 0x3a
    561a:	bd38      	pop	{r3, r4, r5, pc}
    561c:	00007811 	.word	0x00007811
    5620:	00004e71 	.word	0x00004e71
    5624:	000078d9 	.word	0x000078d9

00005628 <gatts_handle_write_req>:
    5628:	b510      	push	{r4, lr}
    562a:	1c14      	adds	r4, r2, #0
    562c:	4b07      	ldr	r3, [pc, #28]	; (564c <gatts_handle_write_req+0x24>)
    562e:	4798      	blx	r3
    5630:	4b07      	ldr	r3, [pc, #28]	; (5650 <gatts_handle_write_req+0x28>)
    5632:	8860      	ldrh	r0, [r4, #2]
    5634:	4798      	blx	r3
    5636:	2302      	movs	r3, #2
    5638:	7881      	ldrb	r1, [r0, #2]
    563a:	2022      	movs	r0, #34	; 0x22
    563c:	4019      	ands	r1, r3
    563e:	d103      	bne.n	5648 <gatts_handle_write_req+0x20>
    5640:	1c20      	adds	r0, r4, #0
    5642:	4b04      	ldr	r3, [pc, #16]	; (5654 <gatts_handle_write_req+0x2c>)
    5644:	4798      	blx	r3
    5646:	201f      	movs	r0, #31
    5648:	bd10      	pop	{r4, pc}
    564a:	46c0      	nop			; (mov r8, r8)
    564c:	000077d9 	.word	0x000077d9
    5650:	00004e71 	.word	0x00004e71
    5654:	00005535 	.word	0x00005535

00005658 <interface_event_timeout_timer_callback>:
    5658:	2201      	movs	r2, #1
    565a:	4b01      	ldr	r3, [pc, #4]	; (5660 <interface_event_timeout_timer_callback+0x8>)
    565c:	701a      	strb	r2, [r3, #0]
    565e:	4770      	bx	lr
    5660:	2000070a 	.word	0x2000070a

00005664 <interface_create_timer>:
    5664:	2200      	movs	r2, #0
    5666:	b510      	push	{r4, lr}
    5668:	230c      	movs	r3, #12
    566a:	4353      	muls	r3, r2
    566c:	4907      	ldr	r1, [pc, #28]	; (568c <interface_create_timer+0x28>)
    566e:	585c      	ldr	r4, [r3, r1]
    5670:	2c00      	cmp	r4, #0
    5672:	d106      	bne.n	5682 <interface_create_timer+0x1e>
    5674:	2201      	movs	r2, #1
    5676:	505a      	str	r2, [r3, r1]
    5678:	18cb      	adds	r3, r1, r3
    567a:	6098      	str	r0, [r3, #8]
    567c:	605c      	str	r4, [r3, #4]
    567e:	1c18      	adds	r0, r3, #0
    5680:	e003      	b.n	568a <interface_create_timer+0x26>
    5682:	3201      	adds	r2, #1
    5684:	2a04      	cmp	r2, #4
    5686:	d1ef      	bne.n	5668 <interface_create_timer+0x4>
    5688:	2000      	movs	r0, #0
    568a:	bd10      	pop	{r4, pc}
    568c:	2000070c 	.word	0x2000070c

00005690 <interface_timer_callback>:
    5690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5692:	4f17      	ldr	r7, [pc, #92]	; (56f0 <interface_timer_callback+0x60>)
    5694:	4e17      	ldr	r6, [pc, #92]	; (56f4 <interface_timer_callback+0x64>)
    5696:	683b      	ldr	r3, [r7, #0]
    5698:	6830      	ldr	r0, [r6, #0]
    569a:	689b      	ldr	r3, [r3, #8]
    569c:	2101      	movs	r1, #1
    569e:	4798      	blx	r3
    56a0:	2300      	movs	r3, #0
    56a2:	4d15      	ldr	r5, [pc, #84]	; (56f8 <interface_timer_callback+0x68>)
    56a4:	702b      	strb	r3, [r5, #0]
    56a6:	4b15      	ldr	r3, [pc, #84]	; (56fc <interface_timer_callback+0x6c>)
    56a8:	1d1c      	adds	r4, r3, #4
    56aa:	3334      	adds	r3, #52	; 0x34
    56ac:	9301      	str	r3, [sp, #4]
    56ae:	1f23      	subs	r3, r4, #4
    56b0:	681b      	ldr	r3, [r3, #0]
    56b2:	2b01      	cmp	r3, #1
    56b4:	d10f      	bne.n	56d6 <interface_timer_callback+0x46>
    56b6:	6823      	ldr	r3, [r4, #0]
    56b8:	2b00      	cmp	r3, #0
    56ba:	d00c      	beq.n	56d6 <interface_timer_callback+0x46>
    56bc:	3b01      	subs	r3, #1
    56be:	6023      	str	r3, [r4, #0]
    56c0:	2b00      	cmp	r3, #0
    56c2:	d103      	bne.n	56cc <interface_timer_callback+0x3c>
    56c4:	6863      	ldr	r3, [r4, #4]
    56c6:	2b00      	cmp	r3, #0
    56c8:	d000      	beq.n	56cc <interface_timer_callback+0x3c>
    56ca:	4798      	blx	r3
    56cc:	6823      	ldr	r3, [r4, #0]
    56ce:	2b00      	cmp	r3, #0
    56d0:	d001      	beq.n	56d6 <interface_timer_callback+0x46>
    56d2:	2301      	movs	r3, #1
    56d4:	702b      	strb	r3, [r5, #0]
    56d6:	9b01      	ldr	r3, [sp, #4]
    56d8:	340c      	adds	r4, #12
    56da:	429c      	cmp	r4, r3
    56dc:	d1e7      	bne.n	56ae <interface_timer_callback+0x1e>
    56de:	782b      	ldrb	r3, [r5, #0]
    56e0:	2b00      	cmp	r3, #0
    56e2:	d103      	bne.n	56ec <interface_timer_callback+0x5c>
    56e4:	683b      	ldr	r3, [r7, #0]
    56e6:	6830      	ldr	r0, [r6, #0]
    56e8:	68db      	ldr	r3, [r3, #12]
    56ea:	4798      	blx	r3
    56ec:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    56ee:	46c0      	nop			; (mov r8, r8)
    56f0:	20000768 	.word	0x20000768
    56f4:	20000978 	.word	0x20000978
    56f8:	2000096e 	.word	0x2000096e
    56fc:	2000070c 	.word	0x2000070c

00005700 <interface_start_timer.part.1>:
    5700:	b508      	push	{r3, lr}
    5702:	4b05      	ldr	r3, [pc, #20]	; (5718 <interface_start_timer.part.1+0x18>)
    5704:	4a05      	ldr	r2, [pc, #20]	; (571c <interface_start_timer.part.1+0x1c>)
    5706:	681b      	ldr	r3, [r3, #0]
    5708:	6810      	ldr	r0, [r2, #0]
    570a:	689b      	ldr	r3, [r3, #8]
    570c:	2101      	movs	r1, #1
    570e:	4798      	blx	r3
    5710:	2201      	movs	r2, #1
    5712:	4b03      	ldr	r3, [pc, #12]	; (5720 <interface_start_timer.part.1+0x20>)
    5714:	701a      	strb	r2, [r3, #0]
    5716:	bd08      	pop	{r3, pc}
    5718:	20000768 	.word	0x20000768
    571c:	20000978 	.word	0x20000978
    5720:	2000096e 	.word	0x2000096e

00005724 <interface_stop_timer>:
    5724:	b508      	push	{r3, lr}
    5726:	2300      	movs	r3, #0
    5728:	4a0c      	ldr	r2, [pc, #48]	; (575c <interface_stop_timer+0x38>)
    572a:	6043      	str	r3, [r0, #4]
    572c:	7013      	strb	r3, [r2, #0]
    572e:	490c      	ldr	r1, [pc, #48]	; (5760 <interface_stop_timer+0x3c>)
    5730:	5858      	ldr	r0, [r3, r1]
    5732:	2801      	cmp	r0, #1
    5734:	d105      	bne.n	5742 <interface_stop_timer+0x1e>
    5736:	18c9      	adds	r1, r1, r3
    5738:	6849      	ldr	r1, [r1, #4]
    573a:	2900      	cmp	r1, #0
    573c:	d001      	beq.n	5742 <interface_stop_timer+0x1e>
    573e:	7010      	strb	r0, [r2, #0]
    5740:	e002      	b.n	5748 <interface_stop_timer+0x24>
    5742:	330c      	adds	r3, #12
    5744:	2b30      	cmp	r3, #48	; 0x30
    5746:	d1f2      	bne.n	572e <interface_stop_timer+0xa>
    5748:	7813      	ldrb	r3, [r2, #0]
    574a:	2b00      	cmp	r3, #0
    574c:	d105      	bne.n	575a <interface_stop_timer+0x36>
    574e:	4b05      	ldr	r3, [pc, #20]	; (5764 <interface_stop_timer+0x40>)
    5750:	4a05      	ldr	r2, [pc, #20]	; (5768 <interface_stop_timer+0x44>)
    5752:	681b      	ldr	r3, [r3, #0]
    5754:	6810      	ldr	r0, [r2, #0]
    5756:	68db      	ldr	r3, [r3, #12]
    5758:	4798      	blx	r3
    575a:	bd08      	pop	{r3, pc}
    575c:	2000096e 	.word	0x2000096e
    5760:	2000070c 	.word	0x2000070c
    5764:	20000768 	.word	0x20000768
    5768:	20000978 	.word	0x20000978

0000576c <interface_check_and_assert_ext_wakeup>:
    576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    576e:	4e11      	ldr	r6, [pc, #68]	; (57b4 <interface_check_and_assert_ext_wakeup+0x48>)
    5770:	1c07      	adds	r7, r0, #0
    5772:	7833      	ldrb	r3, [r6, #0]
    5774:	4c10      	ldr	r4, [pc, #64]	; (57b8 <interface_check_and_assert_ext_wakeup+0x4c>)
    5776:	2b00      	cmp	r3, #0
    5778:	d10e      	bne.n	5798 <interface_check_and_assert_ext_wakeup+0x2c>
    577a:	2001      	movs	r0, #1
    577c:	4d0f      	ldr	r5, [pc, #60]	; (57bc <interface_check_and_assert_ext_wakeup+0x50>)
    577e:	1c01      	adds	r1, r0, #0
    5780:	682b      	ldr	r3, [r5, #0]
    5782:	695b      	ldr	r3, [r3, #20]
    5784:	4798      	blx	r3
    5786:	2301      	movs	r3, #1
    5788:	7033      	strb	r3, [r6, #0]
    578a:	429f      	cmp	r7, r3
    578c:	d107      	bne.n	579e <interface_check_and_assert_ext_wakeup+0x32>
    578e:	682b      	ldr	r3, [r5, #0]
    5790:	2005      	movs	r0, #5
    5792:	691b      	ldr	r3, [r3, #16]
    5794:	4798      	blx	r3
    5796:	e002      	b.n	579e <interface_check_and_assert_ext_wakeup+0x32>
    5798:	6820      	ldr	r0, [r4, #0]
    579a:	4b09      	ldr	r3, [pc, #36]	; (57c0 <interface_check_and_assert_ext_wakeup+0x54>)
    579c:	4798      	blx	r3
    579e:	2205      	movs	r2, #5
    57a0:	6823      	ldr	r3, [r4, #0]
    57a2:	605a      	str	r2, [r3, #4]
    57a4:	4b07      	ldr	r3, [pc, #28]	; (57c4 <interface_check_and_assert_ext_wakeup+0x58>)
    57a6:	781b      	ldrb	r3, [r3, #0]
    57a8:	2b00      	cmp	r3, #0
    57aa:	d101      	bne.n	57b0 <interface_check_and_assert_ext_wakeup+0x44>
    57ac:	4b06      	ldr	r3, [pc, #24]	; (57c8 <interface_check_and_assert_ext_wakeup+0x5c>)
    57ae:	4798      	blx	r3
    57b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57b2:	46c0      	nop			; (mov r8, r8)
    57b4:	20000758 	.word	0x20000758
    57b8:	20000970 	.word	0x20000970
    57bc:	20000768 	.word	0x20000768
    57c0:	00005725 	.word	0x00005725
    57c4:	2000096e 	.word	0x2000096e
    57c8:	00005701 	.word	0x00005701

000057cc <interface_recv_async>:
    57cc:	b538      	push	{r3, r4, r5, lr}
    57ce:	4b11      	ldr	r3, [pc, #68]	; (5814 <interface_recv_async+0x48>)
    57d0:	1c04      	adds	r4, r0, #0
    57d2:	2002      	movs	r0, #2
    57d4:	4798      	blx	r3
    57d6:	4b10      	ldr	r3, [pc, #64]	; (5818 <interface_recv_async+0x4c>)
    57d8:	781a      	ldrb	r2, [r3, #0]
    57da:	2a02      	cmp	r2, #2
    57dc:	d10d      	bne.n	57fa <interface_recv_async+0x2e>
    57de:	4d0f      	ldr	r5, [pc, #60]	; (581c <interface_recv_async+0x50>)
    57e0:	4b0f      	ldr	r3, [pc, #60]	; (5820 <interface_recv_async+0x54>)
    57e2:	1c28      	adds	r0, r5, #0
    57e4:	1c21      	adds	r1, r4, #0
    57e6:	4798      	blx	r3
    57e8:	1c28      	adds	r0, r5, #0
    57ea:	4b0e      	ldr	r3, [pc, #56]	; (5824 <interface_recv_async+0x58>)
    57ec:	4798      	blx	r3
    57ee:	2800      	cmp	r0, #0
    57f0:	d009      	beq.n	5806 <interface_recv_async+0x3a>
    57f2:	2201      	movs	r2, #1
    57f4:	4b0c      	ldr	r3, [pc, #48]	; (5828 <interface_recv_async+0x5c>)
    57f6:	701a      	strb	r2, [r3, #0]
    57f8:	e00a      	b.n	5810 <interface_recv_async+0x44>
    57fa:	2a00      	cmp	r2, #0
    57fc:	d108      	bne.n	5810 <interface_recv_async+0x44>
    57fe:	2c5a      	cmp	r4, #90	; 0x5a
    5800:	d101      	bne.n	5806 <interface_recv_async+0x3a>
    5802:	3201      	adds	r2, #1
    5804:	701a      	strb	r2, [r3, #0]
    5806:	4b09      	ldr	r3, [pc, #36]	; (582c <interface_recv_async+0x60>)
    5808:	4809      	ldr	r0, [pc, #36]	; (5830 <interface_recv_async+0x64>)
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	69db      	ldr	r3, [r3, #28]
    580e:	4798      	blx	r3
    5810:	bd38      	pop	{r3, r4, r5, pc}
    5812:	46c0      	nop			; (mov r8, r8)
    5814:	0000576d 	.word	0x0000576d
    5818:	20000dfc 	.word	0x20000dfc
    581c:	20000744 	.word	0x20000744
    5820:	000081c9 	.word	0x000081c9
    5824:	00008193 	.word	0x00008193
    5828:	2000097c 	.word	0x2000097c
    582c:	20000768 	.word	0x20000768
    5830:	000057cd 	.word	0x000057cd

00005834 <interface_bus_activity_timer_callback>:
    5834:	b510      	push	{r4, lr}
    5836:	4b0e      	ldr	r3, [pc, #56]	; (5870 <interface_bus_activity_timer_callback+0x3c>)
    5838:	781b      	ldrb	r3, [r3, #0]
    583a:	2b01      	cmp	r3, #1
    583c:	d10d      	bne.n	585a <interface_bus_activity_timer_callback+0x26>
    583e:	4c0d      	ldr	r4, [pc, #52]	; (5874 <interface_bus_activity_timer_callback+0x40>)
    5840:	4b0d      	ldr	r3, [pc, #52]	; (5878 <interface_bus_activity_timer_callback+0x44>)
    5842:	6820      	ldr	r0, [r4, #0]
    5844:	4798      	blx	r3
    5846:	2205      	movs	r2, #5
    5848:	6823      	ldr	r3, [r4, #0]
    584a:	605a      	str	r2, [r3, #4]
    584c:	4b0b      	ldr	r3, [pc, #44]	; (587c <interface_bus_activity_timer_callback+0x48>)
    584e:	781b      	ldrb	r3, [r3, #0]
    5850:	2b00      	cmp	r3, #0
    5852:	d10b      	bne.n	586c <interface_bus_activity_timer_callback+0x38>
    5854:	4b0a      	ldr	r3, [pc, #40]	; (5880 <interface_bus_activity_timer_callback+0x4c>)
    5856:	4798      	blx	r3
    5858:	e008      	b.n	586c <interface_bus_activity_timer_callback+0x38>
    585a:	4b0a      	ldr	r3, [pc, #40]	; (5884 <interface_bus_activity_timer_callback+0x50>)
    585c:	2001      	movs	r0, #1
    585e:	681b      	ldr	r3, [r3, #0]
    5860:	2100      	movs	r1, #0
    5862:	695b      	ldr	r3, [r3, #20]
    5864:	4798      	blx	r3
    5866:	2200      	movs	r2, #0
    5868:	4b07      	ldr	r3, [pc, #28]	; (5888 <interface_bus_activity_timer_callback+0x54>)
    586a:	701a      	strb	r2, [r3, #0]
    586c:	bd10      	pop	{r4, pc}
    586e:	46c0      	nop			; (mov r8, r8)
    5870:	20000760 	.word	0x20000760
    5874:	20000970 	.word	0x20000970
    5878:	00005725 	.word	0x00005725
    587c:	2000096e 	.word	0x2000096e
    5880:	00005701 	.word	0x00005701
    5884:	20000768 	.word	0x20000768
    5888:	20000758 	.word	0x20000758

0000588c <interface_handle_received_data>:
    588c:	2300      	movs	r3, #0
    588e:	b5f0      	push	{r4, r5, r6, r7, lr}
    5890:	b087      	sub	sp, #28
    5892:	9300      	str	r3, [sp, #0]
    5894:	9301      	str	r3, [sp, #4]
    5896:	4c91      	ldr	r4, [pc, #580]	; (5adc <interface_handle_received_data+0x250>)
    5898:	4b91      	ldr	r3, [pc, #580]	; (5ae0 <interface_handle_received_data+0x254>)
    589a:	1c20      	adds	r0, r4, #0
    589c:	4798      	blx	r3
    589e:	1e07      	subs	r7, r0, #0
    58a0:	d000      	beq.n	58a4 <interface_handle_received_data+0x18>
    58a2:	e118      	b.n	5ad6 <interface_handle_received_data+0x24a>
    58a4:	4d8f      	ldr	r5, [pc, #572]	; (5ae4 <interface_handle_received_data+0x258>)
    58a6:	682e      	ldr	r6, [r5, #0]
    58a8:	2e01      	cmp	r6, #1
    58aa:	d024      	beq.n	58f6 <interface_handle_received_data+0x6a>
    58ac:	2e00      	cmp	r6, #0
    58ae:	d003      	beq.n	58b8 <interface_handle_received_data+0x2c>
    58b0:	2e02      	cmp	r6, #2
    58b2:	d100      	bne.n	58b6 <interface_handle_received_data+0x2a>
    58b4:	e0af      	b.n	5a16 <interface_handle_received_data+0x18a>
    58b6:	e7ee      	b.n	5896 <interface_handle_received_data+0xa>
    58b8:	ab04      	add	r3, sp, #16
    58ba:	1ddf      	adds	r7, r3, #7
    58bc:	1c20      	adds	r0, r4, #0
    58be:	4b8a      	ldr	r3, [pc, #552]	; (5ae8 <interface_handle_received_data+0x25c>)
    58c0:	1c39      	adds	r1, r7, #0
    58c2:	4798      	blx	r3
    58c4:	4b89      	ldr	r3, [pc, #548]	; (5aec <interface_handle_received_data+0x260>)
    58c6:	781a      	ldrb	r2, [r3, #0]
    58c8:	2a01      	cmp	r2, #1
    58ca:	d105      	bne.n	58d8 <interface_handle_received_data+0x4c>
    58cc:	701e      	strb	r6, [r3, #0]
    58ce:	4b88      	ldr	r3, [pc, #544]	; (5af0 <interface_handle_received_data+0x264>)
    58d0:	4888      	ldr	r0, [pc, #544]	; (5af4 <interface_handle_received_data+0x268>)
    58d2:	681b      	ldr	r3, [r3, #0]
    58d4:	69db      	ldr	r3, [r3, #28]
    58d6:	4798      	blx	r3
    58d8:	783b      	ldrb	r3, [r7, #0]
    58da:	2b05      	cmp	r3, #5
    58dc:	d101      	bne.n	58e2 <interface_handle_received_data+0x56>
    58de:	3b04      	subs	r3, #4
    58e0:	e002      	b.n	58e8 <interface_handle_received_data+0x5c>
    58e2:	2b04      	cmp	r3, #4
    58e4:	d101      	bne.n	58ea <interface_handle_received_data+0x5e>
    58e6:	3b02      	subs	r3, #2
    58e8:	602b      	str	r3, [r5, #0]
    58ea:	2201      	movs	r2, #1
    58ec:	4b82      	ldr	r3, [pc, #520]	; (5af8 <interface_handle_received_data+0x26c>)
    58ee:	601a      	str	r2, [r3, #0]
    58f0:	2200      	movs	r2, #0
    58f2:	4b82      	ldr	r3, [pc, #520]	; (5afc <interface_handle_received_data+0x270>)
    58f4:	e0be      	b.n	5a74 <interface_handle_received_data+0x1e8>
    58f6:	4e80      	ldr	r6, [pc, #512]	; (5af8 <interface_handle_received_data+0x26c>)
    58f8:	6833      	ldr	r3, [r6, #0]
    58fa:	2b01      	cmp	r3, #1
    58fc:	d002      	beq.n	5904 <interface_handle_received_data+0x78>
    58fe:	2b02      	cmp	r3, #2
    5900:	d03a      	beq.n	5978 <interface_handle_received_data+0xec>
    5902:	e7c8      	b.n	5896 <interface_handle_received_data+0xa>
    5904:	ab04      	add	r3, sp, #16
    5906:	1dd9      	adds	r1, r3, #7
    5908:	1c20      	adds	r0, r4, #0
    590a:	4b77      	ldr	r3, [pc, #476]	; (5ae8 <interface_handle_received_data+0x25c>)
    590c:	4798      	blx	r3
    590e:	4b77      	ldr	r3, [pc, #476]	; (5aec <interface_handle_received_data+0x260>)
    5910:	781a      	ldrb	r2, [r3, #0]
    5912:	2a01      	cmp	r2, #1
    5914:	d105      	bne.n	5922 <interface_handle_received_data+0x96>
    5916:	701f      	strb	r7, [r3, #0]
    5918:	4b75      	ldr	r3, [pc, #468]	; (5af0 <interface_handle_received_data+0x264>)
    591a:	4876      	ldr	r0, [pc, #472]	; (5af4 <interface_handle_received_data+0x268>)
    591c:	681b      	ldr	r3, [r3, #0]
    591e:	69db      	ldr	r3, [r3, #28]
    5920:	4798      	blx	r3
    5922:	4b76      	ldr	r3, [pc, #472]	; (5afc <interface_handle_received_data+0x270>)
    5924:	a804      	add	r0, sp, #16
    5926:	8819      	ldrh	r1, [r3, #0]
    5928:	79c0      	ldrb	r0, [r0, #7]
    592a:	1c4a      	adds	r2, r1, #1
    592c:	b292      	uxth	r2, r2
    592e:	801a      	strh	r2, [r3, #0]
    5930:	4b73      	ldr	r3, [pc, #460]	; (5b00 <interface_handle_received_data+0x274>)
    5932:	5458      	strb	r0, [r3, r1]
    5934:	2a08      	cmp	r2, #8
    5936:	d1ae      	bne.n	5896 <interface_handle_received_data+0xa>
    5938:	79df      	ldrb	r7, [r3, #7]
    593a:	7819      	ldrb	r1, [r3, #0]
    593c:	7858      	ldrb	r0, [r3, #1]
    593e:	791a      	ldrb	r2, [r3, #4]
    5940:	795c      	ldrb	r4, [r3, #5]
    5942:	799b      	ldrb	r3, [r3, #6]
    5944:	023f      	lsls	r7, r7, #8
    5946:	433b      	orrs	r3, r7
    5948:	9300      	str	r3, [sp, #0]
    594a:	d113      	bne.n	5974 <interface_handle_received_data+0xe8>
    594c:	0206      	lsls	r6, r0, #8
    594e:	0224      	lsls	r4, r4, #8
    5950:	430e      	orrs	r6, r1
    5952:	4314      	orrs	r4, r2
    5954:	1c30      	adds	r0, r6, #0
    5956:	1c1a      	adds	r2, r3, #0
    5958:	1c21      	adds	r1, r4, #0
    595a:	4b6a      	ldr	r3, [pc, #424]	; (5b04 <interface_handle_received_data+0x278>)
    595c:	4798      	blx	r3
    595e:	2800      	cmp	r0, #0
    5960:	d105      	bne.n	596e <interface_handle_received_data+0xe2>
    5962:	9a00      	ldr	r2, [sp, #0]
    5964:	1c21      	adds	r1, r4, #0
    5966:	1c30      	adds	r0, r6, #0
    5968:	1c13      	adds	r3, r2, #0
    596a:	4c67      	ldr	r4, [pc, #412]	; (5b08 <interface_handle_received_data+0x27c>)
    596c:	47a0      	blx	r4
    596e:	2300      	movs	r3, #0
    5970:	602b      	str	r3, [r5, #0]
    5972:	e0ae      	b.n	5ad2 <interface_handle_received_data+0x246>
    5974:	2302      	movs	r3, #2
    5976:	e070      	b.n	5a5a <interface_handle_received_data+0x1ce>
    5978:	4b61      	ldr	r3, [pc, #388]	; (5b00 <interface_handle_received_data+0x274>)
    597a:	1c20      	adds	r0, r4, #0
    597c:	781a      	ldrb	r2, [r3, #0]
    597e:	785d      	ldrb	r5, [r3, #1]
    5980:	1c16      	adds	r6, r2, #0
    5982:	791a      	ldrb	r2, [r3, #4]
    5984:	9202      	str	r2, [sp, #8]
    5986:	795a      	ldrb	r2, [r3, #5]
    5988:	9203      	str	r2, [sp, #12]
    598a:	79da      	ldrb	r2, [r3, #7]
    598c:	799b      	ldrb	r3, [r3, #6]
    598e:	0212      	lsls	r2, r2, #8
    5990:	4313      	orrs	r3, r2
    5992:	9300      	str	r3, [sp, #0]
    5994:	ab04      	add	r3, sp, #16
    5996:	1dd9      	adds	r1, r3, #7
    5998:	4b53      	ldr	r3, [pc, #332]	; (5ae8 <interface_handle_received_data+0x25c>)
    599a:	4798      	blx	r3
    599c:	4b53      	ldr	r3, [pc, #332]	; (5aec <interface_handle_received_data+0x260>)
    599e:	781a      	ldrb	r2, [r3, #0]
    59a0:	2a01      	cmp	r2, #1
    59a2:	d105      	bne.n	59b0 <interface_handle_received_data+0x124>
    59a4:	701f      	strb	r7, [r3, #0]
    59a6:	4b52      	ldr	r3, [pc, #328]	; (5af0 <interface_handle_received_data+0x264>)
    59a8:	4852      	ldr	r0, [pc, #328]	; (5af4 <interface_handle_received_data+0x268>)
    59aa:	681b      	ldr	r3, [r3, #0]
    59ac:	69db      	ldr	r3, [r3, #28]
    59ae:	4798      	blx	r3
    59b0:	4956      	ldr	r1, [pc, #344]	; (5b0c <interface_handle_received_data+0x280>)
    59b2:	aa04      	add	r2, sp, #16
    59b4:	3207      	adds	r2, #7
    59b6:	880b      	ldrh	r3, [r1, #0]
    59b8:	7812      	ldrb	r2, [r2, #0]
    59ba:	4f55      	ldr	r7, [pc, #340]	; (5b10 <interface_handle_received_data+0x284>)
    59bc:	1c58      	adds	r0, r3, #1
    59be:	54fa      	strb	r2, [r7, r3]
    59c0:	4a54      	ldr	r2, [pc, #336]	; (5b14 <interface_handle_received_data+0x288>)
    59c2:	9c00      	ldr	r4, [sp, #0]
    59c4:	8812      	ldrh	r2, [r2, #0]
    59c6:	b280      	uxth	r0, r0
    59c8:	8008      	strh	r0, [r1, #0]
    59ca:	1a80      	subs	r0, r0, r2
    59cc:	42a0      	cmp	r0, r4
    59ce:	d000      	beq.n	59d2 <interface_handle_received_data+0x146>
    59d0:	e761      	b.n	5896 <interface_handle_received_data+0xa>
    59d2:	9803      	ldr	r0, [sp, #12]
    59d4:	022d      	lsls	r5, r5, #8
    59d6:	0204      	lsls	r4, r0, #8
    59d8:	9802      	ldr	r0, [sp, #8]
    59da:	4335      	orrs	r5, r6
    59dc:	4304      	orrs	r4, r0
    59de:	2000      	movs	r0, #0
    59e0:	4684      	mov	ip, r0
    59e2:	4666      	mov	r6, ip
    59e4:	483f      	ldr	r0, [pc, #252]	; (5ae4 <interface_handle_received_data+0x258>)
    59e6:	3304      	adds	r3, #4
    59e8:	6006      	str	r6, [r0, #0]
    59ea:	2003      	movs	r0, #3
    59ec:	4383      	bics	r3, r0
    59ee:	800b      	strh	r3, [r1, #0]
    59f0:	18ba      	adds	r2, r7, r2
    59f2:	4b44      	ldr	r3, [pc, #272]	; (5b04 <interface_handle_received_data+0x278>)
    59f4:	1c28      	adds	r0, r5, #0
    59f6:	1c21      	adds	r1, r4, #0
    59f8:	4798      	blx	r3
    59fa:	2301      	movs	r3, #1
    59fc:	9301      	str	r3, [sp, #4]
    59fe:	42b0      	cmp	r0, r6
    5a00:	d000      	beq.n	5a04 <interface_handle_received_data+0x178>
    5a02:	e748      	b.n	5896 <interface_handle_received_data+0xa>
    5a04:	4b43      	ldr	r3, [pc, #268]	; (5b14 <interface_handle_received_data+0x288>)
    5a06:	1c21      	adds	r1, r4, #0
    5a08:	881a      	ldrh	r2, [r3, #0]
    5a0a:	1c28      	adds	r0, r5, #0
    5a0c:	18ba      	adds	r2, r7, r2
    5a0e:	9b00      	ldr	r3, [sp, #0]
    5a10:	4c3d      	ldr	r4, [pc, #244]	; (5b08 <interface_handle_received_data+0x27c>)
    5a12:	47a0      	blx	r4
    5a14:	e73f      	b.n	5896 <interface_handle_received_data+0xa>
    5a16:	4e38      	ldr	r6, [pc, #224]	; (5af8 <interface_handle_received_data+0x26c>)
    5a18:	6833      	ldr	r3, [r6, #0]
    5a1a:	2b01      	cmp	r3, #1
    5a1c:	d002      	beq.n	5a24 <interface_handle_received_data+0x198>
    5a1e:	2b02      	cmp	r3, #2
    5a20:	d02a      	beq.n	5a78 <interface_handle_received_data+0x1ec>
    5a22:	e738      	b.n	5896 <interface_handle_received_data+0xa>
    5a24:	ab04      	add	r3, sp, #16
    5a26:	1ddd      	adds	r5, r3, #7
    5a28:	1c20      	adds	r0, r4, #0
    5a2a:	4b2f      	ldr	r3, [pc, #188]	; (5ae8 <interface_handle_received_data+0x25c>)
    5a2c:	1c29      	adds	r1, r5, #0
    5a2e:	4798      	blx	r3
    5a30:	4b2e      	ldr	r3, [pc, #184]	; (5aec <interface_handle_received_data+0x260>)
    5a32:	781a      	ldrb	r2, [r3, #0]
    5a34:	2a01      	cmp	r2, #1
    5a36:	d105      	bne.n	5a44 <interface_handle_received_data+0x1b8>
    5a38:	701f      	strb	r7, [r3, #0]
    5a3a:	4b2d      	ldr	r3, [pc, #180]	; (5af0 <interface_handle_received_data+0x264>)
    5a3c:	482d      	ldr	r0, [pc, #180]	; (5af4 <interface_handle_received_data+0x268>)
    5a3e:	681b      	ldr	r3, [r3, #0]
    5a40:	69db      	ldr	r3, [r3, #28]
    5a42:	4798      	blx	r3
    5a44:	492d      	ldr	r1, [pc, #180]	; (5afc <interface_handle_received_data+0x270>)
    5a46:	7828      	ldrb	r0, [r5, #0]
    5a48:	880a      	ldrh	r2, [r1, #0]
    5a4a:	1c53      	adds	r3, r2, #1
    5a4c:	b29b      	uxth	r3, r3
    5a4e:	800b      	strh	r3, [r1, #0]
    5a50:	492b      	ldr	r1, [pc, #172]	; (5b00 <interface_handle_received_data+0x274>)
    5a52:	5488      	strb	r0, [r1, r2]
    5a54:	2b02      	cmp	r3, #2
    5a56:	d000      	beq.n	5a5a <interface_handle_received_data+0x1ce>
    5a58:	e71d      	b.n	5896 <interface_handle_received_data+0xa>
    5a5a:	2280      	movs	r2, #128	; 0x80
    5a5c:	6033      	str	r3, [r6, #0]
    5a5e:	4b2b      	ldr	r3, [pc, #172]	; (5b0c <interface_handle_received_data+0x280>)
    5a60:	00d2      	lsls	r2, r2, #3
    5a62:	8819      	ldrh	r1, [r3, #0]
    5a64:	1a52      	subs	r2, r2, r1
    5a66:	9900      	ldr	r1, [sp, #0]
    5a68:	428a      	cmp	r2, r1
    5a6a:	d201      	bcs.n	5a70 <interface_handle_received_data+0x1e4>
    5a6c:	2200      	movs	r2, #0
    5a6e:	801a      	strh	r2, [r3, #0]
    5a70:	881a      	ldrh	r2, [r3, #0]
    5a72:	4b28      	ldr	r3, [pc, #160]	; (5b14 <interface_handle_received_data+0x288>)
    5a74:	801a      	strh	r2, [r3, #0]
    5a76:	e70e      	b.n	5896 <interface_handle_received_data+0xa>
    5a78:	4b21      	ldr	r3, [pc, #132]	; (5b00 <interface_handle_received_data+0x274>)
    5a7a:	1c20      	adds	r0, r4, #0
    5a7c:	785e      	ldrb	r6, [r3, #1]
    5a7e:	ab04      	add	r3, sp, #16
    5a80:	1dd9      	adds	r1, r3, #7
    5a82:	4b19      	ldr	r3, [pc, #100]	; (5ae8 <interface_handle_received_data+0x25c>)
    5a84:	4798      	blx	r3
    5a86:	4b19      	ldr	r3, [pc, #100]	; (5aec <interface_handle_received_data+0x260>)
    5a88:	781a      	ldrb	r2, [r3, #0]
    5a8a:	2a01      	cmp	r2, #1
    5a8c:	d105      	bne.n	5a9a <interface_handle_received_data+0x20e>
    5a8e:	701f      	strb	r7, [r3, #0]
    5a90:	4b17      	ldr	r3, [pc, #92]	; (5af0 <interface_handle_received_data+0x264>)
    5a92:	4818      	ldr	r0, [pc, #96]	; (5af4 <interface_handle_received_data+0x268>)
    5a94:	681b      	ldr	r3, [r3, #0]
    5a96:	69db      	ldr	r3, [r3, #28]
    5a98:	4798      	blx	r3
    5a9a:	491c      	ldr	r1, [pc, #112]	; (5b0c <interface_handle_received_data+0x280>)
    5a9c:	aa04      	add	r2, sp, #16
    5a9e:	3207      	adds	r2, #7
    5aa0:	880b      	ldrh	r3, [r1, #0]
    5aa2:	7812      	ldrb	r2, [r2, #0]
    5aa4:	481a      	ldr	r0, [pc, #104]	; (5b10 <interface_handle_received_data+0x284>)
    5aa6:	1c5c      	adds	r4, r3, #1
    5aa8:	54c2      	strb	r2, [r0, r3]
    5aaa:	4a1a      	ldr	r2, [pc, #104]	; (5b14 <interface_handle_received_data+0x288>)
    5aac:	b2a4      	uxth	r4, r4
    5aae:	8812      	ldrh	r2, [r2, #0]
    5ab0:	800c      	strh	r4, [r1, #0]
    5ab2:	1aa4      	subs	r4, r4, r2
    5ab4:	42b4      	cmp	r4, r6
    5ab6:	d000      	beq.n	5aba <interface_handle_received_data+0x22e>
    5ab8:	e6ed      	b.n	5896 <interface_handle_received_data+0xa>
    5aba:	2400      	movs	r4, #0
    5abc:	1882      	adds	r2, r0, r2
    5abe:	20bb      	movs	r0, #187	; 0xbb
    5ac0:	602c      	str	r4, [r5, #0]
    5ac2:	3304      	adds	r3, #4
    5ac4:	3403      	adds	r4, #3
    5ac6:	43a3      	bics	r3, r4
    5ac8:	800b      	strh	r3, [r1, #0]
    5aca:	4c0f      	ldr	r4, [pc, #60]	; (5b08 <interface_handle_received_data+0x27c>)
    5acc:	b2b3      	uxth	r3, r6
    5ace:	1c01      	adds	r1, r0, #0
    5ad0:	47a0      	blx	r4
    5ad2:	2301      	movs	r3, #1
    5ad4:	e6de      	b.n	5894 <interface_handle_received_data+0x8>
    5ad6:	9801      	ldr	r0, [sp, #4]
    5ad8:	b007      	add	sp, #28
    5ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5adc:	20000744 	.word	0x20000744
    5ae0:	00008185 	.word	0x00008185
    5ae4:	20000740 	.word	0x20000740
    5ae8:	000081a5 	.word	0x000081a5
    5aec:	2000097c 	.word	0x2000097c
    5af0:	20000768 	.word	0x20000768
    5af4:	000057cd 	.word	0x000057cd
    5af8:	200006fc 	.word	0x200006fc
    5afc:	2000076c 	.word	0x2000076c
    5b00:	20000702 	.word	0x20000702
    5b04:	00003ef5 	.word	0x00003ef5
    5b08:	00003e81 	.word	0x00003e81
    5b0c:	2000073c 	.word	0x2000073c
    5b10:	2000097d 	.word	0x2000097d
    5b14:	20000700 	.word	0x20000700

00005b18 <interface_send_sync>:
    5b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b1a:	4b0d      	ldr	r3, [pc, #52]	; (5b50 <interface_send_sync+0x38>)
    5b1c:	1c07      	adds	r7, r0, #0
    5b1e:	2001      	movs	r0, #1
    5b20:	1c0e      	adds	r6, r1, #0
    5b22:	4798      	blx	r3
    5b24:	2301      	movs	r3, #1
    5b26:	4c0b      	ldr	r4, [pc, #44]	; (5b54 <interface_send_sync+0x3c>)
    5b28:	4d0b      	ldr	r5, [pc, #44]	; (5b58 <interface_send_sync+0x40>)
    5b2a:	7023      	strb	r3, [r4, #0]
    5b2c:	4b0b      	ldr	r3, [pc, #44]	; (5b5c <interface_send_sync+0x44>)
    5b2e:	781b      	ldrb	r3, [r3, #0]
    5b30:	2b02      	cmp	r3, #2
    5b32:	d104      	bne.n	5b3e <interface_send_sync+0x26>
    5b34:	682b      	ldr	r3, [r5, #0]
    5b36:	480a      	ldr	r0, [pc, #40]	; (5b60 <interface_send_sync+0x48>)
    5b38:	699b      	ldr	r3, [r3, #24]
    5b3a:	2103      	movs	r1, #3
    5b3c:	4798      	blx	r3
    5b3e:	682b      	ldr	r3, [r5, #0]
    5b40:	1c38      	adds	r0, r7, #0
    5b42:	1c31      	adds	r1, r6, #0
    5b44:	699b      	ldr	r3, [r3, #24]
    5b46:	4798      	blx	r3
    5b48:	2000      	movs	r0, #0
    5b4a:	7020      	strb	r0, [r4, #0]
    5b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b4e:	46c0      	nop			; (mov r8, r8)
    5b50:	0000576d 	.word	0x0000576d
    5b54:	20000760 	.word	0x20000760
    5b58:	20000768 	.word	0x20000768
    5b5c:	20000761 	.word	0x20000761
    5b60:	0000a6a4 	.word	0x0000a6a4

00005b64 <interface_init>:
    5b64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5b66:	1c03      	adds	r3, r0, #0
    5b68:	332c      	adds	r3, #44	; 0x2c
    5b6a:	781a      	ldrb	r2, [r3, #0]
    5b6c:	4b3f      	ldr	r3, [pc, #252]	; (5c6c <interface_init+0x108>)
    5b6e:	1c04      	adds	r4, r0, #0
    5b70:	701a      	strb	r2, [r3, #0]
    5b72:	2280      	movs	r2, #128	; 0x80
    5b74:	483e      	ldr	r0, [pc, #248]	; (5c70 <interface_init+0x10c>)
    5b76:	493f      	ldr	r1, [pc, #252]	; (5c74 <interface_init+0x110>)
    5b78:	0092      	lsls	r2, r2, #2
    5b7a:	4b3f      	ldr	r3, [pc, #252]	; (5c78 <interface_init+0x114>)
    5b7c:	4798      	blx	r3
    5b7e:	2800      	cmp	r0, #0
    5b80:	d101      	bne.n	5b86 <interface_init+0x22>
    5b82:	2540      	movs	r5, #64	; 0x40
    5b84:	e06f      	b.n	5c66 <interface_init+0x102>
    5b86:	4b3d      	ldr	r3, [pc, #244]	; (5c7c <interface_init+0x118>)
    5b88:	6820      	ldr	r0, [r4, #0]
    5b8a:	6861      	ldr	r1, [r4, #4]
    5b8c:	4798      	blx	r3
    5b8e:	1c23      	adds	r3, r4, #0
    5b90:	4d3b      	ldr	r5, [pc, #236]	; (5c80 <interface_init+0x11c>)
    5b92:	3308      	adds	r3, #8
    5b94:	602b      	str	r3, [r5, #0]
    5b96:	68a3      	ldr	r3, [r4, #8]
    5b98:	2b00      	cmp	r3, #0
    5b9a:	d0f2      	beq.n	5b82 <interface_init+0x1e>
    5b9c:	6923      	ldr	r3, [r4, #16]
    5b9e:	2b00      	cmp	r3, #0
    5ba0:	d0ef      	beq.n	5b82 <interface_init+0x1e>
    5ba2:	6963      	ldr	r3, [r4, #20]
    5ba4:	2b00      	cmp	r3, #0
    5ba6:	d0ec      	beq.n	5b82 <interface_init+0x1e>
    5ba8:	69a3      	ldr	r3, [r4, #24]
    5baa:	2b00      	cmp	r3, #0
    5bac:	d0e9      	beq.n	5b82 <interface_init+0x1e>
    5bae:	69e3      	ldr	r3, [r4, #28]
    5bb0:	2b00      	cmp	r3, #0
    5bb2:	d0e6      	beq.n	5b82 <interface_init+0x1e>
    5bb4:	6a22      	ldr	r2, [r4, #32]
    5bb6:	2a00      	cmp	r2, #0
    5bb8:	d0e3      	beq.n	5b82 <interface_init+0x1e>
    5bba:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5bbc:	2a00      	cmp	r2, #0
    5bbe:	d0e0      	beq.n	5b82 <interface_init+0x1e>
    5bc0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5bc2:	2a00      	cmp	r2, #0
    5bc4:	d104      	bne.n	5bd0 <interface_init+0x6c>
    5bc6:	2202      	movs	r2, #2
    5bc8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    5bca:	32ff      	adds	r2, #255	; 0xff
    5bcc:	4291      	cmp	r1, r2
    5bce:	d0d8      	beq.n	5b82 <interface_init+0x1e>
    5bd0:	2001      	movs	r0, #1
    5bd2:	1c01      	adds	r1, r0, #0
    5bd4:	4798      	blx	r3
    5bd6:	2000      	movs	r0, #0
    5bd8:	682b      	ldr	r3, [r5, #0]
    5bda:	1c01      	adds	r1, r0, #0
    5bdc:	695b      	ldr	r3, [r3, #20]
    5bde:	4798      	blx	r3
    5be0:	682b      	ldr	r3, [r5, #0]
    5be2:	2032      	movs	r0, #50	; 0x32
    5be4:	691b      	ldr	r3, [r3, #16]
    5be6:	4798      	blx	r3
    5be8:	682b      	ldr	r3, [r5, #0]
    5bea:	2101      	movs	r1, #1
    5bec:	695b      	ldr	r3, [r3, #20]
    5bee:	2000      	movs	r0, #0
    5bf0:	4798      	blx	r3
    5bf2:	682b      	ldr	r3, [r5, #0]
    5bf4:	4823      	ldr	r0, [pc, #140]	; (5c84 <interface_init+0x120>)
    5bf6:	691b      	ldr	r3, [r3, #16]
    5bf8:	4798      	blx	r3
    5bfa:	682b      	ldr	r3, [r5, #0]
    5bfc:	4822      	ldr	r0, [pc, #136]	; (5c88 <interface_init+0x124>)
    5bfe:	69db      	ldr	r3, [r3, #28]
    5c00:	4798      	blx	r3
    5c02:	682b      	ldr	r3, [r5, #0]
    5c04:	4821      	ldr	r0, [pc, #132]	; (5c8c <interface_init+0x128>)
    5c06:	681b      	ldr	r3, [r3, #0]
    5c08:	4798      	blx	r3
    5c0a:	4b21      	ldr	r3, [pc, #132]	; (5c90 <interface_init+0x12c>)
    5c0c:	6018      	str	r0, [r3, #0]
    5c0e:	2800      	cmp	r0, #0
    5c10:	d101      	bne.n	5c16 <interface_init+0xb2>
    5c12:	25e2      	movs	r5, #226	; 0xe2
    5c14:	e027      	b.n	5c66 <interface_init+0x102>
    5c16:	4e1f      	ldr	r6, [pc, #124]	; (5c94 <interface_init+0x130>)
    5c18:	4d1f      	ldr	r5, [pc, #124]	; (5c98 <interface_init+0x134>)
    5c1a:	1c30      	adds	r0, r6, #0
    5c1c:	47a8      	blx	r5
    5c1e:	4b1f      	ldr	r3, [pc, #124]	; (5c9c <interface_init+0x138>)
    5c20:	6018      	str	r0, [r3, #0]
    5c22:	2800      	cmp	r0, #0
    5c24:	d0f5      	beq.n	5c12 <interface_init+0xae>
    5c26:	1c30      	adds	r0, r6, #0
    5c28:	47a8      	blx	r5
    5c2a:	4b1d      	ldr	r3, [pc, #116]	; (5ca0 <interface_init+0x13c>)
    5c2c:	6018      	str	r0, [r3, #0]
    5c2e:	2800      	cmp	r0, #0
    5c30:	d0ef      	beq.n	5c12 <interface_init+0xae>
    5c32:	481c      	ldr	r0, [pc, #112]	; (5ca4 <interface_init+0x140>)
    5c34:	47a8      	blx	r5
    5c36:	4b1c      	ldr	r3, [pc, #112]	; (5ca8 <interface_init+0x144>)
    5c38:	6018      	str	r0, [r3, #0]
    5c3a:	2800      	cmp	r0, #0
    5c3c:	d0e9      	beq.n	5c12 <interface_init+0xae>
    5c3e:	4b1b      	ldr	r3, [pc, #108]	; (5cac <interface_init+0x148>)
    5c40:	4798      	blx	r3
    5c42:	1c20      	adds	r0, r4, #0
    5c44:	4b1a      	ldr	r3, [pc, #104]	; (5cb0 <interface_init+0x14c>)
    5c46:	4798      	blx	r3
    5c48:	1e05      	subs	r5, r0, #0
    5c4a:	d10c      	bne.n	5c66 <interface_init+0x102>
    5c4c:	466b      	mov	r3, sp
    5c4e:	2201      	movs	r2, #1
    5c50:	1ddc      	adds	r4, r3, #7
    5c52:	1c20      	adds	r0, r4, #0
    5c54:	a902      	add	r1, sp, #8
    5c56:	4252      	negs	r2, r2
    5c58:	4b16      	ldr	r3, [pc, #88]	; (5cb4 <interface_init+0x150>)
    5c5a:	4798      	blx	r3
    5c5c:	2800      	cmp	r0, #0
    5c5e:	d102      	bne.n	5c66 <interface_init+0x102>
    5c60:	7823      	ldrb	r3, [r4, #0]
    5c62:	2b39      	cmp	r3, #57	; 0x39
    5c64:	d1f2      	bne.n	5c4c <interface_init+0xe8>
    5c66:	1c28      	adds	r0, r5, #0
    5c68:	b004      	add	sp, #16
    5c6a:	bd70      	pop	{r4, r5, r6, pc}
    5c6c:	20000761 	.word	0x20000761
    5c70:	20000744 	.word	0x20000744
    5c74:	2000076e 	.word	0x2000076e
    5c78:	00008165 	.word	0x00008165
    5c7c:	0000544d 	.word	0x0000544d
    5c80:	20000768 	.word	0x20000768
    5c84:	00000bb8 	.word	0x00000bb8
    5c88:	000057cd 	.word	0x000057cd
    5c8c:	00005691 	.word	0x00005691
    5c90:	20000978 	.word	0x20000978
    5c94:	00005659 	.word	0x00005659
    5c98:	00005665 	.word	0x00005665
    5c9c:	2000075c 	.word	0x2000075c
    5ca0:	20000764 	.word	0x20000764
    5ca4:	00005835 	.word	0x00005835
    5ca8:	20000970 	.word	0x20000970
    5cac:	00003ebd 	.word	0x00003ebd
    5cb0:	00008031 	.word	0x00008031
    5cb4:	00003f9d 	.word	0x00003f9d

00005cb8 <interface_event_timeout_start_timer>:
    5cb8:	b508      	push	{r3, lr}
    5cba:	4b05      	ldr	r3, [pc, #20]	; (5cd0 <interface_event_timeout_start_timer+0x18>)
    5cbc:	681b      	ldr	r3, [r3, #0]
    5cbe:	6058      	str	r0, [r3, #4]
    5cc0:	4b04      	ldr	r3, [pc, #16]	; (5cd4 <interface_event_timeout_start_timer+0x1c>)
    5cc2:	781b      	ldrb	r3, [r3, #0]
    5cc4:	2b00      	cmp	r3, #0
    5cc6:	d101      	bne.n	5ccc <interface_event_timeout_start_timer+0x14>
    5cc8:	4b03      	ldr	r3, [pc, #12]	; (5cd8 <interface_event_timeout_start_timer+0x20>)
    5cca:	4798      	blx	r3
    5ccc:	bd08      	pop	{r3, pc}
    5cce:	46c0      	nop			; (mov r8, r8)
    5cd0:	2000075c 	.word	0x2000075c
    5cd4:	2000096e 	.word	0x2000096e
    5cd8:	00005701 	.word	0x00005701

00005cdc <interface_event_timeout_stop_timer>:
    5cdc:	b508      	push	{r3, lr}
    5cde:	4b02      	ldr	r3, [pc, #8]	; (5ce8 <interface_event_timeout_stop_timer+0xc>)
    5ce0:	6818      	ldr	r0, [r3, #0]
    5ce2:	4b02      	ldr	r3, [pc, #8]	; (5cec <interface_event_timeout_stop_timer+0x10>)
    5ce4:	4798      	blx	r3
    5ce6:	bd08      	pop	{r3, pc}
    5ce8:	2000075c 	.word	0x2000075c
    5cec:	00005725 	.word	0x00005725

00005cf0 <interface_cmd_cmpl_timeout_start_timer>:
    5cf0:	b508      	push	{r3, lr}
    5cf2:	4b05      	ldr	r3, [pc, #20]	; (5d08 <interface_cmd_cmpl_timeout_start_timer+0x18>)
    5cf4:	681b      	ldr	r3, [r3, #0]
    5cf6:	6058      	str	r0, [r3, #4]
    5cf8:	4b04      	ldr	r3, [pc, #16]	; (5d0c <interface_cmd_cmpl_timeout_start_timer+0x1c>)
    5cfa:	781b      	ldrb	r3, [r3, #0]
    5cfc:	2b00      	cmp	r3, #0
    5cfe:	d101      	bne.n	5d04 <interface_cmd_cmpl_timeout_start_timer+0x14>
    5d00:	4b03      	ldr	r3, [pc, #12]	; (5d10 <interface_cmd_cmpl_timeout_start_timer+0x20>)
    5d02:	4798      	blx	r3
    5d04:	bd08      	pop	{r3, pc}
    5d06:	46c0      	nop			; (mov r8, r8)
    5d08:	20000764 	.word	0x20000764
    5d0c:	2000096e 	.word	0x2000096e
    5d10:	00005701 	.word	0x00005701

00005d14 <interface_cmd_cmpl_timeout_stop_timer>:
    5d14:	b508      	push	{r3, lr}
    5d16:	4b02      	ldr	r3, [pc, #8]	; (5d20 <interface_cmd_cmpl_timeout_stop_timer+0xc>)
    5d18:	6818      	ldr	r0, [r3, #0]
    5d1a:	4b02      	ldr	r3, [pc, #8]	; (5d24 <interface_cmd_cmpl_timeout_stop_timer+0x10>)
    5d1c:	4798      	blx	r3
    5d1e:	bd08      	pop	{r3, pc}
    5d20:	20000764 	.word	0x20000764
    5d24:	00005725 	.word	0x00005725

00005d28 <interface_cmd_cmpl_signal>:
    5d28:	2201      	movs	r2, #1
    5d2a:	4b01      	ldr	r3, [pc, #4]	; (5d30 <interface_cmd_cmpl_signal+0x8>)
    5d2c:	701a      	strb	r2, [r3, #0]
    5d2e:	4770      	bx	lr
    5d30:	20000974 	.word	0x20000974

00005d34 <interface_event_wait>:
    5d34:	b508      	push	{r3, lr}
    5d36:	4b0e      	ldr	r3, [pc, #56]	; (5d70 <interface_event_wait+0x3c>)
    5d38:	4798      	blx	r3
    5d3a:	4b0e      	ldr	r3, [pc, #56]	; (5d74 <interface_event_wait+0x40>)
    5d3c:	2800      	cmp	r0, #0
    5d3e:	d107      	bne.n	5d50 <interface_event_wait+0x1c>
    5d40:	4a0d      	ldr	r2, [pc, #52]	; (5d78 <interface_event_wait+0x44>)
    5d42:	7812      	ldrb	r2, [r2, #0]
    5d44:	2a01      	cmp	r2, #1
    5d46:	d005      	beq.n	5d54 <interface_event_wait+0x20>
    5d48:	781a      	ldrb	r2, [r3, #0]
    5d4a:	2a01      	cmp	r2, #1
    5d4c:	d1f3      	bne.n	5d36 <interface_event_wait+0x2>
    5d4e:	e001      	b.n	5d54 <interface_event_wait+0x20>
    5d50:	2801      	cmp	r0, #1
    5d52:	d002      	beq.n	5d5a <interface_event_wait+0x26>
    5d54:	781a      	ldrb	r2, [r3, #0]
    5d56:	2a01      	cmp	r2, #1
    5d58:	d102      	bne.n	5d60 <interface_event_wait+0x2c>
    5d5a:	2000      	movs	r0, #0
    5d5c:	7018      	strb	r0, [r3, #0]
    5d5e:	e005      	b.n	5d6c <interface_event_wait+0x38>
    5d60:	4b05      	ldr	r3, [pc, #20]	; (5d78 <interface_event_wait+0x44>)
    5d62:	2000      	movs	r0, #0
    5d64:	781b      	ldrb	r3, [r3, #0]
    5d66:	2b01      	cmp	r3, #1
    5d68:	d100      	bne.n	5d6c <interface_event_wait+0x38>
    5d6a:	30d0      	adds	r0, #208	; 0xd0
    5d6c:	bd08      	pop	{r3, pc}
    5d6e:	46c0      	nop			; (mov r8, r8)
    5d70:	0000588d 	.word	0x0000588d
    5d74:	200006d8 	.word	0x200006d8
    5d78:	2000070a 	.word	0x2000070a

00005d7c <interface_cmd_cmpl_wait>:
    5d7c:	b538      	push	{r3, r4, r5, lr}
    5d7e:	20fa      	movs	r0, #250	; 0xfa
    5d80:	2400      	movs	r4, #0
    5d82:	4b0a      	ldr	r3, [pc, #40]	; (5dac <interface_cmd_cmpl_wait+0x30>)
    5d84:	0100      	lsls	r0, r0, #4
    5d86:	701c      	strb	r4, [r3, #0]
    5d88:	4b09      	ldr	r3, [pc, #36]	; (5db0 <interface_cmd_cmpl_wait+0x34>)
    5d8a:	4798      	blx	r3
    5d8c:	4b09      	ldr	r3, [pc, #36]	; (5db4 <interface_cmd_cmpl_wait+0x38>)
    5d8e:	781a      	ldrb	r2, [r3, #0]
    5d90:	1c1d      	adds	r5, r3, #0
    5d92:	2a01      	cmp	r2, #1
    5d94:	d004      	beq.n	5da0 <interface_cmd_cmpl_wait+0x24>
    5d96:	4b08      	ldr	r3, [pc, #32]	; (5db8 <interface_cmd_cmpl_wait+0x3c>)
    5d98:	4798      	blx	r3
    5d9a:	1e04      	subs	r4, r0, #0
    5d9c:	2cd0      	cmp	r4, #208	; 0xd0
    5d9e:	d1f5      	bne.n	5d8c <interface_cmd_cmpl_wait+0x10>
    5da0:	4b06      	ldr	r3, [pc, #24]	; (5dbc <interface_cmd_cmpl_wait+0x40>)
    5da2:	4798      	blx	r3
    5da4:	2300      	movs	r3, #0
    5da6:	1c20      	adds	r0, r4, #0
    5da8:	702b      	strb	r3, [r5, #0]
    5daa:	bd38      	pop	{r3, r4, r5, pc}
    5dac:	2000070a 	.word	0x2000070a
    5db0:	00005cf1 	.word	0x00005cf1
    5db4:	20000974 	.word	0x20000974
    5db8:	00005d35 	.word	0x00005d35
    5dbc:	00005d15 	.word	0x00005d15

00005dc0 <l2cc_data_send_rsp_handler>:
    5dc0:	b510      	push	{r4, lr}
    5dc2:	7802      	ldrb	r2, [r0, #0]
    5dc4:	700a      	strb	r2, [r1, #0]
    5dc6:	7883      	ldrb	r3, [r0, #2]
    5dc8:	7844      	ldrb	r4, [r0, #1]
    5dca:	021b      	lsls	r3, r3, #8
    5dcc:	4323      	orrs	r3, r4
    5dce:	804b      	strh	r3, [r1, #2]
    5dd0:	7903      	ldrb	r3, [r0, #4]
    5dd2:	78c0      	ldrb	r0, [r0, #3]
    5dd4:	021b      	lsls	r3, r3, #8
    5dd6:	4303      	orrs	r3, r0
    5dd8:	808b      	strh	r3, [r1, #4]
    5dda:	2a00      	cmp	r2, #0
    5ddc:	d103      	bne.n	5de6 <l2cc_data_send_rsp_handler+0x26>
    5dde:	4a02      	ldr	r2, [pc, #8]	; (5de8 <l2cc_data_send_rsp_handler+0x28>)
    5de0:	7813      	ldrb	r3, [r2, #0]
    5de2:	3301      	adds	r3, #1
    5de4:	7013      	strb	r3, [r2, #0]
    5de6:	bd10      	pop	{r4, pc}
    5de8:	20000043 	.word	0x20000043

00005dec <l2cc_data_received_handler>:
    5dec:	b508      	push	{r3, lr}
    5dee:	1c03      	adds	r3, r0, #0
    5df0:	7842      	ldrb	r2, [r0, #1]
    5df2:	7800      	ldrb	r0, [r0, #0]
    5df4:	0212      	lsls	r2, r2, #8
    5df6:	4302      	orrs	r2, r0
    5df8:	800a      	strh	r2, [r1, #0]
    5dfa:	78da      	ldrb	r2, [r3, #3]
    5dfc:	7898      	ldrb	r0, [r3, #2]
    5dfe:	0212      	lsls	r2, r2, #8
    5e00:	4302      	orrs	r2, r0
    5e02:	804a      	strh	r2, [r1, #2]
    5e04:	795a      	ldrb	r2, [r3, #5]
    5e06:	7918      	ldrb	r0, [r3, #4]
    5e08:	0212      	lsls	r2, r2, #8
    5e0a:	4302      	orrs	r2, r0
    5e0c:	808a      	strh	r2, [r1, #4]
    5e0e:	1d88      	adds	r0, r1, #6
    5e10:	1d99      	adds	r1, r3, #6
    5e12:	4b01      	ldr	r3, [pc, #4]	; (5e18 <l2cc_data_received_handler+0x2c>)
    5e14:	4798      	blx	r3
    5e16:	bd08      	pop	{r3, pc}
    5e18:	000083fb 	.word	0x000083fb

00005e1c <check_enc_process.isra.0>:
    5e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5e1e:	1c07      	adds	r7, r0, #0
    5e20:	1c0e      	adds	r6, r1, #0
    5e22:	1e15      	subs	r5, r2, #0
    5e24:	9301      	str	r3, [sp, #4]
    5e26:	2d05      	cmp	r5, #5
    5e28:	d82e      	bhi.n	5e88 <check_enc_process.isra.0+0x6c>
    5e2a:	2401      	movs	r4, #1
    5e2c:	1c22      	adds	r2, r4, #0
    5e2e:	2333      	movs	r3, #51	; 0x33
    5e30:	40aa      	lsls	r2, r5
    5e32:	421a      	tst	r2, r3
    5e34:	d028      	beq.n	5e88 <check_enc_process.isra.0+0x6c>
    5e36:	780b      	ldrb	r3, [r1, #0]
    5e38:	3b07      	subs	r3, #7
    5e3a:	2b09      	cmp	r3, #9
    5e3c:	d90a      	bls.n	5e54 <check_enc_process.isra.0+0x38>
    5e3e:	4c19      	ldr	r4, [pc, #100]	; (5ea4 <check_enc_process.isra.0+0x88>)
    5e40:	4919      	ldr	r1, [pc, #100]	; (5ea8 <check_enc_process.isra.0+0x8c>)
    5e42:	4b1a      	ldr	r3, [pc, #104]	; (5eac <check_enc_process.isra.0+0x90>)
    5e44:	481a      	ldr	r0, [pc, #104]	; (5eb0 <check_enc_process.isra.0+0x94>)
    5e46:	22f1      	movs	r2, #241	; 0xf1
    5e48:	6825      	ldr	r5, [r4, #0]
    5e4a:	47a8      	blx	r5
    5e4c:	7831      	ldrb	r1, [r6, #0]
    5e4e:	6823      	ldr	r3, [r4, #0]
    5e50:	4818      	ldr	r0, [pc, #96]	; (5eb4 <check_enc_process.isra.0+0x98>)
    5e52:	e023      	b.n	5e9c <check_enc_process.isra.0+0x80>
    5e54:	9b01      	ldr	r3, [sp, #4]
    5e56:	2b00      	cmp	r3, #0
    5e58:	d101      	bne.n	5e5e <check_enc_process.isra.0+0x42>
    5e5a:	2000      	movs	r0, #0
    5e5c:	e020      	b.n	5ea0 <check_enc_process.isra.0+0x84>
    5e5e:	4b16      	ldr	r3, [pc, #88]	; (5eb8 <check_enc_process.isra.0+0x9c>)
    5e60:	1c38      	adds	r0, r7, #0
    5e62:	2100      	movs	r1, #0
    5e64:	4798      	blx	r3
    5e66:	9b01      	ldr	r3, [sp, #4]
    5e68:	7018      	strb	r0, [r3, #0]
    5e6a:	2807      	cmp	r0, #7
    5e6c:	d9f5      	bls.n	5e5a <check_enc_process.isra.0+0x3e>
    5e6e:	4d0d      	ldr	r5, [pc, #52]	; (5ea4 <check_enc_process.isra.0+0x88>)
    5e70:	490d      	ldr	r1, [pc, #52]	; (5ea8 <check_enc_process.isra.0+0x8c>)
    5e72:	22fa      	movs	r2, #250	; 0xfa
    5e74:	4b0d      	ldr	r3, [pc, #52]	; (5eac <check_enc_process.isra.0+0x90>)
    5e76:	480e      	ldr	r0, [pc, #56]	; (5eb0 <check_enc_process.isra.0+0x94>)
    5e78:	682e      	ldr	r6, [r5, #0]
    5e7a:	47b0      	blx	r6
    5e7c:	682b      	ldr	r3, [r5, #0]
    5e7e:	480f      	ldr	r0, [pc, #60]	; (5ebc <check_enc_process.isra.0+0xa0>)
    5e80:	1c39      	adds	r1, r7, #0
    5e82:	4798      	blx	r3
    5e84:	1c20      	adds	r0, r4, #0
    5e86:	e00b      	b.n	5ea0 <check_enc_process.isra.0+0x84>
    5e88:	4c06      	ldr	r4, [pc, #24]	; (5ea4 <check_enc_process.isra.0+0x88>)
    5e8a:	4907      	ldr	r1, [pc, #28]	; (5ea8 <check_enc_process.isra.0+0x8c>)
    5e8c:	4b07      	ldr	r3, [pc, #28]	; (5eac <check_enc_process.isra.0+0x90>)
    5e8e:	4808      	ldr	r0, [pc, #32]	; (5eb0 <check_enc_process.isra.0+0x94>)
    5e90:	22ec      	movs	r2, #236	; 0xec
    5e92:	6826      	ldr	r6, [r4, #0]
    5e94:	47b0      	blx	r6
    5e96:	1c29      	adds	r1, r5, #0
    5e98:	6823      	ldr	r3, [r4, #0]
    5e9a:	4809      	ldr	r0, [pc, #36]	; (5ec0 <check_enc_process.isra.0+0xa4>)
    5e9c:	4798      	blx	r3
    5e9e:	20cf      	movs	r0, #207	; 0xcf
    5ea0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5ea2:	46c0      	nop			; (mov r8, r8)
    5ea4:	20000044 	.word	0x20000044
    5ea8:	0000a700 	.word	0x0000a700
    5eac:	0000a832 	.word	0x0000a832
    5eb0:	0000a1d9 	.word	0x0000a1d9
    5eb4:	0000a72a 	.word	0x0000a72a
    5eb8:	000065dd 	.word	0x000065dd
    5ebc:	0000a740 	.word	0x0000a740
    5ec0:	0000a4ca 	.word	0x0000a4ca

00005ec4 <at_ble_authenticate>:
    5ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ec6:	1c0c      	adds	r4, r1, #0
    5ec8:	211f      	movs	r1, #31
    5eca:	b08b      	sub	sp, #44	; 0x2c
    5ecc:	9307      	str	r3, [sp, #28]
    5ece:	ab02      	add	r3, sp, #8
    5ed0:	18c9      	adds	r1, r1, r3
    5ed2:	230f      	movs	r3, #15
    5ed4:	700b      	strb	r3, [r1, #0]
    5ed6:	4b6b      	ldr	r3, [pc, #428]	; (6084 <at_ble_authenticate+0x1c0>)
    5ed8:	1c05      	adds	r5, r0, #0
    5eda:	1c16      	adds	r6, r2, #0
    5edc:	4798      	blx	r3
    5ede:	1e07      	subs	r7, r0, #0
    5ee0:	2f07      	cmp	r7, #7
    5ee2:	d90b      	bls.n	5efc <at_ble_authenticate+0x38>
    5ee4:	4c68      	ldr	r4, [pc, #416]	; (6088 <at_ble_authenticate+0x1c4>)
    5ee6:	4969      	ldr	r1, [pc, #420]	; (608c <at_ble_authenticate+0x1c8>)
    5ee8:	221a      	movs	r2, #26
    5eea:	4b69      	ldr	r3, [pc, #420]	; (6090 <at_ble_authenticate+0x1cc>)
    5eec:	4869      	ldr	r0, [pc, #420]	; (6094 <at_ble_authenticate+0x1d0>)
    5eee:	6825      	ldr	r5, [r4, #0]
    5ef0:	47a8      	blx	r5
    5ef2:	6823      	ldr	r3, [r4, #0]
    5ef4:	4868      	ldr	r0, [pc, #416]	; (6098 <at_ble_authenticate+0x1d4>)
    5ef6:	4798      	blx	r3
    5ef8:	2001      	movs	r0, #1
    5efa:	e0c0      	b.n	607e <at_ble_authenticate+0x1ba>
    5efc:	2c00      	cmp	r4, #0
    5efe:	d11b      	bne.n	5f38 <at_ble_authenticate+0x74>
    5f00:	2312      	movs	r3, #18
    5f02:	435f      	muls	r7, r3
    5f04:	4b65      	ldr	r3, [pc, #404]	; (609c <at_ble_authenticate+0x1d8>)
    5f06:	5cfb      	ldrb	r3, [r7, r3]
    5f08:	2b01      	cmp	r3, #1
    5f0a:	d10b      	bne.n	5f24 <at_ble_authenticate+0x60>
    5f0c:	9504      	str	r5, [sp, #16]
    5f0e:	9400      	str	r4, [sp, #0]
    5f10:	9401      	str	r4, [sp, #4]
    5f12:	9402      	str	r4, [sp, #8]
    5f14:	9403      	str	r4, [sp, #12]
    5f16:	1c20      	adds	r0, r4, #0
    5f18:	1c21      	adds	r1, r4, #0
    5f1a:	1c22      	adds	r2, r4, #0
    5f1c:	1c23      	adds	r3, r4, #0
    5f1e:	4d60      	ldr	r5, [pc, #384]	; (60a0 <at_ble_authenticate+0x1dc>)
    5f20:	47a8      	blx	r5
    5f22:	e07b      	b.n	601c <at_ble_authenticate+0x158>
    5f24:	4c58      	ldr	r4, [pc, #352]	; (6088 <at_ble_authenticate+0x1c4>)
    5f26:	4b5a      	ldr	r3, [pc, #360]	; (6090 <at_ble_authenticate+0x1cc>)
    5f28:	485a      	ldr	r0, [pc, #360]	; (6094 <at_ble_authenticate+0x1d0>)
    5f2a:	4958      	ldr	r1, [pc, #352]	; (608c <at_ble_authenticate+0x1c8>)
    5f2c:	2229      	movs	r2, #41	; 0x29
    5f2e:	6825      	ldr	r5, [r4, #0]
    5f30:	47a8      	blx	r5
    5f32:	6823      	ldr	r3, [r4, #0]
    5f34:	485b      	ldr	r0, [pc, #364]	; (60a4 <at_ble_authenticate+0x1e0>)
    5f36:	e0a0      	b.n	607a <at_ble_authenticate+0x1b6>
    5f38:	7922      	ldrb	r2, [r4, #4]
    5f3a:	2a06      	cmp	r2, #6
    5f3c:	d904      	bls.n	5f48 <at_ble_authenticate+0x84>
    5f3e:	7963      	ldrb	r3, [r4, #5]
    5f40:	2b10      	cmp	r3, #16
    5f42:	d801      	bhi.n	5f48 <at_ble_authenticate+0x84>
    5f44:	429a      	cmp	r2, r3
    5f46:	d909      	bls.n	5f5c <at_ble_authenticate+0x98>
    5f48:	4c4f      	ldr	r4, [pc, #316]	; (6088 <at_ble_authenticate+0x1c4>)
    5f4a:	4b51      	ldr	r3, [pc, #324]	; (6090 <at_ble_authenticate+0x1cc>)
    5f4c:	4851      	ldr	r0, [pc, #324]	; (6094 <at_ble_authenticate+0x1d0>)
    5f4e:	494f      	ldr	r1, [pc, #316]	; (608c <at_ble_authenticate+0x1c8>)
    5f50:	2232      	movs	r2, #50	; 0x32
    5f52:	6825      	ldr	r5, [r4, #0]
    5f54:	47a8      	blx	r5
    5f56:	6823      	ldr	r3, [r4, #0]
    5f58:	4853      	ldr	r0, [pc, #332]	; (60a8 <at_ble_authenticate+0x1e4>)
    5f5a:	e08e      	b.n	607a <at_ble_authenticate+0x1b6>
    5f5c:	7a23      	ldrb	r3, [r4, #8]
    5f5e:	2b04      	cmp	r3, #4
    5f60:	d909      	bls.n	5f76 <at_ble_authenticate+0xb2>
    5f62:	4c49      	ldr	r4, [pc, #292]	; (6088 <at_ble_authenticate+0x1c4>)
    5f64:	4b4a      	ldr	r3, [pc, #296]	; (6090 <at_ble_authenticate+0x1cc>)
    5f66:	484b      	ldr	r0, [pc, #300]	; (6094 <at_ble_authenticate+0x1d0>)
    5f68:	4948      	ldr	r1, [pc, #288]	; (608c <at_ble_authenticate+0x1c8>)
    5f6a:	2239      	movs	r2, #57	; 0x39
    5f6c:	6825      	ldr	r5, [r4, #0]
    5f6e:	47a8      	blx	r5
    5f70:	6823      	ldr	r3, [r4, #0]
    5f72:	484e      	ldr	r0, [pc, #312]	; (60ac <at_ble_authenticate+0x1e8>)
    5f74:	e081      	b.n	607a <at_ble_authenticate+0x1b6>
    5f76:	79a3      	ldrb	r3, [r4, #6]
    5f78:	2b07      	cmp	r3, #7
    5f7a:	d802      	bhi.n	5f82 <at_ble_authenticate+0xbe>
    5f7c:	79e3      	ldrb	r3, [r4, #7]
    5f7e:	2b07      	cmp	r3, #7
    5f80:	d909      	bls.n	5f96 <at_ble_authenticate+0xd2>
    5f82:	4c41      	ldr	r4, [pc, #260]	; (6088 <at_ble_authenticate+0x1c4>)
    5f84:	4b42      	ldr	r3, [pc, #264]	; (6090 <at_ble_authenticate+0x1cc>)
    5f86:	4843      	ldr	r0, [pc, #268]	; (6094 <at_ble_authenticate+0x1d0>)
    5f88:	4940      	ldr	r1, [pc, #256]	; (608c <at_ble_authenticate+0x1c8>)
    5f8a:	2241      	movs	r2, #65	; 0x41
    5f8c:	6825      	ldr	r5, [r4, #0]
    5f8e:	47a8      	blx	r5
    5f90:	6823      	ldr	r3, [r4, #0]
    5f92:	4847      	ldr	r0, [pc, #284]	; (60b0 <at_ble_authenticate+0x1ec>)
    5f94:	e071      	b.n	607a <at_ble_authenticate+0x1b6>
    5f96:	78a3      	ldrb	r3, [r4, #2]
    5f98:	2b00      	cmp	r3, #0
    5f9a:	d010      	beq.n	5fbe <at_ble_authenticate+0xfa>
    5f9c:	2e00      	cmp	r6, #0
    5f9e:	d109      	bne.n	5fb4 <at_ble_authenticate+0xf0>
    5fa0:	4c39      	ldr	r4, [pc, #228]	; (6088 <at_ble_authenticate+0x1c4>)
    5fa2:	4b3b      	ldr	r3, [pc, #236]	; (6090 <at_ble_authenticate+0x1cc>)
    5fa4:	483b      	ldr	r0, [pc, #236]	; (6094 <at_ble_authenticate+0x1d0>)
    5fa6:	4939      	ldr	r1, [pc, #228]	; (608c <at_ble_authenticate+0x1c8>)
    5fa8:	2249      	movs	r2, #73	; 0x49
    5faa:	6825      	ldr	r5, [r4, #0]
    5fac:	47a8      	blx	r5
    5fae:	6823      	ldr	r3, [r4, #0]
    5fb0:	4840      	ldr	r0, [pc, #256]	; (60b4 <at_ble_authenticate+0x1f0>)
    5fb2:	e062      	b.n	607a <at_ble_authenticate+0x1b6>
    5fb4:	4840      	ldr	r0, [pc, #256]	; (60b8 <at_ble_authenticate+0x1f4>)
    5fb6:	1c31      	adds	r1, r6, #0
    5fb8:	221c      	movs	r2, #28
    5fba:	4b40      	ldr	r3, [pc, #256]	; (60bc <at_ble_authenticate+0x1f8>)
    5fbc:	4798      	blx	r3
    5fbe:	9b07      	ldr	r3, [sp, #28]
    5fc0:	2b00      	cmp	r3, #0
    5fc2:	d005      	beq.n	5fd0 <at_ble_authenticate+0x10c>
    5fc4:	483e      	ldr	r0, [pc, #248]	; (60c0 <at_ble_authenticate+0x1fc>)
    5fc6:	1c19      	adds	r1, r3, #0
    5fc8:	309a      	adds	r0, #154	; 0x9a
    5fca:	2210      	movs	r2, #16
    5fcc:	4b3b      	ldr	r3, [pc, #236]	; (60bc <at_ble_authenticate+0x1f8>)
    5fce:	4798      	blx	r3
    5fd0:	7863      	ldrb	r3, [r4, #1]
    5fd2:	78a2      	ldrb	r2, [r4, #2]
    5fd4:	009b      	lsls	r3, r3, #2
    5fd6:	4313      	orrs	r3, r2
    5fd8:	2212      	movs	r2, #18
    5fda:	4357      	muls	r7, r2
    5fdc:	4a2f      	ldr	r2, [pc, #188]	; (609c <at_ble_authenticate+0x1d8>)
    5fde:	b2db      	uxtb	r3, r3
    5fe0:	5cba      	ldrb	r2, [r7, r2]
    5fe2:	2a00      	cmp	r2, #0
    5fe4:	d11c      	bne.n	6020 <at_ble_authenticate+0x15c>
    5fe6:	79a0      	ldrb	r0, [r4, #6]
    5fe8:	0742      	lsls	r2, r0, #29
    5fea:	d502      	bpl.n	5ff2 <at_ble_authenticate+0x12e>
    5fec:	9a07      	ldr	r2, [sp, #28]
    5fee:	2a00      	cmp	r2, #0
    5ff0:	d003      	beq.n	5ffa <at_ble_authenticate+0x136>
    5ff2:	07c2      	lsls	r2, r0, #31
    5ff4:	d506      	bpl.n	6004 <at_ble_authenticate+0x140>
    5ff6:	2e00      	cmp	r6, #0
    5ff8:	d104      	bne.n	6004 <at_ble_authenticate+0x140>
    5ffa:	4c23      	ldr	r4, [pc, #140]	; (6088 <at_ble_authenticate+0x1c4>)
    5ffc:	4825      	ldr	r0, [pc, #148]	; (6094 <at_ble_authenticate+0x1d0>)
    5ffe:	4923      	ldr	r1, [pc, #140]	; (608c <at_ble_authenticate+0x1c8>)
    6000:	2260      	movs	r2, #96	; 0x60
    6002:	e01d      	b.n	6040 <at_ble_authenticate+0x17c>
    6004:	7966      	ldrb	r6, [r4, #5]
    6006:	7821      	ldrb	r1, [r4, #0]
    6008:	78e2      	ldrb	r2, [r4, #3]
    600a:	9600      	str	r6, [sp, #0]
    600c:	9001      	str	r0, [sp, #4]
    600e:	79e0      	ldrb	r0, [r4, #7]
    6010:	9002      	str	r0, [sp, #8]
    6012:	7a20      	ldrb	r0, [r4, #8]
    6014:	4c2b      	ldr	r4, [pc, #172]	; (60c4 <at_ble_authenticate+0x200>)
    6016:	9003      	str	r0, [sp, #12]
    6018:	1c28      	adds	r0, r5, #0
    601a:	47a0      	blx	r4
    601c:	2000      	movs	r0, #0
    601e:	e02e      	b.n	607e <at_ble_authenticate+0x1ba>
    6020:	2a01      	cmp	r2, #1
    6022:	d121      	bne.n	6068 <at_ble_authenticate+0x1a4>
    6024:	79e0      	ldrb	r0, [r4, #7]
    6026:	0742      	lsls	r2, r0, #29
    6028:	d502      	bpl.n	6030 <at_ble_authenticate+0x16c>
    602a:	9a07      	ldr	r2, [sp, #28]
    602c:	2a00      	cmp	r2, #0
    602e:	d003      	beq.n	6038 <at_ble_authenticate+0x174>
    6030:	07c2      	lsls	r2, r0, #31
    6032:	d50b      	bpl.n	604c <at_ble_authenticate+0x188>
    6034:	2e00      	cmp	r6, #0
    6036:	d109      	bne.n	604c <at_ble_authenticate+0x188>
    6038:	226e      	movs	r2, #110	; 0x6e
    603a:	4c13      	ldr	r4, [pc, #76]	; (6088 <at_ble_authenticate+0x1c4>)
    603c:	4815      	ldr	r0, [pc, #84]	; (6094 <at_ble_authenticate+0x1d0>)
    603e:	4913      	ldr	r1, [pc, #76]	; (608c <at_ble_authenticate+0x1c8>)
    6040:	4b13      	ldr	r3, [pc, #76]	; (6090 <at_ble_authenticate+0x1cc>)
    6042:	6825      	ldr	r5, [r4, #0]
    6044:	47a8      	blx	r5
    6046:	6823      	ldr	r3, [r4, #0]
    6048:	481f      	ldr	r0, [pc, #124]	; (60c8 <at_ble_authenticate+0x204>)
    604a:	e016      	b.n	607a <at_ble_authenticate+0x1b6>
    604c:	7966      	ldrb	r6, [r4, #5]
    604e:	7821      	ldrb	r1, [r4, #0]
    6050:	78e2      	ldrb	r2, [r4, #3]
    6052:	9600      	str	r6, [sp, #0]
    6054:	79a6      	ldrb	r6, [r4, #6]
    6056:	9002      	str	r0, [sp, #8]
    6058:	9601      	str	r6, [sp, #4]
    605a:	7a20      	ldrb	r0, [r4, #8]
    605c:	9504      	str	r5, [sp, #16]
    605e:	9003      	str	r0, [sp, #12]
    6060:	4c0f      	ldr	r4, [pc, #60]	; (60a0 <at_ble_authenticate+0x1dc>)
    6062:	2001      	movs	r0, #1
    6064:	47a0      	blx	r4
    6066:	e7d9      	b.n	601c <at_ble_authenticate+0x158>
    6068:	4c07      	ldr	r4, [pc, #28]	; (6088 <at_ble_authenticate+0x1c4>)
    606a:	4b09      	ldr	r3, [pc, #36]	; (6090 <at_ble_authenticate+0x1cc>)
    606c:	4809      	ldr	r0, [pc, #36]	; (6094 <at_ble_authenticate+0x1d0>)
    606e:	4907      	ldr	r1, [pc, #28]	; (608c <at_ble_authenticate+0x1c8>)
    6070:	2279      	movs	r2, #121	; 0x79
    6072:	6825      	ldr	r5, [r4, #0]
    6074:	47a8      	blx	r5
    6076:	6823      	ldr	r3, [r4, #0]
    6078:	4814      	ldr	r0, [pc, #80]	; (60cc <at_ble_authenticate+0x208>)
    607a:	4798      	blx	r3
    607c:	20cf      	movs	r0, #207	; 0xcf
    607e:	b00b      	add	sp, #44	; 0x2c
    6080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6082:	46c0      	nop			; (mov r8, r8)
    6084:	000065dd 	.word	0x000065dd
    6088:	20000044 	.word	0x20000044
    608c:	0000a700 	.word	0x0000a700
    6090:	0000a85c 	.word	0x0000a85c
    6094:	0000a1d9 	.word	0x0000a1d9
    6098:	0000a751 	.word	0x0000a751
    609c:	2000190c 	.word	0x2000190c
    60a0:	00006bfd 	.word	0x00006bfd
    60a4:	0000a767 	.word	0x0000a767
    60a8:	0000a779 	.word	0x0000a779
    60ac:	0000a78c 	.word	0x0000a78c
    60b0:	0000a7a3 	.word	0x0000a7a3
    60b4:	0000a7b7 	.word	0x0000a7b7
    60b8:	20001a1a 	.word	0x20001a1a
    60bc:	000083fb 	.word	0x000083fb
    60c0:	2000199c 	.word	0x2000199c
    60c4:	000069cd 	.word	0x000069cd
    60c8:	0000a7cd 	.word	0x0000a7cd
    60cc:	0000a7e1 	.word	0x0000a7e1

000060d0 <at_ble_pair_key_reply>:
    60d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    60d2:	b085      	sub	sp, #20
    60d4:	1c05      	adds	r5, r0, #0
    60d6:	1c0c      	adds	r4, r1, #0
    60d8:	1c16      	adds	r6, r2, #0
    60da:	2100      	movs	r1, #0
    60dc:	4668      	mov	r0, sp
    60de:	2210      	movs	r2, #16
    60e0:	4b1e      	ldr	r3, [pc, #120]	; (615c <at_ble_pair_key_reply+0x8c>)
    60e2:	4798      	blx	r3
    60e4:	2101      	movs	r1, #1
    60e6:	2e00      	cmp	r6, #0
    60e8:	d101      	bne.n	60ee <at_ble_pair_key_reply+0x1e>
    60ea:	1c31      	adds	r1, r6, #0
    60ec:	466e      	mov	r6, sp
    60ee:	2c00      	cmp	r4, #0
    60f0:	d116      	bne.n	6120 <at_ble_pair_key_reply+0x50>
    60f2:	2701      	movs	r7, #1
    60f4:	1c23      	adds	r3, r4, #0
    60f6:	1d70      	adds	r0, r6, #5
    60f8:	3e01      	subs	r6, #1
    60fa:	7802      	ldrb	r2, [r0, #0]
    60fc:	3801      	subs	r0, #1
    60fe:	3a30      	subs	r2, #48	; 0x30
    6100:	437a      	muls	r2, r7
    6102:	189b      	adds	r3, r3, r2
    6104:	220a      	movs	r2, #10
    6106:	4357      	muls	r7, r2
    6108:	42b0      	cmp	r0, r6
    610a:	d1f6      	bne.n	60fa <at_ble_pair_key_reply+0x2a>
    610c:	466a      	mov	r2, sp
    610e:	4668      	mov	r0, sp
    6110:	7013      	strb	r3, [r2, #0]
    6112:	0a1a      	lsrs	r2, r3, #8
    6114:	7042      	strb	r2, [r0, #1]
    6116:	0c1a      	lsrs	r2, r3, #16
    6118:	0e1b      	lsrs	r3, r3, #24
    611a:	7082      	strb	r2, [r0, #2]
    611c:	70c3      	strb	r3, [r0, #3]
    611e:	e015      	b.n	614c <at_ble_pair_key_reply+0x7c>
    6120:	2c01      	cmp	r4, #1
    6122:	d107      	bne.n	6134 <at_ble_pair_key_reply+0x64>
    6124:	2300      	movs	r3, #0
    6126:	4668      	mov	r0, sp
    6128:	5cf2      	ldrb	r2, [r6, r3]
    612a:	54c2      	strb	r2, [r0, r3]
    612c:	3301      	adds	r3, #1
    612e:	2b10      	cmp	r3, #16
    6130:	d1f9      	bne.n	6126 <at_ble_pair_key_reply+0x56>
    6132:	e00b      	b.n	614c <at_ble_pair_key_reply+0x7c>
    6134:	4c0a      	ldr	r4, [pc, #40]	; (6160 <at_ble_pair_key_reply+0x90>)
    6136:	490b      	ldr	r1, [pc, #44]	; (6164 <at_ble_pair_key_reply+0x94>)
    6138:	22ac      	movs	r2, #172	; 0xac
    613a:	4b0b      	ldr	r3, [pc, #44]	; (6168 <at_ble_pair_key_reply+0x98>)
    613c:	480b      	ldr	r0, [pc, #44]	; (616c <at_ble_pair_key_reply+0x9c>)
    613e:	6825      	ldr	r5, [r4, #0]
    6140:	47a8      	blx	r5
    6142:	6823      	ldr	r3, [r4, #0]
    6144:	480a      	ldr	r0, [pc, #40]	; (6170 <at_ble_pair_key_reply+0xa0>)
    6146:	4798      	blx	r3
    6148:	20cf      	movs	r0, #207	; 0xcf
    614a:	e005      	b.n	6158 <at_ble_pair_key_reply+0x88>
    614c:	2004      	movs	r0, #4
    614e:	466a      	mov	r2, sp
    6150:	1c2b      	adds	r3, r5, #0
    6152:	4c08      	ldr	r4, [pc, #32]	; (6174 <at_ble_pair_key_reply+0xa4>)
    6154:	47a0      	blx	r4
    6156:	2000      	movs	r0, #0
    6158:	b005      	add	sp, #20
    615a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    615c:	0000840d 	.word	0x0000840d
    6160:	20000044 	.word	0x20000044
    6164:	0000a700 	.word	0x0000a700
    6168:	0000a6cc 	.word	0x0000a6cc
    616c:	0000a1d9 	.word	0x0000a1d9
    6170:	0000a7f4 	.word	0x0000a7f4
    6174:	00006c81 	.word	0x00006c81

00006178 <at_ble_send_slave_sec_request>:
    6178:	b570      	push	{r4, r5, r6, lr}
    617a:	4b17      	ldr	r3, [pc, #92]	; (61d8 <at_ble_send_slave_sec_request+0x60>)
    617c:	1c0e      	adds	r6, r1, #0
    617e:	2100      	movs	r1, #0
    6180:	1c05      	adds	r5, r0, #0
    6182:	1c14      	adds	r4, r2, #0
    6184:	4798      	blx	r3
    6186:	2807      	cmp	r0, #7
    6188:	d90b      	bls.n	61a2 <at_ble_send_slave_sec_request+0x2a>
    618a:	4c14      	ldr	r4, [pc, #80]	; (61dc <at_ble_send_slave_sec_request+0x64>)
    618c:	4914      	ldr	r1, [pc, #80]	; (61e0 <at_ble_send_slave_sec_request+0x68>)
    618e:	22c3      	movs	r2, #195	; 0xc3
    6190:	4b14      	ldr	r3, [pc, #80]	; (61e4 <at_ble_send_slave_sec_request+0x6c>)
    6192:	4815      	ldr	r0, [pc, #84]	; (61e8 <at_ble_send_slave_sec_request+0x70>)
    6194:	6825      	ldr	r5, [r4, #0]
    6196:	47a8      	blx	r5
    6198:	6823      	ldr	r3, [r4, #0]
    619a:	4814      	ldr	r0, [pc, #80]	; (61ec <at_ble_send_slave_sec_request+0x74>)
    619c:	4798      	blx	r3
    619e:	2001      	movs	r0, #1
    61a0:	e018      	b.n	61d4 <at_ble_send_slave_sec_request+0x5c>
    61a2:	2312      	movs	r3, #18
    61a4:	4358      	muls	r0, r3
    61a6:	4b12      	ldr	r3, [pc, #72]	; (61f0 <at_ble_send_slave_sec_request+0x78>)
    61a8:	5cc3      	ldrb	r3, [r0, r3]
    61aa:	2b01      	cmp	r3, #1
    61ac:	d00b      	beq.n	61c6 <at_ble_send_slave_sec_request+0x4e>
    61ae:	4c0b      	ldr	r4, [pc, #44]	; (61dc <at_ble_send_slave_sec_request+0x64>)
    61b0:	490b      	ldr	r1, [pc, #44]	; (61e0 <at_ble_send_slave_sec_request+0x68>)
    61b2:	22c9      	movs	r2, #201	; 0xc9
    61b4:	4b0b      	ldr	r3, [pc, #44]	; (61e4 <at_ble_send_slave_sec_request+0x6c>)
    61b6:	480c      	ldr	r0, [pc, #48]	; (61e8 <at_ble_send_slave_sec_request+0x70>)
    61b8:	6825      	ldr	r5, [r4, #0]
    61ba:	47a8      	blx	r5
    61bc:	6823      	ldr	r3, [r4, #0]
    61be:	480d      	ldr	r0, [pc, #52]	; (61f4 <at_ble_send_slave_sec_request+0x7c>)
    61c0:	4798      	blx	r3
    61c2:	20e0      	movs	r0, #224	; 0xe0
    61c4:	e006      	b.n	61d4 <at_ble_send_slave_sec_request+0x5c>
    61c6:	00b1      	lsls	r1, r6, #2
    61c8:	430c      	orrs	r4, r1
    61ca:	1c28      	adds	r0, r5, #0
    61cc:	b2e1      	uxtb	r1, r4
    61ce:	4b0a      	ldr	r3, [pc, #40]	; (61f8 <at_ble_send_slave_sec_request+0x80>)
    61d0:	4798      	blx	r3
    61d2:	2000      	movs	r0, #0
    61d4:	bd70      	pop	{r4, r5, r6, pc}
    61d6:	46c0      	nop			; (mov r8, r8)
    61d8:	000065dd 	.word	0x000065dd
    61dc:	20000044 	.word	0x20000044
    61e0:	0000a700 	.word	0x0000a700
    61e4:	0000a6e2 	.word	0x0000a6e2
    61e8:	0000a1d9 	.word	0x0000a1d9
    61ec:	0000a803 	.word	0x0000a803
    61f0:	2000190c 	.word	0x2000190c
    61f4:	0000a813 	.word	0x0000a813
    61f8:	00006cd9 	.word	0x00006cd9

000061fc <at_ble_encryption_start>:
    61fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    61fe:	260f      	movs	r6, #15
    6200:	b087      	sub	sp, #28
    6202:	ab02      	add	r3, sp, #8
    6204:	18f6      	adds	r6, r6, r3
    6206:	2308      	movs	r3, #8
    6208:	1c07      	adds	r7, r0, #0
    620a:	1e0c      	subs	r4, r1, #0
    620c:	9203      	str	r2, [sp, #12]
    620e:	7033      	strb	r3, [r6, #0]
    6210:	d02f      	beq.n	6272 <at_ble_encryption_start+0x76>
    6212:	4d20      	ldr	r5, [pc, #128]	; (6294 <at_ble_encryption_start+0x98>)
    6214:	311a      	adds	r1, #26
    6216:	1c33      	adds	r3, r6, #0
    6218:	47a8      	blx	r5
    621a:	1e05      	subs	r5, r0, #0
    621c:	d12a      	bne.n	6274 <at_ble_encryption_start+0x78>
    621e:	2212      	movs	r2, #18
    6220:	7833      	ldrb	r3, [r6, #0]
    6222:	4353      	muls	r3, r2
    6224:	4a1c      	ldr	r2, [pc, #112]	; (6298 <at_ble_encryption_start+0x9c>)
    6226:	5c9b      	ldrb	r3, [r3, r2]
    6228:	2b00      	cmp	r3, #0
    622a:	d011      	beq.n	6250 <at_ble_encryption_start+0x54>
    622c:	2216      	movs	r2, #22
    622e:	4c1b      	ldr	r4, [pc, #108]	; (629c <at_ble_encryption_start+0xa0>)
    6230:	491b      	ldr	r1, [pc, #108]	; (62a0 <at_ble_encryption_start+0xa4>)
    6232:	32ff      	adds	r2, #255	; 0xff
    6234:	4b1b      	ldr	r3, [pc, #108]	; (62a4 <at_ble_encryption_start+0xa8>)
    6236:	6825      	ldr	r5, [r4, #0]
    6238:	481b      	ldr	r0, [pc, #108]	; (62a8 <at_ble_encryption_start+0xac>)
    623a:	47a8      	blx	r5
    623c:	2212      	movs	r2, #18
    623e:	7833      	ldrb	r3, [r6, #0]
    6240:	481a      	ldr	r0, [pc, #104]	; (62ac <at_ble_encryption_start+0xb0>)
    6242:	4353      	muls	r3, r2
    6244:	4a14      	ldr	r2, [pc, #80]	; (6298 <at_ble_encryption_start+0x9c>)
    6246:	25e0      	movs	r5, #224	; 0xe0
    6248:	5c99      	ldrb	r1, [r3, r2]
    624a:	6823      	ldr	r3, [r4, #0]
    624c:	4798      	blx	r3
    624e:	e011      	b.n	6274 <at_ble_encryption_start+0x78>
    6250:	1c21      	adds	r1, r4, #0
    6252:	221c      	movs	r2, #28
    6254:	4b16      	ldr	r3, [pc, #88]	; (62b0 <at_ble_encryption_start+0xb4>)
    6256:	4817      	ldr	r0, [pc, #92]	; (62b4 <at_ble_encryption_start+0xb8>)
    6258:	4798      	blx	r3
    625a:	1c23      	adds	r3, r4, #0
    625c:	7ea1      	ldrb	r1, [r4, #26]
    625e:	8a22      	ldrh	r2, [r4, #16]
    6260:	9100      	str	r1, [sp, #0]
    6262:	9903      	ldr	r1, [sp, #12]
    6264:	3312      	adds	r3, #18
    6266:	9101      	str	r1, [sp, #4]
    6268:	1c38      	adds	r0, r7, #0
    626a:	1c21      	adds	r1, r4, #0
    626c:	4c12      	ldr	r4, [pc, #72]	; (62b8 <at_ble_encryption_start+0xbc>)
    626e:	47a0      	blx	r4
    6270:	e00c      	b.n	628c <at_ble_encryption_start+0x90>
    6272:	25cf      	movs	r5, #207	; 0xcf
    6274:	228f      	movs	r2, #143	; 0x8f
    6276:	4c09      	ldr	r4, [pc, #36]	; (629c <at_ble_encryption_start+0xa0>)
    6278:	4909      	ldr	r1, [pc, #36]	; (62a0 <at_ble_encryption_start+0xa4>)
    627a:	4b0a      	ldr	r3, [pc, #40]	; (62a4 <at_ble_encryption_start+0xa8>)
    627c:	480a      	ldr	r0, [pc, #40]	; (62a8 <at_ble_encryption_start+0xac>)
    627e:	0052      	lsls	r2, r2, #1
    6280:	6826      	ldr	r6, [r4, #0]
    6282:	47b0      	blx	r6
    6284:	6823      	ldr	r3, [r4, #0]
    6286:	480d      	ldr	r0, [pc, #52]	; (62bc <at_ble_encryption_start+0xc0>)
    6288:	1c29      	adds	r1, r5, #0
    628a:	4798      	blx	r3
    628c:	1c28      	adds	r0, r5, #0
    628e:	b007      	add	sp, #28
    6290:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6292:	46c0      	nop			; (mov r8, r8)
    6294:	00005e1d 	.word	0x00005e1d
    6298:	2000190c 	.word	0x2000190c
    629c:	20000044 	.word	0x20000044
    62a0:	0000a700 	.word	0x0000a700
    62a4:	0000a844 	.word	0x0000a844
    62a8:	0000a1d9 	.word	0x0000a1d9
    62ac:	0000a822 	.word	0x0000a822
    62b0:	000083fb 	.word	0x000083fb
    62b4:	20001a1a 	.word	0x20001a1a
    62b8:	00006d21 	.word	0x00006d21
    62bc:	0000a2ce 	.word	0x0000a2ce

000062c0 <at_ble_encryption_request_reply>:
    62c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    62c2:	b085      	sub	sp, #20
    62c4:	1c06      	adds	r6, r0, #0
    62c6:	9103      	str	r1, [sp, #12]
    62c8:	1c17      	adds	r7, r2, #0
    62ca:	1e1d      	subs	r5, r3, #0
    62cc:	d014      	beq.n	62f8 <at_ble_encryption_request_reply+0x38>
    62ce:	2a00      	cmp	r2, #0
    62d0:	d109      	bne.n	62e6 <at_ble_encryption_request_reply+0x26>
    62d2:	7eab      	ldrb	r3, [r5, #26]
    62d4:	4c10      	ldr	r4, [pc, #64]	; (6318 <at_ble_encryption_request_reply+0x58>)
    62d6:	9300      	str	r3, [sp, #0]
    62d8:	1c30      	adds	r0, r6, #0
    62da:	9903      	ldr	r1, [sp, #12]
    62dc:	1c3a      	adds	r2, r7, #0
    62de:	1c2b      	adds	r3, r5, #0
    62e0:	47a0      	blx	r4
    62e2:	2400      	movs	r4, #0
    62e4:	e015      	b.n	6312 <at_ble_encryption_request_reply+0x52>
    62e6:	1c19      	adds	r1, r3, #0
    62e8:	4c0c      	ldr	r4, [pc, #48]	; (631c <at_ble_encryption_request_reply+0x5c>)
    62ea:	311a      	adds	r1, #26
    62ec:	9a03      	ldr	r2, [sp, #12]
    62ee:	2300      	movs	r3, #0
    62f0:	47a0      	blx	r4
    62f2:	1e04      	subs	r4, r0, #0
    62f4:	d0ed      	beq.n	62d2 <at_ble_encryption_request_reply+0x12>
    62f6:	e000      	b.n	62fa <at_ble_encryption_request_reply+0x3a>
    62f8:	24cf      	movs	r4, #207	; 0xcf
    62fa:	2238      	movs	r2, #56	; 0x38
    62fc:	4d08      	ldr	r5, [pc, #32]	; (6320 <at_ble_encryption_request_reply+0x60>)
    62fe:	4909      	ldr	r1, [pc, #36]	; (6324 <at_ble_encryption_request_reply+0x64>)
    6300:	4b09      	ldr	r3, [pc, #36]	; (6328 <at_ble_encryption_request_reply+0x68>)
    6302:	480a      	ldr	r0, [pc, #40]	; (632c <at_ble_encryption_request_reply+0x6c>)
    6304:	32ff      	adds	r2, #255	; 0xff
    6306:	682e      	ldr	r6, [r5, #0]
    6308:	47b0      	blx	r6
    630a:	682b      	ldr	r3, [r5, #0]
    630c:	4808      	ldr	r0, [pc, #32]	; (6330 <at_ble_encryption_request_reply+0x70>)
    630e:	1c21      	adds	r1, r4, #0
    6310:	4798      	blx	r3
    6312:	1c20      	adds	r0, r4, #0
    6314:	b005      	add	sp, #20
    6316:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6318:	00006ddd 	.word	0x00006ddd
    631c:	00005e1d 	.word	0x00005e1d
    6320:	20000044 	.word	0x20000044
    6324:	0000a700 	.word	0x0000a700
    6328:	0000a6ac 	.word	0x0000a6ac
    632c:	0000a1d9 	.word	0x0000a1d9
    6330:	0000a2ce 	.word	0x0000a2ce

00006334 <patchFuncAndVars>:
    6334:	b538      	push	{r3, r4, r5, lr}
    6336:	1c05      	adds	r5, r0, #0
    6338:	4c27      	ldr	r4, [pc, #156]	; (63d8 <patchFuncAndVars+0xa4>)
    633a:	4828      	ldr	r0, [pc, #160]	; (63dc <patchFuncAndVars+0xa8>)
    633c:	4928      	ldr	r1, [pc, #160]	; (63e0 <patchFuncAndVars+0xac>)
    633e:	47a0      	blx	r4
    6340:	4828      	ldr	r0, [pc, #160]	; (63e4 <patchFuncAndVars+0xb0>)
    6342:	4929      	ldr	r1, [pc, #164]	; (63e8 <patchFuncAndVars+0xb4>)
    6344:	47a0      	blx	r4
    6346:	4829      	ldr	r0, [pc, #164]	; (63ec <patchFuncAndVars+0xb8>)
    6348:	4929      	ldr	r1, [pc, #164]	; (63f0 <patchFuncAndVars+0xbc>)
    634a:	47a0      	blx	r4
    634c:	4829      	ldr	r0, [pc, #164]	; (63f4 <patchFuncAndVars+0xc0>)
    634e:	492a      	ldr	r1, [pc, #168]	; (63f8 <patchFuncAndVars+0xc4>)
    6350:	47a0      	blx	r4
    6352:	482a      	ldr	r0, [pc, #168]	; (63fc <patchFuncAndVars+0xc8>)
    6354:	492a      	ldr	r1, [pc, #168]	; (6400 <patchFuncAndVars+0xcc>)
    6356:	47a0      	blx	r4
    6358:	482a      	ldr	r0, [pc, #168]	; (6404 <patchFuncAndVars+0xd0>)
    635a:	492b      	ldr	r1, [pc, #172]	; (6408 <patchFuncAndVars+0xd4>)
    635c:	47a0      	blx	r4
    635e:	482b      	ldr	r0, [pc, #172]	; (640c <patchFuncAndVars+0xd8>)
    6360:	492b      	ldr	r1, [pc, #172]	; (6410 <patchFuncAndVars+0xdc>)
    6362:	47a0      	blx	r4
    6364:	482b      	ldr	r0, [pc, #172]	; (6414 <patchFuncAndVars+0xe0>)
    6366:	492c      	ldr	r1, [pc, #176]	; (6418 <patchFuncAndVars+0xe4>)
    6368:	47a0      	blx	r4
    636a:	482c      	ldr	r0, [pc, #176]	; (641c <patchFuncAndVars+0xe8>)
    636c:	492c      	ldr	r1, [pc, #176]	; (6420 <patchFuncAndVars+0xec>)
    636e:	47a0      	blx	r4
    6370:	482c      	ldr	r0, [pc, #176]	; (6424 <patchFuncAndVars+0xf0>)
    6372:	492d      	ldr	r1, [pc, #180]	; (6428 <patchFuncAndVars+0xf4>)
    6374:	47a0      	blx	r4
    6376:	482d      	ldr	r0, [pc, #180]	; (642c <patchFuncAndVars+0xf8>)
    6378:	492d      	ldr	r1, [pc, #180]	; (6430 <patchFuncAndVars+0xfc>)
    637a:	47a0      	blx	r4
    637c:	482d      	ldr	r0, [pc, #180]	; (6434 <patchFuncAndVars+0x100>)
    637e:	492e      	ldr	r1, [pc, #184]	; (6438 <patchFuncAndVars+0x104>)
    6380:	47a0      	blx	r4
    6382:	482e      	ldr	r0, [pc, #184]	; (643c <patchFuncAndVars+0x108>)
    6384:	492e      	ldr	r1, [pc, #184]	; (6440 <patchFuncAndVars+0x10c>)
    6386:	47a0      	blx	r4
    6388:	482e      	ldr	r0, [pc, #184]	; (6444 <patchFuncAndVars+0x110>)
    638a:	492f      	ldr	r1, [pc, #188]	; (6448 <patchFuncAndVars+0x114>)
    638c:	47a0      	blx	r4
    638e:	482f      	ldr	r0, [pc, #188]	; (644c <patchFuncAndVars+0x118>)
    6390:	492f      	ldr	r1, [pc, #188]	; (6450 <patchFuncAndVars+0x11c>)
    6392:	47a0      	blx	r4
    6394:	482f      	ldr	r0, [pc, #188]	; (6454 <patchFuncAndVars+0x120>)
    6396:	4930      	ldr	r1, [pc, #192]	; (6458 <patchFuncAndVars+0x124>)
    6398:	47a0      	blx	r4
    639a:	4830      	ldr	r0, [pc, #192]	; (645c <patchFuncAndVars+0x128>)
    639c:	4930      	ldr	r1, [pc, #192]	; (6460 <patchFuncAndVars+0x12c>)
    639e:	47a0      	blx	r4
    63a0:	4830      	ldr	r0, [pc, #192]	; (6464 <patchFuncAndVars+0x130>)
    63a2:	4931      	ldr	r1, [pc, #196]	; (6468 <patchFuncAndVars+0x134>)
    63a4:	47a0      	blx	r4
    63a6:	4831      	ldr	r0, [pc, #196]	; (646c <patchFuncAndVars+0x138>)
    63a8:	4931      	ldr	r1, [pc, #196]	; (6470 <patchFuncAndVars+0x13c>)
    63aa:	47a0      	blx	r4
    63ac:	4931      	ldr	r1, [pc, #196]	; (6474 <patchFuncAndVars+0x140>)
    63ae:	4832      	ldr	r0, [pc, #200]	; (6478 <patchFuncAndVars+0x144>)
    63b0:	47a0      	blx	r4
    63b2:	7869      	ldrb	r1, [r5, #1]
    63b4:	2901      	cmp	r1, #1
    63b6:	d101      	bne.n	63bc <patchFuncAndVars+0x88>
    63b8:	4830      	ldr	r0, [pc, #192]	; (647c <patchFuncAndVars+0x148>)
    63ba:	47a0      	blx	r4
    63bc:	4830      	ldr	r0, [pc, #192]	; (6480 <patchFuncAndVars+0x14c>)
    63be:	2101      	movs	r1, #1
    63c0:	47a0      	blx	r4
    63c2:	4830      	ldr	r0, [pc, #192]	; (6484 <patchFuncAndVars+0x150>)
    63c4:	2101      	movs	r1, #1
    63c6:	47a0      	blx	r4
    63c8:	482f      	ldr	r0, [pc, #188]	; (6488 <patchFuncAndVars+0x154>)
    63ca:	2104      	movs	r1, #4
    63cc:	47a0      	blx	r4
    63ce:	2102      	movs	r1, #2
    63d0:	482e      	ldr	r0, [pc, #184]	; (648c <patchFuncAndVars+0x158>)
    63d2:	31ff      	adds	r1, #255	; 0xff
    63d4:	47a0      	blx	r4
    63d6:	bd38      	pop	{r3, r4, r5, pc}
    63d8:	00007ffd 	.word	0x00007ffd
    63dc:	100401c0 	.word	0x100401c0
    63e0:	10006ae3 	.word	0x10006ae3
    63e4:	1004000c 	.word	0x1004000c
    63e8:	100053a5 	.word	0x100053a5
    63ec:	10040010 	.word	0x10040010
    63f0:	1000549d 	.word	0x1000549d
    63f4:	1004004c 	.word	0x1004004c
    63f8:	10005515 	.word	0x10005515
    63fc:	10040034 	.word	0x10040034
    6400:	10005647 	.word	0x10005647
    6404:	10040068 	.word	0x10040068
    6408:	10005955 	.word	0x10005955
    640c:	10040088 	.word	0x10040088
    6410:	10005a5d 	.word	0x10005a5d
    6414:	100400bc 	.word	0x100400bc
    6418:	10005b7d 	.word	0x10005b7d
    641c:	100400dc 	.word	0x100400dc
    6420:	10005c9d 	.word	0x10005c9d
    6424:	100400e4 	.word	0x100400e4
    6428:	10005e6d 	.word	0x10005e6d
    642c:	100400e8 	.word	0x100400e8
    6430:	100060df 	.word	0x100060df
    6434:	100400ec 	.word	0x100400ec
    6438:	10006199 	.word	0x10006199
    643c:	1004010c 	.word	0x1004010c
    6440:	1000634d 	.word	0x1000634d
    6444:	10040154 	.word	0x10040154
    6448:	10006545 	.word	0x10006545
    644c:	10040160 	.word	0x10040160
    6450:	100065f5 	.word	0x100065f5
    6454:	10040174 	.word	0x10040174
    6458:	1000678d 	.word	0x1000678d
    645c:	10040210 	.word	0x10040210
    6460:	10007571 	.word	0x10007571
    6464:	10040038 	.word	0x10040038
    6468:	100057ff 	.word	0x100057ff
    646c:	10000004 	.word	0x10000004
    6470:	10005881 	.word	0x10005881
    6474:	100057db 	.word	0x100057db
    6478:	1000003c 	.word	0x1000003c
    647c:	10007ca0 	.word	0x10007ca0
    6480:	10040168 	.word	0x10040168
    6484:	10007bd0 	.word	0x10007bd0
    6488:	10007bd4 	.word	0x10007bd4
    648c:	10040000 	.word	0x10040000

00006490 <__printingNullFun>:
    6490:	b40f      	push	{r0, r1, r2, r3}
    6492:	2000      	movs	r0, #0
    6494:	b004      	add	sp, #16
    6496:	4770      	bx	lr

00006498 <dbg_le_set_bd_addr_req_handler>:
    6498:	4a14      	ldr	r2, [pc, #80]	; (64ec <dbg_le_set_bd_addr_req_handler+0x54>)
    649a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    649c:	6814      	ldr	r4, [r2, #0]
    649e:	2300      	movs	r3, #0
    64a0:	2205      	movs	r2, #5
    64a2:	1c01      	adds	r1, r0, #0
    64a4:	2603      	movs	r6, #3
    64a6:	270f      	movs	r7, #15
    64a8:	1c20      	adds	r0, r4, #0
    64aa:	4d11      	ldr	r5, [pc, #68]	; (64f0 <dbg_le_set_bd_addr_req_handler+0x58>)
    64ac:	3009      	adds	r0, #9
    64ae:	60ab      	str	r3, [r5, #8]
    64b0:	60eb      	str	r3, [r5, #12]
    64b2:	7022      	strb	r2, [r4, #0]
    64b4:	320b      	adds	r2, #11
    64b6:	7123      	strb	r3, [r4, #4]
    64b8:	7162      	strb	r2, [r4, #5]
    64ba:	71a3      	strb	r3, [r4, #6]
    64bc:	71e3      	strb	r3, [r4, #7]
    64be:	7223      	strb	r3, [r4, #8]
    64c0:	3a0a      	subs	r2, #10
    64c2:	4b0c      	ldr	r3, [pc, #48]	; (64f4 <dbg_le_set_bd_addr_req_handler+0x5c>)
    64c4:	7067      	strb	r7, [r4, #1]
    64c6:	70a6      	strb	r6, [r4, #2]
    64c8:	70e6      	strb	r6, [r4, #3]
    64ca:	4798      	blx	r3
    64cc:	4b0a      	ldr	r3, [pc, #40]	; (64f8 <dbg_le_set_bd_addr_req_handler+0x60>)
    64ce:	1c20      	adds	r0, r4, #0
    64d0:	802b      	strh	r3, [r5, #0]
    64d2:	2306      	movs	r3, #6
    64d4:	1c39      	adds	r1, r7, #0
    64d6:	71e3      	strb	r3, [r4, #7]
    64d8:	4b08      	ldr	r3, [pc, #32]	; (64fc <dbg_le_set_bd_addr_req_handler+0x64>)
    64da:	80ae      	strh	r6, [r5, #4]
    64dc:	4798      	blx	r3
    64de:	4b08      	ldr	r3, [pc, #32]	; (6500 <dbg_le_set_bd_addr_req_handler+0x68>)
    64e0:	4798      	blx	r3
    64e2:	28d0      	cmp	r0, #208	; 0xd0
    64e4:	d001      	beq.n	64ea <dbg_le_set_bd_addr_req_handler+0x52>
    64e6:	68ab      	ldr	r3, [r5, #8]
    64e8:	7818      	ldrb	r0, [r3, #0]
    64ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64ec:	0000a6a0 	.word	0x0000a6a0
    64f0:	200018fc 	.word	0x200018fc
    64f4:	000083fb 	.word	0x000083fb
    64f8:	00000329 	.word	0x00000329
    64fc:	00005b19 	.word	0x00005b19
    6500:	00005d7d 	.word	0x00005d7d

00006504 <gapc_get_dev_info_cfm.constprop.1>:
    6504:	2200      	movs	r2, #0
    6506:	b538      	push	{r3, r4, r5, lr}
    6508:	4b2e      	ldr	r3, [pc, #184]	; (65c4 <gapc_get_dev_info_cfm.constprop.1+0xc0>)
    650a:	250e      	movs	r5, #14
    650c:	609a      	str	r2, [r3, #8]
    650e:	60da      	str	r2, [r3, #12]
    6510:	4b2d      	ldr	r3, [pc, #180]	; (65c8 <gapc_get_dev_info_cfm.constprop.1+0xc4>)
    6512:	681c      	ldr	r4, [r3, #0]
    6514:	2305      	movs	r3, #5
    6516:	7121      	strb	r1, [r4, #4]
    6518:	2110      	movs	r1, #16
    651a:	7023      	strb	r3, [r4, #0]
    651c:	70a5      	strb	r5, [r4, #2]
    651e:	3306      	adds	r3, #6
    6520:	3529      	adds	r5, #41	; 0x29
    6522:	7063      	strb	r3, [r4, #1]
    6524:	70e5      	strb	r5, [r4, #3]
    6526:	7161      	strb	r1, [r4, #5]
    6528:	71a2      	strb	r2, [r4, #6]
    652a:	71e2      	strb	r2, [r4, #7]
    652c:	7222      	strb	r2, [r4, #8]
    652e:	7260      	strb	r0, [r4, #9]
    6530:	72a2      	strb	r2, [r4, #10]
    6532:	2801      	cmp	r0, #1
    6534:	d032      	beq.n	659c <gapc_get_dev_info_cfm.constprop.1+0x98>
    6536:	4290      	cmp	r0, r2
    6538:	d01f      	beq.n	657a <gapc_get_dev_info_cfm.constprop.1+0x76>
    653a:	2802      	cmp	r0, #2
    653c:	d137      	bne.n	65ae <gapc_get_dev_info_cfm.constprop.1+0xaa>
    653e:	4b23      	ldr	r3, [pc, #140]	; (65cc <gapc_get_dev_info_cfm.constprop.1+0xc8>)
    6540:	1c1a      	adds	r2, r3, #0
    6542:	32ce      	adds	r2, #206	; 0xce
    6544:	8811      	ldrh	r1, [r2, #0]
    6546:	72e1      	strb	r1, [r4, #11]
    6548:	8812      	ldrh	r2, [r2, #0]
    654a:	0a12      	lsrs	r2, r2, #8
    654c:	7322      	strb	r2, [r4, #12]
    654e:	1c1a      	adds	r2, r3, #0
    6550:	32d0      	adds	r2, #208	; 0xd0
    6552:	8811      	ldrh	r1, [r2, #0]
    6554:	7361      	strb	r1, [r4, #13]
    6556:	8812      	ldrh	r2, [r2, #0]
    6558:	0a12      	lsrs	r2, r2, #8
    655a:	73a2      	strb	r2, [r4, #14]
    655c:	1c1a      	adds	r2, r3, #0
    655e:	32d2      	adds	r2, #210	; 0xd2
    6560:	8811      	ldrh	r1, [r2, #0]
    6562:	33d4      	adds	r3, #212	; 0xd4
    6564:	73e1      	strb	r1, [r4, #15]
    6566:	8812      	ldrh	r2, [r2, #0]
    6568:	2113      	movs	r1, #19
    656a:	0a12      	lsrs	r2, r2, #8
    656c:	7422      	strb	r2, [r4, #16]
    656e:	881a      	ldrh	r2, [r3, #0]
    6570:	7462      	strb	r2, [r4, #17]
    6572:	881b      	ldrh	r3, [r3, #0]
    6574:	0a1b      	lsrs	r3, r3, #8
    6576:	74a3      	strb	r3, [r4, #18]
    6578:	e01a      	b.n	65b0 <gapc_get_dev_info_cfm.constprop.1+0xac>
    657a:	1c20      	adds	r0, r4, #0
    657c:	4d13      	ldr	r5, [pc, #76]	; (65cc <gapc_get_dev_info_cfm.constprop.1+0xc8>)
    657e:	4914      	ldr	r1, [pc, #80]	; (65d0 <gapc_get_dev_info_cfm.constprop.1+0xcc>)
    6580:	35aa      	adds	r5, #170	; 0xaa
    6582:	882b      	ldrh	r3, [r5, #0]
    6584:	300d      	adds	r0, #13
    6586:	72e3      	strb	r3, [r4, #11]
    6588:	882b      	ldrh	r3, [r5, #0]
    658a:	0a1b      	lsrs	r3, r3, #8
    658c:	7323      	strb	r3, [r4, #12]
    658e:	882a      	ldrh	r2, [r5, #0]
    6590:	4b10      	ldr	r3, [pc, #64]	; (65d4 <gapc_get_dev_info_cfm.constprop.1+0xd0>)
    6592:	4798      	blx	r3
    6594:	8829      	ldrh	r1, [r5, #0]
    6596:	310d      	adds	r1, #13
    6598:	b289      	uxth	r1, r1
    659a:	e009      	b.n	65b0 <gapc_get_dev_info_cfm.constprop.1+0xac>
    659c:	4b0b      	ldr	r3, [pc, #44]	; (65cc <gapc_get_dev_info_cfm.constprop.1+0xc8>)
    659e:	210d      	movs	r1, #13
    65a0:	33cc      	adds	r3, #204	; 0xcc
    65a2:	881a      	ldrh	r2, [r3, #0]
    65a4:	72e2      	strb	r2, [r4, #11]
    65a6:	881b      	ldrh	r3, [r3, #0]
    65a8:	0a1b      	lsrs	r3, r3, #8
    65aa:	7323      	strb	r3, [r4, #12]
    65ac:	e000      	b.n	65b0 <gapc_get_dev_info_cfm.constprop.1+0xac>
    65ae:	1c19      	adds	r1, r3, #0
    65b0:	1c0b      	adds	r3, r1, #0
    65b2:	3b09      	subs	r3, #9
    65b4:	71e3      	strb	r3, [r4, #7]
    65b6:	121b      	asrs	r3, r3, #8
    65b8:	7223      	strb	r3, [r4, #8]
    65ba:	1c20      	adds	r0, r4, #0
    65bc:	4b06      	ldr	r3, [pc, #24]	; (65d8 <gapc_get_dev_info_cfm.constprop.1+0xd4>)
    65be:	4798      	blx	r3
    65c0:	bd38      	pop	{r3, r4, r5, pc}
    65c2:	46c0      	nop			; (mov r8, r8)
    65c4:	200018fc 	.word	0x200018fc
    65c8:	0000a6a0 	.word	0x0000a6a0
    65cc:	2000199c 	.word	0x2000199c
    65d0:	20001a48 	.word	0x20001a48
    65d4:	000083fb 	.word	0x000083fb
    65d8:	00005b19 	.word	0x00005b19

000065dc <check_ConnData_idx_role>:
    65dc:	4b0c      	ldr	r3, [pc, #48]	; (6610 <check_ConnData_idx_role+0x34>)
    65de:	b570      	push	{r4, r5, r6, lr}
    65e0:	1c04      	adds	r4, r0, #0
    65e2:	2008      	movs	r0, #8
    65e4:	429c      	cmp	r4, r3
    65e6:	d011      	beq.n	660c <check_ConnData_idx_role+0x30>
    65e8:	2300      	movs	r3, #0
    65ea:	2212      	movs	r2, #18
    65ec:	435a      	muls	r2, r3
    65ee:	4d09      	ldr	r5, [pc, #36]	; (6614 <check_ConnData_idx_role+0x38>)
    65f0:	b2d8      	uxtb	r0, r3
    65f2:	1956      	adds	r6, r2, r5
    65f4:	8976      	ldrh	r6, [r6, #10]
    65f6:	42a6      	cmp	r6, r4
    65f8:	d104      	bne.n	6604 <check_ConnData_idx_role+0x28>
    65fa:	2900      	cmp	r1, #0
    65fc:	d006      	beq.n	660c <check_ConnData_idx_role+0x30>
    65fe:	5d53      	ldrb	r3, [r2, r5]
    6600:	700b      	strb	r3, [r1, #0]
    6602:	e003      	b.n	660c <check_ConnData_idx_role+0x30>
    6604:	3301      	adds	r3, #1
    6606:	2b08      	cmp	r3, #8
    6608:	d1ef      	bne.n	65ea <check_ConnData_idx_role+0xe>
    660a:	1c18      	adds	r0, r3, #0
    660c:	bd70      	pop	{r4, r5, r6, pc}
    660e:	46c0      	nop			; (mov r8, r8)
    6610:	0000ffff 	.word	0x0000ffff
    6614:	2000190c 	.word	0x2000190c

00006618 <check_ConnData_emptyEntry>:
    6618:	2300      	movs	r3, #0
    661a:	2212      	movs	r2, #18
    661c:	435a      	muls	r2, r3
    661e:	4906      	ldr	r1, [pc, #24]	; (6638 <check_ConnData_emptyEntry+0x20>)
    6620:	b2d8      	uxtb	r0, r3
    6622:	1852      	adds	r2, r2, r1
    6624:	8951      	ldrh	r1, [r2, #10]
    6626:	4a05      	ldr	r2, [pc, #20]	; (663c <check_ConnData_emptyEntry+0x24>)
    6628:	4291      	cmp	r1, r2
    662a:	d003      	beq.n	6634 <check_ConnData_emptyEntry+0x1c>
    662c:	3301      	adds	r3, #1
    662e:	2b08      	cmp	r3, #8
    6630:	d1f3      	bne.n	661a <check_ConnData_emptyEntry+0x2>
    6632:	1c18      	adds	r0, r3, #0
    6634:	4770      	bx	lr
    6636:	46c0      	nop			; (mov r8, r8)
    6638:	2000190c 	.word	0x2000190c
    663c:	0000ffff 	.word	0x0000ffff

00006640 <gapc_cmp_evt>:
    6640:	b5f0      	push	{r4, r5, r6, r7, lr}
    6642:	1c14      	adds	r4, r2, #0
    6644:	780a      	ldrb	r2, [r1, #0]
    6646:	b085      	sub	sp, #20
    6648:	1c03      	adds	r3, r0, #0
    664a:	1e50      	subs	r0, r2, #1
    664c:	9201      	str	r2, [sp, #4]
    664e:	784d      	ldrb	r5, [r1, #1]
    6650:	280f      	cmp	r0, #15
    6652:	d900      	bls.n	6656 <gapc_cmp_evt+0x16>
    6654:	e085      	b.n	6762 <gapc_cmp_evt+0x122>
    6656:	f001 fdd5 	bl	8204 <__gnu_thumb1_case_uqi>
    665a:	5808      	.short	0x5808
    665c:	58588484 	.word	0x58588484
    6660:	132e6c84 	.word	0x132e6c84
    6664:	84849126 	.word	0x84849126
    6668:	483a      	.short	0x483a
    666a:	203a      	movs	r0, #58	; 0x3a
    666c:	2d00      	cmp	r5, #0
    666e:	d100      	bne.n	6672 <gapc_cmp_evt+0x32>
    6670:	e085      	b.n	677e <gapc_cmp_evt+0x13e>
    6672:	0a1b      	lsrs	r3, r3, #8
    6674:	8023      	strh	r3, [r4, #0]
    6676:	2300      	movs	r3, #0
    6678:	70a5      	strb	r5, [r4, #2]
    667a:	70e3      	strb	r3, [r4, #3]
    667c:	3834      	subs	r0, #52	; 0x34
    667e:	e07e      	b.n	677e <gapc_cmp_evt+0x13e>
    6680:	aa02      	add	r2, sp, #8
    6682:	1dd6      	adds	r6, r2, #7
    6684:	2201      	movs	r2, #1
    6686:	0a1f      	lsrs	r7, r3, #8
    6688:	1c38      	adds	r0, r7, #0
    668a:	1c31      	adds	r1, r6, #0
    668c:	4b3d      	ldr	r3, [pc, #244]	; (6784 <gapc_cmp_evt+0x144>)
    668e:	7032      	strb	r2, [r6, #0]
    6690:	4798      	blx	r3
    6692:	2807      	cmp	r0, #7
    6694:	d803      	bhi.n	669e <gapc_cmp_evt+0x5e>
    6696:	7833      	ldrb	r3, [r6, #0]
    6698:	203a      	movs	r0, #58	; 0x3a
    669a:	2b00      	cmp	r3, #0
    669c:	d06f      	beq.n	677e <gapc_cmp_evt+0x13e>
    669e:	8067      	strh	r7, [r4, #2]
    66a0:	7125      	strb	r5, [r4, #4]
    66a2:	2009      	movs	r0, #9
    66a4:	e06b      	b.n	677e <gapc_cmp_evt+0x13e>
    66a6:	203a      	movs	r0, #58	; 0x3a
    66a8:	2d00      	cmp	r5, #0
    66aa:	d068      	beq.n	677e <gapc_cmp_evt+0x13e>
    66ac:	0a1b      	lsrs	r3, r3, #8
    66ae:	8023      	strh	r3, [r4, #0]
    66b0:	70a5      	strb	r5, [r4, #2]
    66b2:	382c      	subs	r0, #44	; 0x2c
    66b4:	e063      	b.n	677e <gapc_cmp_evt+0x13e>
    66b6:	203a      	movs	r0, #58	; 0x3a
    66b8:	2d00      	cmp	r5, #0
    66ba:	d060      	beq.n	677e <gapc_cmp_evt+0x13e>
    66bc:	0a1b      	lsrs	r3, r3, #8
    66be:	8023      	strh	r3, [r4, #0]
    66c0:	2300      	movs	r3, #0
    66c2:	70a5      	strb	r5, [r4, #2]
    66c4:	80a3      	strh	r3, [r4, #4]
    66c6:	80e3      	strh	r3, [r4, #6]
    66c8:	8123      	strh	r3, [r4, #8]
    66ca:	3833      	subs	r0, #51	; 0x33
    66cc:	e057      	b.n	677e <gapc_cmp_evt+0x13e>
    66ce:	203a      	movs	r0, #58	; 0x3a
    66d0:	2d00      	cmp	r5, #0
    66d2:	d054      	beq.n	677e <gapc_cmp_evt+0x13e>
    66d4:	7225      	strb	r5, [r4, #8]
    66d6:	4c2c      	ldr	r4, [pc, #176]	; (6788 <gapc_cmp_evt+0x148>)
    66d8:	4b2c      	ldr	r3, [pc, #176]	; (678c <gapc_cmp_evt+0x14c>)
    66da:	482d      	ldr	r0, [pc, #180]	; (6790 <gapc_cmp_evt+0x150>)
    66dc:	492d      	ldr	r1, [pc, #180]	; (6794 <gapc_cmp_evt+0x154>)
    66de:	228f      	movs	r2, #143	; 0x8f
    66e0:	6825      	ldr	r5, [r4, #0]
    66e2:	47a8      	blx	r5
    66e4:	6823      	ldr	r3, [r4, #0]
    66e6:	482c      	ldr	r0, [pc, #176]	; (6798 <gapc_cmp_evt+0x158>)
    66e8:	e00c      	b.n	6704 <gapc_cmp_evt+0xc4>
    66ea:	203a      	movs	r0, #58	; 0x3a
    66ec:	2d00      	cmp	r5, #0
    66ee:	d046      	beq.n	677e <gapc_cmp_evt+0x13e>
    66f0:	7125      	strb	r5, [r4, #4]
    66f2:	4c25      	ldr	r4, [pc, #148]	; (6788 <gapc_cmp_evt+0x148>)
    66f4:	4b25      	ldr	r3, [pc, #148]	; (678c <gapc_cmp_evt+0x14c>)
    66f6:	4826      	ldr	r0, [pc, #152]	; (6790 <gapc_cmp_evt+0x150>)
    66f8:	4926      	ldr	r1, [pc, #152]	; (6794 <gapc_cmp_evt+0x154>)
    66fa:	229f      	movs	r2, #159	; 0x9f
    66fc:	6825      	ldr	r5, [r4, #0]
    66fe:	47a8      	blx	r5
    6700:	6823      	ldr	r3, [r4, #0]
    6702:	4826      	ldr	r0, [pc, #152]	; (679c <gapc_cmp_evt+0x15c>)
    6704:	4798      	blx	r3
    6706:	2029      	movs	r0, #41	; 0x29
    6708:	e039      	b.n	677e <gapc_cmp_evt+0x13e>
    670a:	203a      	movs	r0, #58	; 0x3a
    670c:	2d00      	cmp	r5, #0
    670e:	d036      	beq.n	677e <gapc_cmp_evt+0x13e>
    6710:	4f1d      	ldr	r7, [pc, #116]	; (6788 <gapc_cmp_evt+0x148>)
    6712:	4920      	ldr	r1, [pc, #128]	; (6794 <gapc_cmp_evt+0x154>)
    6714:	22b5      	movs	r2, #181	; 0xb5
    6716:	4b1d      	ldr	r3, [pc, #116]	; (678c <gapc_cmp_evt+0x14c>)
    6718:	481d      	ldr	r0, [pc, #116]	; (6790 <gapc_cmp_evt+0x150>)
    671a:	683e      	ldr	r6, [r7, #0]
    671c:	47b0      	blx	r6
    671e:	683b      	ldr	r3, [r7, #0]
    6720:	481f      	ldr	r0, [pc, #124]	; (67a0 <gapc_cmp_evt+0x160>)
    6722:	1c29      	adds	r1, r5, #0
    6724:	4798      	blx	r3
    6726:	466b      	mov	r3, sp
    6728:	791b      	ldrb	r3, [r3, #4]
    672a:	70e5      	strb	r5, [r4, #3]
    672c:	70a3      	strb	r3, [r4, #2]
    672e:	2011      	movs	r0, #17
    6730:	e025      	b.n	677e <gapc_cmp_evt+0x13e>
    6732:	203a      	movs	r0, #58	; 0x3a
    6734:	2d00      	cmp	r5, #0
    6736:	d022      	beq.n	677e <gapc_cmp_evt+0x13e>
    6738:	0a1b      	lsrs	r3, r3, #8
    673a:	8063      	strh	r3, [r4, #2]
    673c:	7025      	strb	r5, [r4, #0]
    673e:	1d20      	adds	r0, r4, #4
    6740:	2100      	movs	r1, #0
    6742:	2205      	movs	r2, #5
    6744:	4b17      	ldr	r3, [pc, #92]	; (67a4 <gapc_cmp_evt+0x164>)
    6746:	4798      	blx	r3
    6748:	4c0f      	ldr	r4, [pc, #60]	; (6788 <gapc_cmp_evt+0x148>)
    674a:	4912      	ldr	r1, [pc, #72]	; (6794 <gapc_cmp_evt+0x154>)
    674c:	22c7      	movs	r2, #199	; 0xc7
    674e:	4b0f      	ldr	r3, [pc, #60]	; (678c <gapc_cmp_evt+0x14c>)
    6750:	480f      	ldr	r0, [pc, #60]	; (6790 <gapc_cmp_evt+0x150>)
    6752:	6826      	ldr	r6, [r4, #0]
    6754:	47b0      	blx	r6
    6756:	6823      	ldr	r3, [r4, #0]
    6758:	4813      	ldr	r0, [pc, #76]	; (67a8 <gapc_cmp_evt+0x168>)
    675a:	1c29      	adds	r1, r5, #0
    675c:	4798      	blx	r3
    675e:	2012      	movs	r0, #18
    6760:	e00d      	b.n	677e <gapc_cmp_evt+0x13e>
    6762:	4c09      	ldr	r4, [pc, #36]	; (6788 <gapc_cmp_evt+0x148>)
    6764:	490b      	ldr	r1, [pc, #44]	; (6794 <gapc_cmp_evt+0x154>)
    6766:	22d1      	movs	r2, #209	; 0xd1
    6768:	4b08      	ldr	r3, [pc, #32]	; (678c <gapc_cmp_evt+0x14c>)
    676a:	4809      	ldr	r0, [pc, #36]	; (6790 <gapc_cmp_evt+0x150>)
    676c:	6825      	ldr	r5, [r4, #0]
    676e:	47a8      	blx	r5
    6770:	6823      	ldr	r3, [r4, #0]
    6772:	480e      	ldr	r0, [pc, #56]	; (67ac <gapc_cmp_evt+0x16c>)
    6774:	9901      	ldr	r1, [sp, #4]
    6776:	4798      	blx	r3
    6778:	2000      	movs	r0, #0
    677a:	e000      	b.n	677e <gapc_cmp_evt+0x13e>
    677c:	203a      	movs	r0, #58	; 0x3a
    677e:	b005      	add	sp, #20
    6780:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6782:	46c0      	nop			; (mov r8, r8)
    6784:	000065dd 	.word	0x000065dd
    6788:	20000044 	.word	0x20000044
    678c:	0000a870 	.word	0x0000a870
    6790:	0000a1d9 	.word	0x0000a1d9
    6794:	0000a89b 	.word	0x0000a89b
    6798:	0000a8d6 	.word	0x0000a8d6
    679c:	0000a8f8 	.word	0x0000a8f8
    67a0:	0000a91a 	.word	0x0000a91a
    67a4:	0000840d 	.word	0x0000840d
    67a8:	0000a941 	.word	0x0000a941
    67ac:	0000a96a 	.word	0x0000a96a

000067b0 <gapc_connection_cfm_handler>:
    67b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    67b2:	2500      	movs	r5, #0
    67b4:	b085      	sub	sp, #20
    67b6:	1c1e      	adds	r6, r3, #0
    67b8:	ab0a      	add	r3, sp, #40	; 0x28
    67ba:	781b      	ldrb	r3, [r3, #0]
    67bc:	9201      	str	r2, [sp, #4]
    67be:	9302      	str	r3, [sp, #8]
    67c0:	ab0b      	add	r3, sp, #44	; 0x2c
    67c2:	781b      	ldrb	r3, [r3, #0]
    67c4:	1c07      	adds	r7, r0, #0
    67c6:	9303      	str	r3, [sp, #12]
    67c8:	ab0c      	add	r3, sp, #48	; 0x30
    67ca:	881a      	ldrh	r2, [r3, #0]
    67cc:	4b23      	ldr	r3, [pc, #140]	; (685c <gapc_connection_cfm_handler+0xac>)
    67ce:	9100      	str	r1, [sp, #0]
    67d0:	609d      	str	r5, [r3, #8]
    67d2:	60dd      	str	r5, [r3, #12]
    67d4:	4b22      	ldr	r3, [pc, #136]	; (6860 <gapc_connection_cfm_handler+0xb0>)
    67d6:	1c39      	adds	r1, r7, #0
    67d8:	681c      	ldr	r4, [r3, #0]
    67da:	2305      	movs	r3, #5
    67dc:	1c20      	adds	r0, r4, #0
    67de:	7023      	strb	r3, [r4, #0]
    67e0:	3b03      	subs	r3, #3
    67e2:	7063      	strb	r3, [r4, #1]
    67e4:	330c      	adds	r3, #12
    67e6:	70a3      	strb	r3, [r4, #2]
    67e8:	70e3      	strb	r3, [r4, #3]
    67ea:	3302      	adds	r3, #2
    67ec:	7122      	strb	r2, [r4, #4]
    67ee:	7163      	strb	r3, [r4, #5]
    67f0:	4f1c      	ldr	r7, [pc, #112]	; (6864 <gapc_connection_cfm_handler+0xb4>)
    67f2:	71a5      	strb	r5, [r4, #6]
    67f4:	71e5      	strb	r5, [r4, #7]
    67f6:	7225      	strb	r5, [r4, #8]
    67f8:	2210      	movs	r2, #16
    67fa:	3009      	adds	r0, #9
    67fc:	47b8      	blx	r7
    67fe:	466b      	mov	r3, sp
    6800:	1c20      	adds	r0, r4, #0
    6802:	781b      	ldrb	r3, [r3, #0]
    6804:	9901      	ldr	r1, [sp, #4]
    6806:	7663      	strb	r3, [r4, #25]
    6808:	9b00      	ldr	r3, [sp, #0]
    680a:	2210      	movs	r2, #16
    680c:	0a1b      	lsrs	r3, r3, #8
    680e:	76a3      	strb	r3, [r4, #26]
    6810:	9b00      	ldr	r3, [sp, #0]
    6812:	301d      	adds	r0, #29
    6814:	0c1b      	lsrs	r3, r3, #16
    6816:	76e3      	strb	r3, [r4, #27]
    6818:	9b00      	ldr	r3, [sp, #0]
    681a:	0e1b      	lsrs	r3, r3, #24
    681c:	7723      	strb	r3, [r4, #28]
    681e:	47b8      	blx	r7
    6820:	1c23      	adds	r3, r4, #0
    6822:	0a32      	lsrs	r2, r6, #8
    6824:	332d      	adds	r3, #45	; 0x2d
    6826:	705a      	strb	r2, [r3, #1]
    6828:	0c32      	lsrs	r2, r6, #16
    682a:	709a      	strb	r2, [r3, #2]
    682c:	1c22      	adds	r2, r4, #0
    682e:	701e      	strb	r6, [r3, #0]
    6830:	3230      	adds	r2, #48	; 0x30
    6832:	0e33      	lsrs	r3, r6, #24
    6834:	7013      	strb	r3, [r2, #0]
    6836:	466a      	mov	r2, sp
    6838:	1c23      	adds	r3, r4, #0
    683a:	7a12      	ldrb	r2, [r2, #8]
    683c:	3331      	adds	r3, #49	; 0x31
    683e:	701a      	strb	r2, [r3, #0]
    6840:	466a      	mov	r2, sp
    6842:	7b12      	ldrb	r2, [r2, #12]
    6844:	705d      	strb	r5, [r3, #1]
    6846:	709a      	strb	r2, [r3, #2]
    6848:	70dd      	strb	r5, [r3, #3]
    684a:	232c      	movs	r3, #44	; 0x2c
    684c:	1c20      	adds	r0, r4, #0
    684e:	71e3      	strb	r3, [r4, #7]
    6850:	2135      	movs	r1, #53	; 0x35
    6852:	4b05      	ldr	r3, [pc, #20]	; (6868 <gapc_connection_cfm_handler+0xb8>)
    6854:	4798      	blx	r3
    6856:	1c28      	adds	r0, r5, #0
    6858:	b005      	add	sp, #20
    685a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    685c:	200018fc 	.word	0x200018fc
    6860:	0000a6a0 	.word	0x0000a6a0
    6864:	000083fb 	.word	0x000083fb
    6868:	00005b19 	.word	0x00005b19

0000686c <gapc_con_req_ind>:
    686c:	b5f0      	push	{r4, r5, r6, r7, lr}
    686e:	7845      	ldrb	r5, [r0, #1]
    6870:	7803      	ldrb	r3, [r0, #0]
    6872:	4c30      	ldr	r4, [pc, #192]	; (6934 <gapc_con_req_ind+0xc8>)
    6874:	022d      	lsls	r5, r5, #8
    6876:	431d      	orrs	r5, r3
    6878:	85a5      	strh	r5, [r4, #44]	; 0x2c
    687a:	78c3      	ldrb	r3, [r0, #3]
    687c:	7882      	ldrb	r2, [r0, #2]
    687e:	b08b      	sub	sp, #44	; 0x2c
    6880:	021b      	lsls	r3, r3, #8
    6882:	431a      	orrs	r2, r3
    6884:	466b      	mov	r3, sp
    6886:	9205      	str	r2, [sp, #20]
    6888:	8a9b      	ldrh	r3, [r3, #20]
    688a:	2120      	movs	r1, #32
    688c:	85e3      	strh	r3, [r4, #46]	; 0x2e
    688e:	7943      	ldrb	r3, [r0, #5]
    6890:	7902      	ldrb	r2, [r0, #4]
    6892:	021b      	lsls	r3, r3, #8
    6894:	431a      	orrs	r2, r3
    6896:	466b      	mov	r3, sp
    6898:	9206      	str	r2, [sp, #24]
    689a:	8b1b      	ldrh	r3, [r3, #24]
    689c:	1c06      	adds	r6, r0, #0
    689e:	8623      	strh	r3, [r4, #48]	; 0x30
    68a0:	79c3      	ldrb	r3, [r0, #7]
    68a2:	7982      	ldrb	r2, [r0, #6]
    68a4:	021b      	lsls	r3, r3, #8
    68a6:	431a      	orrs	r2, r3
    68a8:	466b      	mov	r3, sp
    68aa:	9207      	str	r2, [sp, #28]
    68ac:	466a      	mov	r2, sp
    68ae:	8b9b      	ldrh	r3, [r3, #28]
    68b0:	1852      	adds	r2, r2, r1
    68b2:	8663      	strh	r3, [r4, #50]	; 0x32
    68b4:	7a43      	ldrb	r3, [r0, #9]
    68b6:	1c01      	adds	r1, r0, #0
    68b8:	9308      	str	r3, [sp, #32]
    68ba:	1c23      	adds	r3, r4, #0
    68bc:	7812      	ldrb	r2, [r2, #0]
    68be:	3377      	adds	r3, #119	; 0x77
    68c0:	3478      	adds	r4, #120	; 0x78
    68c2:	701a      	strb	r2, [r3, #0]
    68c4:	310a      	adds	r1, #10
    68c6:	2206      	movs	r2, #6
    68c8:	4b1b      	ldr	r3, [pc, #108]	; (6938 <gapc_con_req_ind+0xcc>)
    68ca:	1c20      	adds	r0, r4, #0
    68cc:	4798      	blx	r3
    68ce:	7c33      	ldrb	r3, [r6, #16]
    68d0:	9309      	str	r3, [sp, #36]	; 0x24
    68d2:	4b1a      	ldr	r3, [pc, #104]	; (693c <gapc_con_req_ind+0xd0>)
    68d4:	4798      	blx	r3
    68d6:	4e1a      	ldr	r6, [pc, #104]	; (6940 <gapc_con_req_ind+0xd4>)
    68d8:	1e07      	subs	r7, r0, #0
    68da:	2f07      	cmp	r7, #7
    68dc:	d81b      	bhi.n	6916 <gapc_con_req_ind+0xaa>
    68de:	2312      	movs	r3, #18
    68e0:	4343      	muls	r3, r0
    68e2:	18f0      	adds	r0, r6, r3
    68e4:	8145      	strh	r5, [r0, #10]
    68e6:	4669      	mov	r1, sp
    68e8:	2524      	movs	r5, #36	; 0x24
    68ea:	1949      	adds	r1, r1, r5
    68ec:	7809      	ldrb	r1, [r1, #0]
    68ee:	2206      	movs	r2, #6
    68f0:	54f1      	strb	r1, [r6, r3]
    68f2:	2120      	movs	r1, #32
    68f4:	466b      	mov	r3, sp
    68f6:	185b      	adds	r3, r3, r1
    68f8:	781b      	ldrb	r3, [r3, #0]
    68fa:	1c21      	adds	r1, r4, #0
    68fc:	7043      	strb	r3, [r0, #1]
    68fe:	466b      	mov	r3, sp
    6900:	8a9b      	ldrh	r3, [r3, #20]
    6902:	3002      	adds	r0, #2
    6904:	8143      	strh	r3, [r0, #10]
    6906:	466b      	mov	r3, sp
    6908:	8b1b      	ldrh	r3, [r3, #24]
    690a:	8183      	strh	r3, [r0, #12]
    690c:	466b      	mov	r3, sp
    690e:	8b9b      	ldrh	r3, [r3, #28]
    6910:	81c3      	strh	r3, [r0, #14]
    6912:	4b09      	ldr	r3, [pc, #36]	; (6938 <gapc_con_req_ind+0xcc>)
    6914:	4798      	blx	r3
    6916:	2112      	movs	r1, #18
    6918:	2300      	movs	r3, #0
    691a:	434f      	muls	r7, r1
    691c:	9300      	str	r3, [sp, #0]
    691e:	9301      	str	r3, [sp, #4]
    6920:	19f6      	adds	r6, r6, r7
    6922:	8971      	ldrh	r1, [r6, #10]
    6924:	4a07      	ldr	r2, [pc, #28]	; (6944 <gapc_con_req_ind+0xd8>)
    6926:	9102      	str	r1, [sp, #8]
    6928:	1c10      	adds	r0, r2, #0
    692a:	1c19      	adds	r1, r3, #0
    692c:	4c06      	ldr	r4, [pc, #24]	; (6948 <gapc_con_req_ind+0xdc>)
    692e:	47a0      	blx	r4
    6930:	b00b      	add	sp, #44	; 0x2c
    6932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6934:	2000199c 	.word	0x2000199c
    6938:	000083fb 	.word	0x000083fb
    693c:	00006619 	.word	0x00006619
    6940:	2000190c 	.word	0x2000190c
    6944:	20000dd4 	.word	0x20000dd4
    6948:	000067b1 	.word	0x000067b1

0000694c <gapc_disconnect_cmd_handler>:
    694c:	b510      	push	{r4, lr}
    694e:	2400      	movs	r4, #0
    6950:	2205      	movs	r2, #5
    6952:	4b0d      	ldr	r3, [pc, #52]	; (6988 <gapc_disconnect_cmd_handler+0x3c>)
    6954:	609c      	str	r4, [r3, #8]
    6956:	60dc      	str	r4, [r3, #12]
    6958:	4b0c      	ldr	r3, [pc, #48]	; (698c <gapc_disconnect_cmd_handler+0x40>)
    695a:	681b      	ldr	r3, [r3, #0]
    695c:	701a      	strb	r2, [r3, #0]
    695e:	3a01      	subs	r2, #1
    6960:	705a      	strb	r2, [r3, #1]
    6962:	320a      	adds	r2, #10
    6964:	709a      	strb	r2, [r3, #2]
    6966:	70da      	strb	r2, [r3, #3]
    6968:	3202      	adds	r2, #2
    696a:	715a      	strb	r2, [r3, #5]
    696c:	3a0f      	subs	r2, #15
    696e:	725a      	strb	r2, [r3, #9]
    6970:	3201      	adds	r2, #1
    6972:	7119      	strb	r1, [r3, #4]
    6974:	719c      	strb	r4, [r3, #6]
    6976:	721c      	strb	r4, [r3, #8]
    6978:	7298      	strb	r0, [r3, #10]
    697a:	71da      	strb	r2, [r3, #7]
    697c:	1c18      	adds	r0, r3, #0
    697e:	210b      	movs	r1, #11
    6980:	4b03      	ldr	r3, [pc, #12]	; (6990 <gapc_disconnect_cmd_handler+0x44>)
    6982:	4798      	blx	r3
    6984:	1c20      	adds	r0, r4, #0
    6986:	bd10      	pop	{r4, pc}
    6988:	200018fc 	.word	0x200018fc
    698c:	0000a6a0 	.word	0x0000a6a0
    6990:	00005b19 	.word	0x00005b19

00006994 <gapc_disconnect_ind>:
    6994:	b510      	push	{r4, lr}
    6996:	1c04      	adds	r4, r0, #0
    6998:	7843      	ldrb	r3, [r0, #1]
    699a:	7800      	ldrb	r0, [r0, #0]
    699c:	021b      	lsls	r3, r3, #8
    699e:	4318      	orrs	r0, r3
    69a0:	8008      	strh	r0, [r1, #0]
    69a2:	78a3      	ldrb	r3, [r4, #2]
    69a4:	1c0a      	adds	r2, r1, #0
    69a6:	70cb      	strb	r3, [r1, #3]
    69a8:	2100      	movs	r1, #0
    69aa:	4b06      	ldr	r3, [pc, #24]	; (69c4 <gapc_disconnect_ind+0x30>)
    69ac:	7091      	strb	r1, [r2, #2]
    69ae:	4798      	blx	r3
    69b0:	2807      	cmp	r0, #7
    69b2:	d806      	bhi.n	69c2 <gapc_disconnect_ind+0x2e>
    69b4:	2312      	movs	r3, #18
    69b6:	4358      	muls	r0, r3
    69b8:	4b03      	ldr	r3, [pc, #12]	; (69c8 <gapc_disconnect_ind+0x34>)
    69ba:	1818      	adds	r0, r3, r0
    69bc:	2301      	movs	r3, #1
    69be:	425b      	negs	r3, r3
    69c0:	8143      	strh	r3, [r0, #10]
    69c2:	bd10      	pop	{r4, pc}
    69c4:	000065dd 	.word	0x000065dd
    69c8:	2000190c 	.word	0x2000190c

000069cc <gapc_bond_cmd_handler>:
    69cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    69ce:	2400      	movs	r4, #0
    69d0:	4684      	mov	ip, r0
    69d2:	a808      	add	r0, sp, #32
    69d4:	7807      	ldrb	r7, [r0, #0]
    69d6:	a809      	add	r0, sp, #36	; 0x24
    69d8:	7806      	ldrb	r6, [r0, #0]
    69da:	a80a      	add	r0, sp, #40	; 0x28
    69dc:	7800      	ldrb	r0, [r0, #0]
    69de:	2505      	movs	r5, #5
    69e0:	9000      	str	r0, [sp, #0]
    69e2:	a80b      	add	r0, sp, #44	; 0x2c
    69e4:	7800      	ldrb	r0, [r0, #0]
    69e6:	9001      	str	r0, [sp, #4]
    69e8:	4811      	ldr	r0, [pc, #68]	; (6a30 <gapc_bond_cmd_handler+0x64>)
    69ea:	6084      	str	r4, [r0, #8]
    69ec:	60c4      	str	r4, [r0, #12]
    69ee:	4811      	ldr	r0, [pc, #68]	; (6a34 <gapc_bond_cmd_handler+0x68>)
    69f0:	6800      	ldr	r0, [r0, #0]
    69f2:	7303      	strb	r3, [r0, #12]
    69f4:	466b      	mov	r3, sp
    69f6:	781b      	ldrb	r3, [r3, #0]
    69f8:	7005      	strb	r5, [r0, #0]
    69fa:	73c3      	strb	r3, [r0, #15]
    69fc:	350d      	adds	r5, #13
    69fe:	466b      	mov	r3, sp
    6a00:	7045      	strb	r5, [r0, #1]
    6a02:	3d04      	subs	r5, #4
    6a04:	7085      	strb	r5, [r0, #2]
    6a06:	70c5      	strb	r5, [r0, #3]
    6a08:	4665      	mov	r5, ip
    6a0a:	791b      	ldrb	r3, [r3, #4]
    6a0c:	7105      	strb	r5, [r0, #4]
    6a0e:	7403      	strb	r3, [r0, #16]
    6a10:	2510      	movs	r5, #16
    6a12:	2308      	movs	r3, #8
    6a14:	7184      	strb	r4, [r0, #6]
    6a16:	7204      	strb	r4, [r0, #8]
    6a18:	340a      	adds	r4, #10
    6a1a:	7145      	strb	r5, [r0, #5]
    6a1c:	7347      	strb	r7, [r0, #13]
    6a1e:	7386      	strb	r6, [r0, #14]
    6a20:	7244      	strb	r4, [r0, #9]
    6a22:	7281      	strb	r1, [r0, #10]
    6a24:	72c2      	strb	r2, [r0, #11]
    6a26:	71c3      	strb	r3, [r0, #7]
    6a28:	2111      	movs	r1, #17
    6a2a:	4b03      	ldr	r3, [pc, #12]	; (6a38 <gapc_bond_cmd_handler+0x6c>)
    6a2c:	4798      	blx	r3
    6a2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    6a30:	200018fc 	.word	0x200018fc
    6a34:	0000a6a0 	.word	0x0000a6a0
    6a38:	00005b19 	.word	0x00005b19

00006a3c <gapc_bond_ind>:
    6a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a3e:	780e      	ldrb	r6, [r1, #0]
    6a40:	1c03      	adds	r3, r0, #0
    6a42:	1eb0      	subs	r0, r6, #2
    6a44:	2805      	cmp	r0, #5
    6a46:	d85d      	bhi.n	6b04 <gapc_bond_ind+0xc8>
    6a48:	1c15      	adds	r5, r2, #0
    6a4a:	1c0c      	adds	r4, r1, #0
    6a4c:	f001 fbda 	bl	8204 <__gnu_thumb1_case_uqi>
    6a50:	2f5a030d 	.word	0x2f5a030d
    6a54:	4740      	.short	0x4740
    6a56:	2009      	movs	r0, #9
    6a58:	2a00      	cmp	r2, #0
    6a5a:	d054      	beq.n	6b06 <gapc_bond_ind+0xca>
    6a5c:	0a1b      	lsrs	r3, r3, #8
    6a5e:	8053      	strh	r3, [r2, #2]
    6a60:	788b      	ldrb	r3, [r1, #2]
    6a62:	4829      	ldr	r0, [pc, #164]	; (6b08 <gapc_bond_ind+0xcc>)
    6a64:	7113      	strb	r3, [r2, #4]
    6a66:	2100      	movs	r1, #0
    6a68:	e01c      	b.n	6aa4 <gapc_bond_ind+0x68>
    6a6a:	2009      	movs	r0, #9
    6a6c:	2a00      	cmp	r2, #0
    6a6e:	d04a      	beq.n	6b06 <gapc_bond_ind+0xca>
    6a70:	4c25      	ldr	r4, [pc, #148]	; (6b08 <gapc_bond_ind+0xcc>)
    6a72:	0a1b      	lsrs	r3, r3, #8
    6a74:	8053      	strh	r3, [r2, #2]
    6a76:	788b      	ldrb	r3, [r1, #2]
    6a78:	2700      	movs	r7, #0
    6a7a:	1c10      	adds	r0, r2, #0
    6a7c:	1c21      	adds	r1, r4, #0
    6a7e:	7013      	strb	r3, [r2, #0]
    6a80:	4e22      	ldr	r6, [pc, #136]	; (6b0c <gapc_bond_ind+0xd0>)
    6a82:	7117      	strb	r7, [r2, #4]
    6a84:	312e      	adds	r1, #46	; 0x2e
    6a86:	2217      	movs	r2, #23
    6a88:	3032      	adds	r0, #50	; 0x32
    6a8a:	47b0      	blx	r6
    6a8c:	1c28      	adds	r0, r5, #0
    6a8e:	1c21      	adds	r1, r4, #0
    6a90:	2210      	movs	r2, #16
    6a92:	311e      	adds	r1, #30
    6a94:	3022      	adds	r0, #34	; 0x22
    6a96:	47b0      	blx	r6
    6a98:	1ca1      	adds	r1, r4, #2
    6a9a:	1da8      	adds	r0, r5, #6
    6a9c:	221c      	movs	r2, #28
    6a9e:	47b0      	blx	r6
    6aa0:	1c20      	adds	r0, r4, #0
    6aa2:	1c39      	adds	r1, r7, #0
    6aa4:	2246      	movs	r2, #70	; 0x46
    6aa6:	4b1a      	ldr	r3, [pc, #104]	; (6b10 <gapc_bond_ind+0xd4>)
    6aa8:	4798      	blx	r3
    6aaa:	2009      	movs	r0, #9
    6aac:	e02b      	b.n	6b06 <gapc_bond_ind+0xca>
    6aae:	4d16      	ldr	r5, [pc, #88]	; (6b08 <gapc_bond_ind+0xcc>)
    6ab0:	3102      	adds	r1, #2
    6ab2:	1c28      	adds	r0, r5, #0
    6ab4:	2210      	movs	r2, #16
    6ab6:	4e15      	ldr	r6, [pc, #84]	; (6b0c <gapc_bond_ind+0xd0>)
    6ab8:	302e      	adds	r0, #46	; 0x2e
    6aba:	47b0      	blx	r6
    6abc:	1c28      	adds	r0, r5, #0
    6abe:	1c21      	adds	r1, r4, #0
    6ac0:	303f      	adds	r0, #63	; 0x3f
    6ac2:	3112      	adds	r1, #18
    6ac4:	2206      	movs	r2, #6
    6ac6:	47b0      	blx	r6
    6ac8:	7e23      	ldrb	r3, [r4, #24]
    6aca:	353e      	adds	r5, #62	; 0x3e
    6acc:	702b      	strb	r3, [r5, #0]
    6ace:	e019      	b.n	6b04 <gapc_bond_ind+0xc8>
    6ad0:	480d      	ldr	r0, [pc, #52]	; (6b08 <gapc_bond_ind+0xcc>)
    6ad2:	3102      	adds	r1, #2
    6ad4:	2210      	movs	r2, #16
    6ad6:	4b0d      	ldr	r3, [pc, #52]	; (6b0c <gapc_bond_ind+0xd0>)
    6ad8:	301e      	adds	r0, #30
    6ada:	4798      	blx	r3
    6adc:	e012      	b.n	6b04 <gapc_bond_ind+0xc8>
    6ade:	4d0a      	ldr	r5, [pc, #40]	; (6b08 <gapc_bond_ind+0xcc>)
    6ae0:	3102      	adds	r1, #2
    6ae2:	2210      	movs	r2, #16
    6ae4:	4e09      	ldr	r6, [pc, #36]	; (6b0c <gapc_bond_ind+0xd0>)
    6ae6:	1ca8      	adds	r0, r5, #2
    6ae8:	47b0      	blx	r6
    6aea:	1c28      	adds	r0, r5, #0
    6aec:	1c21      	adds	r1, r4, #0
    6aee:	7ce3      	ldrb	r3, [r4, #19]
    6af0:	7ca2      	ldrb	r2, [r4, #18]
    6af2:	021b      	lsls	r3, r3, #8
    6af4:	4313      	orrs	r3, r2
    6af6:	3014      	adds	r0, #20
    6af8:	3114      	adds	r1, #20
    6afa:	2208      	movs	r2, #8
    6afc:	826b      	strh	r3, [r5, #18]
    6afe:	47b0      	blx	r6
    6b00:	7f23      	ldrb	r3, [r4, #28]
    6b02:	772b      	strb	r3, [r5, #28]
    6b04:	2000      	movs	r0, #0
    6b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b08:	20000d8e 	.word	0x20000d8e
    6b0c:	000083fb 	.word	0x000083fb
    6b10:	0000840d 	.word	0x0000840d

00006b14 <gapc_bond_req_ind>:
    6b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b16:	780d      	ldrb	r5, [r1, #0]
    6b18:	1c03      	adds	r3, r0, #0
    6b1a:	7849      	ldrb	r1, [r1, #1]
    6b1c:	2d07      	cmp	r5, #7
    6b1e:	d860      	bhi.n	6be2 <gapc_bond_req_ind+0xce>
    6b20:	1c28      	adds	r0, r5, #0
    6b22:	f001 fb6f 	bl	8204 <__gnu_thumb1_case_uqi>
    6b26:	5e04      	.short	0x5e04
    6b28:	5e0b5e5e 	.word	0x5e0b5e5e
    6b2c:	1f1f      	.short	0x1f1f
    6b2e:	200a      	movs	r0, #10
    6b30:	2a00      	cmp	r2, #0
    6b32:	d057      	beq.n	6be4 <gapc_bond_req_ind+0xd0>
    6b34:	0a1b      	lsrs	r3, r3, #8
    6b36:	8013      	strh	r3, [r2, #0]
    6b38:	7091      	strb	r1, [r2, #2]
    6b3a:	e053      	b.n	6be4 <gapc_bond_req_ind+0xd0>
    6b3c:	2a00      	cmp	r2, #0
    6b3e:	d00b      	beq.n	6b58 <gapc_bond_req_ind+0x44>
    6b40:	0a1b      	lsrs	r3, r3, #8
    6b42:	8013      	strh	r3, [r2, #0]
    6b44:	2900      	cmp	r1, #0
    6b46:	d102      	bne.n	6b4e <gapc_bond_req_ind+0x3a>
    6b48:	2301      	movs	r3, #1
    6b4a:	7093      	strb	r3, [r2, #2]
    6b4c:	e004      	b.n	6b58 <gapc_bond_req_ind+0x44>
    6b4e:	2300      	movs	r3, #0
    6b50:	7093      	strb	r3, [r2, #2]
    6b52:	2902      	cmp	r1, #2
    6b54:	d102      	bne.n	6b5c <gapc_bond_req_ind+0x48>
    6b56:	70d3      	strb	r3, [r2, #3]
    6b58:	200c      	movs	r0, #12
    6b5a:	e043      	b.n	6be4 <gapc_bond_req_ind+0xd0>
    6b5c:	2901      	cmp	r1, #1
    6b5e:	d1fb      	bne.n	6b58 <gapc_bond_req_ind+0x44>
    6b60:	70d1      	strb	r1, [r2, #3]
    6b62:	e7f9      	b.n	6b58 <gapc_bond_req_ind+0x44>
    6b64:	2100      	movs	r1, #0
    6b66:	4a20      	ldr	r2, [pc, #128]	; (6be8 <gapc_bond_req_ind+0xd4>)
    6b68:	0a1b      	lsrs	r3, r3, #8
    6b6a:	6091      	str	r1, [r2, #8]
    6b6c:	60d1      	str	r1, [r2, #12]
    6b6e:	4a1f      	ldr	r2, [pc, #124]	; (6bec <gapc_bond_req_ind+0xd8>)
    6b70:	4f1f      	ldr	r7, [pc, #124]	; (6bf0 <gapc_bond_req_ind+0xdc>)
    6b72:	6814      	ldr	r4, [r2, #0]
    6b74:	2205      	movs	r2, #5
    6b76:	7123      	strb	r3, [r4, #4]
    6b78:	1c20      	adds	r0, r4, #0
    6b7a:	2301      	movs	r3, #1
    6b7c:	7022      	strb	r2, [r4, #0]
    6b7e:	320f      	adds	r2, #15
    6b80:	7062      	strb	r2, [r4, #1]
    6b82:	3a06      	subs	r2, #6
    6b84:	70a2      	strb	r2, [r4, #2]
    6b86:	70e2      	strb	r2, [r4, #3]
    6b88:	3202      	adds	r2, #2
    6b8a:	71a1      	strb	r1, [r4, #6]
    6b8c:	71e1      	strb	r1, [r4, #7]
    6b8e:	7221      	strb	r1, [r4, #8]
    6b90:	7162      	strb	r2, [r4, #5]
    6b92:	7265      	strb	r5, [r4, #9]
    6b94:	72a3      	strb	r3, [r4, #10]
    6b96:	300b      	adds	r0, #11
    6b98:	4e16      	ldr	r6, [pc, #88]	; (6bf4 <gapc_bond_req_ind+0xe0>)
    6b9a:	1c39      	adds	r1, r7, #0
    6b9c:	2d07      	cmp	r5, #7
    6b9e:	d115      	bne.n	6bcc <gapc_bond_req_ind+0xb8>
    6ba0:	317e      	adds	r1, #126	; 0x7e
    6ba2:	47b0      	blx	r6
    6ba4:	1c3b      	adds	r3, r7, #0
    6ba6:	1c20      	adds	r0, r4, #0
    6ba8:	1c39      	adds	r1, r7, #0
    6baa:	338e      	adds	r3, #142	; 0x8e
    6bac:	881a      	ldrh	r2, [r3, #0]
    6bae:	3190      	adds	r1, #144	; 0x90
    6bb0:	76e2      	strb	r2, [r4, #27]
    6bb2:	881b      	ldrh	r3, [r3, #0]
    6bb4:	2208      	movs	r2, #8
    6bb6:	0a1b      	lsrs	r3, r3, #8
    6bb8:	7723      	strb	r3, [r4, #28]
    6bba:	301d      	adds	r0, #29
    6bbc:	47b0      	blx	r6
    6bbe:	1c39      	adds	r1, r7, #0
    6bc0:	3198      	adds	r1, #152	; 0x98
    6bc2:	780a      	ldrb	r2, [r1, #0]
    6bc4:	1da3      	adds	r3, r4, #6
    6bc6:	77da      	strb	r2, [r3, #31]
    6bc8:	2126      	movs	r1, #38	; 0x26
    6bca:	e002      	b.n	6bd2 <gapc_bond_req_ind+0xbe>
    6bcc:	319a      	adds	r1, #154	; 0x9a
    6bce:	47b0      	blx	r6
    6bd0:	211b      	movs	r1, #27
    6bd2:	1c0b      	adds	r3, r1, #0
    6bd4:	2500      	movs	r5, #0
    6bd6:	3b09      	subs	r3, #9
    6bd8:	71e3      	strb	r3, [r4, #7]
    6bda:	7225      	strb	r5, [r4, #8]
    6bdc:	1c20      	adds	r0, r4, #0
    6bde:	4b06      	ldr	r3, [pc, #24]	; (6bf8 <gapc_bond_req_ind+0xe4>)
    6be0:	4798      	blx	r3
    6be2:	2000      	movs	r0, #0
    6be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6be6:	46c0      	nop			; (mov r8, r8)
    6be8:	200018fc 	.word	0x200018fc
    6bec:	0000a6a0 	.word	0x0000a6a0
    6bf0:	2000199c 	.word	0x2000199c
    6bf4:	000083fb 	.word	0x000083fb
    6bf8:	00005b19 	.word	0x00005b19

00006bfc <gapc_bond_cfm_handler_pair_resp>:
    6bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bfe:	2400      	movs	r4, #0
    6c00:	b085      	sub	sp, #20
    6c02:	1c07      	adds	r7, r0, #0
    6c04:	a80a      	add	r0, sp, #40	; 0x28
    6c06:	7806      	ldrb	r6, [r0, #0]
    6c08:	a80b      	add	r0, sp, #44	; 0x2c
    6c0a:	7800      	ldrb	r0, [r0, #0]
    6c0c:	2505      	movs	r5, #5
    6c0e:	9001      	str	r0, [sp, #4]
    6c10:	a80c      	add	r0, sp, #48	; 0x30
    6c12:	7800      	ldrb	r0, [r0, #0]
    6c14:	9002      	str	r0, [sp, #8]
    6c16:	a80d      	add	r0, sp, #52	; 0x34
    6c18:	7800      	ldrb	r0, [r0, #0]
    6c1a:	9003      	str	r0, [sp, #12]
    6c1c:	a80e      	add	r0, sp, #56	; 0x38
    6c1e:	8800      	ldrh	r0, [r0, #0]
    6c20:	4684      	mov	ip, r0
    6c22:	4814      	ldr	r0, [pc, #80]	; (6c74 <gapc_bond_cfm_handler_pair_resp+0x78>)
    6c24:	6084      	str	r4, [r0, #8]
    6c26:	60c4      	str	r4, [r0, #12]
    6c28:	4813      	ldr	r0, [pc, #76]	; (6c78 <gapc_bond_cfm_handler_pair_resp+0x7c>)
    6c2a:	6800      	ldr	r0, [r0, #0]
    6c2c:	7343      	strb	r3, [r0, #13]
    6c2e:	466b      	mov	r3, sp
    6c30:	791b      	ldrb	r3, [r3, #4]
    6c32:	7005      	strb	r5, [r0, #0]
    6c34:	73c3      	strb	r3, [r0, #15]
    6c36:	466b      	mov	r3, sp
    6c38:	350f      	adds	r5, #15
    6c3a:	7045      	strb	r5, [r0, #1]
    6c3c:	3d06      	subs	r5, #6
    6c3e:	7085      	strb	r5, [r0, #2]
    6c40:	70c5      	strb	r5, [r0, #3]
    6c42:	4665      	mov	r5, ip
    6c44:	7a1b      	ldrb	r3, [r3, #8]
    6c46:	7105      	strb	r5, [r0, #4]
    6c48:	7403      	strb	r3, [r0, #16]
    6c4a:	466b      	mov	r3, sp
    6c4c:	2510      	movs	r5, #16
    6c4e:	7b1b      	ldrb	r3, [r3, #12]
    6c50:	7184      	strb	r4, [r0, #6]
    6c52:	7204      	strb	r4, [r0, #8]
    6c54:	3401      	adds	r4, #1
    6c56:	7145      	strb	r5, [r0, #5]
    6c58:	7244      	strb	r4, [r0, #9]
    6c5a:	7287      	strb	r7, [r0, #10]
    6c5c:	72c1      	strb	r1, [r0, #11]
    6c5e:	7302      	strb	r2, [r0, #12]
    6c60:	7386      	strb	r6, [r0, #14]
    6c62:	7443      	strb	r3, [r0, #17]
    6c64:	2309      	movs	r3, #9
    6c66:	2112      	movs	r1, #18
    6c68:	71c3      	strb	r3, [r0, #7]
    6c6a:	4b04      	ldr	r3, [pc, #16]	; (6c7c <gapc_bond_cfm_handler_pair_resp+0x80>)
    6c6c:	4798      	blx	r3
    6c6e:	b005      	add	sp, #20
    6c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c72:	46c0      	nop			; (mov r8, r8)
    6c74:	200018fc 	.word	0x200018fc
    6c78:	0000a6a0 	.word	0x0000a6a0
    6c7c:	00005b19 	.word	0x00005b19

00006c80 <gapc_bond_cfm_handler_key_exch>:
    6c80:	b570      	push	{r4, r5, r6, lr}
    6c82:	2500      	movs	r5, #0
    6c84:	4c10      	ldr	r4, [pc, #64]	; (6cc8 <gapc_bond_cfm_handler_key_exch+0x48>)
    6c86:	2605      	movs	r6, #5
    6c88:	60a5      	str	r5, [r4, #8]
    6c8a:	60e5      	str	r5, [r4, #12]
    6c8c:	4c0f      	ldr	r4, [pc, #60]	; (6ccc <gapc_bond_cfm_handler_key_exch+0x4c>)
    6c8e:	6824      	ldr	r4, [r4, #0]
    6c90:	7123      	strb	r3, [r4, #4]
    6c92:	7260      	strb	r0, [r4, #9]
    6c94:	2310      	movs	r3, #16
    6c96:	1c20      	adds	r0, r4, #0
    6c98:	7026      	strb	r6, [r4, #0]
    6c9a:	360f      	adds	r6, #15
    6c9c:	7066      	strb	r6, [r4, #1]
    6c9e:	3e06      	subs	r6, #6
    6ca0:	70a6      	strb	r6, [r4, #2]
    6ca2:	70e6      	strb	r6, [r4, #3]
    6ca4:	7163      	strb	r3, [r4, #5]
    6ca6:	71a5      	strb	r5, [r4, #6]
    6ca8:	71e5      	strb	r5, [r4, #7]
    6caa:	7225      	strb	r5, [r4, #8]
    6cac:	72a1      	strb	r1, [r4, #10]
    6cae:	300b      	adds	r0, #11
    6cb0:	1c11      	adds	r1, r2, #0
    6cb2:	1c1a      	adds	r2, r3, #0
    6cb4:	4b06      	ldr	r3, [pc, #24]	; (6cd0 <gapc_bond_cfm_handler_key_exch+0x50>)
    6cb6:	4798      	blx	r3
    6cb8:	2312      	movs	r3, #18
    6cba:	1c20      	adds	r0, r4, #0
    6cbc:	71e3      	strb	r3, [r4, #7]
    6cbe:	211b      	movs	r1, #27
    6cc0:	4b04      	ldr	r3, [pc, #16]	; (6cd4 <gapc_bond_cfm_handler_key_exch+0x54>)
    6cc2:	4798      	blx	r3
    6cc4:	bd70      	pop	{r4, r5, r6, pc}
    6cc6:	46c0      	nop			; (mov r8, r8)
    6cc8:	200018fc 	.word	0x200018fc
    6ccc:	0000a6a0 	.word	0x0000a6a0
    6cd0:	000083fb 	.word	0x000083fb
    6cd4:	00005b19 	.word	0x00005b19

00006cd8 <gapc_security_cmd_handler>:
    6cd8:	2200      	movs	r2, #0
    6cda:	4b0e      	ldr	r3, [pc, #56]	; (6d14 <gapc_security_cmd_handler+0x3c>)
    6cdc:	b510      	push	{r4, lr}
    6cde:	609a      	str	r2, [r3, #8]
    6ce0:	60da      	str	r2, [r3, #12]
    6ce2:	4b0d      	ldr	r3, [pc, #52]	; (6d18 <gapc_security_cmd_handler+0x40>)
    6ce4:	2405      	movs	r4, #5
    6ce6:	681b      	ldr	r3, [r3, #0]
    6ce8:	7118      	strb	r0, [r3, #4]
    6cea:	2010      	movs	r0, #16
    6cec:	701c      	strb	r4, [r3, #0]
    6cee:	719a      	strb	r2, [r3, #6]
    6cf0:	721a      	strb	r2, [r3, #8]
    6cf2:	3415      	adds	r4, #21
    6cf4:	320c      	adds	r2, #12
    6cf6:	705c      	strb	r4, [r3, #1]
    6cf8:	725a      	strb	r2, [r3, #9]
    6cfa:	3c0c      	subs	r4, #12
    6cfc:	3a0a      	subs	r2, #10
    6cfe:	709c      	strb	r4, [r3, #2]
    6d00:	70dc      	strb	r4, [r3, #3]
    6d02:	7158      	strb	r0, [r3, #5]
    6d04:	7299      	strb	r1, [r3, #10]
    6d06:	71da      	strb	r2, [r3, #7]
    6d08:	1c18      	adds	r0, r3, #0
    6d0a:	210b      	movs	r1, #11
    6d0c:	4b03      	ldr	r3, [pc, #12]	; (6d1c <gapc_security_cmd_handler+0x44>)
    6d0e:	4798      	blx	r3
    6d10:	bd10      	pop	{r4, pc}
    6d12:	46c0      	nop			; (mov r8, r8)
    6d14:	200018fc 	.word	0x200018fc
    6d18:	0000a6a0 	.word	0x0000a6a0
    6d1c:	00005b19 	.word	0x00005b19

00006d20 <gapc_encrypt_cmd_handler>:
    6d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d22:	2500      	movs	r5, #0
    6d24:	b089      	sub	sp, #36	; 0x24
    6d26:	9306      	str	r3, [sp, #24]
    6d28:	ab0e      	add	r3, sp, #56	; 0x38
    6d2a:	781b      	ldrb	r3, [r3, #0]
    6d2c:	1c17      	adds	r7, r2, #0
    6d2e:	9307      	str	r3, [sp, #28]
    6d30:	ab0f      	add	r3, sp, #60	; 0x3c
    6d32:	781b      	ldrb	r3, [r3, #0]
    6d34:	4a1b      	ldr	r2, [pc, #108]	; (6da4 <gapc_encrypt_cmd_handler+0x84>)
    6d36:	1c06      	adds	r6, r0, #0
    6d38:	9105      	str	r1, [sp, #20]
    6d3a:	9300      	str	r3, [sp, #0]
    6d3c:	9501      	str	r5, [sp, #4]
    6d3e:	9002      	str	r0, [sp, #8]
    6d40:	1c29      	adds	r1, r5, #0
    6d42:	1c2b      	adds	r3, r5, #0
    6d44:	1c10      	adds	r0, r2, #0
    6d46:	4c18      	ldr	r4, [pc, #96]	; (6da8 <gapc_encrypt_cmd_handler+0x88>)
    6d48:	47a0      	blx	r4
    6d4a:	4b18      	ldr	r3, [pc, #96]	; (6dac <gapc_encrypt_cmd_handler+0x8c>)
    6d4c:	2210      	movs	r2, #16
    6d4e:	609d      	str	r5, [r3, #8]
    6d50:	60dd      	str	r5, [r3, #12]
    6d52:	4b17      	ldr	r3, [pc, #92]	; (6db0 <gapc_encrypt_cmd_handler+0x90>)
    6d54:	9905      	ldr	r1, [sp, #20]
    6d56:	681c      	ldr	r4, [r3, #0]
    6d58:	2305      	movs	r3, #5
    6d5a:	7023      	strb	r3, [r4, #0]
    6d5c:	3311      	adds	r3, #17
    6d5e:	7063      	strb	r3, [r4, #1]
    6d60:	3b08      	subs	r3, #8
    6d62:	70a3      	strb	r3, [r4, #2]
    6d64:	70e3      	strb	r3, [r4, #3]
    6d66:	3b03      	subs	r3, #3
    6d68:	7162      	strb	r2, [r4, #5]
    6d6a:	71a5      	strb	r5, [r4, #6]
    6d6c:	71e5      	strb	r5, [r4, #7]
    6d6e:	7225      	strb	r5, [r4, #8]
    6d70:	7263      	strb	r3, [r4, #9]
    6d72:	72a5      	strb	r5, [r4, #10]
    6d74:	18e0      	adds	r0, r4, r3
    6d76:	4d0f      	ldr	r5, [pc, #60]	; (6db4 <gapc_encrypt_cmd_handler+0x94>)
    6d78:	7126      	strb	r6, [r4, #4]
    6d7a:	47a8      	blx	r5
    6d7c:	1c20      	adds	r0, r4, #0
    6d7e:	0a3b      	lsrs	r3, r7, #8
    6d80:	7723      	strb	r3, [r4, #28]
    6d82:	9906      	ldr	r1, [sp, #24]
    6d84:	76e7      	strb	r7, [r4, #27]
    6d86:	2208      	movs	r2, #8
    6d88:	301d      	adds	r0, #29
    6d8a:	47a8      	blx	r5
    6d8c:	466a      	mov	r2, sp
    6d8e:	7f12      	ldrb	r2, [r2, #28]
    6d90:	1da3      	adds	r3, r4, #6
    6d92:	77da      	strb	r2, [r3, #31]
    6d94:	231d      	movs	r3, #29
    6d96:	1c20      	adds	r0, r4, #0
    6d98:	71e3      	strb	r3, [r4, #7]
    6d9a:	2126      	movs	r1, #38	; 0x26
    6d9c:	4b06      	ldr	r3, [pc, #24]	; (6db8 <gapc_encrypt_cmd_handler+0x98>)
    6d9e:	4798      	blx	r3
    6da0:	b009      	add	sp, #36	; 0x24
    6da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6da4:	20000de4 	.word	0x20000de4
    6da8:	000067b1 	.word	0x000067b1
    6dac:	200018fc 	.word	0x200018fc
    6db0:	0000a6a0 	.word	0x0000a6a0
    6db4:	000083fb 	.word	0x000083fb
    6db8:	00005b19 	.word	0x00005b19

00006dbc <gapc_encrypt_req_ind>:
    6dbc:	b508      	push	{r3, lr}
    6dbe:	0a00      	lsrs	r0, r0, #8
    6dc0:	8010      	strh	r0, [r2, #0]
    6dc2:	784b      	ldrb	r3, [r1, #1]
    6dc4:	7808      	ldrb	r0, [r1, #0]
    6dc6:	021b      	lsls	r3, r3, #8
    6dc8:	4303      	orrs	r3, r0
    6dca:	8053      	strh	r3, [r2, #2]
    6dcc:	1d10      	adds	r0, r2, #4
    6dce:	3102      	adds	r1, #2
    6dd0:	2208      	movs	r2, #8
    6dd2:	4b01      	ldr	r3, [pc, #4]	; (6dd8 <gapc_encrypt_req_ind+0x1c>)
    6dd4:	4798      	blx	r3
    6dd6:	bd08      	pop	{r3, pc}
    6dd8:	000083fb 	.word	0x000083fb

00006ddc <gapc_encrypt_cfm_handler>:
    6ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dde:	2500      	movs	r5, #0
    6de0:	b087      	sub	sp, #28
    6de2:	9304      	str	r3, [sp, #16]
    6de4:	ab0c      	add	r3, sp, #48	; 0x30
    6de6:	781b      	ldrb	r3, [r3, #0]
    6de8:	1c17      	adds	r7, r2, #0
    6dea:	4a17      	ldr	r2, [pc, #92]	; (6e48 <gapc_encrypt_cfm_handler+0x6c>)
    6dec:	1c06      	adds	r6, r0, #0
    6dee:	9305      	str	r3, [sp, #20]
    6df0:	9100      	str	r1, [sp, #0]
    6df2:	9002      	str	r0, [sp, #8]
    6df4:	1c29      	adds	r1, r5, #0
    6df6:	1c2b      	adds	r3, r5, #0
    6df8:	9501      	str	r5, [sp, #4]
    6dfa:	1c10      	adds	r0, r2, #0
    6dfc:	4c13      	ldr	r4, [pc, #76]	; (6e4c <gapc_encrypt_cfm_handler+0x70>)
    6dfe:	47a0      	blx	r4
    6e00:	4b13      	ldr	r3, [pc, #76]	; (6e50 <gapc_encrypt_cfm_handler+0x74>)
    6e02:	2210      	movs	r2, #16
    6e04:	609d      	str	r5, [r3, #8]
    6e06:	60dd      	str	r5, [r3, #12]
    6e08:	4b12      	ldr	r3, [pc, #72]	; (6e54 <gapc_encrypt_cfm_handler+0x78>)
    6e0a:	9904      	ldr	r1, [sp, #16]
    6e0c:	681c      	ldr	r4, [r3, #0]
    6e0e:	2305      	movs	r3, #5
    6e10:	1c20      	adds	r0, r4, #0
    6e12:	7023      	strb	r3, [r4, #0]
    6e14:	3313      	adds	r3, #19
    6e16:	7063      	strb	r3, [r4, #1]
    6e18:	3b0a      	subs	r3, #10
    6e1a:	70a3      	strb	r3, [r4, #2]
    6e1c:	70e3      	strb	r3, [r4, #3]
    6e1e:	7162      	strb	r2, [r4, #5]
    6e20:	7126      	strb	r6, [r4, #4]
    6e22:	71a5      	strb	r5, [r4, #6]
    6e24:	71e5      	strb	r5, [r4, #7]
    6e26:	7225      	strb	r5, [r4, #8]
    6e28:	7267      	strb	r7, [r4, #9]
    6e2a:	4b0b      	ldr	r3, [pc, #44]	; (6e58 <gapc_encrypt_cfm_handler+0x7c>)
    6e2c:	300a      	adds	r0, #10
    6e2e:	4798      	blx	r3
    6e30:	466b      	mov	r3, sp
    6e32:	7d1b      	ldrb	r3, [r3, #20]
    6e34:	1c20      	adds	r0, r4, #0
    6e36:	76a3      	strb	r3, [r4, #26]
    6e38:	2312      	movs	r3, #18
    6e3a:	211b      	movs	r1, #27
    6e3c:	71e3      	strb	r3, [r4, #7]
    6e3e:	4b07      	ldr	r3, [pc, #28]	; (6e5c <gapc_encrypt_cfm_handler+0x80>)
    6e40:	4798      	blx	r3
    6e42:	b007      	add	sp, #28
    6e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e46:	46c0      	nop			; (mov r8, r8)
    6e48:	20000d7d 	.word	0x20000d7d
    6e4c:	000067b1 	.word	0x000067b1
    6e50:	200018fc 	.word	0x200018fc
    6e54:	0000a6a0 	.word	0x0000a6a0
    6e58:	000083fb 	.word	0x000083fb
    6e5c:	00005b19 	.word	0x00005b19

00006e60 <gapc_encrypt_ind>:
    6e60:	780b      	ldrb	r3, [r1, #0]
    6e62:	0a00      	lsrs	r0, r0, #8
    6e64:	70d3      	strb	r3, [r2, #3]
    6e66:	2300      	movs	r3, #0
    6e68:	8010      	strh	r0, [r2, #0]
    6e6a:	7093      	strb	r3, [r2, #2]
    6e6c:	4770      	bx	lr
	...

00006e70 <gapc_param_update_cfm_handler>:
    6e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e72:	2400      	movs	r4, #0
    6e74:	1c0e      	adds	r6, r1, #0
    6e76:	490f      	ldr	r1, [pc, #60]	; (6eb4 <gapc_param_update_cfm_handler+0x44>)
    6e78:	1c05      	adds	r5, r0, #0
    6e7a:	60cc      	str	r4, [r1, #12]
    6e7c:	608c      	str	r4, [r1, #8]
    6e7e:	490e      	ldr	r1, [pc, #56]	; (6eb8 <gapc_param_update_cfm_handler+0x48>)
    6e80:	2705      	movs	r7, #5
    6e82:	6808      	ldr	r0, [r1, #0]
    6e84:	2110      	movs	r1, #16
    6e86:	468c      	mov	ip, r1
    6e88:	7041      	strb	r1, [r0, #1]
    6e8a:	7105      	strb	r5, [r0, #4]
    6e8c:	210e      	movs	r1, #14
    6e8e:	4665      	mov	r5, ip
    6e90:	7282      	strb	r2, [r0, #10]
    6e92:	7303      	strb	r3, [r0, #12]
    6e94:	0a12      	lsrs	r2, r2, #8
    6e96:	0a1b      	lsrs	r3, r3, #8
    6e98:	7007      	strb	r7, [r0, #0]
    6e9a:	7145      	strb	r5, [r0, #5]
    6e9c:	7246      	strb	r6, [r0, #9]
    6e9e:	71c7      	strb	r7, [r0, #7]
    6ea0:	7081      	strb	r1, [r0, #2]
    6ea2:	70c1      	strb	r1, [r0, #3]
    6ea4:	7184      	strb	r4, [r0, #6]
    6ea6:	7204      	strb	r4, [r0, #8]
    6ea8:	72c2      	strb	r2, [r0, #11]
    6eaa:	7343      	strb	r3, [r0, #13]
    6eac:	4b03      	ldr	r3, [pc, #12]	; (6ebc <gapc_param_update_cfm_handler+0x4c>)
    6eae:	4798      	blx	r3
    6eb0:	1c20      	adds	r0, r4, #0
    6eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6eb4:	200018fc 	.word	0x200018fc
    6eb8:	0000a6a0 	.word	0x0000a6a0
    6ebc:	00005b19 	.word	0x00005b19

00006ec0 <gapc_param_updated_ind>:
    6ec0:	2300      	movs	r3, #0
    6ec2:	0a00      	lsrs	r0, r0, #8
    6ec4:	8010      	strh	r0, [r2, #0]
    6ec6:	7093      	strb	r3, [r2, #2]
    6ec8:	784b      	ldrb	r3, [r1, #1]
    6eca:	7808      	ldrb	r0, [r1, #0]
    6ecc:	021b      	lsls	r3, r3, #8
    6ece:	4303      	orrs	r3, r0
    6ed0:	8093      	strh	r3, [r2, #4]
    6ed2:	78cb      	ldrb	r3, [r1, #3]
    6ed4:	7888      	ldrb	r0, [r1, #2]
    6ed6:	021b      	lsls	r3, r3, #8
    6ed8:	4303      	orrs	r3, r0
    6eda:	80d3      	strh	r3, [r2, #6]
    6edc:	794b      	ldrb	r3, [r1, #5]
    6ede:	7909      	ldrb	r1, [r1, #4]
    6ee0:	021b      	lsls	r3, r3, #8
    6ee2:	430b      	orrs	r3, r1
    6ee4:	2007      	movs	r0, #7
    6ee6:	8113      	strh	r3, [r2, #8]
    6ee8:	4770      	bx	lr

00006eea <gapc_param_updated_req_ind>:
    6eea:	0a00      	lsrs	r0, r0, #8
    6eec:	8010      	strh	r0, [r2, #0]
    6eee:	784b      	ldrb	r3, [r1, #1]
    6ef0:	7808      	ldrb	r0, [r1, #0]
    6ef2:	021b      	lsls	r3, r3, #8
    6ef4:	4303      	orrs	r3, r0
    6ef6:	8053      	strh	r3, [r2, #2]
    6ef8:	78cb      	ldrb	r3, [r1, #3]
    6efa:	7888      	ldrb	r0, [r1, #2]
    6efc:	021b      	lsls	r3, r3, #8
    6efe:	4303      	orrs	r3, r0
    6f00:	8093      	strh	r3, [r2, #4]
    6f02:	794b      	ldrb	r3, [r1, #5]
    6f04:	7908      	ldrb	r0, [r1, #4]
    6f06:	021b      	lsls	r3, r3, #8
    6f08:	4303      	orrs	r3, r0
    6f0a:	80d3      	strh	r3, [r2, #6]
    6f0c:	79cb      	ldrb	r3, [r1, #7]
    6f0e:	7989      	ldrb	r1, [r1, #6]
    6f10:	021b      	lsls	r3, r3, #8
    6f12:	430b      	orrs	r3, r1
    6f14:	2008      	movs	r0, #8
    6f16:	8113      	strh	r3, [r2, #8]
    6f18:	4770      	bx	lr
	...

00006f1c <gapc_dev_info_req_ind_handler>:
    6f1c:	b538      	push	{r3, r4, r5, lr}
    6f1e:	1c0b      	adds	r3, r1, #0
    6f20:	0a01      	lsrs	r1, r0, #8
    6f22:	8011      	strh	r1, [r2, #0]
    6f24:	7818      	ldrb	r0, [r3, #0]
    6f26:	7090      	strb	r0, [r2, #2]
    6f28:	2800      	cmp	r0, #0
    6f2a:	d10f      	bne.n	6f4c <gapc_dev_info_req_ind_handler+0x30>
    6f2c:	4b09      	ldr	r3, [pc, #36]	; (6f54 <gapc_dev_info_req_ind_handler+0x38>)
    6f2e:	33aa      	adds	r3, #170	; 0xaa
    6f30:	881b      	ldrh	r3, [r3, #0]
    6f32:	2b00      	cmp	r3, #0
    6f34:	d10a      	bne.n	6f4c <gapc_dev_info_req_ind_handler+0x30>
    6f36:	4c08      	ldr	r4, [pc, #32]	; (6f58 <gapc_dev_info_req_ind_handler+0x3c>)
    6f38:	4908      	ldr	r1, [pc, #32]	; (6f5c <gapc_dev_info_req_ind_handler+0x40>)
    6f3a:	4a09      	ldr	r2, [pc, #36]	; (6f60 <gapc_dev_info_req_ind_handler+0x44>)
    6f3c:	4b09      	ldr	r3, [pc, #36]	; (6f64 <gapc_dev_info_req_ind_handler+0x48>)
    6f3e:	6825      	ldr	r5, [r4, #0]
    6f40:	4809      	ldr	r0, [pc, #36]	; (6f68 <gapc_dev_info_req_ind_handler+0x4c>)
    6f42:	47a8      	blx	r5
    6f44:	6823      	ldr	r3, [r4, #0]
    6f46:	4809      	ldr	r0, [pc, #36]	; (6f6c <gapc_dev_info_req_ind_handler+0x50>)
    6f48:	4798      	blx	r3
    6f4a:	e001      	b.n	6f50 <gapc_dev_info_req_ind_handler+0x34>
    6f4c:	4b08      	ldr	r3, [pc, #32]	; (6f70 <gapc_dev_info_req_ind_handler+0x54>)
    6f4e:	4798      	blx	r3
    6f50:	bd38      	pop	{r3, r4, r5, pc}
    6f52:	46c0      	nop			; (mov r8, r8)
    6f54:	2000199c 	.word	0x2000199c
    6f58:	20000044 	.word	0x20000044
    6f5c:	0000a89b 	.word	0x0000a89b
    6f60:	000002b2 	.word	0x000002b2
    6f64:	0000a87d 	.word	0x0000a87d
    6f68:	0000a1d9 	.word	0x0000a1d9
    6f6c:	0000a980 	.word	0x0000a980
    6f70:	00006505 	.word	0x00006505

00006f74 <gapc_sec_req_ind>:
    6f74:	0a00      	lsrs	r0, r0, #8
    6f76:	8010      	strh	r0, [r2, #0]
    6f78:	7809      	ldrb	r1, [r1, #0]
    6f7a:	2301      	movs	r3, #1
    6f7c:	1c08      	adds	r0, r1, #0
    6f7e:	0889      	lsrs	r1, r1, #2
    6f80:	4018      	ands	r0, r3
    6f82:	400b      	ands	r3, r1
    6f84:	70d0      	strb	r0, [r2, #3]
    6f86:	7113      	strb	r3, [r2, #4]
    6f88:	4770      	bx	lr

00006f8a <gapc_sign_counter_ind_handler>:
    6f8a:	0a00      	lsrs	r0, r0, #8
    6f8c:	8010      	strh	r0, [r2, #0]
    6f8e:	784b      	ldrb	r3, [r1, #1]
    6f90:	0218      	lsls	r0, r3, #8
    6f92:	788b      	ldrb	r3, [r1, #2]
    6f94:	041b      	lsls	r3, r3, #16
    6f96:	4303      	orrs	r3, r0
    6f98:	7808      	ldrb	r0, [r1, #0]
    6f9a:	4303      	orrs	r3, r0
    6f9c:	78c8      	ldrb	r0, [r1, #3]
    6f9e:	0600      	lsls	r0, r0, #24
    6fa0:	4303      	orrs	r3, r0
    6fa2:	6053      	str	r3, [r2, #4]
    6fa4:	794b      	ldrb	r3, [r1, #5]
    6fa6:	0218      	lsls	r0, r3, #8
    6fa8:	798b      	ldrb	r3, [r1, #6]
    6faa:	041b      	lsls	r3, r3, #16
    6fac:	4303      	orrs	r3, r0
    6fae:	7908      	ldrb	r0, [r1, #4]
    6fb0:	79c9      	ldrb	r1, [r1, #7]
    6fb2:	4303      	orrs	r3, r0
    6fb4:	0609      	lsls	r1, r1, #24
    6fb6:	430b      	orrs	r3, r1
    6fb8:	2000      	movs	r0, #0
    6fba:	6093      	str	r3, [r2, #8]
    6fbc:	4770      	bx	lr
	...

00006fc0 <gapc_peer_att_info_ind_handler>:
    6fc0:	b510      	push	{r4, lr}
    6fc2:	0a00      	lsrs	r0, r0, #8
    6fc4:	8010      	strh	r0, [r2, #0]
    6fc6:	7808      	ldrb	r0, [r1, #0]
    6fc8:	7090      	strb	r0, [r2, #2]
    6fca:	788b      	ldrb	r3, [r1, #2]
    6fcc:	784c      	ldrb	r4, [r1, #1]
    6fce:	021b      	lsls	r3, r3, #8
    6fd0:	4323      	orrs	r3, r4
    6fd2:	8093      	strh	r3, [r2, #4]
    6fd4:	2801      	cmp	r0, #1
    6fd6:	d027      	beq.n	7028 <gapc_peer_att_info_ind_handler+0x68>
    6fd8:	2800      	cmp	r0, #0
    6fda:	d017      	beq.n	700c <gapc_peer_att_info_ind_handler+0x4c>
    6fdc:	2802      	cmp	r0, #2
    6fde:	d12a      	bne.n	7036 <gapc_peer_att_info_ind_handler+0x76>
    6fe0:	790b      	ldrb	r3, [r1, #4]
    6fe2:	78c8      	ldrb	r0, [r1, #3]
    6fe4:	021b      	lsls	r3, r3, #8
    6fe6:	4303      	orrs	r3, r0
    6fe8:	8113      	strh	r3, [r2, #8]
    6fea:	798b      	ldrb	r3, [r1, #6]
    6fec:	7948      	ldrb	r0, [r1, #5]
    6fee:	021b      	lsls	r3, r3, #8
    6ff0:	4303      	orrs	r3, r0
    6ff2:	80d3      	strh	r3, [r2, #6]
    6ff4:	7a0b      	ldrb	r3, [r1, #8]
    6ff6:	79c8      	ldrb	r0, [r1, #7]
    6ff8:	021b      	lsls	r3, r3, #8
    6ffa:	4303      	orrs	r3, r0
    6ffc:	8193      	strh	r3, [r2, #12]
    6ffe:	7a8b      	ldrb	r3, [r1, #10]
    7000:	7a49      	ldrb	r1, [r1, #9]
    7002:	021b      	lsls	r3, r3, #8
    7004:	430b      	orrs	r3, r1
    7006:	8153      	strh	r3, [r2, #10]
    7008:	2306      	movs	r3, #6
    700a:	e013      	b.n	7034 <gapc_peer_att_info_ind_handler+0x74>
    700c:	1c14      	adds	r4, r2, #0
    700e:	1c20      	adds	r0, r4, #0
    7010:	790a      	ldrb	r2, [r1, #4]
    7012:	78cb      	ldrb	r3, [r1, #3]
    7014:	0212      	lsls	r2, r2, #8
    7016:	431a      	orrs	r2, r3
    7018:	80e2      	strh	r2, [r4, #6]
    701a:	4b07      	ldr	r3, [pc, #28]	; (7038 <gapc_peer_att_info_ind_handler+0x78>)
    701c:	3008      	adds	r0, #8
    701e:	3105      	adds	r1, #5
    7020:	4798      	blx	r3
    7022:	2302      	movs	r3, #2
    7024:	70a3      	strb	r3, [r4, #2]
    7026:	e006      	b.n	7036 <gapc_peer_att_info_ind_handler+0x76>
    7028:	790b      	ldrb	r3, [r1, #4]
    702a:	78c9      	ldrb	r1, [r1, #3]
    702c:	021b      	lsls	r3, r3, #8
    702e:	430b      	orrs	r3, r1
    7030:	80d3      	strh	r3, [r2, #6]
    7032:	2305      	movs	r3, #5
    7034:	7093      	strb	r3, [r2, #2]
    7036:	bd10      	pop	{r4, pc}
    7038:	000083fb 	.word	0x000083fb

0000703c <gapc_con_channel_map_ind_handler>:
    703c:	b508      	push	{r3, lr}
    703e:	2300      	movs	r3, #0
    7040:	0a00      	lsrs	r0, r0, #8
    7042:	7013      	strb	r3, [r2, #0]
    7044:	8050      	strh	r0, [r2, #2]
    7046:	4b02      	ldr	r3, [pc, #8]	; (7050 <gapc_con_channel_map_ind_handler+0x14>)
    7048:	1d10      	adds	r0, r2, #4
    704a:	2205      	movs	r2, #5
    704c:	4798      	blx	r3
    704e:	bd08      	pop	{r3, pc}
    7050:	000083fb 	.word	0x000083fb

00007054 <gapc_lecb_connected>:
    7054:	7843      	ldrb	r3, [r0, #1]
    7056:	7802      	ldrb	r2, [r0, #0]
    7058:	021b      	lsls	r3, r3, #8
    705a:	4313      	orrs	r3, r2
    705c:	800b      	strh	r3, [r1, #0]
    705e:	78c3      	ldrb	r3, [r0, #3]
    7060:	7882      	ldrb	r2, [r0, #2]
    7062:	021b      	lsls	r3, r3, #8
    7064:	4313      	orrs	r3, r2
    7066:	804b      	strh	r3, [r1, #2]
    7068:	7943      	ldrb	r3, [r0, #5]
    706a:	7902      	ldrb	r2, [r0, #4]
    706c:	021b      	lsls	r3, r3, #8
    706e:	4313      	orrs	r3, r2
    7070:	808b      	strh	r3, [r1, #4]
    7072:	79c3      	ldrb	r3, [r0, #7]
    7074:	7982      	ldrb	r2, [r0, #6]
    7076:	021b      	lsls	r3, r3, #8
    7078:	4313      	orrs	r3, r2
    707a:	80cb      	strh	r3, [r1, #6]
    707c:	2300      	movs	r3, #0
    707e:	720b      	strb	r3, [r1, #8]
    7080:	4770      	bx	lr

00007082 <gapc_lecb_disconnected>:
    7082:	7843      	ldrb	r3, [r0, #1]
    7084:	7802      	ldrb	r2, [r0, #0]
    7086:	021b      	lsls	r3, r3, #8
    7088:	4313      	orrs	r3, r2
    708a:	800b      	strh	r3, [r1, #0]
    708c:	78c3      	ldrb	r3, [r0, #3]
    708e:	7882      	ldrb	r2, [r0, #2]
    7090:	021b      	lsls	r3, r3, #8
    7092:	4313      	orrs	r3, r2
    7094:	804b      	strh	r3, [r1, #2]
    7096:	4770      	bx	lr

00007098 <gapc_lecb_connect_req_ind>:
    7098:	7843      	ldrb	r3, [r0, #1]
    709a:	7802      	ldrb	r2, [r0, #0]
    709c:	021b      	lsls	r3, r3, #8
    709e:	4313      	orrs	r3, r2
    70a0:	800b      	strh	r3, [r1, #0]
    70a2:	78c3      	ldrb	r3, [r0, #3]
    70a4:	7882      	ldrb	r2, [r0, #2]
    70a6:	021b      	lsls	r3, r3, #8
    70a8:	4313      	orrs	r3, r2
    70aa:	804b      	strh	r3, [r1, #2]
    70ac:	7943      	ldrb	r3, [r0, #5]
    70ae:	7902      	ldrb	r2, [r0, #4]
    70b0:	021b      	lsls	r3, r3, #8
    70b2:	4313      	orrs	r3, r2
    70b4:	808b      	strh	r3, [r1, #4]
    70b6:	79c3      	ldrb	r3, [r0, #7]
    70b8:	7982      	ldrb	r2, [r0, #6]
    70ba:	021b      	lsls	r3, r3, #8
    70bc:	4313      	orrs	r3, r2
    70be:	80cb      	strh	r3, [r1, #6]
    70c0:	4770      	bx	lr

000070c2 <gapc_lecb_add_credit_resp_handler>:
    70c2:	7843      	ldrb	r3, [r0, #1]
    70c4:	7802      	ldrb	r2, [r0, #0]
    70c6:	021b      	lsls	r3, r3, #8
    70c8:	4313      	orrs	r3, r2
    70ca:	800b      	strh	r3, [r1, #0]
    70cc:	78c3      	ldrb	r3, [r0, #3]
    70ce:	7882      	ldrb	r2, [r0, #2]
    70d0:	021b      	lsls	r3, r3, #8
    70d2:	4313      	orrs	r3, r2
    70d4:	804b      	strh	r3, [r1, #2]
    70d6:	7943      	ldrb	r3, [r0, #5]
    70d8:	7902      	ldrb	r2, [r0, #4]
    70da:	021b      	lsls	r3, r3, #8
    70dc:	4313      	orrs	r3, r2
    70de:	808b      	strh	r3, [r1, #4]
    70e0:	4770      	bx	lr
	...

000070e4 <gapm_reset_req_handler>:
    70e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70e6:	2300      	movs	r3, #0
    70e8:	4a19      	ldr	r2, [pc, #100]	; (7150 <gapm_reset_req_handler+0x6c>)
    70ea:	4c1a      	ldr	r4, [pc, #104]	; (7154 <gapm_reset_req_handler+0x70>)
    70ec:	6810      	ldr	r0, [r2, #0]
    70ee:	2205      	movs	r2, #5
    70f0:	60a3      	str	r3, [r4, #8]
    70f2:	60e3      	str	r3, [r4, #12]
    70f4:	7103      	strb	r3, [r0, #4]
    70f6:	7183      	strb	r3, [r0, #6]
    70f8:	7203      	strb	r3, [r0, #8]
    70fa:	23d0      	movs	r3, #208	; 0xd0
    70fc:	2110      	movs	r1, #16
    70fe:	2501      	movs	r5, #1
    7100:	7002      	strb	r2, [r0, #0]
    7102:	3a03      	subs	r2, #3
    7104:	7042      	strb	r2, [r0, #1]
    7106:	011b      	lsls	r3, r3, #4
    7108:	320b      	adds	r2, #11
    710a:	7082      	strb	r2, [r0, #2]
    710c:	70c2      	strb	r2, [r0, #3]
    710e:	7141      	strb	r1, [r0, #5]
    7110:	8023      	strh	r3, [r4, #0]
    7112:	3906      	subs	r1, #6
    7114:	4b10      	ldr	r3, [pc, #64]	; (7158 <gapm_reset_req_handler+0x74>)
    7116:	7245      	strb	r5, [r0, #9]
    7118:	71c5      	strb	r5, [r0, #7]
    711a:	80a2      	strh	r2, [r4, #4]
    711c:	4798      	blx	r3
    711e:	4b0f      	ldr	r3, [pc, #60]	; (715c <gapm_reset_req_handler+0x78>)
    7120:	4798      	blx	r3
    7122:	23d0      	movs	r3, #208	; 0xd0
    7124:	4298      	cmp	r0, r3
    7126:	d011      	beq.n	714c <gapm_reset_req_handler+0x68>
    7128:	68a3      	ldr	r3, [r4, #8]
    712a:	781c      	ldrb	r4, [r3, #0]
    712c:	785b      	ldrb	r3, [r3, #1]
    712e:	42ac      	cmp	r4, r5
    7130:	d00c      	beq.n	714c <gapm_reset_req_handler+0x68>
    7132:	4e0b      	ldr	r6, [pc, #44]	; (7160 <gapm_reset_req_handler+0x7c>)
    7134:	490b      	ldr	r1, [pc, #44]	; (7164 <gapm_reset_req_handler+0x80>)
    7136:	2249      	movs	r2, #73	; 0x49
    7138:	4b0b      	ldr	r3, [pc, #44]	; (7168 <gapm_reset_req_handler+0x84>)
    713a:	480c      	ldr	r0, [pc, #48]	; (716c <gapm_reset_req_handler+0x88>)
    713c:	6837      	ldr	r7, [r6, #0]
    713e:	47b8      	blx	r7
    7140:	6833      	ldr	r3, [r6, #0]
    7142:	480b      	ldr	r0, [pc, #44]	; (7170 <gapm_reset_req_handler+0x8c>)
    7144:	1c29      	adds	r1, r5, #0
    7146:	1c22      	adds	r2, r4, #0
    7148:	4798      	blx	r3
    714a:	23e2      	movs	r3, #226	; 0xe2
    714c:	1c18      	adds	r0, r3, #0
    714e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7150:	0000a6a0 	.word	0x0000a6a0
    7154:	200018fc 	.word	0x200018fc
    7158:	00005b19 	.word	0x00005b19
    715c:	00005d7d 	.word	0x00005d7d
    7160:	20000044 	.word	0x20000044
    7164:	0000a9cb 	.word	0x0000a9cb
    7168:	0000a994 	.word	0x0000a994
    716c:	0000a1d9 	.word	0x0000a1d9
    7170:	0000aa06 	.word	0x0000aa06

00007174 <gapm_set_dev_config_cmd_handler>:
    7174:	b5f0      	push	{r4, r5, r6, r7, lr}
    7176:	b087      	sub	sp, #28
    7178:	9303      	str	r3, [sp, #12]
    717a:	ab0c      	add	r3, sp, #48	; 0x30
    717c:	781b      	ldrb	r3, [r3, #0]
    717e:	2605      	movs	r6, #5
    7180:	9304      	str	r3, [sp, #16]
    7182:	ab0d      	add	r3, sp, #52	; 0x34
    7184:	781b      	ldrb	r3, [r3, #0]
    7186:	2710      	movs	r7, #16
    7188:	9305      	str	r3, [sp, #20]
    718a:	ab0e      	add	r3, sp, #56	; 0x38
    718c:	881b      	ldrh	r3, [r3, #0]
    718e:	4c38      	ldr	r4, [pc, #224]	; (7270 <gapm_set_dev_config_cmd_handler+0xfc>)
    7190:	9300      	str	r3, [sp, #0]
    7192:	ab0f      	add	r3, sp, #60	; 0x3c
    7194:	881b      	ldrh	r3, [r3, #0]
    7196:	6824      	ldr	r4, [r4, #0]
    7198:	9301      	str	r3, [sp, #4]
    719a:	ab10      	add	r3, sp, #64	; 0x40
    719c:	881b      	ldrh	r3, [r3, #0]
    719e:	4d35      	ldr	r5, [pc, #212]	; (7274 <gapm_set_dev_config_cmd_handler+0x100>)
    71a0:	9302      	str	r3, [sp, #8]
    71a2:	2300      	movs	r3, #0
    71a4:	60eb      	str	r3, [r5, #12]
    71a6:	60ab      	str	r3, [r5, #8]
    71a8:	7026      	strb	r6, [r4, #0]
    71aa:	3e01      	subs	r6, #1
    71ac:	7066      	strb	r6, [r4, #1]
    71ae:	7123      	strb	r3, [r4, #4]
    71b0:	3609      	adds	r6, #9
    71b2:	71a3      	strb	r3, [r4, #6]
    71b4:	71e3      	strb	r3, [r4, #7]
    71b6:	7223      	strb	r3, [r4, #8]
    71b8:	72e1      	strb	r1, [r4, #11]
    71ba:	3303      	adds	r3, #3
    71bc:	0a09      	lsrs	r1, r1, #8
    71be:	7263      	strb	r3, [r4, #9]
    71c0:	7167      	strb	r7, [r4, #5]
    71c2:	72a0      	strb	r0, [r4, #10]
    71c4:	7321      	strb	r1, [r4, #12]
    71c6:	4f2c      	ldr	r7, [pc, #176]	; (7278 <gapm_set_dev_config_cmd_handler+0x104>)
    71c8:	1c11      	adds	r1, r2, #0
    71ca:	70a6      	strb	r6, [r4, #2]
    71cc:	2206      	movs	r2, #6
    71ce:	70e6      	strb	r6, [r4, #3]
    71d0:	19a0      	adds	r0, r4, r6
    71d2:	47b8      	blx	r7
    71d4:	1c20      	adds	r0, r4, #0
    71d6:	9903      	ldr	r1, [sp, #12]
    71d8:	2210      	movs	r2, #16
    71da:	3013      	adds	r0, #19
    71dc:	47b8      	blx	r7
    71de:	466a      	mov	r2, sp
    71e0:	7c12      	ldrb	r2, [r2, #16]
    71e2:	1d23      	adds	r3, r4, #4
    71e4:	77da      	strb	r2, [r3, #31]
    71e6:	466a      	mov	r2, sp
    71e8:	7d12      	ldrb	r2, [r2, #20]
    71ea:	1d63      	adds	r3, r4, #5
    71ec:	77da      	strb	r2, [r3, #31]
    71ee:	466a      	mov	r2, sp
    71f0:	7812      	ldrb	r2, [r2, #0]
    71f2:	1da3      	adds	r3, r4, #6
    71f4:	77da      	strb	r2, [r3, #31]
    71f6:	9b00      	ldr	r3, [sp, #0]
    71f8:	1de2      	adds	r2, r4, #7
    71fa:	0a1b      	lsrs	r3, r3, #8
    71fc:	77d3      	strb	r3, [r2, #31]
    71fe:	466a      	mov	r2, sp
    7200:	1c23      	adds	r3, r4, #0
    7202:	7912      	ldrb	r2, [r2, #4]
    7204:	3308      	adds	r3, #8
    7206:	77da      	strb	r2, [r3, #31]
    7208:	1c22      	adds	r2, r4, #0
    720a:	9b01      	ldr	r3, [sp, #4]
    720c:	3228      	adds	r2, #40	; 0x28
    720e:	0a1b      	lsrs	r3, r3, #8
    7210:	7013      	strb	r3, [r2, #0]
    7212:	466a      	mov	r2, sp
    7214:	1c23      	adds	r3, r4, #0
    7216:	7a12      	ldrb	r2, [r2, #8]
    7218:	3329      	adds	r3, #41	; 0x29
    721a:	701a      	strb	r2, [r3, #0]
    721c:	1c22      	adds	r2, r4, #0
    721e:	9b02      	ldr	r3, [sp, #8]
    7220:	322a      	adds	r2, #42	; 0x2a
    7222:	0a1b      	lsrs	r3, r3, #8
    7224:	7013      	strb	r3, [r2, #0]
    7226:	23d0      	movs	r3, #208	; 0xd0
    7228:	011b      	lsls	r3, r3, #4
    722a:	802b      	strh	r3, [r5, #0]
    722c:	2322      	movs	r3, #34	; 0x22
    722e:	212b      	movs	r1, #43	; 0x2b
    7230:	71e3      	strb	r3, [r4, #7]
    7232:	1c20      	adds	r0, r4, #0
    7234:	4b11      	ldr	r3, [pc, #68]	; (727c <gapm_set_dev_config_cmd_handler+0x108>)
    7236:	80ae      	strh	r6, [r5, #4]
    7238:	4798      	blx	r3
    723a:	4b11      	ldr	r3, [pc, #68]	; (7280 <gapm_set_dev_config_cmd_handler+0x10c>)
    723c:	4798      	blx	r3
    723e:	23d0      	movs	r3, #208	; 0xd0
    7240:	4298      	cmp	r0, r3
    7242:	d011      	beq.n	7268 <gapm_set_dev_config_cmd_handler+0xf4>
    7244:	68ab      	ldr	r3, [r5, #8]
    7246:	781c      	ldrb	r4, [r3, #0]
    7248:	785b      	ldrb	r3, [r3, #1]
    724a:	2c03      	cmp	r4, #3
    724c:	d00c      	beq.n	7268 <gapm_set_dev_config_cmd_handler+0xf4>
    724e:	4d0d      	ldr	r5, [pc, #52]	; (7284 <gapm_set_dev_config_cmd_handler+0x110>)
    7250:	490d      	ldr	r1, [pc, #52]	; (7288 <gapm_set_dev_config_cmd_handler+0x114>)
    7252:	2265      	movs	r2, #101	; 0x65
    7254:	4b0d      	ldr	r3, [pc, #52]	; (728c <gapm_set_dev_config_cmd_handler+0x118>)
    7256:	480e      	ldr	r0, [pc, #56]	; (7290 <gapm_set_dev_config_cmd_handler+0x11c>)
    7258:	682e      	ldr	r6, [r5, #0]
    725a:	47b0      	blx	r6
    725c:	682b      	ldr	r3, [r5, #0]
    725e:	480d      	ldr	r0, [pc, #52]	; (7294 <gapm_set_dev_config_cmd_handler+0x120>)
    7260:	2103      	movs	r1, #3
    7262:	1c22      	adds	r2, r4, #0
    7264:	4798      	blx	r3
    7266:	23e2      	movs	r3, #226	; 0xe2
    7268:	1c18      	adds	r0, r3, #0
    726a:	b007      	add	sp, #28
    726c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    726e:	46c0      	nop			; (mov r8, r8)
    7270:	0000a6a0 	.word	0x0000a6a0
    7274:	200018fc 	.word	0x200018fc
    7278:	000083fb 	.word	0x000083fb
    727c:	00005b19 	.word	0x00005b19
    7280:	00005d7d 	.word	0x00005d7d
    7284:	20000044 	.word	0x20000044
    7288:	0000a9cb 	.word	0x0000a9cb
    728c:	0000a9ab 	.word	0x0000a9ab
    7290:	0000a1d9 	.word	0x0000a1d9
    7294:	0000aa06 	.word	0x0000aa06

00007298 <gapm_get_dev_config_cmd_handler>:
    7298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    729a:	1c0d      	adds	r5, r1, #0
    729c:	21cf      	movs	r1, #207	; 0xcf
    729e:	2801      	cmp	r0, #1
    72a0:	d84b      	bhi.n	733a <gapm_get_dev_config_cmd_handler+0xa2>
    72a2:	2d00      	cmp	r5, #0
    72a4:	d049      	beq.n	733a <gapm_get_dev_config_cmd_handler+0xa2>
    72a6:	2200      	movs	r2, #0
    72a8:	2605      	movs	r6, #5
    72aa:	4b25      	ldr	r3, [pc, #148]	; (7340 <gapm_get_dev_config_cmd_handler+0xa8>)
    72ac:	4c25      	ldr	r4, [pc, #148]	; (7344 <gapm_get_dev_config_cmd_handler+0xac>)
    72ae:	681b      	ldr	r3, [r3, #0]
    72b0:	60a2      	str	r2, [r4, #8]
    72b2:	60e2      	str	r2, [r4, #12]
    72b4:	701e      	strb	r6, [r3, #0]
    72b6:	3601      	adds	r6, #1
    72b8:	270d      	movs	r7, #13
    72ba:	705e      	strb	r6, [r3, #1]
    72bc:	2610      	movs	r6, #16
    72be:	709f      	strb	r7, [r3, #2]
    72c0:	70df      	strb	r7, [r3, #3]
    72c2:	711a      	strb	r2, [r3, #4]
    72c4:	715e      	strb	r6, [r3, #5]
    72c6:	719a      	strb	r2, [r3, #6]
    72c8:	71da      	strb	r2, [r3, #7]
    72ca:	721a      	strb	r2, [r3, #8]
    72cc:	2801      	cmp	r0, #1
    72ce:	d134      	bne.n	733a <gapm_get_dev_config_cmd_handler+0xa2>
    72d0:	3206      	adds	r2, #6
    72d2:	725a      	strb	r2, [r3, #9]
    72d4:	22d0      	movs	r2, #208	; 0xd0
    72d6:	0112      	lsls	r2, r2, #4
    72d8:	8062      	strh	r2, [r4, #2]
    72da:	4a1b      	ldr	r2, [pc, #108]	; (7348 <gapm_get_dev_config_cmd_handler+0xb0>)
    72dc:	71d8      	strb	r0, [r3, #7]
    72de:	39c5      	subs	r1, #197	; 0xc5
    72e0:	1c18      	adds	r0, r3, #0
    72e2:	4b1a      	ldr	r3, [pc, #104]	; (734c <gapm_get_dev_config_cmd_handler+0xb4>)
    72e4:	8022      	strh	r2, [r4, #0]
    72e6:	80a7      	strh	r7, [r4, #4]
    72e8:	4798      	blx	r3
    72ea:	4b19      	ldr	r3, [pc, #100]	; (7350 <gapm_get_dev_config_cmd_handler+0xb8>)
    72ec:	4798      	blx	r3
    72ee:	21d0      	movs	r1, #208	; 0xd0
    72f0:	4288      	cmp	r0, r1
    72f2:	d022      	beq.n	733a <gapm_get_dev_config_cmd_handler+0xa2>
    72f4:	2301      	movs	r3, #1
    72f6:	8821      	ldrh	r1, [r4, #0]
    72f8:	4a16      	ldr	r2, [pc, #88]	; (7354 <gapm_get_dev_config_cmd_handler+0xbc>)
    72fa:	68a7      	ldr	r7, [r4, #8]
    72fc:	425b      	negs	r3, r3
    72fe:	4291      	cmp	r1, r2
    7300:	d001      	beq.n	7306 <gapm_get_dev_config_cmd_handler+0x6e>
    7302:	8023      	strh	r3, [r4, #0]
    7304:	e008      	b.n	7318 <gapm_get_dev_config_cmd_handler+0x80>
    7306:	8063      	strh	r3, [r4, #2]
    7308:	1c39      	adds	r1, r7, #0
    730a:	4b13      	ldr	r3, [pc, #76]	; (7358 <gapm_get_dev_config_cmd_handler+0xc0>)
    730c:	1c68      	adds	r0, r5, #1
    730e:	2206      	movs	r2, #6
    7310:	4798      	blx	r3
    7312:	79bb      	ldrb	r3, [r7, #6]
    7314:	702b      	strb	r3, [r5, #0]
    7316:	68e7      	ldr	r7, [r4, #12]
    7318:	783c      	ldrb	r4, [r7, #0]
    731a:	7879      	ldrb	r1, [r7, #1]
    731c:	2c06      	cmp	r4, #6
    731e:	d00c      	beq.n	733a <gapm_get_dev_config_cmd_handler+0xa2>
    7320:	4d0e      	ldr	r5, [pc, #56]	; (735c <gapm_get_dev_config_cmd_handler+0xc4>)
    7322:	490f      	ldr	r1, [pc, #60]	; (7360 <gapm_get_dev_config_cmd_handler+0xc8>)
    7324:	2286      	movs	r2, #134	; 0x86
    7326:	4b0f      	ldr	r3, [pc, #60]	; (7364 <gapm_get_dev_config_cmd_handler+0xcc>)
    7328:	480f      	ldr	r0, [pc, #60]	; (7368 <gapm_get_dev_config_cmd_handler+0xd0>)
    732a:	682e      	ldr	r6, [r5, #0]
    732c:	47b0      	blx	r6
    732e:	2106      	movs	r1, #6
    7330:	682b      	ldr	r3, [r5, #0]
    7332:	480e      	ldr	r0, [pc, #56]	; (736c <gapm_get_dev_config_cmd_handler+0xd4>)
    7334:	1c22      	adds	r2, r4, #0
    7336:	4798      	blx	r3
    7338:	21e2      	movs	r1, #226	; 0xe2
    733a:	1c08      	adds	r0, r1, #0
    733c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    733e:	46c0      	nop			; (mov r8, r8)
    7340:	0000a6a0 	.word	0x0000a6a0
    7344:	200018fc 	.word	0x200018fc
    7348:	00000d08 	.word	0x00000d08
    734c:	00005b19 	.word	0x00005b19
    7350:	00005d7d 	.word	0x00005d7d
    7354:	0000ffff 	.word	0x0000ffff
    7358:	000083fb 	.word	0x000083fb
    735c:	20000044 	.word	0x20000044
    7360:	0000a9cb 	.word	0x0000a9cb
    7364:	0000aa36 	.word	0x0000aa36
    7368:	0000a1d9 	.word	0x0000a1d9
    736c:	0000aa06 	.word	0x0000aa06

00007370 <gapm_cancel_cmd_handler>:
    7370:	b538      	push	{r3, r4, r5, lr}
    7372:	2210      	movs	r2, #16
    7374:	2400      	movs	r4, #0
    7376:	4b13      	ldr	r3, [pc, #76]	; (73c4 <gapm_cancel_cmd_handler+0x54>)
    7378:	4d13      	ldr	r5, [pc, #76]	; (73c8 <gapm_cancel_cmd_handler+0x58>)
    737a:	6818      	ldr	r0, [r3, #0]
    737c:	2305      	movs	r3, #5
    737e:	60ac      	str	r4, [r5, #8]
    7380:	60ec      	str	r4, [r5, #12]
    7382:	7142      	strb	r2, [r0, #5]
    7384:	3a0e      	subs	r2, #14
    7386:	7242      	strb	r2, [r0, #9]
    7388:	22d0      	movs	r2, #208	; 0xd0
    738a:	7003      	strb	r3, [r0, #0]
    738c:	3b02      	subs	r3, #2
    738e:	7043      	strb	r3, [r0, #1]
    7390:	330a      	adds	r3, #10
    7392:	7083      	strb	r3, [r0, #2]
    7394:	70c3      	strb	r3, [r0, #3]
    7396:	7104      	strb	r4, [r0, #4]
    7398:	80ab      	strh	r3, [r5, #4]
    739a:	3b0c      	subs	r3, #12
    739c:	0112      	lsls	r2, r2, #4
    739e:	71c3      	strb	r3, [r0, #7]
    73a0:	7184      	strb	r4, [r0, #6]
    73a2:	4b0a      	ldr	r3, [pc, #40]	; (73cc <gapm_cancel_cmd_handler+0x5c>)
    73a4:	7204      	strb	r4, [r0, #8]
    73a6:	210a      	movs	r1, #10
    73a8:	802a      	strh	r2, [r5, #0]
    73aa:	4798      	blx	r3
    73ac:	4b08      	ldr	r3, [pc, #32]	; (73d0 <gapm_cancel_cmd_handler+0x60>)
    73ae:	4798      	blx	r3
    73b0:	28d0      	cmp	r0, #208	; 0xd0
    73b2:	d005      	beq.n	73c0 <gapm_cancel_cmd_handler+0x50>
    73b4:	68ab      	ldr	r3, [r5, #8]
    73b6:	1c20      	adds	r0, r4, #0
    73b8:	785b      	ldrb	r3, [r3, #1]
    73ba:	2b44      	cmp	r3, #68	; 0x44
    73bc:	d000      	beq.n	73c0 <gapm_cancel_cmd_handler+0x50>
    73be:	1c18      	adds	r0, r3, #0
    73c0:	bd38      	pop	{r3, r4, r5, pc}
    73c2:	46c0      	nop			; (mov r8, r8)
    73c4:	0000a6a0 	.word	0x0000a6a0
    73c8:	200018fc 	.word	0x200018fc
    73cc:	00005b19 	.word	0x00005b19
    73d0:	00005d7d 	.word	0x00005d7d

000073d4 <gapm_dev_bdaddr_ind_handler>:
    73d4:	b538      	push	{r3, r4, r5, lr}
    73d6:	1c05      	adds	r5, r0, #0
    73d8:	1c0c      	adds	r4, r1, #0
    73da:	1c48      	adds	r0, r1, #1
    73dc:	2206      	movs	r2, #6
    73de:	1c29      	adds	r1, r5, #0
    73e0:	4b02      	ldr	r3, [pc, #8]	; (73ec <gapm_dev_bdaddr_ind_handler+0x18>)
    73e2:	4798      	blx	r3
    73e4:	79ab      	ldrb	r3, [r5, #6]
    73e6:	2000      	movs	r0, #0
    73e8:	7023      	strb	r3, [r4, #0]
    73ea:	bd38      	pop	{r3, r4, r5, pc}
    73ec:	000083fb 	.word	0x000083fb

000073f0 <gapm_cmp_evt>:
    73f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    73f2:	7806      	ldrb	r6, [r0, #0]
    73f4:	7845      	ldrb	r5, [r0, #1]
    73f6:	1c30      	adds	r0, r6, #0
    73f8:	380c      	subs	r0, #12
    73fa:	1c0c      	adds	r4, r1, #0
    73fc:	280b      	cmp	r0, #11
    73fe:	d900      	bls.n	7402 <gapm_cmp_evt+0x12>
    7400:	e08c      	b.n	751c <gapm_cmp_evt+0x12c>
    7402:	f000 feff 	bl	8204 <__gnu_thumb1_case_uqi>
    7406:	1952      	.short	0x1952
    7408:	068b1919 	.word	0x068b1919
    740c:	8b595906 	.word	0x8b595906
    7410:	0d8b      	.short	0x0d8b
    7412:	2300      	movs	r3, #0
    7414:	2d45      	cmp	r5, #69	; 0x45
    7416:	d000      	beq.n	741a <gapm_cmp_evt+0x2a>
    7418:	1c2b      	adds	r3, r5, #0
    741a:	7023      	strb	r3, [r4, #0]
    741c:	2002      	movs	r0, #2
    741e:	e08a      	b.n	7536 <gapm_cmp_evt+0x146>
    7420:	203a      	movs	r0, #58	; 0x3a
    7422:	2d00      	cmp	r5, #0
    7424:	d100      	bne.n	7428 <gapm_cmp_evt+0x38>
    7426:	e086      	b.n	7536 <gapm_cmp_evt+0x146>
    7428:	700d      	strb	r5, [r1, #0]
    742a:	1c48      	adds	r0, r1, #1
    742c:	2210      	movs	r2, #16
    742e:	2100      	movs	r1, #0
    7430:	4b41      	ldr	r3, [pc, #260]	; (7538 <gapm_cmp_evt+0x148>)
    7432:	4798      	blx	r3
    7434:	200f      	movs	r0, #15
    7436:	e07e      	b.n	7536 <gapm_cmp_evt+0x146>
    7438:	2d00      	cmp	r5, #0
    743a:	d134      	bne.n	74a6 <gapm_cmp_evt+0xb6>
    743c:	4b3f      	ldr	r3, [pc, #252]	; (753c <gapm_cmp_evt+0x14c>)
    743e:	4798      	blx	r3
    7440:	1e43      	subs	r3, r0, #1
    7442:	b2db      	uxtb	r3, r3
    7444:	1c28      	adds	r0, r5, #0
    7446:	2b06      	cmp	r3, #6
    7448:	d875      	bhi.n	7536 <gapm_cmp_evt+0x146>
    744a:	466b      	mov	r3, sp
    744c:	4e3c      	ldr	r6, [pc, #240]	; (7540 <gapm_cmp_evt+0x150>)
    744e:	1dd9      	adds	r1, r3, #7
    7450:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
    7452:	4b3c      	ldr	r3, [pc, #240]	; (7544 <gapm_cmp_evt+0x154>)
    7454:	4798      	blx	r3
    7456:	2312      	movs	r3, #18
    7458:	4358      	muls	r0, r3
    745a:	493b      	ldr	r1, [pc, #236]	; (7548 <gapm_cmp_evt+0x158>)
    745c:	1809      	adds	r1, r1, r0
    745e:	1c0b      	adds	r3, r1, #0
    7460:	894a      	ldrh	r2, [r1, #10]
    7462:	3308      	adds	r3, #8
    7464:	8122      	strh	r2, [r4, #8]
    7466:	784f      	ldrb	r7, [r1, #1]
    7468:	72a5      	strb	r5, [r4, #10]
    746a:	7027      	strb	r7, [r4, #0]
    746c:	898a      	ldrh	r2, [r1, #12]
    746e:	1c60      	adds	r0, r4, #1
    7470:	81a2      	strh	r2, [r4, #12]
    7472:	88db      	ldrh	r3, [r3, #6]
    7474:	3102      	adds	r1, #2
    7476:	81e3      	strh	r3, [r4, #14]
    7478:	89cb      	ldrh	r3, [r1, #14]
    747a:	2206      	movs	r2, #6
    747c:	8223      	strh	r3, [r4, #16]
    747e:	4b33      	ldr	r3, [pc, #204]	; (754c <gapm_cmp_evt+0x15c>)
    7480:	4798      	blx	r3
    7482:	2f00      	cmp	r7, #0
    7484:	d00a      	beq.n	749c <gapm_cmp_evt+0xac>
    7486:	79a3      	ldrb	r3, [r4, #6]
    7488:	223f      	movs	r2, #63	; 0x3f
    748a:	1c19      	adds	r1, r3, #0
    748c:	3501      	adds	r5, #1
    748e:	4391      	bics	r1, r2
    7490:	29c0      	cmp	r1, #192	; 0xc0
    7492:	d003      	beq.n	749c <gapm_cmp_evt+0xac>
    7494:	065b      	lsls	r3, r3, #25
    7496:	0fdb      	lsrs	r3, r3, #31
    7498:	3502      	adds	r5, #2
    749a:	1aed      	subs	r5, r5, r3
    749c:	2301      	movs	r3, #1
    749e:	425b      	negs	r3, r3
    74a0:	7025      	strb	r5, [r4, #0]
    74a2:	85b3      	strh	r3, [r6, #44]	; 0x2c
    74a4:	e038      	b.n	7518 <gapm_cmp_evt+0x128>
    74a6:	700d      	strb	r5, [r1, #0]
    74a8:	e004      	b.n	74b4 <gapm_cmp_evt+0xc4>
    74aa:	2300      	movs	r3, #0
    74ac:	2d45      	cmp	r5, #69	; 0x45
    74ae:	d000      	beq.n	74b2 <gapm_cmp_evt+0xc2>
    74b0:	1c2b      	adds	r3, r5, #0
    74b2:	7023      	strb	r3, [r4, #0]
    74b4:	2003      	movs	r0, #3
    74b6:	e03e      	b.n	7536 <gapm_cmp_evt+0x146>
    74b8:	4e21      	ldr	r6, [pc, #132]	; (7540 <gapm_cmp_evt+0x150>)
    74ba:	2100      	movs	r1, #0
    74bc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
    74be:	4b21      	ldr	r3, [pc, #132]	; (7544 <gapm_cmp_evt+0x154>)
    74c0:	4798      	blx	r3
    74c2:	2807      	cmp	r0, #7
    74c4:	d818      	bhi.n	74f8 <gapm_cmp_evt+0x108>
    74c6:	2301      	movs	r3, #1
    74c8:	425b      	negs	r3, r3
    74ca:	85b3      	strh	r3, [r6, #44]	; 0x2c
    74cc:	3313      	adds	r3, #19
    74ce:	4358      	muls	r0, r3
    74d0:	491d      	ldr	r1, [pc, #116]	; (7548 <gapm_cmp_evt+0x158>)
    74d2:	1809      	adds	r1, r1, r0
    74d4:	1c0b      	adds	r3, r1, #0
    74d6:	894a      	ldrh	r2, [r1, #10]
    74d8:	3308      	adds	r3, #8
    74da:	8122      	strh	r2, [r4, #8]
    74dc:	784a      	ldrb	r2, [r1, #1]
    74de:	72a5      	strb	r5, [r4, #10]
    74e0:	7022      	strb	r2, [r4, #0]
    74e2:	898a      	ldrh	r2, [r1, #12]
    74e4:	1c60      	adds	r0, r4, #1
    74e6:	81a2      	strh	r2, [r4, #12]
    74e8:	88db      	ldrh	r3, [r3, #6]
    74ea:	3102      	adds	r1, #2
    74ec:	81e3      	strh	r3, [r4, #14]
    74ee:	89cb      	ldrh	r3, [r1, #14]
    74f0:	2206      	movs	r2, #6
    74f2:	8223      	strh	r3, [r4, #16]
    74f4:	4b15      	ldr	r3, [pc, #84]	; (754c <gapm_cmp_evt+0x15c>)
    74f6:	4798      	blx	r3
    74f8:	2200      	movs	r2, #0
    74fa:	7823      	ldrb	r3, [r4, #0]
    74fc:	4293      	cmp	r3, r2
    74fe:	d00a      	beq.n	7516 <gapm_cmp_evt+0x126>
    7500:	79a3      	ldrb	r3, [r4, #6]
    7502:	323f      	adds	r2, #63	; 0x3f
    7504:	1c19      	adds	r1, r3, #0
    7506:	4391      	bics	r1, r2
    7508:	3a3e      	subs	r2, #62	; 0x3e
    750a:	29c0      	cmp	r1, #192	; 0xc0
    750c:	d003      	beq.n	7516 <gapm_cmp_evt+0x126>
    750e:	065b      	lsls	r3, r3, #25
    7510:	0fdb      	lsrs	r3, r3, #31
    7512:	3202      	adds	r2, #2
    7514:	1ad2      	subs	r2, r2, r3
    7516:	7022      	strb	r2, [r4, #0]
    7518:	2005      	movs	r0, #5
    751a:	e00c      	b.n	7536 <gapm_cmp_evt+0x146>
    751c:	2292      	movs	r2, #146	; 0x92
    751e:	4c0c      	ldr	r4, [pc, #48]	; (7550 <gapm_cmp_evt+0x160>)
    7520:	490c      	ldr	r1, [pc, #48]	; (7554 <gapm_cmp_evt+0x164>)
    7522:	0052      	lsls	r2, r2, #1
    7524:	4b0c      	ldr	r3, [pc, #48]	; (7558 <gapm_cmp_evt+0x168>)
    7526:	480d      	ldr	r0, [pc, #52]	; (755c <gapm_cmp_evt+0x16c>)
    7528:	6825      	ldr	r5, [r4, #0]
    752a:	47a8      	blx	r5
    752c:	6823      	ldr	r3, [r4, #0]
    752e:	480c      	ldr	r0, [pc, #48]	; (7560 <gapm_cmp_evt+0x170>)
    7530:	1c31      	adds	r1, r6, #0
    7532:	4798      	blx	r3
    7534:	2000      	movs	r0, #0
    7536:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7538:	0000840d 	.word	0x0000840d
    753c:	00006619 	.word	0x00006619
    7540:	2000199c 	.word	0x2000199c
    7544:	000065dd 	.word	0x000065dd
    7548:	2000190c 	.word	0x2000190c
    754c:	000083fb 	.word	0x000083fb
    7550:	20000044 	.word	0x20000044
    7554:	0000a9cb 	.word	0x0000a9cb
    7558:	0000aa56 	.word	0x0000aa56
    755c:	0000a1d9 	.word	0x0000a1d9
    7560:	0000aa1e 	.word	0x0000aa1e

00007564 <gapm_start_adv_cmd_handler>:
    7564:	b5f0      	push	{r4, r5, r6, r7, lr}
    7566:	b089      	sub	sp, #36	; 0x24
    7568:	9303      	str	r3, [sp, #12]
    756a:	ab0e      	add	r3, sp, #56	; 0x38
    756c:	9102      	str	r1, [sp, #8]
    756e:	cb02      	ldmia	r3!, {r1}
    7570:	aa08      	add	r2, sp, #32
    7572:	881e      	ldrh	r6, [r3, #0]
    7574:	ab10      	add	r3, sp, #64	; 0x40
    7576:	881b      	ldrh	r3, [r3, #0]
    7578:	4c3b      	ldr	r4, [pc, #236]	; (7668 <gapm_start_adv_cmd_handler+0x104>)
    757a:	9300      	str	r3, [sp, #0]
    757c:	ab11      	add	r3, sp, #68	; 0x44
    757e:	781b      	ldrb	r3, [r3, #0]
    7580:	9304      	str	r3, [sp, #16]
    7582:	ab12      	add	r3, sp, #72	; 0x48
    7584:	781b      	ldrb	r3, [r3, #0]
    7586:	9305      	str	r3, [sp, #20]
    7588:	ab13      	add	r3, sp, #76	; 0x4c
    758a:	781b      	ldrb	r3, [r3, #0]
    758c:	9306      	str	r3, [sp, #24]
    758e:	ab14      	add	r3, sp, #80	; 0x50
    7590:	781b      	ldrb	r3, [r3, #0]
    7592:	9301      	str	r3, [sp, #4]
    7594:	2319      	movs	r3, #25
    7596:	189b      	adds	r3, r3, r2
    7598:	7fdd      	ldrb	r5, [r3, #31]
    759a:	ab18      	add	r3, sp, #96	; 0x60
    759c:	881f      	ldrh	r7, [r3, #0]
    759e:	ab19      	add	r3, sp, #100	; 0x64
    75a0:	781b      	ldrb	r3, [r3, #0]
    75a2:	2205      	movs	r2, #5
    75a4:	9307      	str	r3, [sp, #28]
    75a6:	2300      	movs	r3, #0
    75a8:	60a3      	str	r3, [r4, #8]
    75aa:	60e3      	str	r3, [r4, #12]
    75ac:	4c2f      	ldr	r4, [pc, #188]	; (766c <gapm_start_adv_cmd_handler+0x108>)
    75ae:	6824      	ldr	r4, [r4, #0]
    75b0:	7022      	strb	r2, [r4, #0]
    75b2:	220d      	movs	r2, #13
    75b4:	7062      	strb	r2, [r4, #1]
    75b6:	70a2      	strb	r2, [r4, #2]
    75b8:	70e2      	strb	r2, [r4, #3]
    75ba:	2210      	movs	r2, #16
    75bc:	7123      	strb	r3, [r4, #4]
    75be:	7162      	strb	r2, [r4, #5]
    75c0:	71a3      	strb	r3, [r4, #6]
    75c2:	71e3      	strb	r3, [r4, #7]
    75c4:	7223      	strb	r3, [r4, #8]
    75c6:	7260      	strb	r0, [r4, #9]
    75c8:	72e3      	strb	r3, [r4, #11]
    75ca:	7323      	strb	r3, [r4, #12]
    75cc:	466b      	mov	r3, sp
    75ce:	781b      	ldrb	r3, [r3, #0]
    75d0:	466a      	mov	r2, sp
    75d2:	73e3      	strb	r3, [r4, #15]
    75d4:	9b00      	ldr	r3, [sp, #0]
    75d6:	7a12      	ldrb	r2, [r2, #8]
    75d8:	0a1b      	lsrs	r3, r3, #8
    75da:	7423      	strb	r3, [r4, #16]
    75dc:	466b      	mov	r3, sp
    75de:	7c1b      	ldrb	r3, [r3, #16]
    75e0:	7366      	strb	r6, [r4, #13]
    75e2:	380e      	subs	r0, #14
    75e4:	0a36      	lsrs	r6, r6, #8
    75e6:	72a2      	strb	r2, [r4, #10]
    75e8:	73a6      	strb	r6, [r4, #14]
    75ea:	7463      	strb	r3, [r4, #17]
    75ec:	2801      	cmp	r0, #1
    75ee:	d80a      	bhi.n	7606 <gapm_start_adv_cmd_handler+0xa2>
    75f0:	2900      	cmp	r1, #0
    75f2:	d004      	beq.n	75fe <gapm_start_adv_cmd_handler+0x9a>
    75f4:	1c20      	adds	r0, r4, #0
    75f6:	2206      	movs	r2, #6
    75f8:	3012      	adds	r0, #18
    75fa:	4b1d      	ldr	r3, [pc, #116]	; (7670 <gapm_start_adv_cmd_handler+0x10c>)
    75fc:	4798      	blx	r3
    75fe:	466b      	mov	r3, sp
    7600:	7b1b      	ldrb	r3, [r3, #12]
    7602:	7623      	strb	r3, [r4, #24]
    7604:	e016      	b.n	7634 <gapm_start_adv_cmd_handler+0xd0>
    7606:	466b      	mov	r3, sp
    7608:	7d1b      	ldrb	r3, [r3, #20]
    760a:	1c20      	adds	r0, r4, #0
    760c:	74a3      	strb	r3, [r4, #18]
    760e:	466b      	mov	r3, sp
    7610:	7e1b      	ldrb	r3, [r3, #24]
    7612:	9915      	ldr	r1, [sp, #84]	; 0x54
    7614:	74e3      	strb	r3, [r4, #19]
    7616:	466b      	mov	r3, sp
    7618:	791b      	ldrb	r3, [r3, #4]
    761a:	9a01      	ldr	r2, [sp, #4]
    761c:	7523      	strb	r3, [r4, #20]
    761e:	3015      	adds	r0, #21
    7620:	4e13      	ldr	r6, [pc, #76]	; (7670 <gapm_start_adv_cmd_handler+0x10c>)
    7622:	47b0      	blx	r6
    7624:	1c23      	adds	r3, r4, #0
    7626:	1c20      	adds	r0, r4, #0
    7628:	3331      	adds	r3, #49	; 0x31
    762a:	701d      	strb	r5, [r3, #0]
    762c:	3032      	adds	r0, #50	; 0x32
    762e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    7630:	1c2a      	adds	r2, r5, #0
    7632:	47b0      	blx	r6
    7634:	1c22      	adds	r2, r4, #0
    7636:	23a5      	movs	r3, #165	; 0xa5
    7638:	3251      	adds	r2, #81	; 0x51
    763a:	7013      	strb	r3, [r2, #0]
    763c:	7053      	strb	r3, [r2, #1]
    763e:	1c23      	adds	r3, r4, #0
    7640:	3353      	adds	r3, #83	; 0x53
    7642:	701f      	strb	r7, [r3, #0]
    7644:	0a3b      	lsrs	r3, r7, #8
    7646:	70d3      	strb	r3, [r2, #3]
    7648:	466a      	mov	r2, sp
    764a:	1c23      	adds	r3, r4, #0
    764c:	7f12      	ldrb	r2, [r2, #28]
    764e:	3355      	adds	r3, #85	; 0x55
    7650:	701a      	strb	r2, [r3, #0]
    7652:	2500      	movs	r5, #0
    7654:	234d      	movs	r3, #77	; 0x4d
    7656:	7225      	strb	r5, [r4, #8]
    7658:	71e3      	strb	r3, [r4, #7]
    765a:	1c20      	adds	r0, r4, #0
    765c:	2156      	movs	r1, #86	; 0x56
    765e:	4b05      	ldr	r3, [pc, #20]	; (7674 <gapm_start_adv_cmd_handler+0x110>)
    7660:	4798      	blx	r3
    7662:	1c28      	adds	r0, r5, #0
    7664:	b009      	add	sp, #36	; 0x24
    7666:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7668:	200018fc 	.word	0x200018fc
    766c:	0000a6a0 	.word	0x0000a6a0
    7670:	000083fb 	.word	0x000083fb
    7674:	00005b19 	.word	0x00005b19

00007678 <get_gap_local_addr_type>:
    7678:	4b04      	ldr	r3, [pc, #16]	; (768c <get_gap_local_addr_type+0x14>)
    767a:	2001      	movs	r0, #1
    767c:	791b      	ldrb	r3, [r3, #4]
    767e:	2b02      	cmp	r3, #2
    7680:	d003      	beq.n	768a <get_gap_local_addr_type+0x12>
    7682:	3b03      	subs	r3, #3
    7684:	4258      	negs	r0, r3
    7686:	4158      	adcs	r0, r3
    7688:	0040      	lsls	r0, r0, #1
    768a:	4770      	bx	lr
    768c:	2000199c 	.word	0x2000199c

00007690 <gapm_adv_report_evt_handler>:
    7690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7692:	7843      	ldrb	r3, [r0, #1]
    7694:	1c05      	adds	r5, r0, #0
    7696:	9301      	str	r3, [sp, #4]
    7698:	466b      	mov	r3, sp
    769a:	1c0c      	adds	r4, r1, #0
    769c:	791b      	ldrb	r3, [r3, #4]
    769e:	7806      	ldrb	r6, [r0, #0]
    76a0:	2206      	movs	r2, #6
    76a2:	704b      	strb	r3, [r1, #1]
    76a4:	1c88      	adds	r0, r1, #2
    76a6:	4f1b      	ldr	r7, [pc, #108]	; (7714 <gapm_adv_report_evt_handler+0x84>)
    76a8:	1ca9      	adds	r1, r5, #2
    76aa:	47b8      	blx	r7
    76ac:	1c20      	adds	r0, r4, #0
    76ae:	1c29      	adds	r1, r5, #0
    76b0:	7a2a      	ldrb	r2, [r5, #8]
    76b2:	3008      	adds	r0, #8
    76b4:	77c2      	strb	r2, [r0, #31]
    76b6:	3109      	adds	r1, #9
    76b8:	3528      	adds	r5, #40	; 0x28
    76ba:	47b8      	blx	r7
    76bc:	782b      	ldrb	r3, [r5, #0]
    76be:	b25a      	sxtb	r2, r3
    76c0:	2a00      	cmp	r2, #0
    76c2:	da01      	bge.n	76c8 <gapm_adv_report_evt_handler+0x38>
    76c4:	3301      	adds	r3, #1
    76c6:	b2db      	uxtb	r3, r3
    76c8:	1c22      	adds	r2, r4, #0
    76ca:	3228      	adds	r2, #40	; 0x28
    76cc:	7013      	strb	r3, [r2, #0]
    76ce:	2200      	movs	r2, #0
    76d0:	9b01      	ldr	r3, [sp, #4]
    76d2:	4293      	cmp	r3, r2
    76d4:	d00a      	beq.n	76ec <gapm_adv_report_evt_handler+0x5c>
    76d6:	79e3      	ldrb	r3, [r4, #7]
    76d8:	323f      	adds	r2, #63	; 0x3f
    76da:	1c19      	adds	r1, r3, #0
    76dc:	4391      	bics	r1, r2
    76de:	3a3e      	subs	r2, #62	; 0x3e
    76e0:	29c0      	cmp	r1, #192	; 0xc0
    76e2:	d003      	beq.n	76ec <gapm_adv_report_evt_handler+0x5c>
    76e4:	065b      	lsls	r3, r3, #25
    76e6:	0fdb      	lsrs	r3, r3, #31
    76e8:	3202      	adds	r2, #2
    76ea:	1ad2      	subs	r2, r2, r3
    76ec:	7062      	strb	r2, [r4, #1]
    76ee:	2e04      	cmp	r6, #4
    76f0:	d80f      	bhi.n	7712 <gapm_adv_report_evt_handler+0x82>
    76f2:	1c30      	adds	r0, r6, #0
    76f4:	f000 fd86 	bl	8204 <__gnu_thumb1_case_uqi>
    76f8:	09070503 	.word	0x09070503
    76fc:	0b          	.byte	0x0b
    76fd:	00          	.byte	0x00
    76fe:	2300      	movs	r3, #0
    7700:	e006      	b.n	7710 <gapm_adv_report_evt_handler+0x80>
    7702:	2301      	movs	r3, #1
    7704:	e004      	b.n	7710 <gapm_adv_report_evt_handler+0x80>
    7706:	2302      	movs	r3, #2
    7708:	e002      	b.n	7710 <gapm_adv_report_evt_handler+0x80>
    770a:	2303      	movs	r3, #3
    770c:	e000      	b.n	7710 <gapm_adv_report_evt_handler+0x80>
    770e:	2305      	movs	r3, #5
    7710:	7023      	strb	r3, [r4, #0]
    7712:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7714:	000083fb 	.word	0x000083fb

00007718 <gapm_resolv_addr_cmd_handler>:
    7718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    771a:	2300      	movs	r3, #0
    771c:	1c16      	adds	r6, r2, #0
    771e:	4a16      	ldr	r2, [pc, #88]	; (7778 <gapm_resolv_addr_cmd_handler+0x60>)
    7720:	1c05      	adds	r5, r0, #0
    7722:	6093      	str	r3, [r2, #8]
    7724:	60d3      	str	r3, [r2, #12]
    7726:	4a15      	ldr	r2, [pc, #84]	; (777c <gapm_resolv_addr_cmd_handler+0x64>)
    7728:	4f15      	ldr	r7, [pc, #84]	; (7780 <gapm_resolv_addr_cmd_handler+0x68>)
    772a:	6814      	ldr	r4, [r2, #0]
    772c:	2205      	movs	r2, #5
    772e:	72a0      	strb	r0, [r4, #10]
    7730:	1c20      	adds	r0, r4, #0
    7732:	7022      	strb	r2, [r4, #0]
    7734:	320f      	adds	r2, #15
    7736:	7062      	strb	r2, [r4, #1]
    7738:	3a07      	subs	r2, #7
    773a:	70a2      	strb	r2, [r4, #2]
    773c:	70e2      	strb	r2, [r4, #3]
    773e:	7123      	strb	r3, [r4, #4]
    7740:	71a3      	strb	r3, [r4, #6]
    7742:	71e3      	strb	r3, [r4, #7]
    7744:	7223      	strb	r3, [r4, #8]
    7746:	3203      	adds	r2, #3
    7748:	3317      	adds	r3, #23
    774a:	7263      	strb	r3, [r4, #9]
    774c:	7162      	strb	r2, [r4, #5]
    774e:	300b      	adds	r0, #11
    7750:	3a0a      	subs	r2, #10
    7752:	47b8      	blx	r7
    7754:	1c20      	adds	r0, r4, #0
    7756:	012d      	lsls	r5, r5, #4
    7758:	1c31      	adds	r1, r6, #0
    775a:	1c2a      	adds	r2, r5, #0
    775c:	3011      	adds	r0, #17
    775e:	47b8      	blx	r7
    7760:	1c29      	adds	r1, r5, #0
    7762:	3111      	adds	r1, #17
    7764:	1c0b      	adds	r3, r1, #0
    7766:	3b09      	subs	r3, #9
    7768:	71e3      	strb	r3, [r4, #7]
    776a:	121b      	asrs	r3, r3, #8
    776c:	7223      	strb	r3, [r4, #8]
    776e:	1c20      	adds	r0, r4, #0
    7770:	4b04      	ldr	r3, [pc, #16]	; (7784 <gapm_resolv_addr_cmd_handler+0x6c>)
    7772:	4798      	blx	r3
    7774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7776:	46c0      	nop			; (mov r8, r8)
    7778:	200018fc 	.word	0x200018fc
    777c:	0000a6a0 	.word	0x0000a6a0
    7780:	000083fb 	.word	0x000083fb
    7784:	00005b19 	.word	0x00005b19

00007788 <gapm_addr_solved_ind_handler>:
    7788:	b570      	push	{r4, r5, r6, lr}
    778a:	1c04      	adds	r4, r0, #0
    778c:	1c08      	adds	r0, r1, #0
    778e:	1c0d      	adds	r5, r1, #0
    7790:	4e05      	ldr	r6, [pc, #20]	; (77a8 <gapm_addr_solved_ind_handler+0x20>)
    7792:	1c21      	adds	r1, r4, #0
    7794:	2206      	movs	r2, #6
    7796:	3011      	adds	r0, #17
    7798:	47b0      	blx	r6
    779a:	1c68      	adds	r0, r5, #1
    779c:	1da1      	adds	r1, r4, #6
    779e:	2210      	movs	r2, #16
    77a0:	47b0      	blx	r6
    77a2:	2300      	movs	r3, #0
    77a4:	702b      	strb	r3, [r5, #0]
    77a6:	bd70      	pop	{r4, r5, r6, pc}
    77a8:	000083fb 	.word	0x000083fb

000077ac <gapm_profile_added_ind_handler>:
    77ac:	b510      	push	{r4, lr}
    77ae:	7843      	ldrb	r3, [r0, #1]
    77b0:	7902      	ldrb	r2, [r0, #4]
    77b2:	7944      	ldrb	r4, [r0, #5]
    77b4:	7800      	ldrb	r0, [r0, #0]
    77b6:	021b      	lsls	r3, r3, #8
    77b8:	4303      	orrs	r3, r0
    77ba:	2b1b      	cmp	r3, #27
    77bc:	d104      	bne.n	77c8 <gapm_profile_added_ind_handler+0x1c>
    77be:	2300      	movs	r3, #0
    77c0:	700b      	strb	r3, [r1, #0]
    77c2:	0223      	lsls	r3, r4, #8
    77c4:	4313      	orrs	r3, r2
    77c6:	804b      	strh	r3, [r1, #2]
    77c8:	203a      	movs	r0, #58	; 0x3a
    77ca:	bd10      	pop	{r4, pc}

000077cc <gattc_read_req_ind_parser>:
    77cc:	7843      	ldrb	r3, [r0, #1]
    77ce:	7802      	ldrb	r2, [r0, #0]
    77d0:	021b      	lsls	r3, r3, #8
    77d2:	4313      	orrs	r3, r2
    77d4:	804b      	strh	r3, [r1, #2]
    77d6:	4770      	bx	lr

000077d8 <gattc_write_req_ind_parser>:
    77d8:	b508      	push	{r3, lr}
    77da:	1c13      	adds	r3, r2, #0
    77dc:	0a00      	lsrs	r0, r0, #8
    77de:	8010      	strh	r0, [r2, #0]
    77e0:	784a      	ldrb	r2, [r1, #1]
    77e2:	7808      	ldrb	r0, [r1, #0]
    77e4:	0212      	lsls	r2, r2, #8
    77e6:	4302      	orrs	r2, r0
    77e8:	805a      	strh	r2, [r3, #2]
    77ea:	78ca      	ldrb	r2, [r1, #3]
    77ec:	7888      	ldrb	r0, [r1, #2]
    77ee:	0212      	lsls	r2, r2, #8
    77f0:	4302      	orrs	r2, r0
    77f2:	809a      	strh	r2, [r3, #4]
    77f4:	794a      	ldrb	r2, [r1, #5]
    77f6:	7908      	ldrb	r0, [r1, #4]
    77f8:	0212      	lsls	r2, r2, #8
    77fa:	4302      	orrs	r2, r0
    77fc:	80da      	strh	r2, [r3, #6]
    77fe:	3308      	adds	r3, #8
    7800:	1c18      	adds	r0, r3, #0
    7802:	3106      	adds	r1, #6
    7804:	4b01      	ldr	r3, [pc, #4]	; (780c <gattc_write_req_ind_parser+0x34>)
    7806:	4798      	blx	r3
    7808:	bd08      	pop	{r3, pc}
    780a:	46c0      	nop			; (mov r8, r8)
    780c:	000083fb 	.word	0x000083fb

00007810 <gattc_att_info_req_parser>:
    7810:	7843      	ldrb	r3, [r0, #1]
    7812:	7802      	ldrb	r2, [r0, #0]
    7814:	021b      	lsls	r3, r3, #8
    7816:	4313      	orrs	r3, r2
    7818:	800b      	strh	r3, [r1, #0]
    781a:	4770      	bx	lr

0000781c <gattc_read_cfm>:
    781c:	b570      	push	{r4, r5, r6, lr}
    781e:	1c1d      	adds	r5, r3, #0
    7820:	2300      	movs	r3, #0
    7822:	4c17      	ldr	r4, [pc, #92]	; (7880 <gattc_read_cfm+0x64>)
    7824:	2605      	movs	r6, #5
    7826:	60a3      	str	r3, [r4, #8]
    7828:	60e3      	str	r3, [r4, #12]
    782a:	4c16      	ldr	r4, [pc, #88]	; (7884 <gattc_read_cfm+0x68>)
    782c:	6824      	ldr	r4, [r4, #0]
    782e:	7121      	strb	r1, [r4, #4]
    7830:	2110      	movs	r1, #16
    7832:	7026      	strb	r6, [r4, #0]
    7834:	360f      	adds	r6, #15
    7836:	7066      	strb	r6, [r4, #1]
    7838:	71a3      	strb	r3, [r4, #6]
    783a:	3e08      	subs	r6, #8
    783c:	71e3      	strb	r3, [r4, #7]
    783e:	7223      	strb	r3, [r4, #8]
    7840:	7260      	strb	r0, [r4, #9]
    7842:	0a2b      	lsrs	r3, r5, #8
    7844:	0a00      	lsrs	r0, r0, #8
    7846:	70a6      	strb	r6, [r4, #2]
    7848:	70e6      	strb	r6, [r4, #3]
    784a:	7161      	strb	r1, [r4, #5]
    784c:	72a0      	strb	r0, [r4, #10]
    784e:	72e5      	strb	r5, [r4, #11]
    7850:	7323      	strb	r3, [r4, #12]
    7852:	7362      	strb	r2, [r4, #13]
    7854:	2d00      	cmp	r5, #0
    7856:	d008      	beq.n	786a <gattc_read_cfm+0x4e>
    7858:	1c20      	adds	r0, r4, #0
    785a:	9904      	ldr	r1, [sp, #16]
    785c:	1c2a      	adds	r2, r5, #0
    785e:	300e      	adds	r0, #14
    7860:	4b09      	ldr	r3, [pc, #36]	; (7888 <gattc_read_cfm+0x6c>)
    7862:	350e      	adds	r5, #14
    7864:	4798      	blx	r3
    7866:	b2a9      	uxth	r1, r5
    7868:	e001      	b.n	786e <gattc_read_cfm+0x52>
    786a:	210f      	movs	r1, #15
    786c:	73a5      	strb	r5, [r4, #14]
    786e:	1c0b      	adds	r3, r1, #0
    7870:	3b09      	subs	r3, #9
    7872:	71e3      	strb	r3, [r4, #7]
    7874:	121b      	asrs	r3, r3, #8
    7876:	7223      	strb	r3, [r4, #8]
    7878:	1c20      	adds	r0, r4, #0
    787a:	4b04      	ldr	r3, [pc, #16]	; (788c <gattc_read_cfm+0x70>)
    787c:	4798      	blx	r3
    787e:	bd70      	pop	{r4, r5, r6, pc}
    7880:	200018fc 	.word	0x200018fc
    7884:	0000a6a0 	.word	0x0000a6a0
    7888:	000083fb 	.word	0x000083fb
    788c:	00005b19 	.word	0x00005b19

00007890 <gattc_write_cfm>:
    7890:	b538      	push	{r3, r4, r5, lr}
    7892:	2400      	movs	r4, #0
    7894:	1c0d      	adds	r5, r1, #0
    7896:	4b0d      	ldr	r3, [pc, #52]	; (78cc <gattc_write_cfm+0x3c>)
    7898:	2105      	movs	r1, #5
    789a:	609c      	str	r4, [r3, #8]
    789c:	60dc      	str	r4, [r3, #12]
    789e:	4b0c      	ldr	r3, [pc, #48]	; (78d0 <gattc_write_cfm+0x40>)
    78a0:	681b      	ldr	r3, [r3, #0]
    78a2:	711d      	strb	r5, [r3, #4]
    78a4:	72da      	strb	r2, [r3, #11]
    78a6:	2510      	movs	r5, #16
    78a8:	2203      	movs	r2, #3
    78aa:	7019      	strb	r1, [r3, #0]
    78ac:	3111      	adds	r1, #17
    78ae:	7059      	strb	r1, [r3, #1]
    78b0:	7258      	strb	r0, [r3, #9]
    78b2:	390a      	subs	r1, #10
    78b4:	0a00      	lsrs	r0, r0, #8
    78b6:	715d      	strb	r5, [r3, #5]
    78b8:	7099      	strb	r1, [r3, #2]
    78ba:	70d9      	strb	r1, [r3, #3]
    78bc:	719c      	strb	r4, [r3, #6]
    78be:	721c      	strb	r4, [r3, #8]
    78c0:	7298      	strb	r0, [r3, #10]
    78c2:	71da      	strb	r2, [r3, #7]
    78c4:	1c18      	adds	r0, r3, #0
    78c6:	4b03      	ldr	r3, [pc, #12]	; (78d4 <gattc_write_cfm+0x44>)
    78c8:	4798      	blx	r3
    78ca:	bd38      	pop	{r3, r4, r5, pc}
    78cc:	200018fc 	.word	0x200018fc
    78d0:	0000a6a0 	.word	0x0000a6a0
    78d4:	00005b19 	.word	0x00005b19

000078d8 <gattc_att_info_cfm>:
    78d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78da:	2500      	movs	r5, #0
    78dc:	4c0e      	ldr	r4, [pc, #56]	; (7918 <gattc_att_info_cfm+0x40>)
    78de:	2718      	movs	r7, #24
    78e0:	60a5      	str	r5, [r4, #8]
    78e2:	60e5      	str	r5, [r4, #12]
    78e4:	4c0d      	ldr	r4, [pc, #52]	; (791c <gattc_att_info_cfm+0x44>)
    78e6:	2605      	movs	r6, #5
    78e8:	6824      	ldr	r4, [r4, #0]
    78ea:	7121      	strb	r1, [r4, #4]
    78ec:	2110      	movs	r1, #16
    78ee:	7067      	strb	r7, [r4, #1]
    78f0:	7260      	strb	r0, [r4, #9]
    78f2:	3f0c      	subs	r7, #12
    78f4:	72e2      	strb	r2, [r4, #11]
    78f6:	0a00      	lsrs	r0, r0, #8
    78f8:	0a12      	lsrs	r2, r2, #8
    78fa:	7026      	strb	r6, [r4, #0]
    78fc:	70a7      	strb	r7, [r4, #2]
    78fe:	70e7      	strb	r7, [r4, #3]
    7900:	7161      	strb	r1, [r4, #5]
    7902:	71a5      	strb	r5, [r4, #6]
    7904:	7225      	strb	r5, [r4, #8]
    7906:	72a0      	strb	r0, [r4, #10]
    7908:	7363      	strb	r3, [r4, #13]
    790a:	71e6      	strb	r6, [r4, #7]
    790c:	7322      	strb	r2, [r4, #12]
    790e:	1c20      	adds	r0, r4, #0
    7910:	3902      	subs	r1, #2
    7912:	4b03      	ldr	r3, [pc, #12]	; (7920 <gattc_att_info_cfm+0x48>)
    7914:	4798      	blx	r3
    7916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7918:	200018fc 	.word	0x200018fc
    791c:	0000a6a0 	.word	0x0000a6a0
    7920:	00005b19 	.word	0x00005b19

00007924 <gattc_disc_cmd_handler>:
    7924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7926:	2600      	movs	r6, #0
    7928:	ac06      	add	r4, sp, #24
    792a:	1c0d      	adds	r5, r1, #0
    792c:	cc02      	ldmia	r4!, {r1}
    792e:	2705      	movs	r7, #5
    7930:	8824      	ldrh	r4, [r4, #0]
    7932:	46a4      	mov	ip, r4
    7934:	4c1d      	ldr	r4, [pc, #116]	; (79ac <gattc_disc_cmd_handler+0x88>)
    7936:	60a6      	str	r6, [r4, #8]
    7938:	60e6      	str	r6, [r4, #12]
    793a:	4c1d      	ldr	r4, [pc, #116]	; (79b0 <gattc_disc_cmd_handler+0x8c>)
    793c:	6824      	ldr	r4, [r4, #0]
    793e:	7027      	strb	r7, [r4, #0]
    7940:	3f02      	subs	r7, #2
    7942:	7067      	strb	r7, [r4, #1]
    7944:	3709      	adds	r7, #9
    7946:	70a7      	strb	r7, [r4, #2]
    7948:	70e7      	strb	r7, [r4, #3]
    794a:	4667      	mov	r7, ip
    794c:	7127      	strb	r7, [r4, #4]
    794e:	2710      	movs	r7, #16
    7950:	71a6      	strb	r6, [r4, #6]
    7952:	7167      	strb	r7, [r4, #5]
    7954:	71e6      	strb	r6, [r4, #7]
    7956:	7226      	strb	r6, [r4, #8]
    7958:	7260      	strb	r0, [r4, #9]
    795a:	42b1      	cmp	r1, r6
    795c:	d102      	bne.n	7964 <gattc_disc_cmd_handler+0x40>
    795e:	2002      	movs	r0, #2
    7960:	72a0      	strb	r0, [r4, #10]
    7962:	e000      	b.n	7966 <gattc_disc_cmd_handler+0x42>
    7964:	72a5      	strb	r5, [r4, #10]
    7966:	4e13      	ldr	r6, [pc, #76]	; (79b4 <gattc_disc_cmd_handler+0x90>)
    7968:	7362      	strb	r2, [r4, #13]
    796a:	8830      	ldrh	r0, [r6, #0]
    796c:	0a12      	lsrs	r2, r2, #8
    796e:	0a07      	lsrs	r7, r0, #8
    7970:	72e0      	strb	r0, [r4, #11]
    7972:	73e3      	strb	r3, [r4, #15]
    7974:	3001      	adds	r0, #1
    7976:	0a1b      	lsrs	r3, r3, #8
    7978:	7327      	strb	r7, [r4, #12]
    797a:	8030      	strh	r0, [r6, #0]
    797c:	73a2      	strb	r2, [r4, #14]
    797e:	7423      	strb	r3, [r4, #16]
    7980:	2900      	cmp	r1, #0
    7982:	d103      	bne.n	798c <gattc_disc_cmd_handler+0x68>
    7984:	7461      	strb	r1, [r4, #17]
    7986:	74a1      	strb	r1, [r4, #18]
    7988:	3113      	adds	r1, #19
    798a:	e006      	b.n	799a <gattc_disc_cmd_handler+0x76>
    798c:	1c20      	adds	r0, r4, #0
    798e:	1c2a      	adds	r2, r5, #0
    7990:	3011      	adds	r0, #17
    7992:	4b09      	ldr	r3, [pc, #36]	; (79b8 <gattc_disc_cmd_handler+0x94>)
    7994:	4798      	blx	r3
    7996:	1c29      	adds	r1, r5, #0
    7998:	3111      	adds	r1, #17
    799a:	1c0b      	adds	r3, r1, #0
    799c:	3b09      	subs	r3, #9
    799e:	71e3      	strb	r3, [r4, #7]
    79a0:	121b      	asrs	r3, r3, #8
    79a2:	7223      	strb	r3, [r4, #8]
    79a4:	1c20      	adds	r0, r4, #0
    79a6:	4b05      	ldr	r3, [pc, #20]	; (79bc <gattc_disc_cmd_handler+0x98>)
    79a8:	4798      	blx	r3
    79aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79ac:	200018fc 	.word	0x200018fc
    79b0:	0000a6a0 	.word	0x0000a6a0
    79b4:	20000df4 	.word	0x20000df4
    79b8:	000083fb 	.word	0x000083fb
    79bc:	00005b19 	.word	0x00005b19

000079c0 <gattc_write_cmd_handler>:
    79c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79c2:	2600      	movs	r6, #0
    79c4:	ac06      	add	r4, sp, #24
    79c6:	8825      	ldrh	r5, [r4, #0]
    79c8:	ac08      	add	r4, sp, #32
    79ca:	8824      	ldrh	r4, [r4, #0]
    79cc:	2705      	movs	r7, #5
    79ce:	46a4      	mov	ip, r4
    79d0:	4c1b      	ldr	r4, [pc, #108]	; (7a40 <gattc_write_cmd_handler+0x80>)
    79d2:	60a6      	str	r6, [r4, #8]
    79d4:	60e6      	str	r6, [r4, #12]
    79d6:	4c1b      	ldr	r4, [pc, #108]	; (7a44 <gattc_write_cmd_handler+0x84>)
    79d8:	6824      	ldr	r4, [r4, #0]
    79da:	7027      	strb	r7, [r4, #0]
    79dc:	19ff      	adds	r7, r7, r7
    79de:	7067      	strb	r7, [r4, #1]
    79e0:	3702      	adds	r7, #2
    79e2:	70a7      	strb	r7, [r4, #2]
    79e4:	70e7      	strb	r7, [r4, #3]
    79e6:	4667      	mov	r7, ip
    79e8:	7127      	strb	r7, [r4, #4]
    79ea:	2710      	movs	r7, #16
    79ec:	7260      	strb	r0, [r4, #9]
    79ee:	4816      	ldr	r0, [pc, #88]	; (7a48 <gattc_write_cmd_handler+0x88>)
    79f0:	72a1      	strb	r1, [r4, #10]
    79f2:	8801      	ldrh	r1, [r0, #0]
    79f4:	7167      	strb	r7, [r4, #5]
    79f6:	72e1      	strb	r1, [r4, #11]
    79f8:	0a0f      	lsrs	r7, r1, #8
    79fa:	3101      	adds	r1, #1
    79fc:	8001      	strh	r1, [r0, #0]
    79fe:	1c20      	adds	r0, r4, #0
    7a00:	73e3      	strb	r3, [r4, #15]
    7a02:	0a1b      	lsrs	r3, r3, #8
    7a04:	7362      	strb	r2, [r4, #13]
    7a06:	7423      	strb	r3, [r4, #16]
    7a08:	0a12      	lsrs	r2, r2, #8
    7a0a:	0a2b      	lsrs	r3, r5, #8
    7a0c:	9907      	ldr	r1, [sp, #28]
    7a0e:	71a6      	strb	r6, [r4, #6]
    7a10:	71e6      	strb	r6, [r4, #7]
    7a12:	7226      	strb	r6, [r4, #8]
    7a14:	7327      	strb	r7, [r4, #12]
    7a16:	73a2      	strb	r2, [r4, #14]
    7a18:	7465      	strb	r5, [r4, #17]
    7a1a:	1c2a      	adds	r2, r5, #0
    7a1c:	74e6      	strb	r6, [r4, #19]
    7a1e:	7526      	strb	r6, [r4, #20]
    7a20:	3515      	adds	r5, #21
    7a22:	74a3      	strb	r3, [r4, #18]
    7a24:	3015      	adds	r0, #21
    7a26:	4b09      	ldr	r3, [pc, #36]	; (7a4c <gattc_write_cmd_handler+0x8c>)
    7a28:	4798      	blx	r3
    7a2a:	b2a9      	uxth	r1, r5
    7a2c:	1c0b      	adds	r3, r1, #0
    7a2e:	3b09      	subs	r3, #9
    7a30:	71e3      	strb	r3, [r4, #7]
    7a32:	121b      	asrs	r3, r3, #8
    7a34:	7223      	strb	r3, [r4, #8]
    7a36:	1c20      	adds	r0, r4, #0
    7a38:	4b05      	ldr	r3, [pc, #20]	; (7a50 <gattc_write_cmd_handler+0x90>)
    7a3a:	4798      	blx	r3
    7a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a3e:	46c0      	nop			; (mov r8, r8)
    7a40:	200018fc 	.word	0x200018fc
    7a44:	0000a6a0 	.word	0x0000a6a0
    7a48:	20000df4 	.word	0x20000df4
    7a4c:	000083fb 	.word	0x000083fb
    7a50:	00005b19 	.word	0x00005b19

00007a54 <gattc_event_cfm_handler>:
    7a54:	2200      	movs	r2, #0
    7a56:	4b0e      	ldr	r3, [pc, #56]	; (7a90 <gattc_event_cfm_handler+0x3c>)
    7a58:	b510      	push	{r4, lr}
    7a5a:	609a      	str	r2, [r3, #8]
    7a5c:	60da      	str	r2, [r3, #12]
    7a5e:	4b0d      	ldr	r3, [pc, #52]	; (7a94 <gattc_event_cfm_handler+0x40>)
    7a60:	2405      	movs	r4, #5
    7a62:	681b      	ldr	r3, [r3, #0]
    7a64:	7118      	strb	r0, [r3, #4]
    7a66:	2010      	movs	r0, #16
    7a68:	701c      	strb	r4, [r3, #0]
    7a6a:	3409      	adds	r4, #9
    7a6c:	705c      	strb	r4, [r3, #1]
    7a6e:	719a      	strb	r2, [r3, #6]
    7a70:	3c02      	subs	r4, #2
    7a72:	721a      	strb	r2, [r3, #8]
    7a74:	7259      	strb	r1, [r3, #9]
    7a76:	3202      	adds	r2, #2
    7a78:	0a09      	lsrs	r1, r1, #8
    7a7a:	709c      	strb	r4, [r3, #2]
    7a7c:	70dc      	strb	r4, [r3, #3]
    7a7e:	7158      	strb	r0, [r3, #5]
    7a80:	7299      	strb	r1, [r3, #10]
    7a82:	71da      	strb	r2, [r3, #7]
    7a84:	1c18      	adds	r0, r3, #0
    7a86:	210b      	movs	r1, #11
    7a88:	4b03      	ldr	r3, [pc, #12]	; (7a98 <gattc_event_cfm_handler+0x44>)
    7a8a:	4798      	blx	r3
    7a8c:	bd10      	pop	{r4, pc}
    7a8e:	46c0      	nop			; (mov r8, r8)
    7a90:	200018fc 	.word	0x200018fc
    7a94:	0000a6a0 	.word	0x0000a6a0
    7a98:	00005b19 	.word	0x00005b19

00007a9c <gattc_disc_svc_ind_parser>:
    7a9c:	b570      	push	{r4, r5, r6, lr}
    7a9e:	1c15      	adds	r5, r2, #0
    7aa0:	0a00      	lsrs	r0, r0, #8
    7aa2:	8010      	strh	r0, [r2, #0]
    7aa4:	784b      	ldrb	r3, [r1, #1]
    7aa6:	780a      	ldrb	r2, [r1, #0]
    7aa8:	021b      	lsls	r3, r3, #8
    7aaa:	4313      	orrs	r3, r2
    7aac:	806b      	strh	r3, [r5, #2]
    7aae:	78cb      	ldrb	r3, [r1, #3]
    7ab0:	788a      	ldrb	r2, [r1, #2]
    7ab2:	021b      	lsls	r3, r3, #8
    7ab4:	4313      	orrs	r3, r2
    7ab6:	80ab      	strh	r3, [r5, #4]
    7ab8:	790e      	ldrb	r6, [r1, #4]
    7aba:	4b05      	ldr	r3, [pc, #20]	; (7ad0 <gattc_disc_svc_ind_parser+0x34>)
    7abc:	1c30      	adds	r0, r6, #0
    7abe:	1c0c      	adds	r4, r1, #0
    7ac0:	4798      	blx	r3
    7ac2:	1c32      	adds	r2, r6, #0
    7ac4:	71a8      	strb	r0, [r5, #6]
    7ac6:	1d61      	adds	r1, r4, #5
    7ac8:	1de8      	adds	r0, r5, #7
    7aca:	4b02      	ldr	r3, [pc, #8]	; (7ad4 <gattc_disc_svc_ind_parser+0x38>)
    7acc:	4798      	blx	r3
    7ace:	bd70      	pop	{r4, r5, r6, pc}
    7ad0:	00004bd5 	.word	0x00004bd5
    7ad4:	000083fb 	.word	0x000083fb

00007ad8 <gattc_disc_svc_incl_ind_parser>:
    7ad8:	b570      	push	{r4, r5, r6, lr}
    7ada:	1c15      	adds	r5, r2, #0
    7adc:	0a00      	lsrs	r0, r0, #8
    7ade:	8010      	strh	r0, [r2, #0]
    7ae0:	784b      	ldrb	r3, [r1, #1]
    7ae2:	780a      	ldrb	r2, [r1, #0]
    7ae4:	021b      	lsls	r3, r3, #8
    7ae6:	4313      	orrs	r3, r2
    7ae8:	806b      	strh	r3, [r5, #2]
    7aea:	78cb      	ldrb	r3, [r1, #3]
    7aec:	788a      	ldrb	r2, [r1, #2]
    7aee:	021b      	lsls	r3, r3, #8
    7af0:	4313      	orrs	r3, r2
    7af2:	80ab      	strh	r3, [r5, #4]
    7af4:	794b      	ldrb	r3, [r1, #5]
    7af6:	790a      	ldrb	r2, [r1, #4]
    7af8:	021b      	lsls	r3, r3, #8
    7afa:	4313      	orrs	r3, r2
    7afc:	80eb      	strh	r3, [r5, #6]
    7afe:	798e      	ldrb	r6, [r1, #6]
    7b00:	4b05      	ldr	r3, [pc, #20]	; (7b18 <gattc_disc_svc_incl_ind_parser+0x40>)
    7b02:	1c30      	adds	r0, r6, #0
    7b04:	1c0c      	adds	r4, r1, #0
    7b06:	4798      	blx	r3
    7b08:	7228      	strb	r0, [r5, #8]
    7b0a:	1c28      	adds	r0, r5, #0
    7b0c:	1c32      	adds	r2, r6, #0
    7b0e:	1de1      	adds	r1, r4, #7
    7b10:	4b02      	ldr	r3, [pc, #8]	; (7b1c <gattc_disc_svc_incl_ind_parser+0x44>)
    7b12:	3009      	adds	r0, #9
    7b14:	4798      	blx	r3
    7b16:	bd70      	pop	{r4, r5, r6, pc}
    7b18:	00004bd5 	.word	0x00004bd5
    7b1c:	000083fb 	.word	0x000083fb

00007b20 <gattc_disc_char_ind_parser>:
    7b20:	b570      	push	{r4, r5, r6, lr}
    7b22:	1c15      	adds	r5, r2, #0
    7b24:	0a00      	lsrs	r0, r0, #8
    7b26:	8010      	strh	r0, [r2, #0]
    7b28:	784b      	ldrb	r3, [r1, #1]
    7b2a:	780a      	ldrb	r2, [r1, #0]
    7b2c:	021b      	lsls	r3, r3, #8
    7b2e:	4313      	orrs	r3, r2
    7b30:	806b      	strh	r3, [r5, #2]
    7b32:	78cb      	ldrb	r3, [r1, #3]
    7b34:	788a      	ldrb	r2, [r1, #2]
    7b36:	021b      	lsls	r3, r3, #8
    7b38:	4313      	orrs	r3, r2
    7b3a:	80ab      	strh	r3, [r5, #4]
    7b3c:	790b      	ldrb	r3, [r1, #4]
    7b3e:	1c0c      	adds	r4, r1, #0
    7b40:	71ab      	strb	r3, [r5, #6]
    7b42:	794e      	ldrb	r6, [r1, #5]
    7b44:	4b05      	ldr	r3, [pc, #20]	; (7b5c <gattc_disc_char_ind_parser+0x3c>)
    7b46:	1c30      	adds	r0, r6, #0
    7b48:	4798      	blx	r3
    7b4a:	71e8      	strb	r0, [r5, #7]
    7b4c:	1c28      	adds	r0, r5, #0
    7b4e:	1c32      	adds	r2, r6, #0
    7b50:	1da1      	adds	r1, r4, #6
    7b52:	4b03      	ldr	r3, [pc, #12]	; (7b60 <gattc_disc_char_ind_parser+0x40>)
    7b54:	3008      	adds	r0, #8
    7b56:	4798      	blx	r3
    7b58:	bd70      	pop	{r4, r5, r6, pc}
    7b5a:	46c0      	nop			; (mov r8, r8)
    7b5c:	00004bd5 	.word	0x00004bd5
    7b60:	000083fb 	.word	0x000083fb

00007b64 <gattc_disc_char_desc_ind_parser>:
    7b64:	b570      	push	{r4, r5, r6, lr}
    7b66:	1c15      	adds	r5, r2, #0
    7b68:	0a00      	lsrs	r0, r0, #8
    7b6a:	8010      	strh	r0, [r2, #0]
    7b6c:	784b      	ldrb	r3, [r1, #1]
    7b6e:	780a      	ldrb	r2, [r1, #0]
    7b70:	021b      	lsls	r3, r3, #8
    7b72:	4313      	orrs	r3, r2
    7b74:	806b      	strh	r3, [r5, #2]
    7b76:	788e      	ldrb	r6, [r1, #2]
    7b78:	4b05      	ldr	r3, [pc, #20]	; (7b90 <gattc_disc_char_desc_ind_parser+0x2c>)
    7b7a:	1c30      	adds	r0, r6, #0
    7b7c:	1c0c      	adds	r4, r1, #0
    7b7e:	4798      	blx	r3
    7b80:	1c32      	adds	r2, r6, #0
    7b82:	7128      	strb	r0, [r5, #4]
    7b84:	1ce1      	adds	r1, r4, #3
    7b86:	1d68      	adds	r0, r5, #5
    7b88:	4b02      	ldr	r3, [pc, #8]	; (7b94 <gattc_disc_char_desc_ind_parser+0x30>)
    7b8a:	4798      	blx	r3
    7b8c:	bd70      	pop	{r4, r5, r6, pc}
    7b8e:	46c0      	nop			; (mov r8, r8)
    7b90:	00004bd5 	.word	0x00004bd5
    7b94:	000083fb 	.word	0x000083fb

00007b98 <gattc_event_ind_and_notification_parser>:
    7b98:	b510      	push	{r4, lr}
    7b9a:	780c      	ldrb	r4, [r1, #0]
    7b9c:	1c13      	adds	r3, r2, #0
    7b9e:	2c12      	cmp	r4, #18
    7ba0:	d10e      	bne.n	7bc0 <gattc_event_ind_and_notification_parser+0x28>
    7ba2:	0a00      	lsrs	r0, r0, #8
    7ba4:	8010      	strh	r0, [r2, #0]
    7ba6:	788a      	ldrb	r2, [r1, #2]
    7ba8:	709a      	strb	r2, [r3, #2]
    7baa:	7948      	ldrb	r0, [r1, #5]
    7bac:	790c      	ldrb	r4, [r1, #4]
    7bae:	0200      	lsls	r0, r0, #8
    7bb0:	4320      	orrs	r0, r4
    7bb2:	8098      	strh	r0, [r3, #4]
    7bb4:	3106      	adds	r1, #6
    7bb6:	1d98      	adds	r0, r3, #6
    7bb8:	4b0b      	ldr	r3, [pc, #44]	; (7be8 <gattc_event_ind_and_notification_parser+0x50>)
    7bba:	4798      	blx	r3
    7bbc:	221b      	movs	r2, #27
    7bbe:	e010      	b.n	7be2 <gattc_event_ind_and_notification_parser+0x4a>
    7bc0:	2200      	movs	r2, #0
    7bc2:	2c13      	cmp	r4, #19
    7bc4:	d10d      	bne.n	7be2 <gattc_event_ind_and_notification_parser+0x4a>
    7bc6:	0a00      	lsrs	r0, r0, #8
    7bc8:	8018      	strh	r0, [r3, #0]
    7bca:	788a      	ldrb	r2, [r1, #2]
    7bcc:	709a      	strb	r2, [r3, #2]
    7bce:	7908      	ldrb	r0, [r1, #4]
    7bd0:	78cc      	ldrb	r4, [r1, #3]
    7bd2:	0200      	lsls	r0, r0, #8
    7bd4:	4320      	orrs	r0, r4
    7bd6:	8098      	strh	r0, [r3, #4]
    7bd8:	3106      	adds	r1, #6
    7bda:	1d98      	adds	r0, r3, #6
    7bdc:	4b02      	ldr	r3, [pc, #8]	; (7be8 <gattc_event_ind_and_notification_parser+0x50>)
    7bde:	4798      	blx	r3
    7be0:	221c      	movs	r2, #28
    7be2:	1c10      	adds	r0, r2, #0
    7be4:	bd10      	pop	{r4, pc}
    7be6:	46c0      	nop			; (mov r8, r8)
    7be8:	000083fb 	.word	0x000083fb

00007bec <gattc_complete_evt_handler>:
    7bec:	b570      	push	{r4, r5, r6, lr}
    7bee:	1c14      	adds	r4, r2, #0
    7bf0:	0a00      	lsrs	r0, r0, #8
    7bf2:	8010      	strh	r0, [r2, #0]
    7bf4:	7808      	ldrb	r0, [r1, #0]
    7bf6:	7090      	strb	r0, [r2, #2]
    7bf8:	78cb      	ldrb	r3, [r1, #3]
    7bfa:	784a      	ldrb	r2, [r1, #1]
    7bfc:	7889      	ldrb	r1, [r1, #2]
    7bfe:	021b      	lsls	r3, r3, #8
    7c00:	430b      	orrs	r3, r1
    7c02:	4926      	ldr	r1, [pc, #152]	; (7c9c <gattc_complete_evt_handler+0xb0>)
    7c04:	3801      	subs	r0, #1
    7c06:	800b      	strh	r3, [r1, #0]
    7c08:	70e2      	strb	r2, [r4, #3]
    7c0a:	2813      	cmp	r0, #19
    7c0c:	d835      	bhi.n	7c7a <gattc_complete_evt_handler+0x8e>
    7c0e:	f000 faf9 	bl	8204 <__gnu_thumb1_case_uqi>
    7c12:	420c      	.short	0x420c
    7c14:	42424242 	.word	0x42424242
    7c18:	1f1f1f42 	.word	0x1f1f1f42
    7c1c:	0a0a0a1d 	.word	0x0a0a0a1d
    7c20:	1134340a 	.word	0x1134340a
    7c24:	3217      	.short	0x3217
    7c26:	2025      	movs	r0, #37	; 0x25
    7c28:	e036      	b.n	7c98 <gattc_complete_evt_handler+0xac>
    7c2a:	2024      	movs	r0, #36	; 0x24
    7c2c:	2a00      	cmp	r2, #0
    7c2e:	d133      	bne.n	7c98 <gattc_complete_evt_handler+0xac>
    7c30:	3016      	adds	r0, #22
    7c32:	e031      	b.n	7c98 <gattc_complete_evt_handler+0xac>
    7c34:	4a1a      	ldr	r2, [pc, #104]	; (7ca0 <gattc_complete_evt_handler+0xb4>)
    7c36:	201d      	movs	r0, #29
    7c38:	6813      	ldr	r3, [r2, #0]
    7c3a:	3b01      	subs	r3, #1
    7c3c:	6013      	str	r3, [r2, #0]
    7c3e:	e02b      	b.n	7c98 <gattc_complete_evt_handler+0xac>
    7c40:	4a17      	ldr	r2, [pc, #92]	; (7ca0 <gattc_complete_evt_handler+0xb4>)
    7c42:	201e      	movs	r0, #30
    7c44:	6813      	ldr	r3, [r2, #0]
    7c46:	3b01      	subs	r3, #1
    7c48:	6013      	str	r3, [r2, #0]
    7c4a:	e025      	b.n	7c98 <gattc_complete_evt_handler+0xac>
    7c4c:	2019      	movs	r0, #25
    7c4e:	e023      	b.n	7c98 <gattc_complete_evt_handler+0xac>
    7c50:	203a      	movs	r0, #58	; 0x3a
    7c52:	2a00      	cmp	r2, #0
    7c54:	d020      	beq.n	7c98 <gattc_complete_evt_handler+0xac>
    7c56:	2382      	movs	r3, #130	; 0x82
    7c58:	009b      	lsls	r3, r3, #2
    7c5a:	54e2      	strb	r2, [r4, r3]
    7c5c:	22c8      	movs	r2, #200	; 0xc8
    7c5e:	4c11      	ldr	r4, [pc, #68]	; (7ca4 <gattc_complete_evt_handler+0xb8>)
    7c60:	4911      	ldr	r1, [pc, #68]	; (7ca8 <gattc_complete_evt_handler+0xbc>)
    7c62:	32ff      	adds	r2, #255	; 0xff
    7c64:	4b11      	ldr	r3, [pc, #68]	; (7cac <gattc_complete_evt_handler+0xc0>)
    7c66:	4812      	ldr	r0, [pc, #72]	; (7cb0 <gattc_complete_evt_handler+0xc4>)
    7c68:	6825      	ldr	r5, [r4, #0]
    7c6a:	47a8      	blx	r5
    7c6c:	6823      	ldr	r3, [r4, #0]
    7c6e:	4811      	ldr	r0, [pc, #68]	; (7cb4 <gattc_complete_evt_handler+0xc8>)
    7c70:	4798      	blx	r3
    7c72:	2018      	movs	r0, #24
    7c74:	e010      	b.n	7c98 <gattc_complete_evt_handler+0xac>
    7c76:	2021      	movs	r0, #33	; 0x21
    7c78:	e00e      	b.n	7c98 <gattc_complete_evt_handler+0xac>
    7c7a:	22d8      	movs	r2, #216	; 0xd8
    7c7c:	4d09      	ldr	r5, [pc, #36]	; (7ca4 <gattc_complete_evt_handler+0xb8>)
    7c7e:	490a      	ldr	r1, [pc, #40]	; (7ca8 <gattc_complete_evt_handler+0xbc>)
    7c80:	32ff      	adds	r2, #255	; 0xff
    7c82:	4b0a      	ldr	r3, [pc, #40]	; (7cac <gattc_complete_evt_handler+0xc0>)
    7c84:	480a      	ldr	r0, [pc, #40]	; (7cb0 <gattc_complete_evt_handler+0xc4>)
    7c86:	682e      	ldr	r6, [r5, #0]
    7c88:	47b0      	blx	r6
    7c8a:	78a1      	ldrb	r1, [r4, #2]
    7c8c:	682b      	ldr	r3, [r5, #0]
    7c8e:	480a      	ldr	r0, [pc, #40]	; (7cb8 <gattc_complete_evt_handler+0xcc>)
    7c90:	4798      	blx	r3
    7c92:	2000      	movs	r0, #0
    7c94:	e000      	b.n	7c98 <gattc_complete_evt_handler+0xac>
    7c96:	2017      	movs	r0, #23
    7c98:	bd70      	pop	{r4, r5, r6, pc}
    7c9a:	46c0      	nop			; (mov r8, r8)
    7c9c:	20000df6 	.word	0x20000df6
    7ca0:	20000df8 	.word	0x20000df8
    7ca4:	20000044 	.word	0x20000044
    7ca8:	0000aa63 	.word	0x0000aa63
    7cac:	0000aabf 	.word	0x0000aabf
    7cb0:	0000a1d9 	.word	0x0000a1d9
    7cb4:	0000aa9f 	.word	0x0000aa9f
    7cb8:	0000a96a 	.word	0x0000a96a

00007cbc <gattc_event_mtu_changed_ind_parser>:
    7cbc:	0a00      	lsrs	r0, r0, #8
    7cbe:	8010      	strh	r0, [r2, #0]
    7cc0:	784b      	ldrb	r3, [r1, #1]
    7cc2:	7809      	ldrb	r1, [r1, #0]
    7cc4:	021b      	lsls	r3, r3, #8
    7cc6:	430b      	orrs	r3, r1
    7cc8:	8053      	strh	r3, [r2, #2]
    7cca:	4770      	bx	lr

00007ccc <gattc_read_ind_parser>:
    7ccc:	0a00      	lsrs	r0, r0, #8
    7cce:	b508      	push	{r3, lr}
    7cd0:	8010      	strh	r0, [r2, #0]
    7cd2:	1c13      	adds	r3, r2, #0
    7cd4:	2282      	movs	r2, #130	; 0x82
    7cd6:	2000      	movs	r0, #0
    7cd8:	0092      	lsls	r2, r2, #2
    7cda:	5498      	strb	r0, [r3, r2]
    7cdc:	784a      	ldrb	r2, [r1, #1]
    7cde:	7808      	ldrb	r0, [r1, #0]
    7ce0:	0212      	lsls	r2, r2, #8
    7ce2:	4302      	orrs	r2, r0
    7ce4:	805a      	strh	r2, [r3, #2]
    7ce6:	78ca      	ldrb	r2, [r1, #3]
    7ce8:	7888      	ldrb	r0, [r1, #2]
    7cea:	0212      	lsls	r2, r2, #8
    7cec:	4302      	orrs	r2, r0
    7cee:	80da      	strh	r2, [r3, #6]
    7cf0:	794a      	ldrb	r2, [r1, #5]
    7cf2:	7908      	ldrb	r0, [r1, #4]
    7cf4:	0212      	lsls	r2, r2, #8
    7cf6:	4302      	orrs	r2, r0
    7cf8:	809a      	strh	r2, [r3, #4]
    7cfa:	3308      	adds	r3, #8
    7cfc:	1c18      	adds	r0, r3, #0
    7cfe:	3106      	adds	r1, #6
    7d00:	4b01      	ldr	r3, [pc, #4]	; (7d08 <gattc_read_ind_parser+0x3c>)
    7d02:	4798      	blx	r3
    7d04:	bd08      	pop	{r3, pc}
    7d06:	46c0      	nop			; (mov r8, r8)
    7d08:	000083fb 	.word	0x000083fb

00007d0c <gattc_svc_changed_cfg_ind_parser>:
    7d0c:	0a00      	lsrs	r0, r0, #8
    7d0e:	8010      	strh	r0, [r2, #0]
    7d10:	784b      	ldrb	r3, [r1, #1]
    7d12:	7809      	ldrb	r1, [r1, #0]
    7d14:	021b      	lsls	r3, r3, #8
    7d16:	430b      	orrs	r3, r1
    7d18:	8053      	strh	r3, [r2, #2]
    7d1a:	4770      	bx	lr

00007d1c <gattm_add_svc_req_handler>:
    7d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7d1e:	7943      	ldrb	r3, [r0, #5]
    7d20:	4a3a      	ldr	r2, [pc, #232]	; (7e0c <gattm_add_svc_req_handler+0xf0>)
    7d22:	9301      	str	r3, [sp, #4]
    7d24:	2300      	movs	r3, #0
    7d26:	60d3      	str	r3, [r2, #12]
    7d28:	6093      	str	r3, [r2, #8]
    7d2a:	4a39      	ldr	r2, [pc, #228]	; (7e10 <gattm_add_svc_req_handler+0xf4>)
    7d2c:	1c05      	adds	r5, r0, #0
    7d2e:	6814      	ldr	r4, [r2, #0]
    7d30:	2205      	movs	r2, #5
    7d32:	7022      	strb	r2, [r4, #0]
    7d34:	3206      	adds	r2, #6
    7d36:	70a2      	strb	r2, [r4, #2]
    7d38:	70e2      	strb	r2, [r4, #3]
    7d3a:	3205      	adds	r2, #5
    7d3c:	7063      	strb	r3, [r4, #1]
    7d3e:	7123      	strb	r3, [r4, #4]
    7d40:	7162      	strb	r2, [r4, #5]
    7d42:	71a3      	strb	r3, [r4, #6]
    7d44:	71e3      	strb	r3, [r4, #7]
    7d46:	7223      	strb	r3, [r4, #8]
    7d48:	8802      	ldrh	r2, [r0, #0]
    7d4a:	7262      	strb	r2, [r4, #9]
    7d4c:	8802      	ldrh	r2, [r0, #0]
    7d4e:	0a12      	lsrs	r2, r2, #8
    7d50:	72a2      	strb	r2, [r4, #10]
    7d52:	8842      	ldrh	r2, [r0, #2]
    7d54:	72e2      	strb	r2, [r4, #11]
    7d56:	8842      	ldrh	r2, [r0, #2]
    7d58:	0a12      	lsrs	r2, r2, #8
    7d5a:	7322      	strb	r2, [r4, #12]
    7d5c:	7902      	ldrb	r2, [r0, #4]
    7d5e:	7362      	strb	r2, [r4, #13]
    7d60:	466a      	mov	r2, sp
    7d62:	7912      	ldrb	r2, [r2, #4]
    7d64:	73a2      	strb	r2, [r4, #14]
    7d66:	18ea      	adds	r2, r5, r3
    7d68:	7991      	ldrb	r1, [r2, #6]
    7d6a:	18e2      	adds	r2, r4, r3
    7d6c:	3301      	adds	r3, #1
    7d6e:	73d1      	strb	r1, [r2, #15]
    7d70:	2b10      	cmp	r3, #16
    7d72:	d1f8      	bne.n	7d66 <gattm_add_svc_req_handler+0x4a>
    7d74:	2300      	movs	r3, #0
    7d76:	1c29      	adds	r1, r5, #0
    7d78:	9300      	str	r3, [sp, #0]
    7d7a:	1c0e      	adds	r6, r1, #0
    7d7c:	b2af      	uxth	r7, r5
    7d7e:	1bc8      	subs	r0, r1, r7
    7d80:	9b00      	ldr	r3, [sp, #0]
    7d82:	9a01      	ldr	r2, [sp, #4]
    7d84:	301f      	adds	r0, #31
    7d86:	b280      	uxth	r0, r0
    7d88:	3614      	adds	r6, #20
    7d8a:	4293      	cmp	r3, r2
    7d8c:	da20      	bge.n	7dd0 <gattm_add_svc_req_handler+0xb4>
    7d8e:	3116      	adds	r1, #22
    7d90:	2210      	movs	r2, #16
    7d92:	4b20      	ldr	r3, [pc, #128]	; (7e14 <gattm_add_svc_req_handler+0xf8>)
    7d94:	1820      	adds	r0, r4, r0
    7d96:	4798      	blx	r3
    7d98:	b2b3      	uxth	r3, r6
    7d9a:	1bda      	subs	r2, r3, r7
    7d9c:	8a71      	ldrh	r1, [r6, #18]
    7d9e:	321b      	adds	r2, #27
    7da0:	b292      	uxth	r2, r2
    7da2:	54a1      	strb	r1, [r4, r2]
    7da4:	8a71      	ldrh	r1, [r6, #18]
    7da6:	1bda      	subs	r2, r3, r7
    7da8:	321c      	adds	r2, #28
    7daa:	b292      	uxth	r2, r2
    7dac:	0a09      	lsrs	r1, r1, #8
    7dae:	54a1      	strb	r1, [r4, r2]
    7db0:	1bda      	subs	r2, r3, r7
    7db2:	8ab1      	ldrh	r1, [r6, #20]
    7db4:	321d      	adds	r2, #29
    7db6:	b292      	uxth	r2, r2
    7db8:	54a1      	strb	r1, [r4, r2]
    7dba:	1bdf      	subs	r7, r3, r7
    7dbc:	8ab3      	ldrh	r3, [r6, #20]
    7dbe:	371e      	adds	r7, #30
    7dc0:	0a1b      	lsrs	r3, r3, #8
    7dc2:	b2bf      	uxth	r7, r7
    7dc4:	55e3      	strb	r3, [r4, r7]
    7dc6:	9b00      	ldr	r3, [sp, #0]
    7dc8:	1c31      	adds	r1, r6, #0
    7dca:	3301      	adds	r3, #1
    7dcc:	9300      	str	r3, [sp, #0]
    7dce:	e7d4      	b.n	7d7a <gattm_add_svc_req_handler+0x5e>
    7dd0:	2114      	movs	r1, #20
    7dd2:	4e0e      	ldr	r6, [pc, #56]	; (7e0c <gattm_add_svc_req_handler+0xf0>)
    7dd4:	4b10      	ldr	r3, [pc, #64]	; (7e18 <gattm_add_svc_req_handler+0xfc>)
    7dd6:	4351      	muls	r1, r2
    7dd8:	8033      	strh	r3, [r6, #0]
    7dda:	230b      	movs	r3, #11
    7ddc:	311f      	adds	r1, #31
    7dde:	80b3      	strh	r3, [r6, #4]
    7de0:	1c0b      	adds	r3, r1, #0
    7de2:	3b09      	subs	r3, #9
    7de4:	71e3      	strb	r3, [r4, #7]
    7de6:	121b      	asrs	r3, r3, #8
    7de8:	7223      	strb	r3, [r4, #8]
    7dea:	1c20      	adds	r0, r4, #0
    7dec:	4b0b      	ldr	r3, [pc, #44]	; (7e1c <gattm_add_svc_req_handler+0x100>)
    7dee:	4798      	blx	r3
    7df0:	4b0b      	ldr	r3, [pc, #44]	; (7e20 <gattm_add_svc_req_handler+0x104>)
    7df2:	4798      	blx	r3
    7df4:	23d0      	movs	r3, #208	; 0xd0
    7df6:	4298      	cmp	r0, r3
    7df8:	d006      	beq.n	7e08 <gattm_add_svc_req_handler+0xec>
    7dfa:	68b2      	ldr	r2, [r6, #8]
    7dfc:	7853      	ldrb	r3, [r2, #1]
    7dfe:	7811      	ldrb	r1, [r2, #0]
    7e00:	021b      	lsls	r3, r3, #8
    7e02:	430b      	orrs	r3, r1
    7e04:	802b      	strh	r3, [r5, #0]
    7e06:	7893      	ldrb	r3, [r2, #2]
    7e08:	1c18      	adds	r0, r3, #0
    7e0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7e0c:	200018fc 	.word	0x200018fc
    7e10:	0000a6a0 	.word	0x0000a6a0
    7e14:	000083fb 	.word	0x000083fb
    7e18:	00000b01 	.word	0x00000b01
    7e1c:	00005b19 	.word	0x00005b19
    7e20:	00005d7d 	.word	0x00005d7d

00007e24 <gattm_add_attribute_req_handler>:
    7e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7e26:	1c1f      	adds	r7, r3, #0
    7e28:	4b1b      	ldr	r3, [pc, #108]	; (7e98 <gattm_add_attribute_req_handler+0x74>)
    7e2a:	9100      	str	r1, [sp, #0]
    7e2c:	9201      	str	r2, [sp, #4]
    7e2e:	7946      	ldrb	r6, [r0, #5]
    7e30:	1c05      	adds	r5, r0, #0
    7e32:	6818      	ldr	r0, [r3, #0]
    7e34:	2114      	movs	r1, #20
    7e36:	382a      	subs	r0, #42	; 0x2a
    7e38:	4b18      	ldr	r3, [pc, #96]	; (7e9c <gattm_add_attribute_req_handler+0x78>)
    7e3a:	4798      	blx	r3
    7e3c:	4286      	cmp	r6, r0
    7e3e:	d30b      	bcc.n	7e58 <gattm_add_attribute_req_handler+0x34>
    7e40:	4c17      	ldr	r4, [pc, #92]	; (7ea0 <gattm_add_attribute_req_handler+0x7c>)
    7e42:	4918      	ldr	r1, [pc, #96]	; (7ea4 <gattm_add_attribute_req_handler+0x80>)
    7e44:	222c      	movs	r2, #44	; 0x2c
    7e46:	4b18      	ldr	r3, [pc, #96]	; (7ea8 <gattm_add_attribute_req_handler+0x84>)
    7e48:	4818      	ldr	r0, [pc, #96]	; (7eac <gattm_add_attribute_req_handler+0x88>)
    7e4a:	6825      	ldr	r5, [r4, #0]
    7e4c:	47a8      	blx	r5
    7e4e:	6823      	ldr	r3, [r4, #0]
    7e50:	4817      	ldr	r0, [pc, #92]	; (7eb0 <gattm_add_attribute_req_handler+0x8c>)
    7e52:	4798      	blx	r3
    7e54:	2011      	movs	r0, #17
    7e56:	e01e      	b.n	7e96 <gattm_add_attribute_req_handler+0x72>
    7e58:	2414      	movs	r4, #20
    7e5a:	4366      	muls	r6, r4
    7e5c:	19a8      	adds	r0, r5, r6
    7e5e:	2100      	movs	r1, #0
    7e60:	2210      	movs	r2, #16
    7e62:	4b14      	ldr	r3, [pc, #80]	; (7eb4 <gattm_add_attribute_req_handler+0x90>)
    7e64:	3016      	adds	r0, #22
    7e66:	4798      	blx	r3
    7e68:	7968      	ldrb	r0, [r5, #5]
    7e6a:	1c3a      	adds	r2, r7, #0
    7e6c:	4360      	muls	r0, r4
    7e6e:	1828      	adds	r0, r5, r0
    7e70:	4b11      	ldr	r3, [pc, #68]	; (7eb8 <gattm_add_attribute_req_handler+0x94>)
    7e72:	3016      	adds	r0, #22
    7e74:	9908      	ldr	r1, [sp, #32]
    7e76:	4798      	blx	r3
    7e78:	466a      	mov	r2, sp
    7e7a:	796b      	ldrb	r3, [r5, #5]
    7e7c:	8812      	ldrh	r2, [r2, #0]
    7e7e:	435c      	muls	r4, r3
    7e80:	192c      	adds	r4, r5, r4
    7e82:	8522      	strh	r2, [r4, #40]	; 0x28
    7e84:	466a      	mov	r2, sp
    7e86:	2000      	movs	r0, #0
    7e88:	8892      	ldrh	r2, [r2, #4]
    7e8a:	84e2      	strh	r2, [r4, #38]	; 0x26
    7e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7e8e:	8013      	strh	r3, [r2, #0]
    7e90:	796b      	ldrb	r3, [r5, #5]
    7e92:	3301      	adds	r3, #1
    7e94:	716b      	strb	r3, [r5, #5]
    7e96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7e98:	200006e0 	.word	0x200006e0
    7e9c:	00008219 	.word	0x00008219
    7ea0:	20000044 	.word	0x20000044
    7ea4:	0000aada 	.word	0x0000aada
    7ea8:	0000ab16 	.word	0x0000ab16
    7eac:	0000a1d9 	.word	0x0000a1d9
    7eb0:	0000a355 	.word	0x0000a355
    7eb4:	0000840d 	.word	0x0000840d
    7eb8:	000083fb 	.word	0x000083fb

00007ebc <gattm_att_set_value_req_handler>:
    7ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ebe:	2300      	movs	r3, #0
    7ec0:	1c0d      	adds	r5, r1, #0
    7ec2:	491a      	ldr	r1, [pc, #104]	; (7f2c <gattm_att_set_value_req_handler+0x70>)
    7ec4:	4e1a      	ldr	r6, [pc, #104]	; (7f30 <gattm_att_set_value_req_handler+0x74>)
    7ec6:	680c      	ldr	r4, [r1, #0]
    7ec8:	2105      	movs	r1, #5
    7eca:	60f3      	str	r3, [r6, #12]
    7ecc:	60b3      	str	r3, [r6, #8]
    7ece:	7260      	strb	r0, [r4, #9]
    7ed0:	0a00      	lsrs	r0, r0, #8
    7ed2:	270b      	movs	r7, #11
    7ed4:	72a0      	strb	r0, [r4, #10]
    7ed6:	1c20      	adds	r0, r4, #0
    7ed8:	7021      	strb	r1, [r4, #0]
    7eda:	3107      	adds	r1, #7
    7edc:	7061      	strb	r1, [r4, #1]
    7ede:	7123      	strb	r3, [r4, #4]
    7ee0:	3104      	adds	r1, #4
    7ee2:	71a3      	strb	r3, [r4, #6]
    7ee4:	71e3      	strb	r3, [r4, #7]
    7ee6:	7223      	strb	r3, [r4, #8]
    7ee8:	0a2b      	lsrs	r3, r5, #8
    7eea:	7161      	strb	r1, [r4, #5]
    7eec:	72e5      	strb	r5, [r4, #11]
    7eee:	1c11      	adds	r1, r2, #0
    7ef0:	7323      	strb	r3, [r4, #12]
    7ef2:	1c2a      	adds	r2, r5, #0
    7ef4:	4b0f      	ldr	r3, [pc, #60]	; (7f34 <gattm_att_set_value_req_handler+0x78>)
    7ef6:	70a7      	strb	r7, [r4, #2]
    7ef8:	70e7      	strb	r7, [r4, #3]
    7efa:	300d      	adds	r0, #13
    7efc:	4798      	blx	r3
    7efe:	350d      	adds	r5, #13
    7f00:	4b0d      	ldr	r3, [pc, #52]	; (7f38 <gattm_att_set_value_req_handler+0x7c>)
    7f02:	b2a9      	uxth	r1, r5
    7f04:	8033      	strh	r3, [r6, #0]
    7f06:	1c0b      	adds	r3, r1, #0
    7f08:	3b09      	subs	r3, #9
    7f0a:	71e3      	strb	r3, [r4, #7]
    7f0c:	121b      	asrs	r3, r3, #8
    7f0e:	7223      	strb	r3, [r4, #8]
    7f10:	1c20      	adds	r0, r4, #0
    7f12:	4b0a      	ldr	r3, [pc, #40]	; (7f3c <gattm_att_set_value_req_handler+0x80>)
    7f14:	80b7      	strh	r7, [r6, #4]
    7f16:	4798      	blx	r3
    7f18:	4b09      	ldr	r3, [pc, #36]	; (7f40 <gattm_att_set_value_req_handler+0x84>)
    7f1a:	4798      	blx	r3
    7f1c:	23d0      	movs	r3, #208	; 0xd0
    7f1e:	4298      	cmp	r0, r3
    7f20:	d001      	beq.n	7f26 <gattm_att_set_value_req_handler+0x6a>
    7f22:	68b3      	ldr	r3, [r6, #8]
    7f24:	789b      	ldrb	r3, [r3, #2]
    7f26:	1c18      	adds	r0, r3, #0
    7f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f2a:	46c0      	nop			; (mov r8, r8)
    7f2c:	0000a6a0 	.word	0x0000a6a0
    7f30:	200018fc 	.word	0x200018fc
    7f34:	000083fb 	.word	0x000083fb
    7f38:	00000b0d 	.word	0x00000b0d
    7f3c:	00005b19 	.word	0x00005b19
    7f40:	00005d7d 	.word	0x00005d7d

00007f44 <gattm_att_get_value_req_handler>:
    7f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7f46:	2300      	movs	r3, #0
    7f48:	1c06      	adds	r6, r0, #0
    7f4a:	9201      	str	r2, [sp, #4]
    7f4c:	4a1a      	ldr	r2, [pc, #104]	; (7fb8 <gattm_att_get_value_req_handler+0x74>)
    7f4e:	4c1b      	ldr	r4, [pc, #108]	; (7fbc <gattm_att_get_value_req_handler+0x78>)
    7f50:	6810      	ldr	r0, [r2, #0]
    7f52:	2205      	movs	r2, #5
    7f54:	60a3      	str	r3, [r4, #8]
    7f56:	60e3      	str	r3, [r4, #12]
    7f58:	7103      	strb	r3, [r0, #4]
    7f5a:	7183      	strb	r3, [r0, #6]
    7f5c:	7203      	strb	r3, [r0, #8]
    7f5e:	0a33      	lsrs	r3, r6, #8
    7f60:	7283      	strb	r3, [r0, #10]
    7f62:	4b17      	ldr	r3, [pc, #92]	; (7fc0 <gattm_att_get_value_req_handler+0x7c>)
    7f64:	7002      	strb	r2, [r0, #0]
    7f66:	1892      	adds	r2, r2, r2
    7f68:	7042      	strb	r2, [r0, #1]
    7f6a:	1c0f      	adds	r7, r1, #0
    7f6c:	8023      	strh	r3, [r4, #0]
    7f6e:	210b      	movs	r1, #11
    7f70:	2302      	movs	r3, #2
    7f72:	3206      	adds	r2, #6
    7f74:	7081      	strb	r1, [r0, #2]
    7f76:	70c1      	strb	r1, [r0, #3]
    7f78:	7142      	strb	r2, [r0, #5]
    7f7a:	71c3      	strb	r3, [r0, #7]
    7f7c:	7246      	strb	r6, [r0, #9]
    7f7e:	4b11      	ldr	r3, [pc, #68]	; (7fc4 <gattm_att_get_value_req_handler+0x80>)
    7f80:	80a1      	strh	r1, [r4, #4]
    7f82:	4798      	blx	r3
    7f84:	4b10      	ldr	r3, [pc, #64]	; (7fc8 <gattm_att_get_value_req_handler+0x84>)
    7f86:	4798      	blx	r3
    7f88:	25d0      	movs	r5, #208	; 0xd0
    7f8a:	42a8      	cmp	r0, r5
    7f8c:	d011      	beq.n	7fb2 <gattm_att_get_value_req_handler+0x6e>
    7f8e:	68a1      	ldr	r1, [r4, #8]
    7f90:	9801      	ldr	r0, [sp, #4]
    7f92:	784c      	ldrb	r4, [r1, #1]
    7f94:	780b      	ldrb	r3, [r1, #0]
    7f96:	78ca      	ldrb	r2, [r1, #3]
    7f98:	0224      	lsls	r4, r4, #8
    7f9a:	431c      	orrs	r4, r3
    7f9c:	788b      	ldrb	r3, [r1, #2]
    7f9e:	0212      	lsls	r2, r2, #8
    7fa0:	431a      	orrs	r2, r3
    7fa2:	803a      	strh	r2, [r7, #0]
    7fa4:	790d      	ldrb	r5, [r1, #4]
    7fa6:	4b09      	ldr	r3, [pc, #36]	; (7fcc <gattm_att_get_value_req_handler+0x88>)
    7fa8:	3105      	adds	r1, #5
    7faa:	4798      	blx	r3
    7fac:	42a6      	cmp	r6, r4
    7fae:	d000      	beq.n	7fb2 <gattm_att_get_value_req_handler+0x6e>
    7fb0:	25e2      	movs	r5, #226	; 0xe2
    7fb2:	1c28      	adds	r0, r5, #0
    7fb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7fb6:	46c0      	nop			; (mov r8, r8)
    7fb8:	0000a6a0 	.word	0x0000a6a0
    7fbc:	200018fc 	.word	0x200018fc
    7fc0:	00000b0b 	.word	0x00000b0b
    7fc4:	00005b19 	.word	0x00005b19
    7fc8:	00005d7d 	.word	0x00005d7d
    7fcc:	000083fb 	.word	0x000083fb

00007fd0 <htpt_enable_rsp_handler>:
    7fd0:	780b      	ldrb	r3, [r1, #0]
    7fd2:	7013      	strb	r3, [r2, #0]
    7fd4:	784b      	ldrb	r3, [r1, #1]
    7fd6:	7053      	strb	r3, [r2, #1]
    7fd8:	4770      	bx	lr

00007fda <htpt_temp_send_rsp_handler>:
    7fda:	780b      	ldrb	r3, [r1, #0]
    7fdc:	7013      	strb	r3, [r2, #0]
    7fde:	4770      	bx	lr

00007fe0 <htpt_meas_intv_upd_rsp_handler>:
    7fe0:	780b      	ldrb	r3, [r1, #0]
    7fe2:	7013      	strb	r3, [r2, #0]
    7fe4:	4770      	bx	lr

00007fe6 <htpt_meas_intv_chg_req_ind_handler>:
    7fe6:	78cb      	ldrb	r3, [r1, #3]
    7fe8:	7889      	ldrb	r1, [r1, #2]
    7fea:	021b      	lsls	r3, r3, #8
    7fec:	430b      	orrs	r3, r1
    7fee:	8013      	strh	r3, [r2, #0]
    7ff0:	4770      	bx	lr

00007ff2 <htpt_cfg_indntf_ind_handler>:
    7ff2:	780b      	ldrb	r3, [r1, #0]
    7ff4:	7013      	strb	r3, [r2, #0]
    7ff6:	784b      	ldrb	r3, [r1, #1]
    7ff8:	7053      	strb	r3, [r2, #1]
    7ffa:	4770      	bx	lr

00007ffc <write_32_to_BTLC1000>:
    7ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7ffe:	2206      	movs	r2, #6
    8000:	ab01      	add	r3, sp, #4
    8002:	701a      	strb	r2, [r3, #0]
    8004:	0e02      	lsrs	r2, r0, #24
    8006:	705a      	strb	r2, [r3, #1]
    8008:	0c02      	lsrs	r2, r0, #16
    800a:	709a      	strb	r2, [r3, #2]
    800c:	0a02      	lsrs	r2, r0, #8
    800e:	70da      	strb	r2, [r3, #3]
    8010:	0e0a      	lsrs	r2, r1, #24
    8012:	715a      	strb	r2, [r3, #5]
    8014:	0c0a      	lsrs	r2, r1, #16
    8016:	719a      	strb	r2, [r3, #6]
    8018:	0a0a      	lsrs	r2, r1, #8
    801a:	7118      	strb	r0, [r3, #4]
    801c:	71da      	strb	r2, [r3, #7]
    801e:	7219      	strb	r1, [r3, #8]
    8020:	1c18      	adds	r0, r3, #0
    8022:	2109      	movs	r1, #9
    8024:	4b01      	ldr	r3, [pc, #4]	; (802c <write_32_to_BTLC1000+0x30>)
    8026:	4798      	blx	r3
    8028:	b005      	add	sp, #20
    802a:	bd00      	pop	{pc}
    802c:	00005b19 	.word	0x00005b19

00008030 <patch_init>:
    8030:	b5f0      	push	{r4, r5, r6, r7, lr}
    8032:	b085      	sub	sp, #20
    8034:	4935      	ldr	r1, [pc, #212]	; (810c <patch_init+0xdc>)
    8036:	2202      	movs	r2, #2
    8038:	4b35      	ldr	r3, [pc, #212]	; (8110 <patch_init+0xe0>)
    803a:	1c05      	adds	r5, r0, #0
    803c:	a803      	add	r0, sp, #12
    803e:	4798      	blx	r3
    8040:	a803      	add	r0, sp, #12
    8042:	2101      	movs	r1, #1
    8044:	4e33      	ldr	r6, [pc, #204]	; (8114 <patch_init+0xe4>)
    8046:	47b0      	blx	r6
    8048:	24fa      	movs	r4, #250	; 0xfa
    804a:	1c07      	adds	r7, r0, #0
    804c:	00e4      	lsls	r4, r4, #3
    804e:	4b32      	ldr	r3, [pc, #200]	; (8118 <patch_init+0xe8>)
    8050:	781a      	ldrb	r2, [r3, #0]
    8052:	9300      	str	r3, [sp, #0]
    8054:	2a00      	cmp	r2, #0
    8056:	d111      	bne.n	807c <patch_init+0x4c>
    8058:	69ab      	ldr	r3, [r5, #24]
    805a:	2001      	movs	r0, #1
    805c:	4798      	blx	r3
    805e:	1c2b      	adds	r3, r5, #0
    8060:	332c      	adds	r3, #44	; 0x2c
    8062:	781b      	ldrb	r3, [r3, #0]
    8064:	2b02      	cmp	r3, #2
    8066:	d106      	bne.n	8076 <patch_init+0x46>
    8068:	ab02      	add	r3, sp, #8
    806a:	1cd8      	adds	r0, r3, #3
    806c:	23fe      	movs	r3, #254	; 0xfe
    806e:	2101      	movs	r1, #1
    8070:	7003      	strb	r3, [r0, #0]
    8072:	6a2b      	ldr	r3, [r5, #32]
    8074:	4798      	blx	r3
    8076:	3c01      	subs	r4, #1
    8078:	2c00      	cmp	r4, #0
    807a:	d1e8      	bne.n	804e <patch_init+0x1e>
    807c:	9b00      	ldr	r3, [sp, #0]
    807e:	781b      	ldrb	r3, [r3, #0]
    8080:	2b00      	cmp	r3, #0
    8082:	d03f      	beq.n	8104 <patch_init+0xd4>
    8084:	2302      	movs	r3, #2
    8086:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    8088:	33ff      	adds	r3, #255	; 0xff
    808a:	4c24      	ldr	r4, [pc, #144]	; (811c <patch_init+0xec>)
    808c:	429a      	cmp	r2, r3
    808e:	d110      	bne.n	80b2 <patch_init+0x82>
    8090:	4823      	ldr	r0, [pc, #140]	; (8120 <patch_init+0xf0>)
    8092:	4924      	ldr	r1, [pc, #144]	; (8124 <patch_init+0xf4>)
    8094:	47a0      	blx	r4
    8096:	4824      	ldr	r0, [pc, #144]	; (8128 <patch_init+0xf8>)
    8098:	4924      	ldr	r1, [pc, #144]	; (812c <patch_init+0xfc>)
    809a:	47a0      	blx	r4
    809c:	4824      	ldr	r0, [pc, #144]	; (8130 <patch_init+0x100>)
    809e:	4925      	ldr	r1, [pc, #148]	; (8134 <patch_init+0x104>)
    80a0:	47a0      	blx	r4
    80a2:	4825      	ldr	r0, [pc, #148]	; (8138 <patch_init+0x108>)
    80a4:	2122      	movs	r1, #34	; 0x22
    80a6:	47a0      	blx	r4
    80a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    80aa:	4798      	blx	r3
    80ac:	4823      	ldr	r0, [pc, #140]	; (813c <patch_init+0x10c>)
    80ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    80b0:	4798      	blx	r3
    80b2:	352c      	adds	r5, #44	; 0x2c
    80b4:	2103      	movs	r1, #3
    80b6:	4822      	ldr	r0, [pc, #136]	; (8140 <patch_init+0x110>)
    80b8:	9501      	str	r5, [sp, #4]
    80ba:	47b0      	blx	r6
    80bc:	4821      	ldr	r0, [pc, #132]	; (8144 <patch_init+0x114>)
    80be:	4922      	ldr	r1, [pc, #136]	; (8148 <patch_init+0x118>)
    80c0:	47a0      	blx	r4
    80c2:	4d22      	ldr	r5, [pc, #136]	; (814c <patch_init+0x11c>)
    80c4:	4e22      	ldr	r6, [pc, #136]	; (8150 <patch_init+0x120>)
    80c6:	3501      	adds	r5, #1
    80c8:	4b22      	ldr	r3, [pc, #136]	; (8154 <patch_init+0x124>)
    80ca:	4a20      	ldr	r2, [pc, #128]	; (814c <patch_init+0x11c>)
    80cc:	7829      	ldrb	r1, [r5, #0]
    80ce:	18f3      	adds	r3, r6, r3
    80d0:	5cd3      	ldrb	r3, [r2, r3]
    80d2:	0209      	lsls	r1, r1, #8
    80d4:	4319      	orrs	r1, r3
    80d6:	786b      	ldrb	r3, [r5, #1]
    80d8:	1c30      	adds	r0, r6, #0
    80da:	041b      	lsls	r3, r3, #16
    80dc:	4319      	orrs	r1, r3
    80de:	78ab      	ldrb	r3, [r5, #2]
    80e0:	3604      	adds	r6, #4
    80e2:	061b      	lsls	r3, r3, #24
    80e4:	4319      	orrs	r1, r3
    80e6:	47a0      	blx	r4
    80e8:	4b1b      	ldr	r3, [pc, #108]	; (8158 <patch_init+0x128>)
    80ea:	3504      	adds	r5, #4
    80ec:	429e      	cmp	r6, r3
    80ee:	d1eb      	bne.n	80c8 <patch_init+0x98>
    80f0:	481a      	ldr	r0, [pc, #104]	; (815c <patch_init+0x12c>)
    80f2:	2178      	movs	r1, #120	; 0x78
    80f4:	47a0      	blx	r4
    80f6:	4b1a      	ldr	r3, [pc, #104]	; (8160 <patch_init+0x130>)
    80f8:	9801      	ldr	r0, [sp, #4]
    80fa:	4798      	blx	r3
    80fc:	2302      	movs	r3, #2
    80fe:	9a00      	ldr	r2, [sp, #0]
    8100:	7013      	strb	r3, [r2, #0]
    8102:	e000      	b.n	8106 <patch_init+0xd6>
    8104:	27d1      	movs	r7, #209	; 0xd1
    8106:	1c38      	adds	r0, r7, #0
    8108:	b005      	add	sp, #20
    810a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    810c:	0000ab36 	.word	0x0000ab36
    8110:	000083fb 	.word	0x000083fb
    8114:	00005b19 	.word	0x00005b19
    8118:	20000dfc 	.word	0x20000dfc
    811c:	00007ffd 	.word	0x00007ffd
    8120:	4000b1a8 	.word	0x4000b1a8
    8124:	02033f3f 	.word	0x02033f3f
    8128:	4000b1ac 	.word	0x4000b1ac
    812c:	3f3f0001 	.word	0x3f3f0001
    8130:	4000b048 	.word	0x4000b048
    8134:	00111133 	.word	0x00111133
    8138:	4000b044 	.word	0x4000b044
    813c:	000057cd 	.word	0x000057cd
    8140:	0000a6a4 	.word	0x0000a6a4
    8144:	4000f408 	.word	0x4000f408
    8148:	00000c06 	.word	0x00000c06
    814c:	0000ab38 	.word	0x0000ab38
    8150:	10005184 	.word	0x10005184
    8154:	efffae7c 	.word	0xefffae7c
    8158:	10007d40 	.word	0x10007d40
    815c:	4000f044 	.word	0x4000f044
    8160:	00006335 	.word	0x00006335

00008164 <fifo_init>:
    8164:	b510      	push	{r4, lr}
    8166:	1e03      	subs	r3, r0, #0
    8168:	d00b      	beq.n	8182 <fifo_init+0x1e>
    816a:	2000      	movs	r0, #0
    816c:	4282      	cmp	r2, r0
    816e:	d008      	beq.n	8182 <fifo_init+0x1e>
    8170:	1e54      	subs	r4, r2, #1
    8172:	4222      	tst	r2, r4
    8174:	d105      	bne.n	8182 <fifo_init+0x1e>
    8176:	6018      	str	r0, [r3, #0]
    8178:	6119      	str	r1, [r3, #16]
    817a:	6058      	str	r0, [r3, #4]
    817c:	609a      	str	r2, [r3, #8]
    817e:	60dc      	str	r4, [r3, #12]
    8180:	3001      	adds	r0, #1
    8182:	bd10      	pop	{r4, pc}

00008184 <fifo_empty>:
    8184:	6803      	ldr	r3, [r0, #0]
    8186:	6840      	ldr	r0, [r0, #4]
    8188:	1a18      	subs	r0, r3, r0
    818a:	4243      	negs	r3, r0
    818c:	4158      	adcs	r0, r3
    818e:	b2c0      	uxtb	r0, r0
    8190:	4770      	bx	lr

00008192 <fifo_full>:
    8192:	6803      	ldr	r3, [r0, #0]
    8194:	6842      	ldr	r2, [r0, #4]
    8196:	6880      	ldr	r0, [r0, #8]
    8198:	1a9b      	subs	r3, r3, r2
    819a:	1a18      	subs	r0, r3, r0
    819c:	4243      	negs	r3, r0
    819e:	4158      	adcs	r0, r3
    81a0:	b2c0      	uxtb	r0, r0
    81a2:	4770      	bx	lr

000081a4 <fifo_get>:
    81a4:	b530      	push	{r4, r5, lr}
    81a6:	6804      	ldr	r4, [r0, #0]
    81a8:	6842      	ldr	r2, [r0, #4]
    81aa:	1c03      	adds	r3, r0, #0
    81ac:	2000      	movs	r0, #0
    81ae:	4294      	cmp	r4, r2
    81b0:	d008      	beq.n	81c4 <fifo_get+0x20>
    81b2:	685a      	ldr	r2, [r3, #4]
    81b4:	68dc      	ldr	r4, [r3, #12]
    81b6:	6918      	ldr	r0, [r3, #16]
    81b8:	1c55      	adds	r5, r2, #1
    81ba:	605d      	str	r5, [r3, #4]
    81bc:	4022      	ands	r2, r4
    81be:	5c83      	ldrb	r3, [r0, r2]
    81c0:	2001      	movs	r0, #1
    81c2:	700b      	strb	r3, [r1, #0]
    81c4:	bd30      	pop	{r4, r5, pc}
	...

000081c8 <fifo_put>:
    81c8:	b538      	push	{r3, r4, r5, lr}
    81ca:	4b08      	ldr	r3, [pc, #32]	; (81ec <fifo_put+0x24>)
    81cc:	1c04      	adds	r4, r0, #0
    81ce:	1c0d      	adds	r5, r1, #0
    81d0:	4798      	blx	r3
    81d2:	2300      	movs	r3, #0
    81d4:	4298      	cmp	r0, r3
    81d6:	d107      	bne.n	81e8 <fifo_put+0x20>
    81d8:	6823      	ldr	r3, [r4, #0]
    81da:	68e1      	ldr	r1, [r4, #12]
    81dc:	6922      	ldr	r2, [r4, #16]
    81de:	1c58      	adds	r0, r3, #1
    81e0:	400b      	ands	r3, r1
    81e2:	6020      	str	r0, [r4, #0]
    81e4:	54d5      	strb	r5, [r2, r3]
    81e6:	2301      	movs	r3, #1
    81e8:	1c18      	adds	r0, r3, #0
    81ea:	bd38      	pop	{r3, r4, r5, pc}
    81ec:	00008193 	.word	0x00008193

000081f0 <__gnu_thumb1_case_sqi>:
    81f0:	b402      	push	{r1}
    81f2:	4671      	mov	r1, lr
    81f4:	0849      	lsrs	r1, r1, #1
    81f6:	0049      	lsls	r1, r1, #1
    81f8:	5609      	ldrsb	r1, [r1, r0]
    81fa:	0049      	lsls	r1, r1, #1
    81fc:	448e      	add	lr, r1
    81fe:	bc02      	pop	{r1}
    8200:	4770      	bx	lr
    8202:	46c0      	nop			; (mov r8, r8)

00008204 <__gnu_thumb1_case_uqi>:
    8204:	b402      	push	{r1}
    8206:	4671      	mov	r1, lr
    8208:	0849      	lsrs	r1, r1, #1
    820a:	0049      	lsls	r1, r1, #1
    820c:	5c09      	ldrb	r1, [r1, r0]
    820e:	0049      	lsls	r1, r1, #1
    8210:	448e      	add	lr, r1
    8212:	bc02      	pop	{r1}
    8214:	4770      	bx	lr
    8216:	46c0      	nop			; (mov r8, r8)

00008218 <__aeabi_uidiv>:
    8218:	2200      	movs	r2, #0
    821a:	0843      	lsrs	r3, r0, #1
    821c:	428b      	cmp	r3, r1
    821e:	d374      	bcc.n	830a <__aeabi_uidiv+0xf2>
    8220:	0903      	lsrs	r3, r0, #4
    8222:	428b      	cmp	r3, r1
    8224:	d35f      	bcc.n	82e6 <__aeabi_uidiv+0xce>
    8226:	0a03      	lsrs	r3, r0, #8
    8228:	428b      	cmp	r3, r1
    822a:	d344      	bcc.n	82b6 <__aeabi_uidiv+0x9e>
    822c:	0b03      	lsrs	r3, r0, #12
    822e:	428b      	cmp	r3, r1
    8230:	d328      	bcc.n	8284 <__aeabi_uidiv+0x6c>
    8232:	0c03      	lsrs	r3, r0, #16
    8234:	428b      	cmp	r3, r1
    8236:	d30d      	bcc.n	8254 <__aeabi_uidiv+0x3c>
    8238:	22ff      	movs	r2, #255	; 0xff
    823a:	0209      	lsls	r1, r1, #8
    823c:	ba12      	rev	r2, r2
    823e:	0c03      	lsrs	r3, r0, #16
    8240:	428b      	cmp	r3, r1
    8242:	d302      	bcc.n	824a <__aeabi_uidiv+0x32>
    8244:	1212      	asrs	r2, r2, #8
    8246:	0209      	lsls	r1, r1, #8
    8248:	d065      	beq.n	8316 <__aeabi_uidiv+0xfe>
    824a:	0b03      	lsrs	r3, r0, #12
    824c:	428b      	cmp	r3, r1
    824e:	d319      	bcc.n	8284 <__aeabi_uidiv+0x6c>
    8250:	e000      	b.n	8254 <__aeabi_uidiv+0x3c>
    8252:	0a09      	lsrs	r1, r1, #8
    8254:	0bc3      	lsrs	r3, r0, #15
    8256:	428b      	cmp	r3, r1
    8258:	d301      	bcc.n	825e <__aeabi_uidiv+0x46>
    825a:	03cb      	lsls	r3, r1, #15
    825c:	1ac0      	subs	r0, r0, r3
    825e:	4152      	adcs	r2, r2
    8260:	0b83      	lsrs	r3, r0, #14
    8262:	428b      	cmp	r3, r1
    8264:	d301      	bcc.n	826a <__aeabi_uidiv+0x52>
    8266:	038b      	lsls	r3, r1, #14
    8268:	1ac0      	subs	r0, r0, r3
    826a:	4152      	adcs	r2, r2
    826c:	0b43      	lsrs	r3, r0, #13
    826e:	428b      	cmp	r3, r1
    8270:	d301      	bcc.n	8276 <__aeabi_uidiv+0x5e>
    8272:	034b      	lsls	r3, r1, #13
    8274:	1ac0      	subs	r0, r0, r3
    8276:	4152      	adcs	r2, r2
    8278:	0b03      	lsrs	r3, r0, #12
    827a:	428b      	cmp	r3, r1
    827c:	d301      	bcc.n	8282 <__aeabi_uidiv+0x6a>
    827e:	030b      	lsls	r3, r1, #12
    8280:	1ac0      	subs	r0, r0, r3
    8282:	4152      	adcs	r2, r2
    8284:	0ac3      	lsrs	r3, r0, #11
    8286:	428b      	cmp	r3, r1
    8288:	d301      	bcc.n	828e <__aeabi_uidiv+0x76>
    828a:	02cb      	lsls	r3, r1, #11
    828c:	1ac0      	subs	r0, r0, r3
    828e:	4152      	adcs	r2, r2
    8290:	0a83      	lsrs	r3, r0, #10
    8292:	428b      	cmp	r3, r1
    8294:	d301      	bcc.n	829a <__aeabi_uidiv+0x82>
    8296:	028b      	lsls	r3, r1, #10
    8298:	1ac0      	subs	r0, r0, r3
    829a:	4152      	adcs	r2, r2
    829c:	0a43      	lsrs	r3, r0, #9
    829e:	428b      	cmp	r3, r1
    82a0:	d301      	bcc.n	82a6 <__aeabi_uidiv+0x8e>
    82a2:	024b      	lsls	r3, r1, #9
    82a4:	1ac0      	subs	r0, r0, r3
    82a6:	4152      	adcs	r2, r2
    82a8:	0a03      	lsrs	r3, r0, #8
    82aa:	428b      	cmp	r3, r1
    82ac:	d301      	bcc.n	82b2 <__aeabi_uidiv+0x9a>
    82ae:	020b      	lsls	r3, r1, #8
    82b0:	1ac0      	subs	r0, r0, r3
    82b2:	4152      	adcs	r2, r2
    82b4:	d2cd      	bcs.n	8252 <__aeabi_uidiv+0x3a>
    82b6:	09c3      	lsrs	r3, r0, #7
    82b8:	428b      	cmp	r3, r1
    82ba:	d301      	bcc.n	82c0 <__aeabi_uidiv+0xa8>
    82bc:	01cb      	lsls	r3, r1, #7
    82be:	1ac0      	subs	r0, r0, r3
    82c0:	4152      	adcs	r2, r2
    82c2:	0983      	lsrs	r3, r0, #6
    82c4:	428b      	cmp	r3, r1
    82c6:	d301      	bcc.n	82cc <__aeabi_uidiv+0xb4>
    82c8:	018b      	lsls	r3, r1, #6
    82ca:	1ac0      	subs	r0, r0, r3
    82cc:	4152      	adcs	r2, r2
    82ce:	0943      	lsrs	r3, r0, #5
    82d0:	428b      	cmp	r3, r1
    82d2:	d301      	bcc.n	82d8 <__aeabi_uidiv+0xc0>
    82d4:	014b      	lsls	r3, r1, #5
    82d6:	1ac0      	subs	r0, r0, r3
    82d8:	4152      	adcs	r2, r2
    82da:	0903      	lsrs	r3, r0, #4
    82dc:	428b      	cmp	r3, r1
    82de:	d301      	bcc.n	82e4 <__aeabi_uidiv+0xcc>
    82e0:	010b      	lsls	r3, r1, #4
    82e2:	1ac0      	subs	r0, r0, r3
    82e4:	4152      	adcs	r2, r2
    82e6:	08c3      	lsrs	r3, r0, #3
    82e8:	428b      	cmp	r3, r1
    82ea:	d301      	bcc.n	82f0 <__aeabi_uidiv+0xd8>
    82ec:	00cb      	lsls	r3, r1, #3
    82ee:	1ac0      	subs	r0, r0, r3
    82f0:	4152      	adcs	r2, r2
    82f2:	0883      	lsrs	r3, r0, #2
    82f4:	428b      	cmp	r3, r1
    82f6:	d301      	bcc.n	82fc <__aeabi_uidiv+0xe4>
    82f8:	008b      	lsls	r3, r1, #2
    82fa:	1ac0      	subs	r0, r0, r3
    82fc:	4152      	adcs	r2, r2
    82fe:	0843      	lsrs	r3, r0, #1
    8300:	428b      	cmp	r3, r1
    8302:	d301      	bcc.n	8308 <__aeabi_uidiv+0xf0>
    8304:	004b      	lsls	r3, r1, #1
    8306:	1ac0      	subs	r0, r0, r3
    8308:	4152      	adcs	r2, r2
    830a:	1a41      	subs	r1, r0, r1
    830c:	d200      	bcs.n	8310 <__aeabi_uidiv+0xf8>
    830e:	4601      	mov	r1, r0
    8310:	4152      	adcs	r2, r2
    8312:	4610      	mov	r0, r2
    8314:	4770      	bx	lr
    8316:	e7ff      	b.n	8318 <__aeabi_uidiv+0x100>
    8318:	b501      	push	{r0, lr}
    831a:	2000      	movs	r0, #0
    831c:	f000 f80c 	bl	8338 <__aeabi_idiv0>
    8320:	bd02      	pop	{r1, pc}
    8322:	46c0      	nop			; (mov r8, r8)

00008324 <__aeabi_uidivmod>:
    8324:	2900      	cmp	r1, #0
    8326:	d0f7      	beq.n	8318 <__aeabi_uidiv+0x100>
    8328:	b503      	push	{r0, r1, lr}
    832a:	f7ff ff75 	bl	8218 <__aeabi_uidiv>
    832e:	bc0e      	pop	{r1, r2, r3}
    8330:	4342      	muls	r2, r0
    8332:	1a89      	subs	r1, r1, r2
    8334:	4718      	bx	r3
    8336:	46c0      	nop			; (mov r8, r8)

00008338 <__aeabi_idiv0>:
    8338:	4770      	bx	lr
    833a:	46c0      	nop			; (mov r8, r8)

0000833c <__aeabi_lmul>:
    833c:	b5f0      	push	{r4, r5, r6, r7, lr}
    833e:	464f      	mov	r7, r9
    8340:	4646      	mov	r6, r8
    8342:	0405      	lsls	r5, r0, #16
    8344:	0c2d      	lsrs	r5, r5, #16
    8346:	1c2c      	adds	r4, r5, #0
    8348:	b4c0      	push	{r6, r7}
    834a:	0417      	lsls	r7, r2, #16
    834c:	0c16      	lsrs	r6, r2, #16
    834e:	0c3f      	lsrs	r7, r7, #16
    8350:	4699      	mov	r9, r3
    8352:	0c03      	lsrs	r3, r0, #16
    8354:	437c      	muls	r4, r7
    8356:	4375      	muls	r5, r6
    8358:	435f      	muls	r7, r3
    835a:	4373      	muls	r3, r6
    835c:	197d      	adds	r5, r7, r5
    835e:	0c26      	lsrs	r6, r4, #16
    8360:	19ad      	adds	r5, r5, r6
    8362:	469c      	mov	ip, r3
    8364:	42af      	cmp	r7, r5
    8366:	d903      	bls.n	8370 <__aeabi_lmul+0x34>
    8368:	2380      	movs	r3, #128	; 0x80
    836a:	025b      	lsls	r3, r3, #9
    836c:	4698      	mov	r8, r3
    836e:	44c4      	add	ip, r8
    8370:	464b      	mov	r3, r9
    8372:	4351      	muls	r1, r2
    8374:	4343      	muls	r3, r0
    8376:	0424      	lsls	r4, r4, #16
    8378:	0c2e      	lsrs	r6, r5, #16
    837a:	0c24      	lsrs	r4, r4, #16
    837c:	042d      	lsls	r5, r5, #16
    837e:	4466      	add	r6, ip
    8380:	192c      	adds	r4, r5, r4
    8382:	1859      	adds	r1, r3, r1
    8384:	1989      	adds	r1, r1, r6
    8386:	1c20      	adds	r0, r4, #0
    8388:	bc0c      	pop	{r2, r3}
    838a:	4690      	mov	r8, r2
    838c:	4699      	mov	r9, r3
    838e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008390 <__libc_init_array>:
    8390:	4b0e      	ldr	r3, [pc, #56]	; (83cc <__libc_init_array+0x3c>)
    8392:	b570      	push	{r4, r5, r6, lr}
    8394:	2500      	movs	r5, #0
    8396:	1c1e      	adds	r6, r3, #0
    8398:	4c0d      	ldr	r4, [pc, #52]	; (83d0 <__libc_init_array+0x40>)
    839a:	1ae4      	subs	r4, r4, r3
    839c:	10a4      	asrs	r4, r4, #2
    839e:	42a5      	cmp	r5, r4
    83a0:	d004      	beq.n	83ac <__libc_init_array+0x1c>
    83a2:	00ab      	lsls	r3, r5, #2
    83a4:	58f3      	ldr	r3, [r6, r3]
    83a6:	4798      	blx	r3
    83a8:	3501      	adds	r5, #1
    83aa:	e7f8      	b.n	839e <__libc_init_array+0xe>
    83ac:	f005 f9f0 	bl	d790 <_init>
    83b0:	4b08      	ldr	r3, [pc, #32]	; (83d4 <__libc_init_array+0x44>)
    83b2:	2500      	movs	r5, #0
    83b4:	1c1e      	adds	r6, r3, #0
    83b6:	4c08      	ldr	r4, [pc, #32]	; (83d8 <__libc_init_array+0x48>)
    83b8:	1ae4      	subs	r4, r4, r3
    83ba:	10a4      	asrs	r4, r4, #2
    83bc:	42a5      	cmp	r5, r4
    83be:	d004      	beq.n	83ca <__libc_init_array+0x3a>
    83c0:	00ab      	lsls	r3, r5, #2
    83c2:	58f3      	ldr	r3, [r6, r3]
    83c4:	4798      	blx	r3
    83c6:	3501      	adds	r5, #1
    83c8:	e7f8      	b.n	83bc <__libc_init_array+0x2c>
    83ca:	bd70      	pop	{r4, r5, r6, pc}
    83cc:	0000d79c 	.word	0x0000d79c
    83d0:	0000d79c 	.word	0x0000d79c
    83d4:	0000d79c 	.word	0x0000d79c
    83d8:	0000d7a0 	.word	0x0000d7a0

000083dc <memcmp>:
    83dc:	b530      	push	{r4, r5, lr}
    83de:	2400      	movs	r4, #0
    83e0:	4294      	cmp	r4, r2
    83e2:	d008      	beq.n	83f6 <memcmp+0x1a>
    83e4:	5d03      	ldrb	r3, [r0, r4]
    83e6:	1c65      	adds	r5, r4, #1
    83e8:	5d0c      	ldrb	r4, [r1, r4]
    83ea:	42a3      	cmp	r3, r4
    83ec:	d001      	beq.n	83f2 <memcmp+0x16>
    83ee:	1b18      	subs	r0, r3, r4
    83f0:	e002      	b.n	83f8 <memcmp+0x1c>
    83f2:	1c2c      	adds	r4, r5, #0
    83f4:	e7f4      	b.n	83e0 <memcmp+0x4>
    83f6:	2000      	movs	r0, #0
    83f8:	bd30      	pop	{r4, r5, pc}

000083fa <memcpy>:
    83fa:	2300      	movs	r3, #0
    83fc:	b510      	push	{r4, lr}
    83fe:	4293      	cmp	r3, r2
    8400:	d003      	beq.n	840a <memcpy+0x10>
    8402:	5ccc      	ldrb	r4, [r1, r3]
    8404:	54c4      	strb	r4, [r0, r3]
    8406:	3301      	adds	r3, #1
    8408:	e7f9      	b.n	83fe <memcpy+0x4>
    840a:	bd10      	pop	{r4, pc}

0000840c <memset>:
    840c:	1c03      	adds	r3, r0, #0
    840e:	1882      	adds	r2, r0, r2
    8410:	4293      	cmp	r3, r2
    8412:	d002      	beq.n	841a <memset+0xe>
    8414:	7019      	strb	r1, [r3, #0]
    8416:	3301      	adds	r3, #1
    8418:	e7fa      	b.n	8410 <memset+0x4>
    841a:	4770      	bx	lr

0000841c <iprintf>:
    841c:	b40f      	push	{r0, r1, r2, r3}
    841e:	4b0b      	ldr	r3, [pc, #44]	; (844c <iprintf+0x30>)
    8420:	b513      	push	{r0, r1, r4, lr}
    8422:	681c      	ldr	r4, [r3, #0]
    8424:	2c00      	cmp	r4, #0
    8426:	d005      	beq.n	8434 <iprintf+0x18>
    8428:	69a3      	ldr	r3, [r4, #24]
    842a:	2b00      	cmp	r3, #0
    842c:	d102      	bne.n	8434 <iprintf+0x18>
    842e:	1c20      	adds	r0, r4, #0
    8430:	f000 fb1e 	bl	8a70 <__sinit>
    8434:	ab05      	add	r3, sp, #20
    8436:	1c20      	adds	r0, r4, #0
    8438:	68a1      	ldr	r1, [r4, #8]
    843a:	9a04      	ldr	r2, [sp, #16]
    843c:	9301      	str	r3, [sp, #4]
    843e:	f000 fcd1 	bl	8de4 <_vfiprintf_r>
    8442:	bc16      	pop	{r1, r2, r4}
    8444:	bc08      	pop	{r3}
    8446:	b004      	add	sp, #16
    8448:	4718      	bx	r3
    844a:	46c0      	nop			; (mov r8, r8)
    844c:	200000a8 	.word	0x200000a8

00008450 <putchar>:
    8450:	b538      	push	{r3, r4, r5, lr}
    8452:	4b08      	ldr	r3, [pc, #32]	; (8474 <putchar+0x24>)
    8454:	1c05      	adds	r5, r0, #0
    8456:	681c      	ldr	r4, [r3, #0]
    8458:	2c00      	cmp	r4, #0
    845a:	d005      	beq.n	8468 <putchar+0x18>
    845c:	69a3      	ldr	r3, [r4, #24]
    845e:	2b00      	cmp	r3, #0
    8460:	d102      	bne.n	8468 <putchar+0x18>
    8462:	1c20      	adds	r0, r4, #0
    8464:	f000 fb04 	bl	8a70 <__sinit>
    8468:	1c29      	adds	r1, r5, #0
    846a:	1c20      	adds	r0, r4, #0
    846c:	68a2      	ldr	r2, [r4, #8]
    846e:	f000 ff4f 	bl	9310 <_putc_r>
    8472:	bd38      	pop	{r3, r4, r5, pc}
    8474:	200000a8 	.word	0x200000a8

00008478 <_puts_r>:
    8478:	b570      	push	{r4, r5, r6, lr}
    847a:	1c05      	adds	r5, r0, #0
    847c:	1c0e      	adds	r6, r1, #0
    847e:	2800      	cmp	r0, #0
    8480:	d004      	beq.n	848c <_puts_r+0x14>
    8482:	6983      	ldr	r3, [r0, #24]
    8484:	2b00      	cmp	r3, #0
    8486:	d101      	bne.n	848c <_puts_r+0x14>
    8488:	f000 faf2 	bl	8a70 <__sinit>
    848c:	68ac      	ldr	r4, [r5, #8]
    848e:	89a3      	ldrh	r3, [r4, #12]
    8490:	071b      	lsls	r3, r3, #28
    8492:	d502      	bpl.n	849a <_puts_r+0x22>
    8494:	6923      	ldr	r3, [r4, #16]
    8496:	2b00      	cmp	r3, #0
    8498:	d119      	bne.n	84ce <_puts_r+0x56>
    849a:	1c28      	adds	r0, r5, #0
    849c:	1c21      	adds	r1, r4, #0
    849e:	f000 f97b 	bl	8798 <__swsetup_r>
    84a2:	2800      	cmp	r0, #0
    84a4:	d013      	beq.n	84ce <_puts_r+0x56>
    84a6:	2001      	movs	r0, #1
    84a8:	4240      	negs	r0, r0
    84aa:	e045      	b.n	8538 <_puts_r+0xc0>
    84ac:	7831      	ldrb	r1, [r6, #0]
    84ae:	2b00      	cmp	r3, #0
    84b0:	da1b      	bge.n	84ea <_puts_r+0x72>
    84b2:	69a2      	ldr	r2, [r4, #24]
    84b4:	4293      	cmp	r3, r2
    84b6:	da11      	bge.n	84dc <_puts_r+0x64>
    84b8:	1c22      	adds	r2, r4, #0
    84ba:	1c28      	adds	r0, r5, #0
    84bc:	f000 f914 	bl	86e8 <__swbuf_r>
    84c0:	3001      	adds	r0, #1
    84c2:	4242      	negs	r2, r0
    84c4:	4142      	adcs	r2, r0
    84c6:	b2d0      	uxtb	r0, r2
    84c8:	2800      	cmp	r0, #0
    84ca:	d1ec      	bne.n	84a6 <_puts_r+0x2e>
    84cc:	3601      	adds	r6, #1
    84ce:	68a3      	ldr	r3, [r4, #8]
    84d0:	7832      	ldrb	r2, [r6, #0]
    84d2:	3b01      	subs	r3, #1
    84d4:	60a3      	str	r3, [r4, #8]
    84d6:	2a00      	cmp	r2, #0
    84d8:	d1e8      	bne.n	84ac <_puts_r+0x34>
    84da:	e00c      	b.n	84f6 <_puts_r+0x7e>
    84dc:	6823      	ldr	r3, [r4, #0]
    84de:	7019      	strb	r1, [r3, #0]
    84e0:	6823      	ldr	r3, [r4, #0]
    84e2:	7819      	ldrb	r1, [r3, #0]
    84e4:	290a      	cmp	r1, #10
    84e6:	d103      	bne.n	84f0 <_puts_r+0x78>
    84e8:	e7e6      	b.n	84b8 <_puts_r+0x40>
    84ea:	6823      	ldr	r3, [r4, #0]
    84ec:	7019      	strb	r1, [r3, #0]
    84ee:	6823      	ldr	r3, [r4, #0]
    84f0:	3301      	adds	r3, #1
    84f2:	6023      	str	r3, [r4, #0]
    84f4:	e7ea      	b.n	84cc <_puts_r+0x54>
    84f6:	2b00      	cmp	r3, #0
    84f8:	da17      	bge.n	852a <_puts_r+0xb2>
    84fa:	69a2      	ldr	r2, [r4, #24]
    84fc:	4293      	cmp	r3, r2
    84fe:	db08      	blt.n	8512 <_puts_r+0x9a>
    8500:	230a      	movs	r3, #10
    8502:	6822      	ldr	r2, [r4, #0]
    8504:	7013      	strb	r3, [r2, #0]
    8506:	6823      	ldr	r3, [r4, #0]
    8508:	7819      	ldrb	r1, [r3, #0]
    850a:	290a      	cmp	r1, #10
    850c:	d111      	bne.n	8532 <_puts_r+0xba>
    850e:	1c28      	adds	r0, r5, #0
    8510:	e001      	b.n	8516 <_puts_r+0x9e>
    8512:	1c28      	adds	r0, r5, #0
    8514:	210a      	movs	r1, #10
    8516:	1c22      	adds	r2, r4, #0
    8518:	f000 f8e6 	bl	86e8 <__swbuf_r>
    851c:	3001      	adds	r0, #1
    851e:	4242      	negs	r2, r0
    8520:	4142      	adcs	r2, r0
    8522:	b2d0      	uxtb	r0, r2
    8524:	2800      	cmp	r0, #0
    8526:	d006      	beq.n	8536 <_puts_r+0xbe>
    8528:	e7bd      	b.n	84a6 <_puts_r+0x2e>
    852a:	230a      	movs	r3, #10
    852c:	6822      	ldr	r2, [r4, #0]
    852e:	7013      	strb	r3, [r2, #0]
    8530:	6823      	ldr	r3, [r4, #0]
    8532:	3301      	adds	r3, #1
    8534:	6023      	str	r3, [r4, #0]
    8536:	200a      	movs	r0, #10
    8538:	bd70      	pop	{r4, r5, r6, pc}
	...

0000853c <puts>:
    853c:	b508      	push	{r3, lr}
    853e:	4b03      	ldr	r3, [pc, #12]	; (854c <puts+0x10>)
    8540:	1c01      	adds	r1, r0, #0
    8542:	6818      	ldr	r0, [r3, #0]
    8544:	f7ff ff98 	bl	8478 <_puts_r>
    8548:	bd08      	pop	{r3, pc}
    854a:	46c0      	nop			; (mov r8, r8)
    854c:	200000a8 	.word	0x200000a8

00008550 <rand>:
    8550:	4b15      	ldr	r3, [pc, #84]	; (85a8 <rand+0x58>)
    8552:	b510      	push	{r4, lr}
    8554:	681c      	ldr	r4, [r3, #0]
    8556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8558:	2b00      	cmp	r3, #0
    855a:	d115      	bne.n	8588 <rand+0x38>
    855c:	2018      	movs	r0, #24
    855e:	f000 fb71 	bl	8c44 <malloc>
    8562:	4b12      	ldr	r3, [pc, #72]	; (85ac <rand+0x5c>)
    8564:	63a0      	str	r0, [r4, #56]	; 0x38
    8566:	8003      	strh	r3, [r0, #0]
    8568:	4b11      	ldr	r3, [pc, #68]	; (85b0 <rand+0x60>)
    856a:	2201      	movs	r2, #1
    856c:	8043      	strh	r3, [r0, #2]
    856e:	4b11      	ldr	r3, [pc, #68]	; (85b4 <rand+0x64>)
    8570:	8083      	strh	r3, [r0, #4]
    8572:	4b11      	ldr	r3, [pc, #68]	; (85b8 <rand+0x68>)
    8574:	80c3      	strh	r3, [r0, #6]
    8576:	4b11      	ldr	r3, [pc, #68]	; (85bc <rand+0x6c>)
    8578:	8103      	strh	r3, [r0, #8]
    857a:	2305      	movs	r3, #5
    857c:	8143      	strh	r3, [r0, #10]
    857e:	3306      	adds	r3, #6
    8580:	8183      	strh	r3, [r0, #12]
    8582:	2300      	movs	r3, #0
    8584:	6102      	str	r2, [r0, #16]
    8586:	6143      	str	r3, [r0, #20]
    8588:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    858a:	4a0d      	ldr	r2, [pc, #52]	; (85c0 <rand+0x70>)
    858c:	6920      	ldr	r0, [r4, #16]
    858e:	6961      	ldr	r1, [r4, #20]
    8590:	4b0c      	ldr	r3, [pc, #48]	; (85c4 <rand+0x74>)
    8592:	f7ff fed3 	bl	833c <__aeabi_lmul>
    8596:	2201      	movs	r2, #1
    8598:	2300      	movs	r3, #0
    859a:	1880      	adds	r0, r0, r2
    859c:	4159      	adcs	r1, r3
    859e:	6120      	str	r0, [r4, #16]
    85a0:	6161      	str	r1, [r4, #20]
    85a2:	0048      	lsls	r0, r1, #1
    85a4:	0840      	lsrs	r0, r0, #1
    85a6:	bd10      	pop	{r4, pc}
    85a8:	200000a8 	.word	0x200000a8
    85ac:	0000330e 	.word	0x0000330e
    85b0:	ffffabcd 	.word	0xffffabcd
    85b4:	00001234 	.word	0x00001234
    85b8:	ffffe66d 	.word	0xffffe66d
    85bc:	ffffdeec 	.word	0xffffdeec
    85c0:	4c957f2d 	.word	0x4c957f2d
    85c4:	5851f42d 	.word	0x5851f42d

000085c8 <setbuf>:
    85c8:	b508      	push	{r3, lr}
    85ca:	424a      	negs	r2, r1
    85cc:	414a      	adcs	r2, r1
    85ce:	2380      	movs	r3, #128	; 0x80
    85d0:	0052      	lsls	r2, r2, #1
    85d2:	00db      	lsls	r3, r3, #3
    85d4:	f000 f802 	bl	85dc <setvbuf>
    85d8:	bd08      	pop	{r3, pc}
	...

000085dc <setvbuf>:
    85dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    85de:	1c1e      	adds	r6, r3, #0
    85e0:	4b3c      	ldr	r3, [pc, #240]	; (86d4 <setvbuf+0xf8>)
    85e2:	1c04      	adds	r4, r0, #0
    85e4:	681d      	ldr	r5, [r3, #0]
    85e6:	1c0f      	adds	r7, r1, #0
    85e8:	9201      	str	r2, [sp, #4]
    85ea:	2d00      	cmp	r5, #0
    85ec:	d005      	beq.n	85fa <setvbuf+0x1e>
    85ee:	69ab      	ldr	r3, [r5, #24]
    85f0:	2b00      	cmp	r3, #0
    85f2:	d102      	bne.n	85fa <setvbuf+0x1e>
    85f4:	1c28      	adds	r0, r5, #0
    85f6:	f000 fa3b 	bl	8a70 <__sinit>
    85fa:	4b37      	ldr	r3, [pc, #220]	; (86d8 <setvbuf+0xfc>)
    85fc:	429c      	cmp	r4, r3
    85fe:	d101      	bne.n	8604 <setvbuf+0x28>
    8600:	686c      	ldr	r4, [r5, #4]
    8602:	e008      	b.n	8616 <setvbuf+0x3a>
    8604:	4b35      	ldr	r3, [pc, #212]	; (86dc <setvbuf+0x100>)
    8606:	429c      	cmp	r4, r3
    8608:	d101      	bne.n	860e <setvbuf+0x32>
    860a:	68ac      	ldr	r4, [r5, #8]
    860c:	e003      	b.n	8616 <setvbuf+0x3a>
    860e:	4b34      	ldr	r3, [pc, #208]	; (86e0 <setvbuf+0x104>)
    8610:	429c      	cmp	r4, r3
    8612:	d100      	bne.n	8616 <setvbuf+0x3a>
    8614:	68ec      	ldr	r4, [r5, #12]
    8616:	9b01      	ldr	r3, [sp, #4]
    8618:	2b02      	cmp	r3, #2
    861a:	d858      	bhi.n	86ce <setvbuf+0xf2>
    861c:	2e00      	cmp	r6, #0
    861e:	db56      	blt.n	86ce <setvbuf+0xf2>
    8620:	1c28      	adds	r0, r5, #0
    8622:	1c21      	adds	r1, r4, #0
    8624:	f000 f9b6 	bl	8994 <_fflush_r>
    8628:	2300      	movs	r3, #0
    862a:	6063      	str	r3, [r4, #4]
    862c:	61a3      	str	r3, [r4, #24]
    862e:	89a3      	ldrh	r3, [r4, #12]
    8630:	061b      	lsls	r3, r3, #24
    8632:	d503      	bpl.n	863c <setvbuf+0x60>
    8634:	1c28      	adds	r0, r5, #0
    8636:	6921      	ldr	r1, [r4, #16]
    8638:	f000 fb0e 	bl	8c58 <_free_r>
    863c:	2283      	movs	r2, #131	; 0x83
    863e:	89a3      	ldrh	r3, [r4, #12]
    8640:	4393      	bics	r3, r2
    8642:	81a3      	strh	r3, [r4, #12]
    8644:	9b01      	ldr	r3, [sp, #4]
    8646:	2b02      	cmp	r3, #2
    8648:	d013      	beq.n	8672 <setvbuf+0x96>
    864a:	2f00      	cmp	r7, #0
    864c:	d125      	bne.n	869a <setvbuf+0xbe>
    864e:	2e00      	cmp	r6, #0
    8650:	d101      	bne.n	8656 <setvbuf+0x7a>
    8652:	2680      	movs	r6, #128	; 0x80
    8654:	00f6      	lsls	r6, r6, #3
    8656:	1c30      	adds	r0, r6, #0
    8658:	f000 faf4 	bl	8c44 <malloc>
    865c:	1e07      	subs	r7, r0, #0
    865e:	d118      	bne.n	8692 <setvbuf+0xb6>
    8660:	2080      	movs	r0, #128	; 0x80
    8662:	00c0      	lsls	r0, r0, #3
    8664:	f000 faee 	bl	8c44 <malloc>
    8668:	1e07      	subs	r7, r0, #0
    866a:	d110      	bne.n	868e <setvbuf+0xb2>
    866c:	2001      	movs	r0, #1
    866e:	4240      	negs	r0, r0
    8670:	e000      	b.n	8674 <setvbuf+0x98>
    8672:	2000      	movs	r0, #0
    8674:	2202      	movs	r2, #2
    8676:	89a3      	ldrh	r3, [r4, #12]
    8678:	4313      	orrs	r3, r2
    867a:	81a3      	strh	r3, [r4, #12]
    867c:	2300      	movs	r3, #0
    867e:	60a3      	str	r3, [r4, #8]
    8680:	1c23      	adds	r3, r4, #0
    8682:	3347      	adds	r3, #71	; 0x47
    8684:	6023      	str	r3, [r4, #0]
    8686:	6123      	str	r3, [r4, #16]
    8688:	2301      	movs	r3, #1
    868a:	6163      	str	r3, [r4, #20]
    868c:	e021      	b.n	86d2 <setvbuf+0xf6>
    868e:	2680      	movs	r6, #128	; 0x80
    8690:	00f6      	lsls	r6, r6, #3
    8692:	2280      	movs	r2, #128	; 0x80
    8694:	89a3      	ldrh	r3, [r4, #12]
    8696:	4313      	orrs	r3, r2
    8698:	81a3      	strh	r3, [r4, #12]
    869a:	9b01      	ldr	r3, [sp, #4]
    869c:	2b01      	cmp	r3, #1
    869e:	d105      	bne.n	86ac <setvbuf+0xd0>
    86a0:	89a3      	ldrh	r3, [r4, #12]
    86a2:	9a01      	ldr	r2, [sp, #4]
    86a4:	431a      	orrs	r2, r3
    86a6:	4273      	negs	r3, r6
    86a8:	81a2      	strh	r2, [r4, #12]
    86aa:	61a3      	str	r3, [r4, #24]
    86ac:	4b0d      	ldr	r3, [pc, #52]	; (86e4 <setvbuf+0x108>)
    86ae:	2000      	movs	r0, #0
    86b0:	62ab      	str	r3, [r5, #40]	; 0x28
    86b2:	89a2      	ldrh	r2, [r4, #12]
    86b4:	6027      	str	r7, [r4, #0]
    86b6:	6127      	str	r7, [r4, #16]
    86b8:	6166      	str	r6, [r4, #20]
    86ba:	0713      	lsls	r3, r2, #28
    86bc:	d509      	bpl.n	86d2 <setvbuf+0xf6>
    86be:	2303      	movs	r3, #3
    86c0:	401a      	ands	r2, r3
    86c2:	4253      	negs	r3, r2
    86c4:	4153      	adcs	r3, r2
    86c6:	425b      	negs	r3, r3
    86c8:	401e      	ands	r6, r3
    86ca:	60a6      	str	r6, [r4, #8]
    86cc:	e001      	b.n	86d2 <setvbuf+0xf6>
    86ce:	2001      	movs	r0, #1
    86d0:	4240      	negs	r0, r0
    86d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    86d4:	200000a8 	.word	0x200000a8
    86d8:	0000d6fc 	.word	0x0000d6fc
    86dc:	0000d71c 	.word	0x0000d71c
    86e0:	0000d73c 	.word	0x0000d73c
    86e4:	000089ed 	.word	0x000089ed

000086e8 <__swbuf_r>:
    86e8:	b570      	push	{r4, r5, r6, lr}
    86ea:	1c05      	adds	r5, r0, #0
    86ec:	1c0e      	adds	r6, r1, #0
    86ee:	1c14      	adds	r4, r2, #0
    86f0:	2800      	cmp	r0, #0
    86f2:	d004      	beq.n	86fe <__swbuf_r+0x16>
    86f4:	6983      	ldr	r3, [r0, #24]
    86f6:	2b00      	cmp	r3, #0
    86f8:	d101      	bne.n	86fe <__swbuf_r+0x16>
    86fa:	f000 f9b9 	bl	8a70 <__sinit>
    86fe:	4b23      	ldr	r3, [pc, #140]	; (878c <__swbuf_r+0xa4>)
    8700:	429c      	cmp	r4, r3
    8702:	d101      	bne.n	8708 <__swbuf_r+0x20>
    8704:	686c      	ldr	r4, [r5, #4]
    8706:	e008      	b.n	871a <__swbuf_r+0x32>
    8708:	4b21      	ldr	r3, [pc, #132]	; (8790 <__swbuf_r+0xa8>)
    870a:	429c      	cmp	r4, r3
    870c:	d101      	bne.n	8712 <__swbuf_r+0x2a>
    870e:	68ac      	ldr	r4, [r5, #8]
    8710:	e003      	b.n	871a <__swbuf_r+0x32>
    8712:	4b20      	ldr	r3, [pc, #128]	; (8794 <__swbuf_r+0xac>)
    8714:	429c      	cmp	r4, r3
    8716:	d100      	bne.n	871a <__swbuf_r+0x32>
    8718:	68ec      	ldr	r4, [r5, #12]
    871a:	69a3      	ldr	r3, [r4, #24]
    871c:	60a3      	str	r3, [r4, #8]
    871e:	89a3      	ldrh	r3, [r4, #12]
    8720:	071b      	lsls	r3, r3, #28
    8722:	d50a      	bpl.n	873a <__swbuf_r+0x52>
    8724:	6923      	ldr	r3, [r4, #16]
    8726:	2b00      	cmp	r3, #0
    8728:	d007      	beq.n	873a <__swbuf_r+0x52>
    872a:	6823      	ldr	r3, [r4, #0]
    872c:	6922      	ldr	r2, [r4, #16]
    872e:	b2f6      	uxtb	r6, r6
    8730:	1a98      	subs	r0, r3, r2
    8732:	6963      	ldr	r3, [r4, #20]
    8734:	4298      	cmp	r0, r3
    8736:	db0f      	blt.n	8758 <__swbuf_r+0x70>
    8738:	e008      	b.n	874c <__swbuf_r+0x64>
    873a:	1c28      	adds	r0, r5, #0
    873c:	1c21      	adds	r1, r4, #0
    873e:	f000 f82b 	bl	8798 <__swsetup_r>
    8742:	2800      	cmp	r0, #0
    8744:	d0f1      	beq.n	872a <__swbuf_r+0x42>
    8746:	2001      	movs	r0, #1
    8748:	4240      	negs	r0, r0
    874a:	e01d      	b.n	8788 <__swbuf_r+0xa0>
    874c:	1c28      	adds	r0, r5, #0
    874e:	1c21      	adds	r1, r4, #0
    8750:	f000 f920 	bl	8994 <_fflush_r>
    8754:	2800      	cmp	r0, #0
    8756:	d1f6      	bne.n	8746 <__swbuf_r+0x5e>
    8758:	68a3      	ldr	r3, [r4, #8]
    875a:	3001      	adds	r0, #1
    875c:	3b01      	subs	r3, #1
    875e:	60a3      	str	r3, [r4, #8]
    8760:	6823      	ldr	r3, [r4, #0]
    8762:	1c5a      	adds	r2, r3, #1
    8764:	6022      	str	r2, [r4, #0]
    8766:	701e      	strb	r6, [r3, #0]
    8768:	6963      	ldr	r3, [r4, #20]
    876a:	4298      	cmp	r0, r3
    876c:	d005      	beq.n	877a <__swbuf_r+0x92>
    876e:	89a3      	ldrh	r3, [r4, #12]
    8770:	1c30      	adds	r0, r6, #0
    8772:	07db      	lsls	r3, r3, #31
    8774:	d508      	bpl.n	8788 <__swbuf_r+0xa0>
    8776:	2e0a      	cmp	r6, #10
    8778:	d106      	bne.n	8788 <__swbuf_r+0xa0>
    877a:	1c28      	adds	r0, r5, #0
    877c:	1c21      	adds	r1, r4, #0
    877e:	f000 f909 	bl	8994 <_fflush_r>
    8782:	2800      	cmp	r0, #0
    8784:	d1df      	bne.n	8746 <__swbuf_r+0x5e>
    8786:	1c30      	adds	r0, r6, #0
    8788:	bd70      	pop	{r4, r5, r6, pc}
    878a:	46c0      	nop			; (mov r8, r8)
    878c:	0000d6fc 	.word	0x0000d6fc
    8790:	0000d71c 	.word	0x0000d71c
    8794:	0000d73c 	.word	0x0000d73c

00008798 <__swsetup_r>:
    8798:	4b35      	ldr	r3, [pc, #212]	; (8870 <__swsetup_r+0xd8>)
    879a:	b570      	push	{r4, r5, r6, lr}
    879c:	681d      	ldr	r5, [r3, #0]
    879e:	1c06      	adds	r6, r0, #0
    87a0:	1c0c      	adds	r4, r1, #0
    87a2:	2d00      	cmp	r5, #0
    87a4:	d005      	beq.n	87b2 <__swsetup_r+0x1a>
    87a6:	69ab      	ldr	r3, [r5, #24]
    87a8:	2b00      	cmp	r3, #0
    87aa:	d102      	bne.n	87b2 <__swsetup_r+0x1a>
    87ac:	1c28      	adds	r0, r5, #0
    87ae:	f000 f95f 	bl	8a70 <__sinit>
    87b2:	4b30      	ldr	r3, [pc, #192]	; (8874 <__swsetup_r+0xdc>)
    87b4:	429c      	cmp	r4, r3
    87b6:	d101      	bne.n	87bc <__swsetup_r+0x24>
    87b8:	686c      	ldr	r4, [r5, #4]
    87ba:	e008      	b.n	87ce <__swsetup_r+0x36>
    87bc:	4b2e      	ldr	r3, [pc, #184]	; (8878 <__swsetup_r+0xe0>)
    87be:	429c      	cmp	r4, r3
    87c0:	d101      	bne.n	87c6 <__swsetup_r+0x2e>
    87c2:	68ac      	ldr	r4, [r5, #8]
    87c4:	e003      	b.n	87ce <__swsetup_r+0x36>
    87c6:	4b2d      	ldr	r3, [pc, #180]	; (887c <__swsetup_r+0xe4>)
    87c8:	429c      	cmp	r4, r3
    87ca:	d100      	bne.n	87ce <__swsetup_r+0x36>
    87cc:	68ec      	ldr	r4, [r5, #12]
    87ce:	89a3      	ldrh	r3, [r4, #12]
    87d0:	b29a      	uxth	r2, r3
    87d2:	0711      	lsls	r1, r2, #28
    87d4:	d423      	bmi.n	881e <__swsetup_r+0x86>
    87d6:	06d1      	lsls	r1, r2, #27
    87d8:	d407      	bmi.n	87ea <__swsetup_r+0x52>
    87da:	2209      	movs	r2, #9
    87dc:	2001      	movs	r0, #1
    87de:	6032      	str	r2, [r6, #0]
    87e0:	3237      	adds	r2, #55	; 0x37
    87e2:	4313      	orrs	r3, r2
    87e4:	81a3      	strh	r3, [r4, #12]
    87e6:	4240      	negs	r0, r0
    87e8:	e040      	b.n	886c <__swsetup_r+0xd4>
    87ea:	0753      	lsls	r3, r2, #29
    87ec:	d513      	bpl.n	8816 <__swsetup_r+0x7e>
    87ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    87f0:	2900      	cmp	r1, #0
    87f2:	d008      	beq.n	8806 <__swsetup_r+0x6e>
    87f4:	1c23      	adds	r3, r4, #0
    87f6:	3344      	adds	r3, #68	; 0x44
    87f8:	4299      	cmp	r1, r3
    87fa:	d002      	beq.n	8802 <__swsetup_r+0x6a>
    87fc:	1c30      	adds	r0, r6, #0
    87fe:	f000 fa2b 	bl	8c58 <_free_r>
    8802:	2300      	movs	r3, #0
    8804:	6363      	str	r3, [r4, #52]	; 0x34
    8806:	2224      	movs	r2, #36	; 0x24
    8808:	89a3      	ldrh	r3, [r4, #12]
    880a:	4393      	bics	r3, r2
    880c:	81a3      	strh	r3, [r4, #12]
    880e:	2300      	movs	r3, #0
    8810:	6063      	str	r3, [r4, #4]
    8812:	6923      	ldr	r3, [r4, #16]
    8814:	6023      	str	r3, [r4, #0]
    8816:	2208      	movs	r2, #8
    8818:	89a3      	ldrh	r3, [r4, #12]
    881a:	4313      	orrs	r3, r2
    881c:	81a3      	strh	r3, [r4, #12]
    881e:	6923      	ldr	r3, [r4, #16]
    8820:	2b00      	cmp	r3, #0
    8822:	d10b      	bne.n	883c <__swsetup_r+0xa4>
    8824:	23a0      	movs	r3, #160	; 0xa0
    8826:	89a2      	ldrh	r2, [r4, #12]
    8828:	009b      	lsls	r3, r3, #2
    882a:	4013      	ands	r3, r2
    882c:	2280      	movs	r2, #128	; 0x80
    882e:	0092      	lsls	r2, r2, #2
    8830:	4293      	cmp	r3, r2
    8832:	d003      	beq.n	883c <__swsetup_r+0xa4>
    8834:	1c30      	adds	r0, r6, #0
    8836:	1c21      	adds	r1, r4, #0
    8838:	f000 f9ac 	bl	8b94 <__smakebuf_r>
    883c:	2301      	movs	r3, #1
    883e:	89a2      	ldrh	r2, [r4, #12]
    8840:	4013      	ands	r3, r2
    8842:	d005      	beq.n	8850 <__swsetup_r+0xb8>
    8844:	2300      	movs	r3, #0
    8846:	60a3      	str	r3, [r4, #8]
    8848:	6963      	ldr	r3, [r4, #20]
    884a:	425b      	negs	r3, r3
    884c:	61a3      	str	r3, [r4, #24]
    884e:	e003      	b.n	8858 <__swsetup_r+0xc0>
    8850:	0791      	lsls	r1, r2, #30
    8852:	d400      	bmi.n	8856 <__swsetup_r+0xbe>
    8854:	6963      	ldr	r3, [r4, #20]
    8856:	60a3      	str	r3, [r4, #8]
    8858:	2000      	movs	r0, #0
    885a:	6923      	ldr	r3, [r4, #16]
    885c:	4283      	cmp	r3, r0
    885e:	d105      	bne.n	886c <__swsetup_r+0xd4>
    8860:	0613      	lsls	r3, r2, #24
    8862:	d503      	bpl.n	886c <__swsetup_r+0xd4>
    8864:	2340      	movs	r3, #64	; 0x40
    8866:	431a      	orrs	r2, r3
    8868:	81a2      	strh	r2, [r4, #12]
    886a:	3801      	subs	r0, #1
    886c:	bd70      	pop	{r4, r5, r6, pc}
    886e:	46c0      	nop			; (mov r8, r8)
    8870:	200000a8 	.word	0x200000a8
    8874:	0000d6fc 	.word	0x0000d6fc
    8878:	0000d71c 	.word	0x0000d71c
    887c:	0000d73c 	.word	0x0000d73c

00008880 <__sflush_r>:
    8880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8882:	898a      	ldrh	r2, [r1, #12]
    8884:	1c05      	adds	r5, r0, #0
    8886:	1c0c      	adds	r4, r1, #0
    8888:	0713      	lsls	r3, r2, #28
    888a:	d45e      	bmi.n	894a <__sflush_r+0xca>
    888c:	684b      	ldr	r3, [r1, #4]
    888e:	2b00      	cmp	r3, #0
    8890:	dc02      	bgt.n	8898 <__sflush_r+0x18>
    8892:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    8894:	2b00      	cmp	r3, #0
    8896:	dd1a      	ble.n	88ce <__sflush_r+0x4e>
    8898:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    889a:	2f00      	cmp	r7, #0
    889c:	d017      	beq.n	88ce <__sflush_r+0x4e>
    889e:	2300      	movs	r3, #0
    88a0:	682e      	ldr	r6, [r5, #0]
    88a2:	602b      	str	r3, [r5, #0]
    88a4:	2380      	movs	r3, #128	; 0x80
    88a6:	015b      	lsls	r3, r3, #5
    88a8:	401a      	ands	r2, r3
    88aa:	d001      	beq.n	88b0 <__sflush_r+0x30>
    88ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
    88ae:	e015      	b.n	88dc <__sflush_r+0x5c>
    88b0:	1c28      	adds	r0, r5, #0
    88b2:	6a21      	ldr	r1, [r4, #32]
    88b4:	2301      	movs	r3, #1
    88b6:	47b8      	blx	r7
    88b8:	1c02      	adds	r2, r0, #0
    88ba:	1c43      	adds	r3, r0, #1
    88bc:	d10e      	bne.n	88dc <__sflush_r+0x5c>
    88be:	682b      	ldr	r3, [r5, #0]
    88c0:	2b00      	cmp	r3, #0
    88c2:	d00b      	beq.n	88dc <__sflush_r+0x5c>
    88c4:	2b1d      	cmp	r3, #29
    88c6:	d001      	beq.n	88cc <__sflush_r+0x4c>
    88c8:	2b16      	cmp	r3, #22
    88ca:	d102      	bne.n	88d2 <__sflush_r+0x52>
    88cc:	602e      	str	r6, [r5, #0]
    88ce:	2000      	movs	r0, #0
    88d0:	e05e      	b.n	8990 <__sflush_r+0x110>
    88d2:	2140      	movs	r1, #64	; 0x40
    88d4:	89a3      	ldrh	r3, [r4, #12]
    88d6:	430b      	orrs	r3, r1
    88d8:	81a3      	strh	r3, [r4, #12]
    88da:	e059      	b.n	8990 <__sflush_r+0x110>
    88dc:	89a3      	ldrh	r3, [r4, #12]
    88de:	075b      	lsls	r3, r3, #29
    88e0:	d506      	bpl.n	88f0 <__sflush_r+0x70>
    88e2:	6863      	ldr	r3, [r4, #4]
    88e4:	1ad2      	subs	r2, r2, r3
    88e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    88e8:	2b00      	cmp	r3, #0
    88ea:	d001      	beq.n	88f0 <__sflush_r+0x70>
    88ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
    88ee:	1ad2      	subs	r2, r2, r3
    88f0:	2300      	movs	r3, #0
    88f2:	1c28      	adds	r0, r5, #0
    88f4:	6a21      	ldr	r1, [r4, #32]
    88f6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    88f8:	47b8      	blx	r7
    88fa:	89a3      	ldrh	r3, [r4, #12]
    88fc:	1c42      	adds	r2, r0, #1
    88fe:	d106      	bne.n	890e <__sflush_r+0x8e>
    8900:	682a      	ldr	r2, [r5, #0]
    8902:	2a00      	cmp	r2, #0
    8904:	d003      	beq.n	890e <__sflush_r+0x8e>
    8906:	2a1d      	cmp	r2, #29
    8908:	d001      	beq.n	890e <__sflush_r+0x8e>
    890a:	2a16      	cmp	r2, #22
    890c:	d119      	bne.n	8942 <__sflush_r+0xc2>
    890e:	2200      	movs	r2, #0
    8910:	6062      	str	r2, [r4, #4]
    8912:	6922      	ldr	r2, [r4, #16]
    8914:	6022      	str	r2, [r4, #0]
    8916:	04db      	lsls	r3, r3, #19
    8918:	d505      	bpl.n	8926 <__sflush_r+0xa6>
    891a:	1c43      	adds	r3, r0, #1
    891c:	d102      	bne.n	8924 <__sflush_r+0xa4>
    891e:	682b      	ldr	r3, [r5, #0]
    8920:	2b00      	cmp	r3, #0
    8922:	d100      	bne.n	8926 <__sflush_r+0xa6>
    8924:	6560      	str	r0, [r4, #84]	; 0x54
    8926:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8928:	602e      	str	r6, [r5, #0]
    892a:	2900      	cmp	r1, #0
    892c:	d0cf      	beq.n	88ce <__sflush_r+0x4e>
    892e:	1c23      	adds	r3, r4, #0
    8930:	3344      	adds	r3, #68	; 0x44
    8932:	4299      	cmp	r1, r3
    8934:	d002      	beq.n	893c <__sflush_r+0xbc>
    8936:	1c28      	adds	r0, r5, #0
    8938:	f000 f98e 	bl	8c58 <_free_r>
    893c:	2000      	movs	r0, #0
    893e:	6360      	str	r0, [r4, #52]	; 0x34
    8940:	e026      	b.n	8990 <__sflush_r+0x110>
    8942:	2240      	movs	r2, #64	; 0x40
    8944:	4313      	orrs	r3, r2
    8946:	81a3      	strh	r3, [r4, #12]
    8948:	e022      	b.n	8990 <__sflush_r+0x110>
    894a:	690f      	ldr	r7, [r1, #16]
    894c:	2f00      	cmp	r7, #0
    894e:	d0be      	beq.n	88ce <__sflush_r+0x4e>
    8950:	680b      	ldr	r3, [r1, #0]
    8952:	600f      	str	r7, [r1, #0]
    8954:	1bdb      	subs	r3, r3, r7
    8956:	9301      	str	r3, [sp, #4]
    8958:	2300      	movs	r3, #0
    895a:	0792      	lsls	r2, r2, #30
    895c:	d100      	bne.n	8960 <__sflush_r+0xe0>
    895e:	694b      	ldr	r3, [r1, #20]
    8960:	60a3      	str	r3, [r4, #8]
    8962:	9b01      	ldr	r3, [sp, #4]
    8964:	2b00      	cmp	r3, #0
    8966:	ddb2      	ble.n	88ce <__sflush_r+0x4e>
    8968:	1c28      	adds	r0, r5, #0
    896a:	6a21      	ldr	r1, [r4, #32]
    896c:	1c3a      	adds	r2, r7, #0
    896e:	9b01      	ldr	r3, [sp, #4]
    8970:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    8972:	47b0      	blx	r6
    8974:	2800      	cmp	r0, #0
    8976:	dc06      	bgt.n	8986 <__sflush_r+0x106>
    8978:	2240      	movs	r2, #64	; 0x40
    897a:	2001      	movs	r0, #1
    897c:	89a3      	ldrh	r3, [r4, #12]
    897e:	4240      	negs	r0, r0
    8980:	4313      	orrs	r3, r2
    8982:	81a3      	strh	r3, [r4, #12]
    8984:	e004      	b.n	8990 <__sflush_r+0x110>
    8986:	9b01      	ldr	r3, [sp, #4]
    8988:	183f      	adds	r7, r7, r0
    898a:	1a1b      	subs	r3, r3, r0
    898c:	9301      	str	r3, [sp, #4]
    898e:	e7e8      	b.n	8962 <__sflush_r+0xe2>
    8990:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00008994 <_fflush_r>:
    8994:	b538      	push	{r3, r4, r5, lr}
    8996:	690b      	ldr	r3, [r1, #16]
    8998:	1c05      	adds	r5, r0, #0
    899a:	1c0c      	adds	r4, r1, #0
    899c:	2b00      	cmp	r3, #0
    899e:	d101      	bne.n	89a4 <_fflush_r+0x10>
    89a0:	2000      	movs	r0, #0
    89a2:	e01c      	b.n	89de <_fflush_r+0x4a>
    89a4:	2800      	cmp	r0, #0
    89a6:	d004      	beq.n	89b2 <_fflush_r+0x1e>
    89a8:	6983      	ldr	r3, [r0, #24]
    89aa:	2b00      	cmp	r3, #0
    89ac:	d101      	bne.n	89b2 <_fflush_r+0x1e>
    89ae:	f000 f85f 	bl	8a70 <__sinit>
    89b2:	4b0b      	ldr	r3, [pc, #44]	; (89e0 <_fflush_r+0x4c>)
    89b4:	429c      	cmp	r4, r3
    89b6:	d101      	bne.n	89bc <_fflush_r+0x28>
    89b8:	686c      	ldr	r4, [r5, #4]
    89ba:	e008      	b.n	89ce <_fflush_r+0x3a>
    89bc:	4b09      	ldr	r3, [pc, #36]	; (89e4 <_fflush_r+0x50>)
    89be:	429c      	cmp	r4, r3
    89c0:	d101      	bne.n	89c6 <_fflush_r+0x32>
    89c2:	68ac      	ldr	r4, [r5, #8]
    89c4:	e003      	b.n	89ce <_fflush_r+0x3a>
    89c6:	4b08      	ldr	r3, [pc, #32]	; (89e8 <_fflush_r+0x54>)
    89c8:	429c      	cmp	r4, r3
    89ca:	d100      	bne.n	89ce <_fflush_r+0x3a>
    89cc:	68ec      	ldr	r4, [r5, #12]
    89ce:	220c      	movs	r2, #12
    89d0:	5ea3      	ldrsh	r3, [r4, r2]
    89d2:	2b00      	cmp	r3, #0
    89d4:	d0e4      	beq.n	89a0 <_fflush_r+0xc>
    89d6:	1c28      	adds	r0, r5, #0
    89d8:	1c21      	adds	r1, r4, #0
    89da:	f7ff ff51 	bl	8880 <__sflush_r>
    89de:	bd38      	pop	{r3, r4, r5, pc}
    89e0:	0000d6fc 	.word	0x0000d6fc
    89e4:	0000d71c 	.word	0x0000d71c
    89e8:	0000d73c 	.word	0x0000d73c

000089ec <_cleanup_r>:
    89ec:	b508      	push	{r3, lr}
    89ee:	4902      	ldr	r1, [pc, #8]	; (89f8 <_cleanup_r+0xc>)
    89f0:	f000 f8ae 	bl	8b50 <_fwalk_reent>
    89f4:	bd08      	pop	{r3, pc}
    89f6:	46c0      	nop			; (mov r8, r8)
    89f8:	00008995 	.word	0x00008995

000089fc <std.isra.0>:
    89fc:	2300      	movs	r3, #0
    89fe:	b510      	push	{r4, lr}
    8a00:	1c04      	adds	r4, r0, #0
    8a02:	6003      	str	r3, [r0, #0]
    8a04:	6043      	str	r3, [r0, #4]
    8a06:	6083      	str	r3, [r0, #8]
    8a08:	8181      	strh	r1, [r0, #12]
    8a0a:	6643      	str	r3, [r0, #100]	; 0x64
    8a0c:	81c2      	strh	r2, [r0, #14]
    8a0e:	6103      	str	r3, [r0, #16]
    8a10:	6143      	str	r3, [r0, #20]
    8a12:	6183      	str	r3, [r0, #24]
    8a14:	1c19      	adds	r1, r3, #0
    8a16:	2208      	movs	r2, #8
    8a18:	305c      	adds	r0, #92	; 0x5c
    8a1a:	f7ff fcf7 	bl	840c <memset>
    8a1e:	4b05      	ldr	r3, [pc, #20]	; (8a34 <std.isra.0+0x38>)
    8a20:	6224      	str	r4, [r4, #32]
    8a22:	6263      	str	r3, [r4, #36]	; 0x24
    8a24:	4b04      	ldr	r3, [pc, #16]	; (8a38 <std.isra.0+0x3c>)
    8a26:	62a3      	str	r3, [r4, #40]	; 0x28
    8a28:	4b04      	ldr	r3, [pc, #16]	; (8a3c <std.isra.0+0x40>)
    8a2a:	62e3      	str	r3, [r4, #44]	; 0x2c
    8a2c:	4b04      	ldr	r3, [pc, #16]	; (8a40 <std.isra.0+0x44>)
    8a2e:	6323      	str	r3, [r4, #48]	; 0x30
    8a30:	bd10      	pop	{r4, pc}
    8a32:	46c0      	nop			; (mov r8, r8)
    8a34:	000093ad 	.word	0x000093ad
    8a38:	000093d5 	.word	0x000093d5
    8a3c:	0000940d 	.word	0x0000940d
    8a40:	00009439 	.word	0x00009439

00008a44 <__sfmoreglue>:
    8a44:	b570      	push	{r4, r5, r6, lr}
    8a46:	2568      	movs	r5, #104	; 0x68
    8a48:	1e4b      	subs	r3, r1, #1
    8a4a:	435d      	muls	r5, r3
    8a4c:	1c0e      	adds	r6, r1, #0
    8a4e:	1c29      	adds	r1, r5, #0
    8a50:	3174      	adds	r1, #116	; 0x74
    8a52:	f000 f947 	bl	8ce4 <_malloc_r>
    8a56:	1e04      	subs	r4, r0, #0
    8a58:	d008      	beq.n	8a6c <__sfmoreglue+0x28>
    8a5a:	2100      	movs	r1, #0
    8a5c:	1c2a      	adds	r2, r5, #0
    8a5e:	6001      	str	r1, [r0, #0]
    8a60:	6046      	str	r6, [r0, #4]
    8a62:	300c      	adds	r0, #12
    8a64:	60a0      	str	r0, [r4, #8]
    8a66:	3268      	adds	r2, #104	; 0x68
    8a68:	f7ff fcd0 	bl	840c <memset>
    8a6c:	1c20      	adds	r0, r4, #0
    8a6e:	bd70      	pop	{r4, r5, r6, pc}

00008a70 <__sinit>:
    8a70:	6983      	ldr	r3, [r0, #24]
    8a72:	b513      	push	{r0, r1, r4, lr}
    8a74:	2b00      	cmp	r3, #0
    8a76:	d128      	bne.n	8aca <__sinit+0x5a>
    8a78:	6483      	str	r3, [r0, #72]	; 0x48
    8a7a:	64c3      	str	r3, [r0, #76]	; 0x4c
    8a7c:	6503      	str	r3, [r0, #80]	; 0x50
    8a7e:	4b13      	ldr	r3, [pc, #76]	; (8acc <__sinit+0x5c>)
    8a80:	4a13      	ldr	r2, [pc, #76]	; (8ad0 <__sinit+0x60>)
    8a82:	681b      	ldr	r3, [r3, #0]
    8a84:	6282      	str	r2, [r0, #40]	; 0x28
    8a86:	9301      	str	r3, [sp, #4]
    8a88:	4298      	cmp	r0, r3
    8a8a:	d101      	bne.n	8a90 <__sinit+0x20>
    8a8c:	2301      	movs	r3, #1
    8a8e:	6183      	str	r3, [r0, #24]
    8a90:	1c04      	adds	r4, r0, #0
    8a92:	f000 f81f 	bl	8ad4 <__sfp>
    8a96:	6060      	str	r0, [r4, #4]
    8a98:	1c20      	adds	r0, r4, #0
    8a9a:	f000 f81b 	bl	8ad4 <__sfp>
    8a9e:	60a0      	str	r0, [r4, #8]
    8aa0:	1c20      	adds	r0, r4, #0
    8aa2:	f000 f817 	bl	8ad4 <__sfp>
    8aa6:	2104      	movs	r1, #4
    8aa8:	60e0      	str	r0, [r4, #12]
    8aaa:	2200      	movs	r2, #0
    8aac:	6860      	ldr	r0, [r4, #4]
    8aae:	f7ff ffa5 	bl	89fc <std.isra.0>
    8ab2:	68a0      	ldr	r0, [r4, #8]
    8ab4:	2109      	movs	r1, #9
    8ab6:	2201      	movs	r2, #1
    8ab8:	f7ff ffa0 	bl	89fc <std.isra.0>
    8abc:	68e0      	ldr	r0, [r4, #12]
    8abe:	2112      	movs	r1, #18
    8ac0:	2202      	movs	r2, #2
    8ac2:	f7ff ff9b 	bl	89fc <std.isra.0>
    8ac6:	2301      	movs	r3, #1
    8ac8:	61a3      	str	r3, [r4, #24]
    8aca:	bd13      	pop	{r0, r1, r4, pc}
    8acc:	0000d6f8 	.word	0x0000d6f8
    8ad0:	000089ed 	.word	0x000089ed

00008ad4 <__sfp>:
    8ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ad6:	4b1d      	ldr	r3, [pc, #116]	; (8b4c <__sfp+0x78>)
    8ad8:	1c06      	adds	r6, r0, #0
    8ada:	681d      	ldr	r5, [r3, #0]
    8adc:	69ab      	ldr	r3, [r5, #24]
    8ade:	2b00      	cmp	r3, #0
    8ae0:	d102      	bne.n	8ae8 <__sfp+0x14>
    8ae2:	1c28      	adds	r0, r5, #0
    8ae4:	f7ff ffc4 	bl	8a70 <__sinit>
    8ae8:	3548      	adds	r5, #72	; 0x48
    8aea:	68ac      	ldr	r4, [r5, #8]
    8aec:	686b      	ldr	r3, [r5, #4]
    8aee:	3b01      	subs	r3, #1
    8af0:	d405      	bmi.n	8afe <__sfp+0x2a>
    8af2:	220c      	movs	r2, #12
    8af4:	5ea7      	ldrsh	r7, [r4, r2]
    8af6:	2f00      	cmp	r7, #0
    8af8:	d010      	beq.n	8b1c <__sfp+0x48>
    8afa:	3468      	adds	r4, #104	; 0x68
    8afc:	e7f7      	b.n	8aee <__sfp+0x1a>
    8afe:	682b      	ldr	r3, [r5, #0]
    8b00:	2b00      	cmp	r3, #0
    8b02:	d106      	bne.n	8b12 <__sfp+0x3e>
    8b04:	1c30      	adds	r0, r6, #0
    8b06:	2104      	movs	r1, #4
    8b08:	f7ff ff9c 	bl	8a44 <__sfmoreglue>
    8b0c:	6028      	str	r0, [r5, #0]
    8b0e:	2800      	cmp	r0, #0
    8b10:	d001      	beq.n	8b16 <__sfp+0x42>
    8b12:	682d      	ldr	r5, [r5, #0]
    8b14:	e7e9      	b.n	8aea <__sfp+0x16>
    8b16:	230c      	movs	r3, #12
    8b18:	6033      	str	r3, [r6, #0]
    8b1a:	e016      	b.n	8b4a <__sfp+0x76>
    8b1c:	2301      	movs	r3, #1
    8b1e:	1c20      	adds	r0, r4, #0
    8b20:	425b      	negs	r3, r3
    8b22:	81e3      	strh	r3, [r4, #14]
    8b24:	3302      	adds	r3, #2
    8b26:	81a3      	strh	r3, [r4, #12]
    8b28:	6667      	str	r7, [r4, #100]	; 0x64
    8b2a:	6027      	str	r7, [r4, #0]
    8b2c:	60a7      	str	r7, [r4, #8]
    8b2e:	6067      	str	r7, [r4, #4]
    8b30:	6127      	str	r7, [r4, #16]
    8b32:	6167      	str	r7, [r4, #20]
    8b34:	61a7      	str	r7, [r4, #24]
    8b36:	305c      	adds	r0, #92	; 0x5c
    8b38:	1c39      	adds	r1, r7, #0
    8b3a:	2208      	movs	r2, #8
    8b3c:	f7ff fc66 	bl	840c <memset>
    8b40:	1c20      	adds	r0, r4, #0
    8b42:	6367      	str	r7, [r4, #52]	; 0x34
    8b44:	63a7      	str	r7, [r4, #56]	; 0x38
    8b46:	64a7      	str	r7, [r4, #72]	; 0x48
    8b48:	64e7      	str	r7, [r4, #76]	; 0x4c
    8b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b4c:	0000d6f8 	.word	0x0000d6f8

00008b50 <_fwalk_reent>:
    8b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8b52:	1c04      	adds	r4, r0, #0
    8b54:	1c07      	adds	r7, r0, #0
    8b56:	2600      	movs	r6, #0
    8b58:	9101      	str	r1, [sp, #4]
    8b5a:	3448      	adds	r4, #72	; 0x48
    8b5c:	2c00      	cmp	r4, #0
    8b5e:	d016      	beq.n	8b8e <_fwalk_reent+0x3e>
    8b60:	6863      	ldr	r3, [r4, #4]
    8b62:	68a5      	ldr	r5, [r4, #8]
    8b64:	9300      	str	r3, [sp, #0]
    8b66:	9b00      	ldr	r3, [sp, #0]
    8b68:	3b01      	subs	r3, #1
    8b6a:	9300      	str	r3, [sp, #0]
    8b6c:	d40d      	bmi.n	8b8a <_fwalk_reent+0x3a>
    8b6e:	89ab      	ldrh	r3, [r5, #12]
    8b70:	2b01      	cmp	r3, #1
    8b72:	d908      	bls.n	8b86 <_fwalk_reent+0x36>
    8b74:	220e      	movs	r2, #14
    8b76:	5eab      	ldrsh	r3, [r5, r2]
    8b78:	3301      	adds	r3, #1
    8b7a:	d004      	beq.n	8b86 <_fwalk_reent+0x36>
    8b7c:	1c38      	adds	r0, r7, #0
    8b7e:	1c29      	adds	r1, r5, #0
    8b80:	9b01      	ldr	r3, [sp, #4]
    8b82:	4798      	blx	r3
    8b84:	4306      	orrs	r6, r0
    8b86:	3568      	adds	r5, #104	; 0x68
    8b88:	e7ed      	b.n	8b66 <_fwalk_reent+0x16>
    8b8a:	6824      	ldr	r4, [r4, #0]
    8b8c:	e7e6      	b.n	8b5c <_fwalk_reent+0xc>
    8b8e:	1c30      	adds	r0, r6, #0
    8b90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00008b94 <__smakebuf_r>:
    8b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b96:	898b      	ldrh	r3, [r1, #12]
    8b98:	b091      	sub	sp, #68	; 0x44
    8b9a:	079b      	lsls	r3, r3, #30
    8b9c:	d506      	bpl.n	8bac <__smakebuf_r+0x18>
    8b9e:	1c0b      	adds	r3, r1, #0
    8ba0:	3347      	adds	r3, #71	; 0x47
    8ba2:	600b      	str	r3, [r1, #0]
    8ba4:	610b      	str	r3, [r1, #16]
    8ba6:	2301      	movs	r3, #1
    8ba8:	614b      	str	r3, [r1, #20]
    8baa:	e045      	b.n	8c38 <__smakebuf_r+0xa4>
    8bac:	1c0c      	adds	r4, r1, #0
    8bae:	230e      	movs	r3, #14
    8bb0:	5ec9      	ldrsh	r1, [r1, r3]
    8bb2:	1c06      	adds	r6, r0, #0
    8bb4:	2900      	cmp	r1, #0
    8bb6:	da04      	bge.n	8bc2 <__smakebuf_r+0x2e>
    8bb8:	2380      	movs	r3, #128	; 0x80
    8bba:	89a5      	ldrh	r5, [r4, #12]
    8bbc:	401d      	ands	r5, r3
    8bbe:	d110      	bne.n	8be2 <__smakebuf_r+0x4e>
    8bc0:	e00c      	b.n	8bdc <__smakebuf_r+0x48>
    8bc2:	aa01      	add	r2, sp, #4
    8bc4:	f000 fc64 	bl	9490 <_fstat_r>
    8bc8:	2800      	cmp	r0, #0
    8bca:	dbf5      	blt.n	8bb8 <__smakebuf_r+0x24>
    8bcc:	23f0      	movs	r3, #240	; 0xf0
    8bce:	9d02      	ldr	r5, [sp, #8]
    8bd0:	021b      	lsls	r3, r3, #8
    8bd2:	401d      	ands	r5, r3
    8bd4:	4b19      	ldr	r3, [pc, #100]	; (8c3c <__smakebuf_r+0xa8>)
    8bd6:	18ed      	adds	r5, r5, r3
    8bd8:	426b      	negs	r3, r5
    8bda:	415d      	adcs	r5, r3
    8bdc:	2780      	movs	r7, #128	; 0x80
    8bde:	00ff      	lsls	r7, r7, #3
    8be0:	e001      	b.n	8be6 <__smakebuf_r+0x52>
    8be2:	2500      	movs	r5, #0
    8be4:	2740      	movs	r7, #64	; 0x40
    8be6:	1c30      	adds	r0, r6, #0
    8be8:	1c39      	adds	r1, r7, #0
    8bea:	f000 f87b 	bl	8ce4 <_malloc_r>
    8bee:	2800      	cmp	r0, #0
    8bf0:	d10c      	bne.n	8c0c <__smakebuf_r+0x78>
    8bf2:	89a3      	ldrh	r3, [r4, #12]
    8bf4:	059a      	lsls	r2, r3, #22
    8bf6:	d41f      	bmi.n	8c38 <__smakebuf_r+0xa4>
    8bf8:	2202      	movs	r2, #2
    8bfa:	4313      	orrs	r3, r2
    8bfc:	81a3      	strh	r3, [r4, #12]
    8bfe:	1c23      	adds	r3, r4, #0
    8c00:	3347      	adds	r3, #71	; 0x47
    8c02:	6023      	str	r3, [r4, #0]
    8c04:	6123      	str	r3, [r4, #16]
    8c06:	2301      	movs	r3, #1
    8c08:	6163      	str	r3, [r4, #20]
    8c0a:	e015      	b.n	8c38 <__smakebuf_r+0xa4>
    8c0c:	2280      	movs	r2, #128	; 0x80
    8c0e:	4b0c      	ldr	r3, [pc, #48]	; (8c40 <__smakebuf_r+0xac>)
    8c10:	62b3      	str	r3, [r6, #40]	; 0x28
    8c12:	89a3      	ldrh	r3, [r4, #12]
    8c14:	6020      	str	r0, [r4, #0]
    8c16:	4313      	orrs	r3, r2
    8c18:	81a3      	strh	r3, [r4, #12]
    8c1a:	6120      	str	r0, [r4, #16]
    8c1c:	6167      	str	r7, [r4, #20]
    8c1e:	2d00      	cmp	r5, #0
    8c20:	d00a      	beq.n	8c38 <__smakebuf_r+0xa4>
    8c22:	230e      	movs	r3, #14
    8c24:	5ee1      	ldrsh	r1, [r4, r3]
    8c26:	1c30      	adds	r0, r6, #0
    8c28:	f000 fc44 	bl	94b4 <_isatty_r>
    8c2c:	2800      	cmp	r0, #0
    8c2e:	d003      	beq.n	8c38 <__smakebuf_r+0xa4>
    8c30:	2201      	movs	r2, #1
    8c32:	89a3      	ldrh	r3, [r4, #12]
    8c34:	4313      	orrs	r3, r2
    8c36:	81a3      	strh	r3, [r4, #12]
    8c38:	b011      	add	sp, #68	; 0x44
    8c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c3c:	ffffe000 	.word	0xffffe000
    8c40:	000089ed 	.word	0x000089ed

00008c44 <malloc>:
    8c44:	b508      	push	{r3, lr}
    8c46:	4b03      	ldr	r3, [pc, #12]	; (8c54 <malloc+0x10>)
    8c48:	1c01      	adds	r1, r0, #0
    8c4a:	6818      	ldr	r0, [r3, #0]
    8c4c:	f000 f84a 	bl	8ce4 <_malloc_r>
    8c50:	bd08      	pop	{r3, pc}
    8c52:	46c0      	nop			; (mov r8, r8)
    8c54:	200000a8 	.word	0x200000a8

00008c58 <_free_r>:
    8c58:	b530      	push	{r4, r5, lr}
    8c5a:	2900      	cmp	r1, #0
    8c5c:	d03e      	beq.n	8cdc <_free_r+0x84>
    8c5e:	3904      	subs	r1, #4
    8c60:	680b      	ldr	r3, [r1, #0]
    8c62:	2b00      	cmp	r3, #0
    8c64:	da00      	bge.n	8c68 <_free_r+0x10>
    8c66:	18c9      	adds	r1, r1, r3
    8c68:	4a1d      	ldr	r2, [pc, #116]	; (8ce0 <_free_r+0x88>)
    8c6a:	6813      	ldr	r3, [r2, #0]
    8c6c:	1c14      	adds	r4, r2, #0
    8c6e:	2b00      	cmp	r3, #0
    8c70:	d102      	bne.n	8c78 <_free_r+0x20>
    8c72:	604b      	str	r3, [r1, #4]
    8c74:	6011      	str	r1, [r2, #0]
    8c76:	e031      	b.n	8cdc <_free_r+0x84>
    8c78:	4299      	cmp	r1, r3
    8c7a:	d20d      	bcs.n	8c98 <_free_r+0x40>
    8c7c:	6808      	ldr	r0, [r1, #0]
    8c7e:	180a      	adds	r2, r1, r0
    8c80:	429a      	cmp	r2, r3
    8c82:	d103      	bne.n	8c8c <_free_r+0x34>
    8c84:	6813      	ldr	r3, [r2, #0]
    8c86:	18c3      	adds	r3, r0, r3
    8c88:	600b      	str	r3, [r1, #0]
    8c8a:	6853      	ldr	r3, [r2, #4]
    8c8c:	604b      	str	r3, [r1, #4]
    8c8e:	6021      	str	r1, [r4, #0]
    8c90:	e024      	b.n	8cdc <_free_r+0x84>
    8c92:	428a      	cmp	r2, r1
    8c94:	d803      	bhi.n	8c9e <_free_r+0x46>
    8c96:	1c13      	adds	r3, r2, #0
    8c98:	685a      	ldr	r2, [r3, #4]
    8c9a:	2a00      	cmp	r2, #0
    8c9c:	d1f9      	bne.n	8c92 <_free_r+0x3a>
    8c9e:	681d      	ldr	r5, [r3, #0]
    8ca0:	195c      	adds	r4, r3, r5
    8ca2:	428c      	cmp	r4, r1
    8ca4:	d10b      	bne.n	8cbe <_free_r+0x66>
    8ca6:	6809      	ldr	r1, [r1, #0]
    8ca8:	1869      	adds	r1, r5, r1
    8caa:	1858      	adds	r0, r3, r1
    8cac:	6019      	str	r1, [r3, #0]
    8cae:	4290      	cmp	r0, r2
    8cb0:	d114      	bne.n	8cdc <_free_r+0x84>
    8cb2:	6810      	ldr	r0, [r2, #0]
    8cb4:	6852      	ldr	r2, [r2, #4]
    8cb6:	1809      	adds	r1, r1, r0
    8cb8:	6019      	str	r1, [r3, #0]
    8cba:	605a      	str	r2, [r3, #4]
    8cbc:	e00e      	b.n	8cdc <_free_r+0x84>
    8cbe:	428c      	cmp	r4, r1
    8cc0:	d902      	bls.n	8cc8 <_free_r+0x70>
    8cc2:	230c      	movs	r3, #12
    8cc4:	6003      	str	r3, [r0, #0]
    8cc6:	e009      	b.n	8cdc <_free_r+0x84>
    8cc8:	6808      	ldr	r0, [r1, #0]
    8cca:	180c      	adds	r4, r1, r0
    8ccc:	4294      	cmp	r4, r2
    8cce:	d103      	bne.n	8cd8 <_free_r+0x80>
    8cd0:	6814      	ldr	r4, [r2, #0]
    8cd2:	6852      	ldr	r2, [r2, #4]
    8cd4:	1900      	adds	r0, r0, r4
    8cd6:	6008      	str	r0, [r1, #0]
    8cd8:	604a      	str	r2, [r1, #4]
    8cda:	6059      	str	r1, [r3, #4]
    8cdc:	bd30      	pop	{r4, r5, pc}
    8cde:	46c0      	nop			; (mov r8, r8)
    8ce0:	20000e04 	.word	0x20000e04

00008ce4 <_malloc_r>:
    8ce4:	2303      	movs	r3, #3
    8ce6:	b570      	push	{r4, r5, r6, lr}
    8ce8:	1ccc      	adds	r4, r1, #3
    8cea:	439c      	bics	r4, r3
    8cec:	3408      	adds	r4, #8
    8cee:	1c05      	adds	r5, r0, #0
    8cf0:	2c0c      	cmp	r4, #12
    8cf2:	d201      	bcs.n	8cf8 <_malloc_r+0x14>
    8cf4:	240c      	movs	r4, #12
    8cf6:	e005      	b.n	8d04 <_malloc_r+0x20>
    8cf8:	2c00      	cmp	r4, #0
    8cfa:	da03      	bge.n	8d04 <_malloc_r+0x20>
    8cfc:	230c      	movs	r3, #12
    8cfe:	2000      	movs	r0, #0
    8d00:	602b      	str	r3, [r5, #0]
    8d02:	e042      	b.n	8d8a <_malloc_r+0xa6>
    8d04:	428c      	cmp	r4, r1
    8d06:	d3f9      	bcc.n	8cfc <_malloc_r+0x18>
    8d08:	4a20      	ldr	r2, [pc, #128]	; (8d8c <_malloc_r+0xa8>)
    8d0a:	6813      	ldr	r3, [r2, #0]
    8d0c:	1c10      	adds	r0, r2, #0
    8d0e:	1c19      	adds	r1, r3, #0
    8d10:	2900      	cmp	r1, #0
    8d12:	d013      	beq.n	8d3c <_malloc_r+0x58>
    8d14:	680a      	ldr	r2, [r1, #0]
    8d16:	1b12      	subs	r2, r2, r4
    8d18:	d40d      	bmi.n	8d36 <_malloc_r+0x52>
    8d1a:	2a0b      	cmp	r2, #11
    8d1c:	d902      	bls.n	8d24 <_malloc_r+0x40>
    8d1e:	600a      	str	r2, [r1, #0]
    8d20:	188b      	adds	r3, r1, r2
    8d22:	e01f      	b.n	8d64 <_malloc_r+0x80>
    8d24:	428b      	cmp	r3, r1
    8d26:	d102      	bne.n	8d2e <_malloc_r+0x4a>
    8d28:	685a      	ldr	r2, [r3, #4]
    8d2a:	6002      	str	r2, [r0, #0]
    8d2c:	e01b      	b.n	8d66 <_malloc_r+0x82>
    8d2e:	684a      	ldr	r2, [r1, #4]
    8d30:	605a      	str	r2, [r3, #4]
    8d32:	1c0b      	adds	r3, r1, #0
    8d34:	e017      	b.n	8d66 <_malloc_r+0x82>
    8d36:	1c0b      	adds	r3, r1, #0
    8d38:	6849      	ldr	r1, [r1, #4]
    8d3a:	e7e9      	b.n	8d10 <_malloc_r+0x2c>
    8d3c:	4e14      	ldr	r6, [pc, #80]	; (8d90 <_malloc_r+0xac>)
    8d3e:	6833      	ldr	r3, [r6, #0]
    8d40:	2b00      	cmp	r3, #0
    8d42:	d103      	bne.n	8d4c <_malloc_r+0x68>
    8d44:	1c28      	adds	r0, r5, #0
    8d46:	f000 fb1f 	bl	9388 <_sbrk_r>
    8d4a:	6030      	str	r0, [r6, #0]
    8d4c:	1c28      	adds	r0, r5, #0
    8d4e:	1c21      	adds	r1, r4, #0
    8d50:	f000 fb1a 	bl	9388 <_sbrk_r>
    8d54:	1c03      	adds	r3, r0, #0
    8d56:	1c42      	adds	r2, r0, #1
    8d58:	d0d0      	beq.n	8cfc <_malloc_r+0x18>
    8d5a:	2203      	movs	r2, #3
    8d5c:	1cc6      	adds	r6, r0, #3
    8d5e:	4396      	bics	r6, r2
    8d60:	4286      	cmp	r6, r0
    8d62:	d10a      	bne.n	8d7a <_malloc_r+0x96>
    8d64:	601c      	str	r4, [r3, #0]
    8d66:	1c18      	adds	r0, r3, #0
    8d68:	2107      	movs	r1, #7
    8d6a:	300b      	adds	r0, #11
    8d6c:	1d1a      	adds	r2, r3, #4
    8d6e:	4388      	bics	r0, r1
    8d70:	1a82      	subs	r2, r0, r2
    8d72:	d00a      	beq.n	8d8a <_malloc_r+0xa6>
    8d74:	4251      	negs	r1, r2
    8d76:	5099      	str	r1, [r3, r2]
    8d78:	e007      	b.n	8d8a <_malloc_r+0xa6>
    8d7a:	1a31      	subs	r1, r6, r0
    8d7c:	1c28      	adds	r0, r5, #0
    8d7e:	f000 fb03 	bl	9388 <_sbrk_r>
    8d82:	1c43      	adds	r3, r0, #1
    8d84:	d0ba      	beq.n	8cfc <_malloc_r+0x18>
    8d86:	1c33      	adds	r3, r6, #0
    8d88:	e7ec      	b.n	8d64 <_malloc_r+0x80>
    8d8a:	bd70      	pop	{r4, r5, r6, pc}
    8d8c:	20000e04 	.word	0x20000e04
    8d90:	20000e00 	.word	0x20000e00

00008d94 <__sfputc_r>:
    8d94:	6893      	ldr	r3, [r2, #8]
    8d96:	b510      	push	{r4, lr}
    8d98:	3b01      	subs	r3, #1
    8d9a:	6093      	str	r3, [r2, #8]
    8d9c:	2b00      	cmp	r3, #0
    8d9e:	da05      	bge.n	8dac <__sfputc_r+0x18>
    8da0:	6994      	ldr	r4, [r2, #24]
    8da2:	42a3      	cmp	r3, r4
    8da4:	db08      	blt.n	8db8 <__sfputc_r+0x24>
    8da6:	b2cb      	uxtb	r3, r1
    8da8:	2b0a      	cmp	r3, #10
    8daa:	d005      	beq.n	8db8 <__sfputc_r+0x24>
    8dac:	6813      	ldr	r3, [r2, #0]
    8dae:	1c58      	adds	r0, r3, #1
    8db0:	6010      	str	r0, [r2, #0]
    8db2:	7019      	strb	r1, [r3, #0]
    8db4:	b2c8      	uxtb	r0, r1
    8db6:	e001      	b.n	8dbc <__sfputc_r+0x28>
    8db8:	f7ff fc96 	bl	86e8 <__swbuf_r>
    8dbc:	bd10      	pop	{r4, pc}

00008dbe <__sfputs_r>:
    8dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8dc0:	1c06      	adds	r6, r0, #0
    8dc2:	1c0f      	adds	r7, r1, #0
    8dc4:	1c14      	adds	r4, r2, #0
    8dc6:	18d5      	adds	r5, r2, r3
    8dc8:	42ac      	cmp	r4, r5
    8dca:	d008      	beq.n	8dde <__sfputs_r+0x20>
    8dcc:	7821      	ldrb	r1, [r4, #0]
    8dce:	1c30      	adds	r0, r6, #0
    8dd0:	1c3a      	adds	r2, r7, #0
    8dd2:	f7ff ffdf 	bl	8d94 <__sfputc_r>
    8dd6:	3401      	adds	r4, #1
    8dd8:	1c43      	adds	r3, r0, #1
    8dda:	d1f5      	bne.n	8dc8 <__sfputs_r+0xa>
    8ddc:	e000      	b.n	8de0 <__sfputs_r+0x22>
    8dde:	2000      	movs	r0, #0
    8de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008de4 <_vfiprintf_r>:
    8de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8de6:	b09f      	sub	sp, #124	; 0x7c
    8de8:	1c06      	adds	r6, r0, #0
    8dea:	1c0f      	adds	r7, r1, #0
    8dec:	9202      	str	r2, [sp, #8]
    8dee:	9305      	str	r3, [sp, #20]
    8df0:	2800      	cmp	r0, #0
    8df2:	d004      	beq.n	8dfe <_vfiprintf_r+0x1a>
    8df4:	6983      	ldr	r3, [r0, #24]
    8df6:	2b00      	cmp	r3, #0
    8df8:	d101      	bne.n	8dfe <_vfiprintf_r+0x1a>
    8dfa:	f7ff fe39 	bl	8a70 <__sinit>
    8dfe:	4b79      	ldr	r3, [pc, #484]	; (8fe4 <_vfiprintf_r+0x200>)
    8e00:	429f      	cmp	r7, r3
    8e02:	d101      	bne.n	8e08 <_vfiprintf_r+0x24>
    8e04:	6877      	ldr	r7, [r6, #4]
    8e06:	e008      	b.n	8e1a <_vfiprintf_r+0x36>
    8e08:	4b77      	ldr	r3, [pc, #476]	; (8fe8 <_vfiprintf_r+0x204>)
    8e0a:	429f      	cmp	r7, r3
    8e0c:	d101      	bne.n	8e12 <_vfiprintf_r+0x2e>
    8e0e:	68b7      	ldr	r7, [r6, #8]
    8e10:	e003      	b.n	8e1a <_vfiprintf_r+0x36>
    8e12:	4b76      	ldr	r3, [pc, #472]	; (8fec <_vfiprintf_r+0x208>)
    8e14:	429f      	cmp	r7, r3
    8e16:	d100      	bne.n	8e1a <_vfiprintf_r+0x36>
    8e18:	68f7      	ldr	r7, [r6, #12]
    8e1a:	89bb      	ldrh	r3, [r7, #12]
    8e1c:	071b      	lsls	r3, r3, #28
    8e1e:	d50a      	bpl.n	8e36 <_vfiprintf_r+0x52>
    8e20:	693b      	ldr	r3, [r7, #16]
    8e22:	2b00      	cmp	r3, #0
    8e24:	d007      	beq.n	8e36 <_vfiprintf_r+0x52>
    8e26:	2300      	movs	r3, #0
    8e28:	ad06      	add	r5, sp, #24
    8e2a:	616b      	str	r3, [r5, #20]
    8e2c:	3320      	adds	r3, #32
    8e2e:	766b      	strb	r3, [r5, #25]
    8e30:	3310      	adds	r3, #16
    8e32:	76ab      	strb	r3, [r5, #26]
    8e34:	e03d      	b.n	8eb2 <_vfiprintf_r+0xce>
    8e36:	1c30      	adds	r0, r6, #0
    8e38:	1c39      	adds	r1, r7, #0
    8e3a:	f7ff fcad 	bl	8798 <__swsetup_r>
    8e3e:	2800      	cmp	r0, #0
    8e40:	d0f1      	beq.n	8e26 <_vfiprintf_r+0x42>
    8e42:	2001      	movs	r0, #1
    8e44:	4240      	negs	r0, r0
    8e46:	e0ca      	b.n	8fde <_vfiprintf_r+0x1fa>
    8e48:	9a05      	ldr	r2, [sp, #20]
    8e4a:	1d11      	adds	r1, r2, #4
    8e4c:	6812      	ldr	r2, [r2, #0]
    8e4e:	9105      	str	r1, [sp, #20]
    8e50:	2a00      	cmp	r2, #0
    8e52:	db7e      	blt.n	8f52 <_vfiprintf_r+0x16e>
    8e54:	9209      	str	r2, [sp, #36]	; 0x24
    8e56:	3401      	adds	r4, #1
    8e58:	7823      	ldrb	r3, [r4, #0]
    8e5a:	2b2e      	cmp	r3, #46	; 0x2e
    8e5c:	d100      	bne.n	8e60 <_vfiprintf_r+0x7c>
    8e5e:	e089      	b.n	8f74 <_vfiprintf_r+0x190>
    8e60:	7821      	ldrb	r1, [r4, #0]
    8e62:	4863      	ldr	r0, [pc, #396]	; (8ff0 <_vfiprintf_r+0x20c>)
    8e64:	2203      	movs	r2, #3
    8e66:	f000 fb4b 	bl	9500 <memchr>
    8e6a:	2800      	cmp	r0, #0
    8e6c:	d008      	beq.n	8e80 <_vfiprintf_r+0x9c>
    8e6e:	4b60      	ldr	r3, [pc, #384]	; (8ff0 <_vfiprintf_r+0x20c>)
    8e70:	3401      	adds	r4, #1
    8e72:	1ac0      	subs	r0, r0, r3
    8e74:	2340      	movs	r3, #64	; 0x40
    8e76:	4083      	lsls	r3, r0
    8e78:	1c18      	adds	r0, r3, #0
    8e7a:	682b      	ldr	r3, [r5, #0]
    8e7c:	4318      	orrs	r0, r3
    8e7e:	6028      	str	r0, [r5, #0]
    8e80:	7821      	ldrb	r1, [r4, #0]
    8e82:	1c63      	adds	r3, r4, #1
    8e84:	485b      	ldr	r0, [pc, #364]	; (8ff4 <_vfiprintf_r+0x210>)
    8e86:	2206      	movs	r2, #6
    8e88:	9302      	str	r3, [sp, #8]
    8e8a:	7629      	strb	r1, [r5, #24]
    8e8c:	f000 fb38 	bl	9500 <memchr>
    8e90:	2800      	cmp	r0, #0
    8e92:	d100      	bne.n	8e96 <_vfiprintf_r+0xb2>
    8e94:	e091      	b.n	8fba <_vfiprintf_r+0x1d6>
    8e96:	4b58      	ldr	r3, [pc, #352]	; (8ff8 <_vfiprintf_r+0x214>)
    8e98:	2b00      	cmp	r3, #0
    8e9a:	d000      	beq.n	8e9e <_vfiprintf_r+0xba>
    8e9c:	e084      	b.n	8fa8 <_vfiprintf_r+0x1c4>
    8e9e:	2207      	movs	r2, #7
    8ea0:	9b05      	ldr	r3, [sp, #20]
    8ea2:	3307      	adds	r3, #7
    8ea4:	4393      	bics	r3, r2
    8ea6:	3308      	adds	r3, #8
    8ea8:	9305      	str	r3, [sp, #20]
    8eaa:	696b      	ldr	r3, [r5, #20]
    8eac:	9a03      	ldr	r2, [sp, #12]
    8eae:	189b      	adds	r3, r3, r2
    8eb0:	616b      	str	r3, [r5, #20]
    8eb2:	9c02      	ldr	r4, [sp, #8]
    8eb4:	7823      	ldrb	r3, [r4, #0]
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	d104      	bne.n	8ec4 <_vfiprintf_r+0xe0>
    8eba:	9b02      	ldr	r3, [sp, #8]
    8ebc:	1ae3      	subs	r3, r4, r3
    8ebe:	9304      	str	r3, [sp, #16]
    8ec0:	d011      	beq.n	8ee6 <_vfiprintf_r+0x102>
    8ec2:	e003      	b.n	8ecc <_vfiprintf_r+0xe8>
    8ec4:	2b25      	cmp	r3, #37	; 0x25
    8ec6:	d0f8      	beq.n	8eba <_vfiprintf_r+0xd6>
    8ec8:	3401      	adds	r4, #1
    8eca:	e7f3      	b.n	8eb4 <_vfiprintf_r+0xd0>
    8ecc:	9b04      	ldr	r3, [sp, #16]
    8ece:	1c30      	adds	r0, r6, #0
    8ed0:	1c39      	adds	r1, r7, #0
    8ed2:	9a02      	ldr	r2, [sp, #8]
    8ed4:	f7ff ff73 	bl	8dbe <__sfputs_r>
    8ed8:	1c43      	adds	r3, r0, #1
    8eda:	d07b      	beq.n	8fd4 <_vfiprintf_r+0x1f0>
    8edc:	696a      	ldr	r2, [r5, #20]
    8ede:	9b04      	ldr	r3, [sp, #16]
    8ee0:	4694      	mov	ip, r2
    8ee2:	4463      	add	r3, ip
    8ee4:	616b      	str	r3, [r5, #20]
    8ee6:	7823      	ldrb	r3, [r4, #0]
    8ee8:	2b00      	cmp	r3, #0
    8eea:	d073      	beq.n	8fd4 <_vfiprintf_r+0x1f0>
    8eec:	2201      	movs	r2, #1
    8eee:	2300      	movs	r3, #0
    8ef0:	4252      	negs	r2, r2
    8ef2:	606a      	str	r2, [r5, #4]
    8ef4:	a902      	add	r1, sp, #8
    8ef6:	3254      	adds	r2, #84	; 0x54
    8ef8:	1852      	adds	r2, r2, r1
    8efa:	3401      	adds	r4, #1
    8efc:	602b      	str	r3, [r5, #0]
    8efe:	60eb      	str	r3, [r5, #12]
    8f00:	60ab      	str	r3, [r5, #8]
    8f02:	7013      	strb	r3, [r2, #0]
    8f04:	65ab      	str	r3, [r5, #88]	; 0x58
    8f06:	7821      	ldrb	r1, [r4, #0]
    8f08:	483c      	ldr	r0, [pc, #240]	; (8ffc <_vfiprintf_r+0x218>)
    8f0a:	2205      	movs	r2, #5
    8f0c:	f000 faf8 	bl	9500 <memchr>
    8f10:	2800      	cmp	r0, #0
    8f12:	d009      	beq.n	8f28 <_vfiprintf_r+0x144>
    8f14:	4b39      	ldr	r3, [pc, #228]	; (8ffc <_vfiprintf_r+0x218>)
    8f16:	3401      	adds	r4, #1
    8f18:	1ac0      	subs	r0, r0, r3
    8f1a:	2301      	movs	r3, #1
    8f1c:	4083      	lsls	r3, r0
    8f1e:	1c18      	adds	r0, r3, #0
    8f20:	682b      	ldr	r3, [r5, #0]
    8f22:	4318      	orrs	r0, r3
    8f24:	6028      	str	r0, [r5, #0]
    8f26:	e7ee      	b.n	8f06 <_vfiprintf_r+0x122>
    8f28:	682b      	ldr	r3, [r5, #0]
    8f2a:	06da      	lsls	r2, r3, #27
    8f2c:	d504      	bpl.n	8f38 <_vfiprintf_r+0x154>
    8f2e:	2253      	movs	r2, #83	; 0x53
    8f30:	2120      	movs	r1, #32
    8f32:	a802      	add	r0, sp, #8
    8f34:	1812      	adds	r2, r2, r0
    8f36:	7011      	strb	r1, [r2, #0]
    8f38:	071a      	lsls	r2, r3, #28
    8f3a:	d504      	bpl.n	8f46 <_vfiprintf_r+0x162>
    8f3c:	2253      	movs	r2, #83	; 0x53
    8f3e:	212b      	movs	r1, #43	; 0x2b
    8f40:	a802      	add	r0, sp, #8
    8f42:	1812      	adds	r2, r2, r0
    8f44:	7011      	strb	r1, [r2, #0]
    8f46:	7822      	ldrb	r2, [r4, #0]
    8f48:	2a2a      	cmp	r2, #42	; 0x2a
    8f4a:	d100      	bne.n	8f4e <_vfiprintf_r+0x16a>
    8f4c:	e77c      	b.n	8e48 <_vfiprintf_r+0x64>
    8f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8f50:	e005      	b.n	8f5e <_vfiprintf_r+0x17a>
    8f52:	4252      	negs	r2, r2
    8f54:	60ea      	str	r2, [r5, #12]
    8f56:	2202      	movs	r2, #2
    8f58:	4313      	orrs	r3, r2
    8f5a:	602b      	str	r3, [r5, #0]
    8f5c:	e77b      	b.n	8e56 <_vfiprintf_r+0x72>
    8f5e:	7822      	ldrb	r2, [r4, #0]
    8f60:	3a30      	subs	r2, #48	; 0x30
    8f62:	2a09      	cmp	r2, #9
    8f64:	d804      	bhi.n	8f70 <_vfiprintf_r+0x18c>
    8f66:	210a      	movs	r1, #10
    8f68:	434b      	muls	r3, r1
    8f6a:	3401      	adds	r4, #1
    8f6c:	189b      	adds	r3, r3, r2
    8f6e:	e7f6      	b.n	8f5e <_vfiprintf_r+0x17a>
    8f70:	9309      	str	r3, [sp, #36]	; 0x24
    8f72:	e771      	b.n	8e58 <_vfiprintf_r+0x74>
    8f74:	7863      	ldrb	r3, [r4, #1]
    8f76:	2b2a      	cmp	r3, #42	; 0x2a
    8f78:	d109      	bne.n	8f8e <_vfiprintf_r+0x1aa>
    8f7a:	9b05      	ldr	r3, [sp, #20]
    8f7c:	3402      	adds	r4, #2
    8f7e:	1d1a      	adds	r2, r3, #4
    8f80:	681b      	ldr	r3, [r3, #0]
    8f82:	9205      	str	r2, [sp, #20]
    8f84:	2b00      	cmp	r3, #0
    8f86:	da0d      	bge.n	8fa4 <_vfiprintf_r+0x1c0>
    8f88:	2301      	movs	r3, #1
    8f8a:	425b      	negs	r3, r3
    8f8c:	e00a      	b.n	8fa4 <_vfiprintf_r+0x1c0>
    8f8e:	2300      	movs	r3, #0
    8f90:	3401      	adds	r4, #1
    8f92:	7822      	ldrb	r2, [r4, #0]
    8f94:	3a30      	subs	r2, #48	; 0x30
    8f96:	2a09      	cmp	r2, #9
    8f98:	d804      	bhi.n	8fa4 <_vfiprintf_r+0x1c0>
    8f9a:	210a      	movs	r1, #10
    8f9c:	434b      	muls	r3, r1
    8f9e:	3401      	adds	r4, #1
    8fa0:	189b      	adds	r3, r3, r2
    8fa2:	e7f6      	b.n	8f92 <_vfiprintf_r+0x1ae>
    8fa4:	9307      	str	r3, [sp, #28]
    8fa6:	e75b      	b.n	8e60 <_vfiprintf_r+0x7c>
    8fa8:	ab05      	add	r3, sp, #20
    8faa:	9300      	str	r3, [sp, #0]
    8fac:	1c30      	adds	r0, r6, #0
    8fae:	1c29      	adds	r1, r5, #0
    8fb0:	1c3a      	adds	r2, r7, #0
    8fb2:	4b13      	ldr	r3, [pc, #76]	; (9000 <_vfiprintf_r+0x21c>)
    8fb4:	e000      	b.n	8fb8 <_vfiprintf_r+0x1d4>
    8fb6:	bf00      	nop
    8fb8:	e007      	b.n	8fca <_vfiprintf_r+0x1e6>
    8fba:	ab05      	add	r3, sp, #20
    8fbc:	9300      	str	r3, [sp, #0]
    8fbe:	1c30      	adds	r0, r6, #0
    8fc0:	1c29      	adds	r1, r5, #0
    8fc2:	1c3a      	adds	r2, r7, #0
    8fc4:	4b0e      	ldr	r3, [pc, #56]	; (9000 <_vfiprintf_r+0x21c>)
    8fc6:	f000 f88b 	bl	90e0 <_printf_i>
    8fca:	9003      	str	r0, [sp, #12]
    8fcc:	9b03      	ldr	r3, [sp, #12]
    8fce:	3301      	adds	r3, #1
    8fd0:	d000      	beq.n	8fd4 <_vfiprintf_r+0x1f0>
    8fd2:	e76a      	b.n	8eaa <_vfiprintf_r+0xc6>
    8fd4:	89bb      	ldrh	r3, [r7, #12]
    8fd6:	065b      	lsls	r3, r3, #25
    8fd8:	d500      	bpl.n	8fdc <_vfiprintf_r+0x1f8>
    8fda:	e732      	b.n	8e42 <_vfiprintf_r+0x5e>
    8fdc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8fde:	b01f      	add	sp, #124	; 0x7c
    8fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fe2:	46c0      	nop			; (mov r8, r8)
    8fe4:	0000d6fc 	.word	0x0000d6fc
    8fe8:	0000d71c 	.word	0x0000d71c
    8fec:	0000d73c 	.word	0x0000d73c
    8ff0:	0000d762 	.word	0x0000d762
    8ff4:	0000d766 	.word	0x0000d766
    8ff8:	00000000 	.word	0x00000000
    8ffc:	0000d75c 	.word	0x0000d75c
    9000:	00008dbf 	.word	0x00008dbf

00009004 <_printf_common>:
    9004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9006:	1c17      	adds	r7, r2, #0
    9008:	9301      	str	r3, [sp, #4]
    900a:	690a      	ldr	r2, [r1, #16]
    900c:	688b      	ldr	r3, [r1, #8]
    900e:	9000      	str	r0, [sp, #0]
    9010:	1c0c      	adds	r4, r1, #0
    9012:	4293      	cmp	r3, r2
    9014:	da00      	bge.n	9018 <_printf_common+0x14>
    9016:	1c13      	adds	r3, r2, #0
    9018:	1c22      	adds	r2, r4, #0
    901a:	603b      	str	r3, [r7, #0]
    901c:	3243      	adds	r2, #67	; 0x43
    901e:	7812      	ldrb	r2, [r2, #0]
    9020:	2a00      	cmp	r2, #0
    9022:	d001      	beq.n	9028 <_printf_common+0x24>
    9024:	3301      	adds	r3, #1
    9026:	603b      	str	r3, [r7, #0]
    9028:	6823      	ldr	r3, [r4, #0]
    902a:	069b      	lsls	r3, r3, #26
    902c:	d502      	bpl.n	9034 <_printf_common+0x30>
    902e:	683b      	ldr	r3, [r7, #0]
    9030:	3302      	adds	r3, #2
    9032:	603b      	str	r3, [r7, #0]
    9034:	2506      	movs	r5, #6
    9036:	6823      	ldr	r3, [r4, #0]
    9038:	401d      	ands	r5, r3
    903a:	d01e      	beq.n	907a <_printf_common+0x76>
    903c:	1c23      	adds	r3, r4, #0
    903e:	3343      	adds	r3, #67	; 0x43
    9040:	781b      	ldrb	r3, [r3, #0]
    9042:	1e5a      	subs	r2, r3, #1
    9044:	4193      	sbcs	r3, r2
    9046:	6822      	ldr	r2, [r4, #0]
    9048:	0692      	lsls	r2, r2, #26
    904a:	d51c      	bpl.n	9086 <_printf_common+0x82>
    904c:	2030      	movs	r0, #48	; 0x30
    904e:	18e1      	adds	r1, r4, r3
    9050:	3140      	adds	r1, #64	; 0x40
    9052:	70c8      	strb	r0, [r1, #3]
    9054:	1c21      	adds	r1, r4, #0
    9056:	1c5a      	adds	r2, r3, #1
    9058:	3145      	adds	r1, #69	; 0x45
    905a:	7809      	ldrb	r1, [r1, #0]
    905c:	18a2      	adds	r2, r4, r2
    905e:	3240      	adds	r2, #64	; 0x40
    9060:	3302      	adds	r3, #2
    9062:	70d1      	strb	r1, [r2, #3]
    9064:	e00f      	b.n	9086 <_printf_common+0x82>
    9066:	1c22      	adds	r2, r4, #0
    9068:	2301      	movs	r3, #1
    906a:	9800      	ldr	r0, [sp, #0]
    906c:	9901      	ldr	r1, [sp, #4]
    906e:	3219      	adds	r2, #25
    9070:	9e08      	ldr	r6, [sp, #32]
    9072:	47b0      	blx	r6
    9074:	1c43      	adds	r3, r0, #1
    9076:	d00e      	beq.n	9096 <_printf_common+0x92>
    9078:	3501      	adds	r5, #1
    907a:	68e3      	ldr	r3, [r4, #12]
    907c:	683a      	ldr	r2, [r7, #0]
    907e:	1a9b      	subs	r3, r3, r2
    9080:	429d      	cmp	r5, r3
    9082:	dbf0      	blt.n	9066 <_printf_common+0x62>
    9084:	e7da      	b.n	903c <_printf_common+0x38>
    9086:	1c22      	adds	r2, r4, #0
    9088:	9800      	ldr	r0, [sp, #0]
    908a:	9901      	ldr	r1, [sp, #4]
    908c:	3243      	adds	r2, #67	; 0x43
    908e:	9d08      	ldr	r5, [sp, #32]
    9090:	47a8      	blx	r5
    9092:	1c43      	adds	r3, r0, #1
    9094:	d102      	bne.n	909c <_printf_common+0x98>
    9096:	2001      	movs	r0, #1
    9098:	4240      	negs	r0, r0
    909a:	e020      	b.n	90de <_printf_common+0xda>
    909c:	2306      	movs	r3, #6
    909e:	6820      	ldr	r0, [r4, #0]
    90a0:	68e1      	ldr	r1, [r4, #12]
    90a2:	683a      	ldr	r2, [r7, #0]
    90a4:	4003      	ands	r3, r0
    90a6:	2500      	movs	r5, #0
    90a8:	2b04      	cmp	r3, #4
    90aa:	d103      	bne.n	90b4 <_printf_common+0xb0>
    90ac:	1a8d      	subs	r5, r1, r2
    90ae:	43eb      	mvns	r3, r5
    90b0:	17db      	asrs	r3, r3, #31
    90b2:	401d      	ands	r5, r3
    90b4:	68a3      	ldr	r3, [r4, #8]
    90b6:	6922      	ldr	r2, [r4, #16]
    90b8:	4293      	cmp	r3, r2
    90ba:	dd01      	ble.n	90c0 <_printf_common+0xbc>
    90bc:	1a9b      	subs	r3, r3, r2
    90be:	18ed      	adds	r5, r5, r3
    90c0:	2700      	movs	r7, #0
    90c2:	42af      	cmp	r7, r5
    90c4:	da0a      	bge.n	90dc <_printf_common+0xd8>
    90c6:	1c22      	adds	r2, r4, #0
    90c8:	2301      	movs	r3, #1
    90ca:	9800      	ldr	r0, [sp, #0]
    90cc:	9901      	ldr	r1, [sp, #4]
    90ce:	321a      	adds	r2, #26
    90d0:	9e08      	ldr	r6, [sp, #32]
    90d2:	47b0      	blx	r6
    90d4:	1c43      	adds	r3, r0, #1
    90d6:	d0de      	beq.n	9096 <_printf_common+0x92>
    90d8:	3701      	adds	r7, #1
    90da:	e7f2      	b.n	90c2 <_printf_common+0xbe>
    90dc:	2000      	movs	r0, #0
    90de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000090e0 <_printf_i>:
    90e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    90e2:	b08b      	sub	sp, #44	; 0x2c
    90e4:	9206      	str	r2, [sp, #24]
    90e6:	1c0a      	adds	r2, r1, #0
    90e8:	3243      	adds	r2, #67	; 0x43
    90ea:	9307      	str	r3, [sp, #28]
    90ec:	9005      	str	r0, [sp, #20]
    90ee:	9204      	str	r2, [sp, #16]
    90f0:	7e0a      	ldrb	r2, [r1, #24]
    90f2:	1c0c      	adds	r4, r1, #0
    90f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    90f6:	2a6e      	cmp	r2, #110	; 0x6e
    90f8:	d100      	bne.n	90fc <_printf_i+0x1c>
    90fa:	e0a8      	b.n	924e <_printf_i+0x16e>
    90fc:	d811      	bhi.n	9122 <_printf_i+0x42>
    90fe:	2a63      	cmp	r2, #99	; 0x63
    9100:	d022      	beq.n	9148 <_printf_i+0x68>
    9102:	d809      	bhi.n	9118 <_printf_i+0x38>
    9104:	2a00      	cmp	r2, #0
    9106:	d100      	bne.n	910a <_printf_i+0x2a>
    9108:	e0b2      	b.n	9270 <_printf_i+0x190>
    910a:	2a58      	cmp	r2, #88	; 0x58
    910c:	d000      	beq.n	9110 <_printf_i+0x30>
    910e:	e0c2      	b.n	9296 <_printf_i+0x1b6>
    9110:	3145      	adds	r1, #69	; 0x45
    9112:	700a      	strb	r2, [r1, #0]
    9114:	4a7c      	ldr	r2, [pc, #496]	; (9308 <_printf_i+0x228>)
    9116:	e04f      	b.n	91b8 <_printf_i+0xd8>
    9118:	2a64      	cmp	r2, #100	; 0x64
    911a:	d01d      	beq.n	9158 <_printf_i+0x78>
    911c:	2a69      	cmp	r2, #105	; 0x69
    911e:	d01b      	beq.n	9158 <_printf_i+0x78>
    9120:	e0b9      	b.n	9296 <_printf_i+0x1b6>
    9122:	2a73      	cmp	r2, #115	; 0x73
    9124:	d100      	bne.n	9128 <_printf_i+0x48>
    9126:	e0a7      	b.n	9278 <_printf_i+0x198>
    9128:	d809      	bhi.n	913e <_printf_i+0x5e>
    912a:	2a6f      	cmp	r2, #111	; 0x6f
    912c:	d029      	beq.n	9182 <_printf_i+0xa2>
    912e:	2a70      	cmp	r2, #112	; 0x70
    9130:	d000      	beq.n	9134 <_printf_i+0x54>
    9132:	e0b0      	b.n	9296 <_printf_i+0x1b6>
    9134:	2220      	movs	r2, #32
    9136:	6809      	ldr	r1, [r1, #0]
    9138:	430a      	orrs	r2, r1
    913a:	6022      	str	r2, [r4, #0]
    913c:	e037      	b.n	91ae <_printf_i+0xce>
    913e:	2a75      	cmp	r2, #117	; 0x75
    9140:	d01f      	beq.n	9182 <_printf_i+0xa2>
    9142:	2a78      	cmp	r2, #120	; 0x78
    9144:	d033      	beq.n	91ae <_printf_i+0xce>
    9146:	e0a6      	b.n	9296 <_printf_i+0x1b6>
    9148:	1c0e      	adds	r6, r1, #0
    914a:	681a      	ldr	r2, [r3, #0]
    914c:	3642      	adds	r6, #66	; 0x42
    914e:	1d11      	adds	r1, r2, #4
    9150:	6019      	str	r1, [r3, #0]
    9152:	6813      	ldr	r3, [r2, #0]
    9154:	7033      	strb	r3, [r6, #0]
    9156:	e0a1      	b.n	929c <_printf_i+0x1bc>
    9158:	6821      	ldr	r1, [r4, #0]
    915a:	681a      	ldr	r2, [r3, #0]
    915c:	0608      	lsls	r0, r1, #24
    915e:	d406      	bmi.n	916e <_printf_i+0x8e>
    9160:	0649      	lsls	r1, r1, #25
    9162:	d504      	bpl.n	916e <_printf_i+0x8e>
    9164:	1d11      	adds	r1, r2, #4
    9166:	6019      	str	r1, [r3, #0]
    9168:	2300      	movs	r3, #0
    916a:	5ed5      	ldrsh	r5, [r2, r3]
    916c:	e002      	b.n	9174 <_printf_i+0x94>
    916e:	1d11      	adds	r1, r2, #4
    9170:	6019      	str	r1, [r3, #0]
    9172:	6815      	ldr	r5, [r2, #0]
    9174:	2d00      	cmp	r5, #0
    9176:	da3b      	bge.n	91f0 <_printf_i+0x110>
    9178:	232d      	movs	r3, #45	; 0x2d
    917a:	9a04      	ldr	r2, [sp, #16]
    917c:	426d      	negs	r5, r5
    917e:	7013      	strb	r3, [r2, #0]
    9180:	e036      	b.n	91f0 <_printf_i+0x110>
    9182:	6821      	ldr	r1, [r4, #0]
    9184:	681a      	ldr	r2, [r3, #0]
    9186:	0608      	lsls	r0, r1, #24
    9188:	d406      	bmi.n	9198 <_printf_i+0xb8>
    918a:	0649      	lsls	r1, r1, #25
    918c:	d504      	bpl.n	9198 <_printf_i+0xb8>
    918e:	6815      	ldr	r5, [r2, #0]
    9190:	1d11      	adds	r1, r2, #4
    9192:	6019      	str	r1, [r3, #0]
    9194:	b2ad      	uxth	r5, r5
    9196:	e002      	b.n	919e <_printf_i+0xbe>
    9198:	1d11      	adds	r1, r2, #4
    919a:	6019      	str	r1, [r3, #0]
    919c:	6815      	ldr	r5, [r2, #0]
    919e:	4b5a      	ldr	r3, [pc, #360]	; (9308 <_printf_i+0x228>)
    91a0:	7e22      	ldrb	r2, [r4, #24]
    91a2:	9303      	str	r3, [sp, #12]
    91a4:	270a      	movs	r7, #10
    91a6:	2a6f      	cmp	r2, #111	; 0x6f
    91a8:	d11d      	bne.n	91e6 <_printf_i+0x106>
    91aa:	2708      	movs	r7, #8
    91ac:	e01b      	b.n	91e6 <_printf_i+0x106>
    91ae:	1c22      	adds	r2, r4, #0
    91b0:	2178      	movs	r1, #120	; 0x78
    91b2:	3245      	adds	r2, #69	; 0x45
    91b4:	7011      	strb	r1, [r2, #0]
    91b6:	4a55      	ldr	r2, [pc, #340]	; (930c <_printf_i+0x22c>)
    91b8:	6819      	ldr	r1, [r3, #0]
    91ba:	9203      	str	r2, [sp, #12]
    91bc:	1d08      	adds	r0, r1, #4
    91be:	6822      	ldr	r2, [r4, #0]
    91c0:	6018      	str	r0, [r3, #0]
    91c2:	680d      	ldr	r5, [r1, #0]
    91c4:	0610      	lsls	r0, r2, #24
    91c6:	d402      	bmi.n	91ce <_printf_i+0xee>
    91c8:	0650      	lsls	r0, r2, #25
    91ca:	d500      	bpl.n	91ce <_printf_i+0xee>
    91cc:	b2ad      	uxth	r5, r5
    91ce:	07d3      	lsls	r3, r2, #31
    91d0:	d502      	bpl.n	91d8 <_printf_i+0xf8>
    91d2:	2320      	movs	r3, #32
    91d4:	431a      	orrs	r2, r3
    91d6:	6022      	str	r2, [r4, #0]
    91d8:	2710      	movs	r7, #16
    91da:	2d00      	cmp	r5, #0
    91dc:	d103      	bne.n	91e6 <_printf_i+0x106>
    91de:	2320      	movs	r3, #32
    91e0:	6822      	ldr	r2, [r4, #0]
    91e2:	439a      	bics	r2, r3
    91e4:	6022      	str	r2, [r4, #0]
    91e6:	1c23      	adds	r3, r4, #0
    91e8:	2200      	movs	r2, #0
    91ea:	3343      	adds	r3, #67	; 0x43
    91ec:	701a      	strb	r2, [r3, #0]
    91ee:	e002      	b.n	91f6 <_printf_i+0x116>
    91f0:	270a      	movs	r7, #10
    91f2:	4b45      	ldr	r3, [pc, #276]	; (9308 <_printf_i+0x228>)
    91f4:	9303      	str	r3, [sp, #12]
    91f6:	6863      	ldr	r3, [r4, #4]
    91f8:	60a3      	str	r3, [r4, #8]
    91fa:	2b00      	cmp	r3, #0
    91fc:	db03      	blt.n	9206 <_printf_i+0x126>
    91fe:	2204      	movs	r2, #4
    9200:	6821      	ldr	r1, [r4, #0]
    9202:	4391      	bics	r1, r2
    9204:	6021      	str	r1, [r4, #0]
    9206:	2d00      	cmp	r5, #0
    9208:	d102      	bne.n	9210 <_printf_i+0x130>
    920a:	9e04      	ldr	r6, [sp, #16]
    920c:	2b00      	cmp	r3, #0
    920e:	d00e      	beq.n	922e <_printf_i+0x14e>
    9210:	9e04      	ldr	r6, [sp, #16]
    9212:	1c28      	adds	r0, r5, #0
    9214:	1c39      	adds	r1, r7, #0
    9216:	f7ff f885 	bl	8324 <__aeabi_uidivmod>
    921a:	9b03      	ldr	r3, [sp, #12]
    921c:	3e01      	subs	r6, #1
    921e:	5c5b      	ldrb	r3, [r3, r1]
    9220:	1c28      	adds	r0, r5, #0
    9222:	7033      	strb	r3, [r6, #0]
    9224:	1c39      	adds	r1, r7, #0
    9226:	f7fe fff7 	bl	8218 <__aeabi_uidiv>
    922a:	1e05      	subs	r5, r0, #0
    922c:	d1f1      	bne.n	9212 <_printf_i+0x132>
    922e:	2f08      	cmp	r7, #8
    9230:	d109      	bne.n	9246 <_printf_i+0x166>
    9232:	6823      	ldr	r3, [r4, #0]
    9234:	07db      	lsls	r3, r3, #31
    9236:	d506      	bpl.n	9246 <_printf_i+0x166>
    9238:	6863      	ldr	r3, [r4, #4]
    923a:	6922      	ldr	r2, [r4, #16]
    923c:	4293      	cmp	r3, r2
    923e:	dc02      	bgt.n	9246 <_printf_i+0x166>
    9240:	2330      	movs	r3, #48	; 0x30
    9242:	3e01      	subs	r6, #1
    9244:	7033      	strb	r3, [r6, #0]
    9246:	9b04      	ldr	r3, [sp, #16]
    9248:	1b9b      	subs	r3, r3, r6
    924a:	6123      	str	r3, [r4, #16]
    924c:	e02b      	b.n	92a6 <_printf_i+0x1c6>
    924e:	6809      	ldr	r1, [r1, #0]
    9250:	681a      	ldr	r2, [r3, #0]
    9252:	0608      	lsls	r0, r1, #24
    9254:	d407      	bmi.n	9266 <_printf_i+0x186>
    9256:	0649      	lsls	r1, r1, #25
    9258:	d505      	bpl.n	9266 <_printf_i+0x186>
    925a:	1d11      	adds	r1, r2, #4
    925c:	6019      	str	r1, [r3, #0]
    925e:	6813      	ldr	r3, [r2, #0]
    9260:	8aa2      	ldrh	r2, [r4, #20]
    9262:	801a      	strh	r2, [r3, #0]
    9264:	e004      	b.n	9270 <_printf_i+0x190>
    9266:	1d11      	adds	r1, r2, #4
    9268:	6019      	str	r1, [r3, #0]
    926a:	6813      	ldr	r3, [r2, #0]
    926c:	6962      	ldr	r2, [r4, #20]
    926e:	601a      	str	r2, [r3, #0]
    9270:	2300      	movs	r3, #0
    9272:	9e04      	ldr	r6, [sp, #16]
    9274:	6123      	str	r3, [r4, #16]
    9276:	e016      	b.n	92a6 <_printf_i+0x1c6>
    9278:	681a      	ldr	r2, [r3, #0]
    927a:	1d11      	adds	r1, r2, #4
    927c:	6019      	str	r1, [r3, #0]
    927e:	6816      	ldr	r6, [r2, #0]
    9280:	2100      	movs	r1, #0
    9282:	1c30      	adds	r0, r6, #0
    9284:	6862      	ldr	r2, [r4, #4]
    9286:	f000 f93b 	bl	9500 <memchr>
    928a:	2800      	cmp	r0, #0
    928c:	d001      	beq.n	9292 <_printf_i+0x1b2>
    928e:	1b80      	subs	r0, r0, r6
    9290:	6060      	str	r0, [r4, #4]
    9292:	6863      	ldr	r3, [r4, #4]
    9294:	e003      	b.n	929e <_printf_i+0x1be>
    9296:	1c26      	adds	r6, r4, #0
    9298:	3642      	adds	r6, #66	; 0x42
    929a:	7032      	strb	r2, [r6, #0]
    929c:	2301      	movs	r3, #1
    929e:	6123      	str	r3, [r4, #16]
    92a0:	2300      	movs	r3, #0
    92a2:	9a04      	ldr	r2, [sp, #16]
    92a4:	7013      	strb	r3, [r2, #0]
    92a6:	9b07      	ldr	r3, [sp, #28]
    92a8:	9805      	ldr	r0, [sp, #20]
    92aa:	9300      	str	r3, [sp, #0]
    92ac:	1c21      	adds	r1, r4, #0
    92ae:	9b06      	ldr	r3, [sp, #24]
    92b0:	aa09      	add	r2, sp, #36	; 0x24
    92b2:	f7ff fea7 	bl	9004 <_printf_common>
    92b6:	1c43      	adds	r3, r0, #1
    92b8:	d102      	bne.n	92c0 <_printf_i+0x1e0>
    92ba:	2001      	movs	r0, #1
    92bc:	4240      	negs	r0, r0
    92be:	e021      	b.n	9304 <_printf_i+0x224>
    92c0:	6923      	ldr	r3, [r4, #16]
    92c2:	9805      	ldr	r0, [sp, #20]
    92c4:	9906      	ldr	r1, [sp, #24]
    92c6:	1c32      	adds	r2, r6, #0
    92c8:	9d07      	ldr	r5, [sp, #28]
    92ca:	47a8      	blx	r5
    92cc:	1c43      	adds	r3, r0, #1
    92ce:	d0f4      	beq.n	92ba <_printf_i+0x1da>
    92d0:	6823      	ldr	r3, [r4, #0]
    92d2:	079b      	lsls	r3, r3, #30
    92d4:	d405      	bmi.n	92e2 <_printf_i+0x202>
    92d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    92d8:	68e0      	ldr	r0, [r4, #12]
    92da:	4298      	cmp	r0, r3
    92dc:	da12      	bge.n	9304 <_printf_i+0x224>
    92de:	1c18      	adds	r0, r3, #0
    92e0:	e010      	b.n	9304 <_printf_i+0x224>
    92e2:	2500      	movs	r5, #0
    92e4:	68e3      	ldr	r3, [r4, #12]
    92e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    92e8:	1a9b      	subs	r3, r3, r2
    92ea:	429d      	cmp	r5, r3
    92ec:	daf3      	bge.n	92d6 <_printf_i+0x1f6>
    92ee:	1c22      	adds	r2, r4, #0
    92f0:	2301      	movs	r3, #1
    92f2:	9805      	ldr	r0, [sp, #20]
    92f4:	9906      	ldr	r1, [sp, #24]
    92f6:	3219      	adds	r2, #25
    92f8:	9e07      	ldr	r6, [sp, #28]
    92fa:	47b0      	blx	r6
    92fc:	1c43      	adds	r3, r0, #1
    92fe:	d0dc      	beq.n	92ba <_printf_i+0x1da>
    9300:	3501      	adds	r5, #1
    9302:	e7ef      	b.n	92e4 <_printf_i+0x204>
    9304:	b00b      	add	sp, #44	; 0x2c
    9306:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9308:	0000d76d 	.word	0x0000d76d
    930c:	0000d77e 	.word	0x0000d77e

00009310 <_putc_r>:
    9310:	b570      	push	{r4, r5, r6, lr}
    9312:	1c05      	adds	r5, r0, #0
    9314:	1c0e      	adds	r6, r1, #0
    9316:	1c14      	adds	r4, r2, #0
    9318:	2800      	cmp	r0, #0
    931a:	d004      	beq.n	9326 <_putc_r+0x16>
    931c:	6983      	ldr	r3, [r0, #24]
    931e:	2b00      	cmp	r3, #0
    9320:	d101      	bne.n	9326 <_putc_r+0x16>
    9322:	f7ff fba5 	bl	8a70 <__sinit>
    9326:	4b15      	ldr	r3, [pc, #84]	; (937c <_putc_r+0x6c>)
    9328:	429c      	cmp	r4, r3
    932a:	d101      	bne.n	9330 <_putc_r+0x20>
    932c:	686c      	ldr	r4, [r5, #4]
    932e:	e008      	b.n	9342 <_putc_r+0x32>
    9330:	4b13      	ldr	r3, [pc, #76]	; (9380 <_putc_r+0x70>)
    9332:	429c      	cmp	r4, r3
    9334:	d101      	bne.n	933a <_putc_r+0x2a>
    9336:	68ac      	ldr	r4, [r5, #8]
    9338:	e003      	b.n	9342 <_putc_r+0x32>
    933a:	4b12      	ldr	r3, [pc, #72]	; (9384 <_putc_r+0x74>)
    933c:	429c      	cmp	r4, r3
    933e:	d100      	bne.n	9342 <_putc_r+0x32>
    9340:	68ec      	ldr	r4, [r5, #12]
    9342:	68a3      	ldr	r3, [r4, #8]
    9344:	3b01      	subs	r3, #1
    9346:	60a3      	str	r3, [r4, #8]
    9348:	2b00      	cmp	r3, #0
    934a:	da10      	bge.n	936e <_putc_r+0x5e>
    934c:	69a2      	ldr	r2, [r4, #24]
    934e:	4293      	cmp	r3, r2
    9350:	db07      	blt.n	9362 <_putc_r+0x52>
    9352:	6823      	ldr	r3, [r4, #0]
    9354:	701e      	strb	r6, [r3, #0]
    9356:	6823      	ldr	r3, [r4, #0]
    9358:	7819      	ldrb	r1, [r3, #0]
    935a:	290a      	cmp	r1, #10
    935c:	d10a      	bne.n	9374 <_putc_r+0x64>
    935e:	1c28      	adds	r0, r5, #0
    9360:	e001      	b.n	9366 <_putc_r+0x56>
    9362:	1c28      	adds	r0, r5, #0
    9364:	1c31      	adds	r1, r6, #0
    9366:	1c22      	adds	r2, r4, #0
    9368:	f7ff f9be 	bl	86e8 <__swbuf_r>
    936c:	e005      	b.n	937a <_putc_r+0x6a>
    936e:	6823      	ldr	r3, [r4, #0]
    9370:	701e      	strb	r6, [r3, #0]
    9372:	6823      	ldr	r3, [r4, #0]
    9374:	1c5a      	adds	r2, r3, #1
    9376:	6022      	str	r2, [r4, #0]
    9378:	7818      	ldrb	r0, [r3, #0]
    937a:	bd70      	pop	{r4, r5, r6, pc}
    937c:	0000d6fc 	.word	0x0000d6fc
    9380:	0000d71c 	.word	0x0000d71c
    9384:	0000d73c 	.word	0x0000d73c

00009388 <_sbrk_r>:
    9388:	b538      	push	{r3, r4, r5, lr}
    938a:	2300      	movs	r3, #0
    938c:	4c06      	ldr	r4, [pc, #24]	; (93a8 <_sbrk_r+0x20>)
    938e:	1c05      	adds	r5, r0, #0
    9390:	1c08      	adds	r0, r1, #0
    9392:	6023      	str	r3, [r4, #0]
    9394:	f7f8 fd34 	bl	1e00 <_sbrk>
    9398:	1c43      	adds	r3, r0, #1
    939a:	d103      	bne.n	93a4 <_sbrk_r+0x1c>
    939c:	6823      	ldr	r3, [r4, #0]
    939e:	2b00      	cmp	r3, #0
    93a0:	d000      	beq.n	93a4 <_sbrk_r+0x1c>
    93a2:	602b      	str	r3, [r5, #0]
    93a4:	bd38      	pop	{r3, r4, r5, pc}
    93a6:	46c0      	nop			; (mov r8, r8)
    93a8:	20002274 	.word	0x20002274

000093ac <__sread>:
    93ac:	b538      	push	{r3, r4, r5, lr}
    93ae:	1c0c      	adds	r4, r1, #0
    93b0:	250e      	movs	r5, #14
    93b2:	5f49      	ldrsh	r1, [r1, r5]
    93b4:	f000 f8b0 	bl	9518 <_read_r>
    93b8:	2800      	cmp	r0, #0
    93ba:	db03      	blt.n	93c4 <__sread+0x18>
    93bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    93be:	181b      	adds	r3, r3, r0
    93c0:	6563      	str	r3, [r4, #84]	; 0x54
    93c2:	e003      	b.n	93cc <__sread+0x20>
    93c4:	89a2      	ldrh	r2, [r4, #12]
    93c6:	4b02      	ldr	r3, [pc, #8]	; (93d0 <__sread+0x24>)
    93c8:	4013      	ands	r3, r2
    93ca:	81a3      	strh	r3, [r4, #12]
    93cc:	bd38      	pop	{r3, r4, r5, pc}
    93ce:	46c0      	nop			; (mov r8, r8)
    93d0:	ffffefff 	.word	0xffffefff

000093d4 <__swrite>:
    93d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    93d6:	1c1e      	adds	r6, r3, #0
    93d8:	898b      	ldrh	r3, [r1, #12]
    93da:	1c05      	adds	r5, r0, #0
    93dc:	1c0c      	adds	r4, r1, #0
    93de:	1c17      	adds	r7, r2, #0
    93e0:	05db      	lsls	r3, r3, #23
    93e2:	d505      	bpl.n	93f0 <__swrite+0x1c>
    93e4:	230e      	movs	r3, #14
    93e6:	5ec9      	ldrsh	r1, [r1, r3]
    93e8:	2200      	movs	r2, #0
    93ea:	2302      	movs	r3, #2
    93ec:	f000 f874 	bl	94d8 <_lseek_r>
    93f0:	89a2      	ldrh	r2, [r4, #12]
    93f2:	4b05      	ldr	r3, [pc, #20]	; (9408 <__swrite+0x34>)
    93f4:	1c28      	adds	r0, r5, #0
    93f6:	4013      	ands	r3, r2
    93f8:	81a3      	strh	r3, [r4, #12]
    93fa:	1c3a      	adds	r2, r7, #0
    93fc:	230e      	movs	r3, #14
    93fe:	5ee1      	ldrsh	r1, [r4, r3]
    9400:	1c33      	adds	r3, r6, #0
    9402:	f000 f81f 	bl	9444 <_write_r>
    9406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9408:	ffffefff 	.word	0xffffefff

0000940c <__sseek>:
    940c:	b538      	push	{r3, r4, r5, lr}
    940e:	1c0c      	adds	r4, r1, #0
    9410:	250e      	movs	r5, #14
    9412:	5f49      	ldrsh	r1, [r1, r5]
    9414:	f000 f860 	bl	94d8 <_lseek_r>
    9418:	89a3      	ldrh	r3, [r4, #12]
    941a:	1c42      	adds	r2, r0, #1
    941c:	d103      	bne.n	9426 <__sseek+0x1a>
    941e:	4a05      	ldr	r2, [pc, #20]	; (9434 <__sseek+0x28>)
    9420:	4013      	ands	r3, r2
    9422:	81a3      	strh	r3, [r4, #12]
    9424:	e004      	b.n	9430 <__sseek+0x24>
    9426:	2280      	movs	r2, #128	; 0x80
    9428:	0152      	lsls	r2, r2, #5
    942a:	4313      	orrs	r3, r2
    942c:	81a3      	strh	r3, [r4, #12]
    942e:	6560      	str	r0, [r4, #84]	; 0x54
    9430:	bd38      	pop	{r3, r4, r5, pc}
    9432:	46c0      	nop			; (mov r8, r8)
    9434:	ffffefff 	.word	0xffffefff

00009438 <__sclose>:
    9438:	b508      	push	{r3, lr}
    943a:	230e      	movs	r3, #14
    943c:	5ec9      	ldrsh	r1, [r1, r3]
    943e:	f000 f815 	bl	946c <_close_r>
    9442:	bd08      	pop	{r3, pc}

00009444 <_write_r>:
    9444:	b538      	push	{r3, r4, r5, lr}
    9446:	1c05      	adds	r5, r0, #0
    9448:	2000      	movs	r0, #0
    944a:	4c07      	ldr	r4, [pc, #28]	; (9468 <_write_r+0x24>)
    944c:	6020      	str	r0, [r4, #0]
    944e:	1c08      	adds	r0, r1, #0
    9450:	1c11      	adds	r1, r2, #0
    9452:	1c1a      	adds	r2, r3, #0
    9454:	f7f8 fcac 	bl	1db0 <_write>
    9458:	1c43      	adds	r3, r0, #1
    945a:	d103      	bne.n	9464 <_write_r+0x20>
    945c:	6823      	ldr	r3, [r4, #0]
    945e:	2b00      	cmp	r3, #0
    9460:	d000      	beq.n	9464 <_write_r+0x20>
    9462:	602b      	str	r3, [r5, #0]
    9464:	bd38      	pop	{r3, r4, r5, pc}
    9466:	46c0      	nop			; (mov r8, r8)
    9468:	20002274 	.word	0x20002274

0000946c <_close_r>:
    946c:	b538      	push	{r3, r4, r5, lr}
    946e:	2300      	movs	r3, #0
    9470:	4c06      	ldr	r4, [pc, #24]	; (948c <_close_r+0x20>)
    9472:	1c05      	adds	r5, r0, #0
    9474:	1c08      	adds	r0, r1, #0
    9476:	6023      	str	r3, [r4, #0]
    9478:	f7f8 fcd4 	bl	1e24 <_close>
    947c:	1c43      	adds	r3, r0, #1
    947e:	d103      	bne.n	9488 <_close_r+0x1c>
    9480:	6823      	ldr	r3, [r4, #0]
    9482:	2b00      	cmp	r3, #0
    9484:	d000      	beq.n	9488 <_close_r+0x1c>
    9486:	602b      	str	r3, [r5, #0]
    9488:	bd38      	pop	{r3, r4, r5, pc}
    948a:	46c0      	nop			; (mov r8, r8)
    948c:	20002274 	.word	0x20002274

00009490 <_fstat_r>:
    9490:	b538      	push	{r3, r4, r5, lr}
    9492:	2300      	movs	r3, #0
    9494:	4c06      	ldr	r4, [pc, #24]	; (94b0 <_fstat_r+0x20>)
    9496:	1c05      	adds	r5, r0, #0
    9498:	1c08      	adds	r0, r1, #0
    949a:	1c11      	adds	r1, r2, #0
    949c:	6023      	str	r3, [r4, #0]
    949e:	f7f8 fcc5 	bl	1e2c <_fstat>
    94a2:	1c43      	adds	r3, r0, #1
    94a4:	d103      	bne.n	94ae <_fstat_r+0x1e>
    94a6:	6823      	ldr	r3, [r4, #0]
    94a8:	2b00      	cmp	r3, #0
    94aa:	d000      	beq.n	94ae <_fstat_r+0x1e>
    94ac:	602b      	str	r3, [r5, #0]
    94ae:	bd38      	pop	{r3, r4, r5, pc}
    94b0:	20002274 	.word	0x20002274

000094b4 <_isatty_r>:
    94b4:	b538      	push	{r3, r4, r5, lr}
    94b6:	2300      	movs	r3, #0
    94b8:	4c06      	ldr	r4, [pc, #24]	; (94d4 <_isatty_r+0x20>)
    94ba:	1c05      	adds	r5, r0, #0
    94bc:	1c08      	adds	r0, r1, #0
    94be:	6023      	str	r3, [r4, #0]
    94c0:	f7f8 fcba 	bl	1e38 <_isatty>
    94c4:	1c43      	adds	r3, r0, #1
    94c6:	d103      	bne.n	94d0 <_isatty_r+0x1c>
    94c8:	6823      	ldr	r3, [r4, #0]
    94ca:	2b00      	cmp	r3, #0
    94cc:	d000      	beq.n	94d0 <_isatty_r+0x1c>
    94ce:	602b      	str	r3, [r5, #0]
    94d0:	bd38      	pop	{r3, r4, r5, pc}
    94d2:	46c0      	nop			; (mov r8, r8)
    94d4:	20002274 	.word	0x20002274

000094d8 <_lseek_r>:
    94d8:	b538      	push	{r3, r4, r5, lr}
    94da:	1c05      	adds	r5, r0, #0
    94dc:	2000      	movs	r0, #0
    94de:	4c07      	ldr	r4, [pc, #28]	; (94fc <_lseek_r+0x24>)
    94e0:	6020      	str	r0, [r4, #0]
    94e2:	1c08      	adds	r0, r1, #0
    94e4:	1c11      	adds	r1, r2, #0
    94e6:	1c1a      	adds	r2, r3, #0
    94e8:	f7f8 fca8 	bl	1e3c <_lseek>
    94ec:	1c43      	adds	r3, r0, #1
    94ee:	d103      	bne.n	94f8 <_lseek_r+0x20>
    94f0:	6823      	ldr	r3, [r4, #0]
    94f2:	2b00      	cmp	r3, #0
    94f4:	d000      	beq.n	94f8 <_lseek_r+0x20>
    94f6:	602b      	str	r3, [r5, #0]
    94f8:	bd38      	pop	{r3, r4, r5, pc}
    94fa:	46c0      	nop			; (mov r8, r8)
    94fc:	20002274 	.word	0x20002274

00009500 <memchr>:
    9500:	b2c9      	uxtb	r1, r1
    9502:	1882      	adds	r2, r0, r2
    9504:	4290      	cmp	r0, r2
    9506:	d004      	beq.n	9512 <memchr+0x12>
    9508:	7803      	ldrb	r3, [r0, #0]
    950a:	428b      	cmp	r3, r1
    950c:	d002      	beq.n	9514 <memchr+0x14>
    950e:	3001      	adds	r0, #1
    9510:	e7f8      	b.n	9504 <memchr+0x4>
    9512:	2000      	movs	r0, #0
    9514:	4770      	bx	lr
	...

00009518 <_read_r>:
    9518:	b538      	push	{r3, r4, r5, lr}
    951a:	1c05      	adds	r5, r0, #0
    951c:	2000      	movs	r0, #0
    951e:	4c07      	ldr	r4, [pc, #28]	; (953c <_read_r+0x24>)
    9520:	6020      	str	r0, [r4, #0]
    9522:	1c08      	adds	r0, r1, #0
    9524:	1c11      	adds	r1, r2, #0
    9526:	1c1a      	adds	r2, r3, #0
    9528:	f7f8 fc20 	bl	1d6c <_read>
    952c:	1c43      	adds	r3, r0, #1
    952e:	d103      	bne.n	9538 <_read_r+0x20>
    9530:	6823      	ldr	r3, [r4, #0]
    9532:	2b00      	cmp	r3, #0
    9534:	d000      	beq.n	9538 <_read_r+0x20>
    9536:	602b      	str	r3, [r5, #0]
    9538:	bd38      	pop	{r3, r4, r5, pc}
    953a:	46c0      	nop			; (mov r8, r8)
    953c:	20002274 	.word	0x20002274
    9540:	42000000 	.word	0x42000000
    9544:	42000400 	.word	0x42000400
    9548:	42000800 	.word	0x42000800
    954c:	42000c00 	.word	0x42000c00
    9550:	42001000 	.word	0x42001000
    9554:	43000400 	.word	0x43000400
    9558:	0b0a0908 	.word	0x0b0a0908
    955c:	00000d0c 	.word	0x00000d0c
    9560:	00000fce 	.word	0x00000fce
    9564:	00000fca 	.word	0x00000fca
    9568:	00000fca 	.word	0x00000fca
    956c:	0000102c 	.word	0x0000102c
    9570:	0000102c 	.word	0x0000102c
    9574:	00000fe4 	.word	0x00000fe4
    9578:	00000fd4 	.word	0x00000fd4
    957c:	00000fea 	.word	0x00000fea
    9580:	0000101a 	.word	0x0000101a
    9584:	000011f0 	.word	0x000011f0
    9588:	000011d0 	.word	0x000011d0
    958c:	000011d0 	.word	0x000011d0
    9590:	0000126a 	.word	0x0000126a
    9594:	000011e2 	.word	0x000011e2
    9598:	000011fe 	.word	0x000011fe
    959c:	000011d4 	.word	0x000011d4
    95a0:	0000120c 	.word	0x0000120c
    95a4:	0000124e 	.word	0x0000124e
    95a8:	000012a8 	.word	0x000012a8
    95ac:	000012ea 	.word	0x000012ea
    95b0:	000012ea 	.word	0x000012ea
    95b4:	000012ea 	.word	0x000012ea
    95b8:	0000129a 	.word	0x0000129a
    95bc:	000012b6 	.word	0x000012b6
    95c0:	0000128c 	.word	0x0000128c
    95c4:	000012c4 	.word	0x000012c4
    95c8:	000012da 	.word	0x000012da
    95cc:	00001a56 	.word	0x00001a56
    95d0:	00001a60 	.word	0x00001a60
    95d4:	00001a6a 	.word	0x00001a6a
    95d8:	00001a74 	.word	0x00001a74
    95dc:	00001a7e 	.word	0x00001a7e
    95e0:	00001ab0 	.word	0x00001ab0
    95e4:	00001aba 	.word	0x00001aba
    95e8:	00001ac4 	.word	0x00001ac4
    95ec:	00001ace 	.word	0x00001ace
    95f0:	00001ad8 	.word	0x00001ad8
    95f4:	42002000 	.word	0x42002000
    95f8:	42002400 	.word	0x42002400
    95fc:	42002800 	.word	0x42002800
    9600:	42002c00 	.word	0x42002c00
    9604:	43000800 	.word	0x43000800
    9608:	1c1c1b1b 	.word	0x1c1c1b1b
    960c:	0000001d 	.word	0x0000001d
    9610:	00000002 	.word	0x00000002
    9614:	00000100 	.word	0x00000100
    9618:	00000002 	.word	0x00000002
    961c:	00000200 	.word	0x00000200
    9620:	00000002 	.word	0x00000002
    9624:	00000400 	.word	0x00000400
    9628:	00000002 	.word	0x00000002
    962c:	00000800 	.word	0x00000800
    9630:	00000003 	.word	0x00000003
    9634:	00000004 	.word	0x00000004

00009638 <pndcs_prf_gap_handle>:
	...
    964c:	00001f11 00001e41 00000000 00000000     ....A...........
    965c:	0000207d 00000000 00000000 00000000     } ..............
    966c:	00000000 0000207d 00000000 00000000     ....} ..........
	...

00009684 <pndcs_prf_gatt_server_handle>:
    9684:	00001e51 00000000 00001ecd 00000000     Q...............
	...
    96ac:	0000000d 69746f4e 72207966 69656365     ....Notify recei
    96bc:	00646576 72616843 65746361 74736972     ved.Characterist
    96cc:	63206369 676e6168 00006465 48226226     ic changed..&b"H
    96dc:	6d4e0db2 830d16a3 077ffb1a 00000000     ..Nm............
    96ec:	6c696146 74206465 7473206f 20747261     Failed to start 
    96fc:	76726573 20656369 63736964 7265766f     service discover
    970c:	73202e79 75746174 203d2073 00006425     y. status = %d..
    971c:	72617453 20646574 76726573 20656369     Started service 
    972c:	63736964 7265766f 00000079 63736944     discovery...Disc
    973c:	7265766f 72655320 65636976 666e4920     over Service Inf
    974c:	0a0d3a6f 3e2d2d20 6e6e6f43 646e6148     o:.. -->ConnHand
    975c:	3020656c 32302578 200a0d78 733e2d2d     le 0x%02x.. -->s
    976c:	74726174 6e616820 20656c64 30257830     tart handle 0x%0
    977c:	0a0d7832 3e2d2d20 20646e45 646e6168     2x.. -->End hand
    978c:	3a20656c 25783020 0d783230 2d20200a     le : 0x%02x..  -
    979c:	55203e2d 20444955 64257830 00006425     -> UUID 0x%d%d..
    97ac:	0f6821a7 2c4d6a52 b49a64b8 9781b93e     .!h.RjM,.d..>...
    97bc:	00000000 6c696146 206f7420 72617473     ....Fail to star
    97cc:	69642074 766f6373 63207265 61726168     t discover chara
    97dc:	72657463 69747369 00000063 72616843     cteristic...Char
    97ec:	65746361 69736972 64206374 6f637369     acterisitc disco
    97fc:	79726576 61747320 00007472 63736544     very start..Desc
    980c:	74706972 4420726f 6f637369 79726576     riptor Discovery
    981c:	69614620 0064656c 61460a0d 64656c69      Failed...Failed
    982c:	206f7420 646e6573 61686320 74636172      to send charact
    983c:	73697265 20636974 74697257 65522065     eristic Write Re
    984c:	73657571 00000074 206e6163 20746f6e     quest...can not 
    985c:	74696e69 696c6169 7320657a 69767265     initialize servi
    986c:	00006563 65766441 73697472 6e656d65     ce..Advertisemen
    987c:	61642074 73206174 66207465 656c6961     t data set faile
    988c:	65722064 6e6f7361 00642520              d reason %d.

00009898 <pndcs_prf_gatt_client_handle>:
    9898:	00001e85 00000000 00001e9d 00001eb5     ................
    98a8:	00001f9d 00000000 00000000 00000000     ................
    98b8:	00001e55 00000000 00002228 0000222a     U.......("..*"..
    98c8:	00002210 00002210 00002210 00002228     ."..."..."..("..
    98d8:	00002210 00002210 00002a7e 00002af2     ."..."..~*...*..
    98e8:	00002a66 00002af8 00002a6c 00002a72     f*...*..l*..r*..
    98f8:	00002a78 00003138 00003138 00003138     x*..81..81..81..
    9908:	00003138 00003138 00003138 00003138     81..81..81..81..
    9918:	00003138 00003138 00003138 00003138     81..81..81..81..
    9928:	00003138 00003138 00003138 00003138     81..81..81..81..
    9938:	00003138 00003138 00003138 00003138     81..81..81..81..
    9948:	00003156 00003156 00003156 00003156     V1..V1..V1..V1..
    9958:	00003156 00003156 00003156 00003156     V1..V1..V1..V1..
    9968:	00003156 00003156 00003178 00003178     V1..V1..x1..x1..
    9978:	00003178 00003178 00003178 00003178     x1..x1..x1..x1..
    9988:	00003178 00003178 00003178 00003178     x1..x1..x1..x1..
    9998:	0000319a 0000319a 0000319a 0000319a     .1...1...1...1..
    99a8:	0000319a 0000319a 000031b4 000031b4     .1...1...1...1..
    99b8:	000031b4 000031b4 000031b4 000031b4     .1...1...1...1..
    99c8:	000031b4 000031b4 000031b4 000031ce     .1...1...1...1..
    99d8:	000031ce 000031f0 000031f0 000031f0     .1...1...1...1..
    99e8:	34333231 00003635 efcdab00 00efcdab     123456..........
    99f8:	b2d60600 f8f005f0 00000000              ............

00009a04 <ble_mgr_gatt_server_handle>:
	...
    9a1c:	0000216d 000021a9 00002171 00000000     m!...!..q!......

00009a2c <ble_mgr_gap_handle>:
    9a2c:	00002169 0000231d 00002181 00000000     i!...#...!......
    9a3c:	00000000 00002dc5 000021d9 0000217d     .....-...!..}!..
    9a4c:	000024bd 0000239d 000026bd 000024d5     .$...#...&...$..
    9a5c:	00002811 00002965 00002261 00002ff9     .(..e)..a".../..
	...
    9a78:	6e616353 676e696e 61662020 64656c69     Scanning  failed
    9a88:	00000000 2055544d 6e616843 46206567     ....MTU Change F
    9a98:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
    9aa8:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
    9ab8:	69746172 253a6e6f 00000064 69766544     ration:%d...Devi
    9ac8:	64206563 6f637369 63656e6e 20646574     ce disconnected 
    9ad8:	73616552 303a6e6f 32302578 61482078     Reason:0x%02x Ha
    9ae8:	656c646e 2578303d 00000078 72636e45     ndle=0x%x...Encr
    9af8:	69747079 66206e6f 656c6961 00000064     yption failed...
    9b08:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
    9b18:	64657465 63757320 73736563 6c6c7566     eted successfull
    9b28:	00000079 20454c42 69766544 6e206563     y...BLE Device n
    9b38:	6620746f 646e756f 636e6520 74707972     ot found encrypt
    9b48:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
    9b58:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
    9b68:	206e6163 69766564 72206563 68636165     can device reach
    9b78:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
    9b88:	00006e61 6c696146 74206465 7473206f     an..Failed to st
    9b98:	7320706f 6e6e6163 00676e69 72696150     op scanning.Pair
    9ba8:	20676e69 6c696166 2e2e6465 7369442e     ing failed...Dis
    9bb8:	6e6e6f63 69746365 0000676e 63736944     connecting..Disc
    9bc8:	656e6e6f 52207463 65757165 46207473     onnect Request F
    9bd8:	656c6961 00000064 72696150 20676e69     ailed...Pairing 
    9be8:	636f7270 72756465 6f632065 656c706d     procedure comple
    9bf8:	20646574 63637573 66737365 796c6c75     ted successfully
    9c08:	00000000 20454c42 69766544 6e206563     ....BLE Device n
    9c18:	6620746f 646e756f 206f7420 726f7473     ot found to stor
    9c28:	68742065 61702065 6e697269 6e692067     e the pairing in
    9c38:	00006f66 72636e45 69747079 4e206e6f     fo..Encryption N
    9c48:	7320746f 74726174 00006465 76616c53     ot started..Slav
    9c58:	65532065 69727563 52207974 2d207165     e Security Req -
    9c68:	74754120 746e6568 74616369 206e6f69      Authentication 
    9c78:	6c696146 00006465 72696150 71655220     Failed..Pair Req
    9c88:	74736575 41202d20 65687475 6369746e     uest - Authentic
    9c98:	6f697461 6146206e 64656c69 00000000     ation Failed....
    9ca8:	65746e45 68742072 61502065 656b7373     Enter the Passke
    9cb8:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
    9cc8:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
    9cd8:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
    9ce8:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
    9cf8:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
    9d08:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
    9d18:	6568746f 65442072 65636976 00003a29     other Device):..
    9d28:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
    9d38:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
    9d48:	20657275 20746f4e 70707573 6574726f     ure Not supporte
    9d58:	00000064 65746e45 20646572 73736150     d...Entered Pass
    9d68:	646f632d 00003a65 72696150 20676e69     -code:..Pairing 
    9d78:	6f666e69 74616d72 206e6f69 7020666f     information of p
    9d88:	20726565 69766564 69206563 6f6e2073     eer device is no
    9d98:	76612074 616c6961 2e656c62 00000000     t available.....
    9da8:	61656c50 75206573 6961706e 68742072     Please unpair th
    9db8:	65642065 65636976 6f726620 6570206d     e device from pe
    9dc8:	64207265 63697665 6f6d2865 656c6962     er device(mobile
    9dd8:	65732029 6e697474 6d207367 20756e65     ) settings menu 
    9de8:	20646e61 72617473 61702074 6e697269     and start pairin
    9df8:	67612067 006e6961 72636e45 69747079     g again.Encrypti
    9e08:	52206e6f 65757165 52207473 796c7065     on Request Reply
    9e18:	69614620 0064656c 74696e49 696c6169      Failed.Initiali
    9e28:	676e697a 4c544220 30303143 00000030     zing BTLC1000...
    9e38:	434c5442 30303031 696e4920 6c616974     BTLC1000 Initial
    9e48:	74617a69 206e6f69 6c696166 00006465     ization failed..
    9e58:	61656c50 63206573 6b636568 65687420     Please check the
    9e68:	776f7020 61207265 6320646e 656e6e6f      power and conne
    9e78:	6f697463 202f206e 64726168 65726177     ction / hardware
    9e88:	6e6f6320 7463656e 0000726f 43444e50      connector..PNDC
    9e98:	00000053 69766544 6e206563 20656d61     S...Device name 
    9ea8:	20746573 6c696166 00006465 61204442     set failed..BD a
    9eb8:	65726464 67207373 66207465 656c6961     ddress get faile
    9ec8:	00000064 41204442 65726464 303a7373     d...BD Address:0
    9ed8:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
    9ee8:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
    9ef8:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
    9f08:	20454c42 69766544 63206563 69666e6f     BLE Device confi
    9f18:	61727567 6e6f6974 69616620 0064656c     guration failed.
    9f28:	20746553 20454c42 69766544 41206563     Set BLE Device A
    9f38:	65726464 66207373 656c6961 00000064     ddress failed...
    9f48:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
    9f58:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
    9f68:	65732065 69727563 72207974 65757165     e security reque
    9f78:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
    9f88:	65746365 6f742064 65657020 65642072     ected to peer de
    9f98:	65636976 74697720 64612068 73657264     vice with addres
    9fa8:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
    9fb8:	78323025 78323025 78323025 00000000     %02x%02x%02x....
    9fc8:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
    9fd8:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
    9fe8:	61522067 6d6f646e 64646120 73736572     g Random address
    9ff8:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
    a008:	626d756e 6f207265 6f632066 63656e6e     number of connec
    a018:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
    a028:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
    a038:	2e2e676e 0000002e 69766544 43206563     ng......Device C
    a048:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
    a058:	53202d20 75746174 25203a73 00000064      - Status: %d...
    a068:	b4d08815 de4d1ce8 4e4ba4b2 d988645c     ......M...KN\d..
    a078:	00000000 20454c42 65766441 73697472     ....BLE Advertis
    a088:	6e656d65 61642074 73206174 66207465     ement data set f
    a098:	656c6961 00000064 69666564 676e696e     ailed...defining
    a0a8:	69727020 7972616d 72657320 65636976      primary service
    a0b8:	00000000 21e3ef69 6d436d4e c10976a0     ....i..!NmCm.v..
    a0c8:	8096dd9e 00000000 61647075 676e6974     ........updating
    a0d8:	65687420 61686320 74636172 73697265      the characteris
    a0e8:	20636974 6c696166 64256465 00000000     tic failed%d....
    a0f8:	646e6573 20676e69 69746f6e 61636966     sending notifica
    a108:	6e6f6974 69616620 2564656c 00000064     tion failed%d...

0000a118 <tc_interrupt_vectors.14144>:
    a118:	14131211 00000015 20454c42 72617453     ........BLE Star
    a128:	20646574 65766441 73697472 6e656d65     ted Advertisemen
    a138:	00000074 20454c42 65766441 73697472     t...BLE Advertis
    a148:	6e656d65 74732074 20747261 6c696146     ement start Fail
    a158:	00006465 74696e49 696c6169 676e697a     ed..Initializing
    a168:	454c4220 70704120 6163696c 6e6f6974      BLE Application
    a178:	00000000                                ....

0000a17c <pndcs_app_gap_cb>:
	...
    a190:	00003ced 00003d7d 00000000 00000000     .<..}=..........
    a1a0:	00003d01 00000000 00000000 00000000     .=..............
    a1b0:	00000000 00003d01 00000000 00000000     .....=..........
	...

0000a1c8 <__FUNCTION__.7971>:
    a1c8:	646e6168 625f656c 655f656c 746e6576     handle_ble_event
    a1d8:	42494c00 20294528 36312d25 30252873     .LIB(E) %-16s(%0
    a1e8:	20296433 73323325 3a202928 2e2e0020     3d) %32s() : ...
    a1f8:	2f2e2e2f 2e2f2e2e 6c622f2e 74735f65     /../../../ble_st
    a208:	2f6b6361 5f697061 65726f63 6576652f     ack/api_core/eve
    a218:	632e746e 686e5500 6c646e61 0a3a6465     nt.c.Unhandled:.
    a228:	63727309 3a64695f 30257830 090a7834     .src_id:0x%04x..
    a238:	5f67736d 303a6469 34302578 41000a78     msg_id:0x%04x..A
    a248:	6c656d74 726f4320 74612e70                       tmel Corp.

0000a252 <__FUNCTION__.7955>:
    a252:	625f7461 735f656c 645f7465 635f7665     at_ble_set_dev_c
    a262:	69666e6f 74610067                                onfig.

0000a268 <__FUNCTION__.8096>:
    a268:	625f7461 635f656c 5f6e6e6f 61647075     at_ble_conn_upda
    a278:	725f6574 796c7065 01030000                       te_reply.

0000a281 <CSWTCH.64>:
    a281:	03010300 03030303 03030303 2e020303     ................
    a291:	2e2e2f2e 2f2e2e2f 622f2e2e 735f656c     ./../../../ble_s
    a2a1:	6b636174 6970612f 726f635f 61672f65     tack/api_core/ga
    a2b1:	00632e70 61766e49 2064696c 61726150     p.c.Invalid Para
    a2c1:	6574656d 65207372 726f7272 61745300     meters error.Sta
    a2d1:	20737574 7830203a 58323025 6e49000a     tus : 0x%02X..In
    a2e1:	696c6176 61502064 656d6172 73726574     valid Parameters
    a2f1:	6b6e5500 6e776f6e 64646120 73736572     .Unknown address
    a301:	70797420 78302065 3e32253c 55000a0d      type 0x<%2>...U
    a311:	6f6e6b6e 64206e77 63697665 6f722065     nknown device ro
    a321:	3020656c 32253c78 000a0d3e 2055544d     le 0x<%2>...MTU 
    a331:	756c6156 78652065 64656563 78616d20     Value exceed max
    a341:	6d756d69 6c6c6120 6465776f 6c617620     imum allowed val
    a351:	0d206575 6e69000a 66726574 5f656361     ue ...interface_
    a361:	74696e69 2e2e2e20 25783020 0d583230     init ... 0x%02X.
    a371:	6e55000a 656c6261 206f7420 65736572     ..Unable to rese
    a381:	253c2074 3e583230 61000a0d 6c625f74     t <%02X>...at_bl
    a391:	65735f65 65645f74 6f635f76 6769666e     e_set_dev_config
    a3a1:	2e2e2e20 25783020 0d583230 6e55000a      ... 0x%02X...Un
    a3b1:	656c6261 206f7420 20746573 61666564     able to set defa
    a3c1:	20746c75 69766564 6e206563 20656d61     ult device name 
    a3d1:	3230253c 0a0d3e58 746e4900 61767265     <%02X>...Interva
    a3e1:	6163206c 2074276e 30206562 20726f20     l can't be 0 or 
    a3f1:	7373656c 4e000a0d 204c4c55 6e696f70     less...NULL poin
    a401:	0d726574 554e000a 70204c4c 746e696f     ter...NULL point
    a411:	65207265 726f7272 766e4900 64696c61     er error.Invalid
    a421:	76656420 20656369 656d616e 69727720      device name wri
    a431:	70206574 696d7265 6f697373 6573006e     te permission.se
    a441:	65642074 65636976 6e6f6320 20676966     t device config 
    a451:	6c696166 202c6465 74617473 203a7375     failed, status: 
    a461:	3e64253c 766e4900 64696c61 6e6f4320     <%d>.Invalid Con
    a471:	6f4d202e 3c206564 0d3e6425 6f4e000a     . Mode <%d>...No
    a481:	706d4520 45207974 7972746e 726f6620      Empty Entry for
    a491:	6e6f6320 7463656e 0d6e6f69 6e49000a      connection...In
    a4a1:	696c6176 6e692064 76726574 0a0d6c61     valid interval..
    a4b1:	616e5500 20656c62 67206f74 61207465     .Unable to get a
    a4c1:	65726464 0a0d7373 766e4900 64696c61     ddress...Invalid
    a4d1:	74754120 79542068 25206570 000a0d64      Auth Type %d...

0000a4e1 <__FUNCTION__.7934>:
    a4e1:	625f7461 645f656c 63697665 616e5f65     at_ble_device_na
    a4f1:	735f656d 61007465                                me_set.

0000a4f8 <__FUNCTION__.7888>:
    a4f8:	625f7461 695f656c 0074696e              at_ble_init.

0000a504 <CSWTCH.62>:
    a504:	61100402                                         ...

0000a507 <__FUNCTION__.7351>:
    a507:	625f7461 635f656c 61726168 72657463     at_ble_character
    a517:	69747369 69645f63 766f6373 625f7265     istic_discover_b
    a527:	75755f79 61006469                                y_uuid.

0000a52e <__FUNCTION__.7362>:
    a52e:	625f7461 645f656c 72637365 6f747069     at_ble_descripto
    a53e:	69645f72 766f6373 615f7265 2e006c6c     r_discover_all..
    a54e:	2e2e2f2e 2f2e2e2f 622f2e2e 735f656c     ./../../../ble_s
    a55e:	6b636174 6970612f 726f635f 61672f65     tack/api_core/ga
    a56e:	635f7474 6e65696c 00632e74 61766e49     tt_client.c.Inva
    a57e:	2064696c 61726150 6574656d 0a0d7372     lid Parameters..
    a58e:	67695300 2064656e 276e6163 65622074     .Signed can't be
    a59e:	74697720 65722068 6e6f7073 0a0d6573      with response..
    a5ae:	766e4900 646c6961 646e6520 20726f20     .Invaild end or 
    a5be:	72617473 61682074 656c646e 000a2073     start handles ..
    a5ce:	6c6c754e 49555520 74702044 000a2072     Null UUID ptr ..
    a5de:	61766e49 20646c69 72616863 6e61685f     Invaild char_han
    a5ee:	5f656c64 6e756f63 000a2074 6c6c754e     dle_count ..Null
    a5fe:	61686320 61685f72 656c646e 73696c5f      char_handle_lis
    a60e:	74702074 000a2072                       t ptr ..

0000a616 <__FUNCTION__.7375>:
    a616:	625f7461 635f656c 61726168 72657463     at_ble_character
    a626:	69747369 72775f63 00657469              istic_write.

0000a632 <__FUNCTION__.7321>:
    a632:	625f7461 705f656c 616d6972 735f7972     at_ble_primary_s
    a642:	69767265 645f6563 6f637369 5f726576     ervice_discover_
    a652:	755f7962 00646975                       by_uuid.

0000a65a <__FUNCTION__.7256>:
    a65a:	72657375 7365645f 70697263 6e6f6974     user_description
    a66a:	6665645f 00656e69 2e2f2e2e 2e2e2f2e     _define.../../..
    a67a:	2f2e2e2f 5f656c62 63617473 70612f6b     /../ble_stack/ap
    a68a:	6f635f69 672f6572 5f747461 76726573     i_core/gatt_serv
    a69a:	632e7265 1e740000                                er.c..

0000a6a0 <interface_send_msg>:
    a6a0:	20001e74 00215752                       t.. RW!.

0000a6a8 <dummy_buffer>:
    a6a8:	20001a74                                t.. 

0000a6ac <__FUNCTION__.7900>:
    a6ac:	625f7461 655f656c 7972636e 6f697470     at_ble_encryptio
    a6bc:	65725f6e 73657571 65725f74 00796c70     n_request_reply.

0000a6cc <__FUNCTION__.7856>:
    a6cc:	625f7461 705f656c 5f726961 5f79656b     at_ble_pair_key_
    a6dc:	6c706572 74610079                                reply.

0000a6e2 <__FUNCTION__.7866>:
    a6e2:	625f7461 735f656c 5f646e65 76616c73     at_ble_send_slav
    a6f2:	65735f65 65725f63 73657571 2e2e0074     e_sec_request...
    a702:	2f2e2e2f 2e2f2e2e 6c622f2e 74735f65     /../../../ble_st
    a712:	2f6b6361 5f697061 65726f63 6365732f     ack/api_core/sec
    a722:	74697275 00632e79 61766e49 2064696c     urity.c.Invalid 
    a732:	2079654b 657a6973 0d642520 6e55000a     Key size %d...Un
    a742:	776f6e6b 6e616820 20656c64 49007825     know handle %x.I
    a752:	4c41564e 43204449 2e4e4e4f 4e414820     NVALID CONN. HAN
    a762:	0a454c44 564e4900 44494c41 41454620     DLE..INVALID FEA
    a772:	45525554 49000a53 4c41564e 4b204449     TURES..INVALID K
    a782:	53205945 0d455a49 4e55000a 574f4e4b     EY SIZE...UNKNOW
    a792:	5541204e 4e454854 5954202e 0a0d4550     N AUTHEN. TYPE..
    a7a2:	4b4e5500 4e574f4e 59454b20 53494420     .UNKNOWN KEY DIS
    a7b2:	0a0d2e54 4b544c00 20736920 20746f6e     T....LTK is not 
    a7c2:	766f7270 64656469 49000a0d 4c41564e     provided...INVAL
    a7d2:	4b204449 45205945 5952544e 49000a0d     ID KEY ENTRY...I
    a7e2:	4c41564e 44204449 4d205645 0d45444f     NVALID DEV MODE.
    a7f2:	4e49000a 494c4156 59542044 0a0d4550     ..INVALID TYPE..
    a802:	6b6e5500 20776f6e 646e6148 0a0d656c     .Unknow Handle..
    a812:	766e4900 64696c61 6c6f5220 000a0d65     .Invalid Role...
    a822:	61766e49 2064696c 656c6f52 00782520     Invalid Role %x.

0000a832 <__FUNCTION__.7881>:
    a832:	63656863 6e655f6b 72705f63 7365636f     check_enc_proces
    a842:	74610073                                         s.

0000a844 <__FUNCTION__.7891>:
    a844:	625f7461 655f656c 7972636e 6f697470     at_ble_encryptio
    a854:	74735f6e 00747261                       n_start.

0000a85c <__FUNCTION__.7837>:
    a85c:	625f7461 615f656c 65687475 6369746e     at_ble_authentic
    a86c:	00657461                                ate.

0000a870 <__FUNCTION__.7247>:
    a870:	63706167 706d635f 7476655f 70616700              gapc_cmp_evt.

0000a87d <__FUNCTION__.7476>:
    a87d:	63706167 7665645f 666e695f 65725f6f     gapc_dev_info_re
    a88d:	6e695f71 61685f64 656c646e 2e2e0072     q_ind_handler...
    a89d:	2f2e2e2f 2e2f2e2e 6c622f2e 74735f65     /../../../ble_st
    a8ad:	2f6b6361 5f697061 746e6f63 6c6c6f72     ack/api_controll
    a8bd:	695f7265 7265746e 65636166 7061672f     er_interface/gap
    a8cd:	61745f63 632e6b73 43454c00 6f632042     c_task.c.LECB co
    a8dd:	63656e6e 6e6f6974 65726320 6f697461     nnection creatio
    a8ed:	6166206e 64656c69 4c000a20 20424345     n failed ..LECB 
    a8fd:	6b6e696c 73696420 6e6e6f63 69746365     link disconnecti
    a90d:	66206e6f 756c6961 0a206572 74654700     on failure ..Get
    a91d:	65657020 65642072 65636976 666e6920      peer device inf
    a92d:	7265206f 2c726f72 61745320 3a737574     o error, Status:
    a93d:	00642520 43504147 5445475f 4e4f435f      %d.GAPC_GET_CON
    a94d:	4148435f 4c454e4e 50414d5f 7453202c     _CHANNEL_MAP, St
    a95d:	73757461 7830203a 58323025 686e5500     atus: 0x%02X.Unh
    a96d:	6c646e61 4f206465 253c2050 3e583230     andled OP <%02X>
    a97d:	44000a0d 63697665 614e2065 6e20656d     ...Device Name n
    a98d:	7320746f 67007465                                ot set.

0000a994 <__FUNCTION__.7677>:
    a994:	6d706167 7365725f 725f7465 685f7165     gapm_reset_req_h
    a9a4:	6c646e61 67007265                                andler.

0000a9ab <__FUNCTION__.7694>:
    a9ab:	6d706167 7465735f 7665645f 6e6f635f     gapm_set_dev_con
    a9bb:	5f676966 5f646d63 646e6168 0072656c     fig_cmd_handler.
    a9cb:	2e2f2e2e 2e2e2f2e 2f2e2e2f 5f656c62     ../../../../ble_
    a9db:	63617473 70612f6b 6f635f69 6f72746e     stack/api_contro
    a9eb:	72656c6c 746e695f 61667265 672f6563     ller_interface/g
    a9fb:	5f6d7061 6b736174 5700632e 3a504f2e     apm_task.c.W.OP:
    aa0b:	32302520 52202c78 3a504f2e 78323025      %02x, R.OP:%02x
    aa1b:	55000a0d 6e61686e 64656c64 20504f20     ...Unhandled OP 
    aa2b:	253c7830 3e583230 67000a0d                       0x<%02X>...

0000aa36 <__FUNCTION__.7706>:
    aa36:	6d706167 7465675f 7665645f 6e6f635f     gapm_get_dev_con
    aa46:	5f676966 5f646d63 646e6168 0072656c     fig_cmd_handler.

0000aa56 <__FUNCTION__.7761>:
    aa56:	6d706167 706d635f 7476655f 2f2e2e00     gapm_cmp_evt.../
    aa66:	2e2f2e2e 2e2e2f2e 656c622f 6174735f     ../../../ble_sta
    aa76:	612f6b63 635f6970 72746e6f 656c6c6f     ck/api_controlle
    aa86:	6e695f72 66726574 2f656361 74746167     r_interface/gatt
    aa96:	61745f63 632e6b73 69614600 2064656c     c_task.c.Failed 
    aaa6:	64616572 20676e69 72616863 65746361     reading characte
    aab6:	74736972 0a206369 74616700                       ristic ..

0000aabf <__FUNCTION__.7433>:
    aabf:	74746167 6f635f63 656c706d 655f6574     gattc_complete_e
    aacf:	685f7476 6c646e61 2e007265 2e2e2f2e     vt_handler.../..
    aadf:	2f2e2e2f 622f2e2e 735f656c 6b636174     /../../ble_stack
    aaef:	6970612f 6e6f635f 6c6f7274 5f72656c     /api_controller_
    aaff:	65746e69 63616672 61672f65 5f6d7474     interface/gattm_
    ab0f:	6b736174 6700632e                                task.c.

0000ab16 <__FUNCTION__.6998>:
    ab16:	74746167 64615f6d 74615f64 62697274     gattm_add_attrib
    ab26:	5f657475 5f716572 646e6168 0072656c     ute_req_handler.
    ab36:	b5f8fea5                                         ..

0000ab38 <patch_data>:
    ab38:	461eb5f8 460c4617 f0024610 283ffab7     ...F.F.F.F....?(
    ab48:	484cd031 89808821 d0052800 4d4a1d82     1.LH!....(....JM
    ab58:	d1034291 e0102402 e7f82200 d0042800     .B...$..."...(..
    ab68:	42911c82 2400d103 2200e007 2800e7f9     ...B...$..."...(
    ab78:	1d00d000 d10a4281 48402401 23016800     .....B...$@H.h.#
    ab88:	463ab281 f002483e 7004fa97 2306e009     ..:F>H.....p...#
    ab98:	4631463a f002483b 8821fa8f 21808001     :F1F;H....!....!
    aba8:	68297101 20004788 b5ffbdf8 460cb081     .q)h.G. .......F
    abb8:	f0029803 283ffa7b 9803d036 0a007822     ....{.?(6..."x..
    abc8:	26000201 4d2b482f 2a003109 2702d005     ...&/H+M.1.*...'
    abd8:	d0172a01 d1272a02 8862e029 b2931d92     .*...*'.).b.....
    abe8:	f0029a03 4607fa69 280089a8 1c80d000     ....i..F...(....
    abf8:	713e8038 807a8862 1d781d21 fa62f002     8.>qb.z.!.x...b.
    ac08:	e00e4638 9a032308 fa56f002 290089a9     8F...#....V....)
    ac18:	1d09d000 71068001 88628047 0a127142     .......qG.b.Bq..
    ac28:	49157182 47886809 b0052000 230ebdf0     .q.I.h.G. .....#
    ac38:	f0029a03 89a9fa41 d0002900 80011d89     ....A....)......
    ac48:	21087106 88628041 0a127142 88a27182     .q.!A.b.Bq...q..
    ac58:	0a1271c2 88e27202 0a127242 89227282     .q...r..Br...r".
    ac68:	0a1272c2 e7dc7302 4907b510 f0022014     .r...s.....I. ..
    ac78:	bd10fa2f 100408e4 100400e4 10040018     /...............
    ac88:	00000e0a 00000c14 10007c44 4610b510     ........D|.....F
    ac98:	f002460c cc07fa0b ffdaf001 bd102000     .F........... ..
    aca8:	4614b570 f0024610 2306fa01 21044622     p..F.F.....#"F.!
    acb8:	f0024824 4604fa01 f0012000 4605fce5     $H.....F. .....F
    acc8:	1ca02104 fa0af002 122970a5 120970e1     .!.......p)..p..
    acd8:	12097121 20017161 20007060 7020491a     !q..aq. `p. .I p
    ace8:	46206809 20004788 b570bd70 46104614     .h F.G. p.p..F.F
    acf8:	f9dcf002 23064813 21044622 f0021c40     .....H.#"F.!@...
    ad08:	4604f9db f0012000 4605fd47 1ca02104     ...F. ..G..F.!..
    ad18:	f9e4f002 0a2970a5 0a0970e1 0a097121     .....p)..p..!q..
    ad28:	20017161 20007060 70204907 46206809     aq. `p. .I p.h F
    ad38:	20004788 b510bd70 20154904 f9c8f002     .G. p....I. ....
    ad48:	0000bd10 00003801 100400e4 10007c84     .....8.......|..
    ad58:	2001b51c f9c8f002 f9ccf002 68004844     ... ........DH.h
    ad68:	4d444780 07407b28 28030f40 4942d803     .GDM({@.@..(..BI
    ad78:	68092000 48414788 26007801 d00e2900     . .h.GAH.x.&.)..
    ad88:	ca06a23f 91009201 22007006 46682105     ?........p.".!hF
    ad98:	f9b6f002 21052200 f0024668 68a8f9b7     .....".!hF.....h
    ada8:	d4030040 78014838 d0fc2900 f9b4f002     @...8H.x.)......
    adb8:	f9b8f002 f9bcf002 4c344935 68606809     ........5I4L.h`h
    adc8:	49344788 f0022003 f000f9b9 68a0fbe9     .G4I. .........h
    add8:	68a84780 d40a0040 28017820 7860d1fc     .G.h@... x.(..`x
    ade8:	d0042800 492d7066 60c8482b f002e7fe     .(..fp-I+H.`....
    adf8:	f7fff9ab f7ffff39 4829ff9e 47806800     ....9.....)H.h.G
    ae08:	4828b662 f9a6f002 07007b28 f002d501     b.(H....({......
    ae18:	4c25f9a7 15a56860 606043a8 20064923     ..%L`h...C``#I. 
    ae28:	47886809 43286860 68a06060 430801e9     .h.G`h(C``.h...C
    ae38:	4c1f60a0 f99af002 47806820 d0f92800     .`.L.... h.G.(..
    ae48:	f002481c e7f5f999 20004601 d00d2900     .H.......F. .)..
    ae58:	d1072902 780a490c d0042a02 29017809     .)...I.x.*...x.)
    ae68:	4815d100 48144770 47703010 47704813     ...HpG.H.0pG.HpG
    ae78:	10040160 10040828 100401c0 10040025     `...(.......%...
    ae88:	54554f42 00000021 100400d9 10040000     BOUT!...........
    ae98:	10040104 10005e1d 05fa0004 e000ed00     .....^..........
    aea8:	10040154 100403bc 4000f400 10040210     T..........@....
    aeb8:	1004010c 100405ec 10007bb0 0001e2bc     .........{......
    aec8:	4addb5f0 49dd6816 48dd4bdd 128c3340     ...J.h.I.K.H@3..
    aed8:	2e0012cd 6886d026 400e6857 0fff073f     ....&..hWh.@?...
    aee8:	4337047f 689e6087 6851400e 0fc90709     ..7C.`.h.@Qh....
    aef8:	43310449 69416099 40216853 0fdb075b     I.1C.`AiSh!@[...
    af08:	430b01db 69416143 40296853 0fdb079b     ...CCaAiSh)@....
    af18:	430b019b 49cb6143 400b6943 07c96851     ...CCa.ICi.@Qh..
    af28:	e02e0fc9 68d64ac8 07f60d76 68d6d12c     .....J.hv...,..h
    af38:	07f60d36 6886d028 400e68d7 0fff033f     6...(..h.h.@?...
    af48:	4337047f 689e6087 68d1400e 0fc90309     ..7C.`.h.@.h....
    af58:	43310449 69416099 402168d3 0fdb04db     I.1C.`Ai.h!@....
    af68:	430b01db 69416143 402968d3 0fdb051b     ...CCaAi.h)@....
    af78:	430b019b 49b36143 400b6943 054968d1     ...CCa.ICi.@.hI.
    af88:	03c90fc9 61414319 4770bdf0 49afb530     .....CAa..pG0..I
    af98:	61082000 684849ae 43102201 49ad6048     . .a.IHh.".CH`.I
    afa8:	158a6988 61884390 680048ab d1042800     .i...C.a.H.h.(..
    afb8:	69184baa 43202404 69086118 78254ca8     .K.i.$ C.a.i.L%x
    afc8:	02db2303 d1002d01 25e14398 43a803ad     .#...-...C.%...C
    afd8:	68c86108 78242502 2c0143a8 241cd101     .a.h.%$x.C.,...$
    afe8:	242043a0 439043a0 43984a9e 60c84390     .C $.C.C.J.C.C.`
    aff8:	4f9dbd30 26004c9d 47806838 d10d2800     0..O.L.&8h.G.(..
    b008:	28027a20 f002d00a 2802f8bd f002d0fb      z.(.......(....
    b018:	2800f8b9 bf00d102 72202001 25007a20     ...(.....  r z.%
    b028:	d03b2800 d04e2801 d1e52802 88004890     .(;..(N..(...H..
    b038:	d0022800 6800488f f0024780 7860f8a9     .(...H.h.G....`x
    b048:	d0012800 f8aaf002 f8aef002 20016aa1     .(...........j. 
    b058:	f0024788 4888f8af 47806800 68004887     .G.....H.h.G.H.h
    b068:	48794780 074068c0 28030f40 4984d803     .GyH.h@.@..(...I
    b078:	68092001 78a04788 70a01c40 68004881     . .h.G.x@..p.H.h
    b088:	6a204780 d0012800 47806a20 ff7ef7ff     .G j.(.. j.G..~.
    b098:	2001497d 61886809 e01bb662 280079e0     }I. .h.ab....y.(
    b0a8:	bf30d100 78284d79 d1a52801 f888f002     ..0.yM(x.(......
    b0b8:	f002702e 4876f88b 28006800 4874d19c     .p....vH.h.(..tH
    b0c8:	f848f002 2004e798 f886f002 47806838     ..H.... ....8h.G
    b0d8:	d0012800 e78f7226 f884f002 f888f002     .(..&r..........
    b0e8:	d1fb2800 f86cf002 f888f002 28027a20     .(....l..... z.(
    b0f8:	2002d043 48677220 07c16800 2101d005     C..  rgH.h.....!
    b108:	430d0449 1c497921 07807121 6960d402     I..C!yI.!q....`i
    b118:	d0052800 04802001 79604305 71601c40     .(... ...C`y@.`q
    b128:	04002001 70664305 495b78e0 70e01c40     . ...Cfp.x[I@..p
    b138:	20016809 4f444788 28017c38 2000d020     .h. .GDO8|.( .. 
    b148:	43284956 f0024308 743ef85f 20006aa1     VI(C.C.._.>t.j. 
    b158:	48404788 22026981 61814311 69814850     .G@H.i.".C.aPH.i
    b168:	439122c0 69816181 43911582 4c4d6181     .".C.a.i...C.aML
    b178:	47806820 d1fb2800 f002e7fe e73bf827      h.G.(......'.;.
    b188:	02402001 b510e7dc 8410f3ef b6724a46     . @.........FJr.
    b198:	68506811 23001c49 60114158 f0016050     .hPhI..#XA.`P`..
    b1a8:	b662ff3b 8810f384 b510bd10 207c493f     ;.b.........?I| 
    b1b8:	4a216048 7a11483e d10e2901 493d4b3e     H`!J>H.z.)..>K=I
    b1c8:	4b3e8019 61592101 21044b3d 493d8019     ..>K.!Ya=K.!..=I
    b1d8:	493d6001 21006041 68d37211 680c491e     .`=IA`.!.r.h.I.h
    b1e8:	d01842a3 60d3680b 4a38680b 2b004938     .B...h.`.h8J8I.+
    b1f8:	4b38d007 4a388013 4a3860c2 4a386102     ..8K..8J.`8J.a8J
    b208:	4b38e006 4a388013 4a3860c2 4a386102     ..8K..8J.`8J.a8J
    b218:	8809800a 49376081 22076848 43100712     .....`7IHh."...C
    b228:	48326048 1e404934 bd106208 48332101     H`2H4I@..b...!3H
    b238:	60480709 ffeef001 10007bd0 fffdffff     ..H`.....{......
    b248:	40020800 ffff7fff 10040828 4000b200     ...@....(......@
    b258:	40014000 4000b000 10007d38 e000ed00     .@.@...@8}......
    b268:	100400d9 20058000 1004018c 1004001c     ....... ........
    b278:	10040094 100400a0 10040170 10040160     ........p...`...
    b288:	100401c0 10040154 1004015c 10040141     ....T...\...A...
    b298:	100405ec 10040168 10040210 00400001     ....h.........@.
    b2a8:	4000e200 10040188 10040240 40025100     ...@....@....Q.@
    b2b8:	4000e040 000009c4 10007be8 4000f000     @..@.....{.....@
    b2c8:	1004009c 03020000 06050403 10040090     ................
    b2d8:	10040096 000004a6 01020c0d 00000c03     ................
    b2e8:	00001f12 000005d7 01021617 00001603     ................
    b2f8:	0000291c 40024000 40041840 0001e1ad     .)...@.@@..@....
    b308:	4c39b5f8 28006920 4838d006 28006800     ..9L i.(..8H.h.(
    b318:	4836d102 ff1ef001 4f364e35 2d006925     ..6H....5N6O%i.-
    b328:	0628d060 2080d503 f00161a0 07a8ff79     `.(.... .a..y...
    b338:	2002d503 f00161a0 0728ff79 2008d504     ... .a..y.(.... 
    b348:	200061a0 ff78f001 d50505e8 300120ff     .a. ..x...... .0
    b358:	200161a0 ff70f001 d50405a8 02402001     .a. ..p...... @.
    b368:	f00161a0 0668ff6f 2040d503 f00161a0     .a..o.h...@ .a..
    b378:	06e8ff6f 2010d503 f00161a0 0768ff6f     o...... .a..o.h.
    b388:	4919d51e 31c02001 6bc863c8 d1fc2800     ...I. .1.c.k.(..
    b398:	491969e0 49196008 68092004 20044788     .i.I.`.I. .h.G. 
    b3a8:	491761a0 62082000 68004816 88304780     .a.I. .b.H.h.G0.
    b3b8:	d0052800 47806838 ff56f001 ff30f001     .(..8h.G..V...0.
    b3c8:	d00a07e8 28008830 2001d107 683861a0     ....0..(... .a8h
    b3d8:	f0014780 f001ff49 06a8ff23 2020d59e     .G..I...#.....  
    b3e8:	e79b61a0 0000bdf8 40040000 100405ec     .a.........@....
    b3f8:	10040094 10040174 10007be0 10040210     ....t....{......
    b408:	4000b000 10040110 4604b5fe ff32f001     ...@.......F..2.
    b418:	f0019000 4607ff35 46257a20 0f000700     ....5..F z%F....
    b428:	90013564 78a84626 28003624 f001d101     d5..&F.x$6.(....
    b438:	4630ff2d ff30f001 481e4621 ff32f001     -.0F..0.!F.H..2.
    b448:	481d78a9 d1032900 42f99900 8801d000     .x.H.).....B....
    b458:	22029901 4919008b 800a1859 804a8df2     ..."...IY.....J.
    b468:	78ab9900 430b19c9 4a164e15 25014916     ...x...C.N.J.I.%
    b478:	d1142b00 07db8803 2300d011 6836800b     .+.........#..6h
    b488:	d0012e00 e0008015 804b8013 490f68a2     ..........K..h.I
    b498:	624a1e52 620a8882 62888840 800dbdfe     R.Jb...b@..b....
    b4a8:	28006830 2004d001 2003e000 804d8010     0h.(... ... ..M.
    b4b8:	0000bdfe 1004085c 1004007c 40030000     ....\...|......@
    b4c8:	10007d38 1004009c 10007be4 40024040     8}.......{..@@.@
    b4d8:	68094911 0a814348 18890bc2 18080c00     .I.hHC..........
    b4e8:	30ff30ff 0a803002 b5304770 8800480b     .0.0.0..pG0..H..
    b4f8:	ffeef7ff 46034d0a f7ff8828 b284ffe9     .....M.F(.......
    b508:	f7ff8868 0559ffe5 b28002a2 43014311     h.....Y......C.C
    b518:	63c14804 0000bd30 10040204 10007be8     .H.c0........{..
    b528:	10040090 40040000 0a04b510 2810b2c0     .......@.......(
    b538:	dc0ed034 d023280c 2803dc06 280ad017     4....(#....(...(
    b548:	280bd020 e019d111 d013280d d10c280e      ..(.....(...(..
    b558:	2837e012 dc04d01a d0152811 d1042812     ..7(.....(...(..
    b568:	2838e01a 2839d014 f001d014 0221fea1     ..8(..9(......!.
    b578:	bd104308 e7fa200a e7f8200b e7f62008     .C... ... ... ..
    b588:	e7f42009 e7f22007 e7f02005 e7ee2014     . ... ... ... ..
    b598:	e7ec2015 e7ea200e e7e82006 e7e62004     . ... ... ... ..
    b5a8:	2003b510 fe8af001 20034902 fd90f001     ... .....I. ....
    b5b8:	0000bd10 10007b18 4618b570 4601460d     .....{..p..F.F.F
    b5c8:	23822400 f001481e 7969fd77 2900682a     .$.#.H..w.iy*h.)
    b5d8:	2980d001 2112d901 792be027 d0082b08     ...)...!'.+y.+..
    b5e8:	d00f2b10 d01b2b20 5d13e01e 70ab1905     .+.. +.....]...p
    b5f8:	428c1c64 e016d3f9 19055b13 0a1b70ab     d..B.....[...p..
    b608:	1ca470eb d3f7428c e00c0049 19055913     .p...B..I....Y..
    b618:	0a1b70ab 0a1b70eb 0a1b712b 1d24716b     .p...p..+q..kq$.
    b628:	d3f3428c 70410089 70012100 78424601     .B....Ap.!.p.FBx
    b638:	1c92390c 4903814a 47886809 bd702000     .9..J..I.h.G. p.
    b648:	00000319 100400e4 4c6eb5f8 d00f0005     ..........nL....
    b658:	28027fa0 7fe0d107 d0012801 d1022805     ...(.....(...(..
    b668:	f00168e0 2d01fe31 2000d13e fe32f001     .h..1..->.. ..2.
    b678:	29007fa1 4863d00a 29013016 2902d01b     ...)..cH.0.)...)
    b688:	f001d070 2800fe2d e09ad12e 28017fe0     p...-..(.......(
    b698:	2805d006 2806d008 2807d006 e005d108     ...(...(...(....
    b6a8:	f0012003 bdf8fe23 e7fa2008 e7f82004     . ..#.... ... ..
    b6b8:	fe10f001 7fe1bdf8 d0162901 d0252905     .........)...)%.
    b6c8:	d0502906 d1f52907 f0014605 ba00fe15     .)P..)...F......
    b6d8:	78e90a00 43080200 90006800 220068a0     ...x...C.h...h."
    b6e8:	21046843 47984668 4605e068 fe0af001     Ch.!hF.Gh..F....
    b6f8:	280078a8 2822d003 7fe0d906 882be7d8     .x.(.."(......+.
    b708:	22004601 e0574618 e01b493f 46054f3f     .F.".FW.?I..?O.F
    b718:	88406839 46064788 060043f0 d0140e00     9h@..G.F.C......
    b728:	88a86839 80a84788 88eb4602 46318828     9h...G...F..(.1F
    b738:	fcc2f001 60e0380c 894868e1 d00f2800     .....8.`.hH..(..
    b748:	310c88e8 fde4f001 88ebbdf8 210a886a     ...1........j..!
    b758:	f001482f 380cfcb1 882960e0 e7eb8141     /H.....8.`).A...
    b768:	e01e4608 4604e017 fdc6f001 0a05ba00     .F.....F........
    b778:	022d78e0 1d204305 fdbef001 0a00ba00     .x-..C .........
    b788:	020079e1 60284308 fdc8f001 46282104     .y...C(`.....!(F
    b798:	fdcaf001 7fe1bdf8 d0072901 d1f92905     .........)...)..
    b7a8:	491c68e0 300c6809 e0074788 f0014604     .h.I.h.0.G...F..
    b7b8:	78a1fda9 4a148820 fdbcf001 fdaef001     ...x ..J........
    b7c8:	f001bdf8 bdf8fdbd 2003b510 fdbef001     ........... ....
    b7d8:	69204c0c fd78f001 28006a20 f001d003     .L i..x. j.(....
    b7e8:	2000fdbb 68206220 d0052800 f0014805     ...  b h.(...H..
    b7f8:	f001fdb9 bd10fdbd 20042100 fdbef001     .........!. ....
    b808:	0000bd10 10040bb0 10007bea 100400bc     .........{......
    b818:	00000d21 100400e4 4604b570 3c0c4828     !.......p..F(H.<
    b828:	07c56ac0 0fed88e0 d0122805 8610f3ef     .j.......(......
    b838:	4824b672 f0014621 b662fd35 8810f386     r.$H!F..5.b.....
    b848:	492188a0 d10d4288 b2c188e0 d005290b     ..!I.B.......)..
    b858:	4621e008 f001481d e02cfd97 02000a00     ..!F.H....,.....
    b868:	80e03014 491a88a0 d1104288 88e04919     .0.....I.B...I..
    b878:	42886809 201bd10b fd1af001 f0014606     .h.B... .....F..
    b888:	2801fc15 2100d103 f0014630 88e0fd77     ...(...!0F..w...
    b898:	d0102804 28048920 2d00d10d 480ed004     .(.. ..(...-...H
    b8a8:	28006800 e006d004 2001490c e0026208     .h.(.....I. .b..
    b8b8:	f0014809 2001fc4f fd6cf001 0000bd70     .H..O.. ..l.p...
    b8c8:	4000b1c0 10040bd4 00000c13 10040c20     ...@........ ...
    b8d8:	00000e03 10040018 100405ec 4000b000     ...............@
    b8e8:	48c6b5fe 4dc44ec3 24006941 01c909c9     ...H.N.MAi.$....
    b8f8:	43112255 68816141 00490849 69c16081     U".CAa.hI.I..`.i
    b908:	40114abf 69c161c1 43112202 48bd61c1     .J.@.a.i.".C.a.H
    b918:	18380527 f001210d 9001fd43 210d48ba     '.8..!..C....H.!
    b928:	f0011838 9000fd3d 006148b8 0480180f     8...=....Ha.....
    b938:	f0014639 4ab5fd3b 43504639 fd36f001     9F..;..J9FPC..6.
    b948:	46394ab2 f0014350 219dfd31 21014348     .J9FPC..1..!HC.!
    b958:	18400449 0c80219d 18420209 230c4621     I.@..!....B.!F.#
    b968:	98014359 4baa5070 60431988 98006082     YC..pP.K..C`.`..
    b978:	48a85068 60481949 b2e41c64 d3c62c28     hP.HI.H`d...(,..
    b988:	48a52501 600505ed 60424aa4 60812100     .%.H...`.JB`.!.`
    b998:	60c34ba3 61416101 61c26185 62436205     .K.`.aAa.a.a.bCb
    b9a8:	62c16281 69e04c95 43882102 69e061e0     .b.b.L.i.!.C.a.i
    b9b8:	43c94993 61e04308 210168a0 60a04308     .I.C.C.a.h.!.C.`
    b9c8:	61e04898 49984899 49996001 49996041     .H.a.H.I.`.IA`.I
    b9d8:	f7ff6081 4898fa75 48996160 60014997     .`..u..H`a.H.I.`
    b9e8:	60416841 22806841 60414391 68084995     AhA`Ah.".CA`.I.h
    b9f8:	43100492 49946008 12126808 439043a8     ...C.`.I.h...C.C
    ba08:	68124a92 d1012a00 43904a91 05122207     .J.h.*...J.C."..
    ba18:	60084390 b510bdfe 69604c78 09c02155     .C.`....xL`iU!..
    ba28:	430801c0 48816160 6001497f 60414980     ...C`a.H.I.`.IA`
    ba38:	60814980 fa44f7ff 6160487f 61e04879     .I.`..D..H`ayH.a
    ba48:	497869e0 43083980 68a061e0 43082101     .ixI.9.C.a.h.!.C
    ba58:	497b60a0 158a6848 60484310 68084979     .`{IHh...CH`yI.h
    ba68:	43100452 49786008 22416808 43900452     R..C.`xI.hA"R..C
    ba78:	68124a76 d1012a00 43904a75 05122207     vJ.h.*..uJ.C."..
    ba88:	60084390 b240bd10 b5704770 4a712100     .C.`..@.pGp..!qJ
    ba98:	460d2315 188c021b 1d096025 d3fa4299     .#.F....%`...B..
    baa8:	4a6d2103 62d10409 6201496c 6241496c     .!mJ...blI.blIAb
    bab8:	2206496c 212c6141 496b540a 496b6281     lI."Aa,!.TkI.bkI
    bac8:	496b6001 496b6041 496c61c1 6008486a     .`kIA`kI.alIjH.`
    bad8:	3c404c6a 03896b20 43084388 f0016320     jL@< k...C.C c..
    bae8:	4867fc6b 6ba06085 09000100 430805a1     k.gH.`.k.......C
    baf8:	4c4263a0 63602003 49622009 60c80580     .cBL. `c. bI...`
    bb08:	feeef7ff 4860494f 60483180 495f4860     ....OI`H.1H``H_I
    bb18:	49606141 49606181 495b61c1 62013113     Aa`I.a`I.a[I.1.b
    bb28:	30404842 4a5d68c1 68120989 43110189     BH@0.h]J...h...C
    bb38:	68a060c1 03892101 60a04388 200c4958     .`.h.!...C.`XI. 
    bb48:	bd706188 4857b570 28008800 2005d00a     .ap.p.WH...(... 
    bb58:	23000200 2215493f 18440212 1d006023     ...#?I."..D.#`..
    bb68:	d3fa4290 68004850 61604c24 6800484f     .B..PH.h$L`aOH.h
    bb78:	6148492e 49382003 62c80400 483e493f     .IHa. 8I...b?I>H
    bb88:	4d3e6008 6b283d40 43880389 63284308     .`>M@=(k...C.C(c
    bb98:	fc12f001 fb09f7ff 01006ba8 02e10900     .........k......
    bba8:	63a84308 68004842 20034780 20096360     .C.cBH.h.G. `c. 
    bbb8:	05804934 f7ff60c8 4922ff2e 31804832     4I...`...."I2H.1
    bbc8:	48336048 61414931 61814932 61c14932     H`3H1IAa2I.a2I.a
    bbd8:	3113492d 48156201 68c13040 09894a2f     -I.1.b.H@0.h/J..
    bbe8:	01896812 60c14311 210168a0 43880389     .h...C.`.h.!...C
    bbf8:	bd7060a0 40022800 40022a00 40020000     .`p..(.@.*.@...@
    bc08:	feefcfff 4b100007 4b180007 00000962     .......K...Kb...
    bc18:	423d55af 420155af 40022c00 00048060     .U=B.U.B.,.@`...
    bc28:	00008060 01103080 00002402 40020800     `....0...$.....@
    bc38:	6438ee11 00010ee4 6a029143 0f600107     ..8d....C..j..`.
    bc48:	4000f400 40041800 40020180 10007d38     ...@...@...@8}..
    bc58:	04000700 40030000 40041a80 0001b645     .......@...@E...
    bc68:	0001b637 0001b35b 0001b363 0001b32f     7...[...c.../...
    bc78:	0001b349 100060db 054a0756 40040080     I....`..V.J....@
    bc88:	4000f000 40024000 00000303 d6d6e8ff     ...@.@.@........
    bc98:	40041900 8199afc4 0000516a 10007c14     ...@....jQ...|..
    bca8:	4000e200 10007be4 10007c1c 10007c20     ...@.{...|.. |..
    bcb8:	10040184 03892101 d3004288 49704608     .....!...B...FpI
    bcc8:	43486809 0b420ac1 0c421851 0c821851     .hHC..B.Q.B.Q...
    bcd8:	0cc21851 0d021851 0d821851 0e021851     Q...Q...Q...Q...
    bce8:	0e421851 0e821851 18511c40 18400f80     Q.B.Q...@.Q...@.
    bcf8:	1e40d000 47704770 2600b5fe 90002040     ..@.pGpG...&@ ..
    bd08:	8010f3ef 4c5f9001 2001b672 f0018060     ......_Lr.. `...
    bd18:	2800fb59 2002d074 80602601 fa32f001     Y..(t.. .&`...2.
    bd28:	d0fb2802 80602003 fa2cf001 d0f12800     .(... `...,..(..
    bd38:	20044d54 350c8060 280078e8 2005d060     TM. `..5.x.(`.. 
    bd48:	88288060 d15b2800 80602007 9000484e     `.(..([.. `.NH..
    bd58:	8800484e d0042800 78a9484d 180f8800     NH...(..MH.x....
    bd68:	78a8e002 18476861 80602008 88004849     ...xahG.. `.IH..
    bd78:	d0032800 fb2cf001 d0fb2800 80602009     .(....,..(... `.
    bd88:	46684639 fb2af001 d0732800 8060200a     9FhF..*..(s.. `.
    bd98:	fb2af001 d06d2800 8060200b 46684639     ..*..(m.. `.9FhF
    bda8:	fb28f001 d0652800 98004f39 1a408839     ..(..(e.9O..9.@.
    bdb8:	d35f2805 8060200c fb22f001 d0202800     .(_.. `..."..( .
    bdc8:	8060200f 68004834 28004780 4833d003     . `.4H.h.G.(..3H
    bdd8:	07806800 2010d44e 49318060 62082000     .h..N.. `.1I. .b
    bde8:	68c04830 06804930 60080e80 fb0ef001     0H.h0I.....`....
    bdf8:	fb12f001 98004924 d1044288 e00a2000     ....$I...B... ..
    be08:	2600e038 4921e036 29008809 8839d001     8..&6.!I...)..9.
    be18:	6861e000 90001a40 80602011 21014823     ..ah@.... `.#H.!
    be28:	6bc163c1 d1fc2900 38c04820 4f2069c0     .c.k.).. H.8.i O
    be38:	98006038 ff3ef7ff 201260a0 79298060     8`....>..`. `.)y
    be48:	f00168a0 2001faef 0780491a 78206008     .h..... .I...` x
    be58:	70201c40 80602013 69404817 48116078     @. p. `..H@ix`.H
    be68:	69403840 481560b8 47806a80 68014814     @8@i.`.H.j.G.H.h
    be78:	d5fc0049 9801b662 8810f380 bdfe4630     I...b.......0F..
    be88:	10040204 100400f0 0000ffff 10040094     ................
    be98:	1004009c 10007be6 1004018c 4000e000     .....{.........@
    bea8:	4000b000 40020840 10007c14 400400c0     ...@@..@.|.....@
    beb8:	10007c18 e000e100 40020000 10040d90     .|.........@....
    bec8:	e000e200 0ec906c1 40882001 6008492f     ......... .@/I.`
    bed8:	06c14770 20010ec9 492c4088 60083180     pG..... .@,I.1.`
    bee8:	06c14770 20010ec9 49294088 47706008     pG..... .@)I.`pG
    bef8:	f001b570 2501fa9d 106c03ed 4a251063     p......%..l.c.%J
    bf08:	d0122800 60102000 63901e40 f7ff2018     .(... .`@..c. ..
    bf18:	6950ffe8 61504328 43206950 69506150     ..Pi(CPaPi CPaPi
    bf28:	61504318 f7ff2018 481bffdc 481b6390     .CPa. .....H.c.H
    bf38:	07896801 6ad1d006 62d14329 43296b11     .h.....j)C.b.k)C
    bf48:	62156311 06896801 d0060f89 43216ad1     .c.b.h.......j!C
    bf58:	6b1162d1 63114321 68006214 0f800580     .b.k!C.c.b.h....
    bf68:	6ad0d006 62d04318 43186b10 62136310     ...j.C.b.k.C.c.b
    bf78:	f7ff2018 201fffa7 ffa4f7ff f7ff2015     . ..... ..... ..
    bf88:	201bffa1 ff9ef7ff 0000bd70 e000e100     ... ....p.......
    bf98:	e000e280 40011000 0000ffff 4000f000     .......@.......@
    bfa8:	4857b5f8 48577801 68462901 d11d4856     ..WH.xWH.)FhVH..
    bfb8:	d11b2e01 6a8a4955 401a4b55 431a4b55     ....UI.jUK.@UK.C
    bfc8:	6aca628a 401a4b54 431a2301 688162ca     .b.jTK.@.#.C.b.h
    bfd8:	40114a52 43114a52 69016081 4311220c     RJ.@RJ.C.`.i.".C
    bfe8:	68416101 02122277 60414391 220f6901     .aAhw"...CA`.i."
    bff8:	43110292 484b6101 e0006805 69686928     ...C.aKH.h..(ihi
    c008:	d1fb07c0 68004848 0f400080 f0010003     ....HH.h..@.....
    c018:	0508fa15 110e0b08 1c1a1714 026424e1     .............$d.
    c028:	24e1e013 e01002a4 02e424e1 24e1e00d     ...$.....$.....$
    c038:	e00a0324 022424e1 244be007 e0040264     $....$$...K$d...
    c048:	0224244b 244be001 483801e4 46216807     K$$...K$..8H.h!F
    c058:	f0014638 b282f9ab 43504620 20001a39     8F...... FPC9.. 
    c068:	e0020923 b2c01c40 428b1ac9 1c40d3fa     #...@......B..@.
    c078:	48230841 28017800 2e01d103 2020d101     A.#H.x.(......  
    c088:	20006228 00d262a8 626a430a 21014a28     (b. .b...Cjb(J.!
    c098:	491d6011 680a3180 01120912 60a8600a     .`.I.1.h.....`.`
    c0a8:	210269a8 61a84308 b430bdf8 4c1d4b21     .i.!.C.a..0.!K.L
    c0b8:	6019609a 68246058 d10d290a 2d047805     .`.`X`$h.)...x.-
    c0c8:	7845d10a d1072d0e 2d1f7905 7940d104     ..Ex.-...y.-..@y
    c0d8:	d1012820 60191e49 d0082900 07c06860      (..I..`.)..`h..
    c0e8:	6858d0fc 60257805 60581c40 2000e7f2     ..Xh.x%`@.X`... 
    c0f8:	2a006058 6098d002 4710bc30 4770bc30     X`.*...`0..G0.pG
    c108:	100400d9 10007c9c 4000b040 4000b180     .....|..@..@...@
    c118:	c0c0ffff 02030000 ffffc0c0 ff8888ff     ................
    c128:	00111100 1004015c 10040828 10007cb0     ....\...(....|..
    c138:	e000e100 10041968 493ab5fe 68094838     ....h.....:I8H.h
    c148:	4d394788 4a382000 3d504b38 24261c41     .G9M. 8J8KP=A.&$
    c158:	43440749 0f49260a 434618a4 807c18f7     I.DC.&I...FC..|.
    c168:	4361240a 19494c31 19343c40 1c408761     .$aC1LI.@<4.a.@.
    c178:	dbeb2808 68204c2e 438821f0 430821e0     .(...L h.!.C.!.C
    c188:	482b6020 30c02196 0a526b02 430a0252      `+H.!.0.kR.R..C
    c198:	6b016302 40114a27 43114a27 48276301     .c.k'J.@'J.C.c'H
    c1a8:	682060e0 438800e1 68206020 43881049     .` h...C ` hI..C
    c1b8:	22066020 46684922 ff84f000 88084669      `.""IhF....iF..
    c1c8:	04098849 62614301 88884669 682062a0     I....CabiF...b h
    c1d8:	43881561 60204308 21074815 61013080     a..C.C `.H.!.0.a
    c1e8:	39184916 49156301 63413124 39c0490e     .I.9.c.I$1Ac.I.9
    c1f8:	48146381 7c00210a 19404348 f7ff62e0     .c.H.!.|HC@..b..
    c208:	2001f974 f920f001 f924f001 7800480e     t.. .. ...$..H.x
    c218:	d0012800 f924f001 f928f001 0000bdfe     .(....$...(.....
    c228:	10040d90 100400ec 00000aca 40030a80     ...............@
    c238:	40040000 fc00ffff 01e50000 0000033a     ...@........:...
    c248:	0001f8b2 10040b9c 100400a4 21004803     .............H.!
    c258:	60016041 21026801 47706001 4000d000     A`.`.h.!.`pG...@
    c268:	6802b510 43086b10 20046310 fe2af7ff     ...h.k.C.c. ..*.
    c278:	b510bd10 6b106802 63104388 f7ff2004     .....h.k.C.c. ..
    c288:	bd10fe28 2101b5f0 0f240704 2300460a     (......!..$..F.#
    c298:	40a24db3 d82a2818 28074cb2 6863d801     .M.@.(*..L.(..ch
    c2a8:	280fe006 68a3d801 2817e002 68e3d800     ...(...h...(...h
    c2b8:	0ef70746 40be2607 280743b3 6063d801     F....&.@.C.(..c`
    c2c8:	280fe006 60a3d801 2817e002 60e3d800     ...(...`...(...`
    c2d8:	d2082810 68534aa4 430b4081 69136053     .(...JSh.@.CS`.i
    c2e8:	6113430b 49a1e001 7728e00d 4603bdf0     .C.a...I..(w...F
    c2f8:	2b033b2c 4c9ed8fa 07866923 40b10fb6     ,;.+...L#i.....@
    c308:	6123438b 684b499b 604b4313 4313690b     .C#a.IKh.CK`.i.C
    c318:	e7ea610b 4892b530 7f022101 d2062a10     .a..0..H.!...*..
    c328:	685c4b91 4095460d 605c43ac 4b8ce009     .K\h.F.@.C\`...K
    c338:	071c7f1b 23010f24 2a1840a3 4a8bd203     ....$..#.@.*...J
    c348:	7741e005 3a2cbd30 d8042a03 68544a89     ..Aw0.,:.*...JTh
    c358:	6054439c 2100e7f5 b530e7f3 23004880     .CT`...!..0..H.#
    c368:	24017f01 d2052910 68554a7f 4325408c     ...$.)...JUh.@%C
    c378:	e0096055 7f124a7a 0f240714 40a22201     U`..zJ....$..".@
    c388:	d2032918 e0054979 bd307743 2903392c     .)..yI..Cw0.,9.)
    c398:	4978d8fb 4314684c e7f5604c 4606b570     ..xILh.CL`..p..F
    c3a8:	460c4615 f7ff2004 4b6dfd94 609e2001     .F.F. ....mK. .`
    c3b8:	605c60dd 841c7798 6801e004 02090a09     .`\`.w.....h....
    c3c8:	600131fe 68006818 07c96881 2004d1f5     .1.`.h.h.h..... 
    c3d8:	fd78f7ff ff9ef7ff 20094967 bd706048     ..x.....gI. H`p.
    c3e8:	2500b570 e04c4c5e 2a007fa2 6862d026     p..%^LL....*&.bh
    c3f8:	d00d2a00 780268a0 60a01c40 68016808     .*...h.x@..`.h.h
    c408:	02090a09 60014311 1e406860 e01a6060     .....C.``h@.``..
    c418:	0a096801 31fe0209 48576001 1e496841     .h.....1.`WHAhI.
    c428:	68406041 d10e2800 f7ff77a5 68e1ff96     A`@h.(...w.....h
    c438:	d0082900 60e52000 e0044788 0a096801     .)... .`.G...h..
    c448:	31fe0209 69606001 d0172800 68096821     ...1.``i.(..!h.h
    c458:	70016849 1e406920 69616120 61611c49     Ih.p i@. aaiI.aa
    c468:	d10e2800 21016165 f7ff6820 69a1ff02     .(..ea.! h.....i
    c478:	d0022900 61a52000 bd704788 68006820     .)... .a.Gp. h.h
    c488:	68216840 68c26808 d1ad07d2 b5f0bd70     @h!h.h.h....p...
    c498:	4606b087 4668211c ffeef000 2e004f37     ...F.!hF....7O..
    c4a8:	7838d106 d1032800 482d2124 ffe4f000     ..8x.(..$!-H....
    c4b8:	46692000 74087048 744a2201 70887008     . iFHp.t."Jt.p.p
    c4c8:	7b00482f 0f400740 d80b2803 492d00c2     /H.{@.@..(....-I
    c4d8:	5a8b4668 18518243 8282884a 82c2888a     hF.ZC.Q.J.......
    c4e8:	830188c9 4c284d1e d0022e01 d00d2e00     .....M(L........
    c4f8:	7820e012 d0022800 28027820 4821d10c     .. x.(.. x.(..!H
    c508:	4922466a f0003808 e005ffbd 28007838     jF"I.8......8x.(
    c518:	481cd102 60283808 28007820 7820d002     ...H.8(` x.(.. x
    c528:	d1032802 78004814 feacf7ff 68282101     .(...H.x.....!(h
    c538:	fe9ff7ff f0002014 7820ffab d00c2800     ..... .... x.(..
    c548:	28027820 4912d107 f0002014 2101ffa7      x.(...I. .....!
    c558:	f7ff6828 b007fe85 490ebdf0 0000e7f4     (h.........I....
    c568:	10041e00 4000b040 40010000 40011000     ....@..@...@...@
    c578:	4000f400 40013000 10007ca8 10040000     ...@.0.@.|......
    c588:	10040828 10040198 100400d9 40006000     (............`.@
    c598:	10006a35 0001d1c7 428849f8 2000d301     5j.......I.B... 
    c5a8:	49f74770 29951841 2001d201 49f54770     pG.IA..)... pG.I
    c5b8:	184122ff 42913216 2002d201 49f14770     ."A..2.B... pG.I
    c5c8:	1840318b d201288b 47702003 47702004     .1@..(... pG. pG
    c5d8:	01092129 d2014288 47702000 29131a41     )!...B... pGA..)
    c5e8:	2001d201 49e84770 29121841 2002d201     ... pG.IA..)... 
    c5f8:	49e54770 18413912 d2012912 47702003     pG.I.9A..)... pG
    c608:	392449e1 29241841 2004d201 49de4770     .I$9A.$)... pG.I
    c618:	18413948 d2012912 47702005 395a49da     H9A..)... pG.IZ9
    c628:	295b1841 2006d201 216b4770 1a4000c9     A.[)... pGk!..@.
    c638:	d20128da 47702007 47702008 010049d3     .(... pG. pG.I..
    c648:	03411a08 18890302 18890282 18890242     ..A.........B...
    c658:	18890202 18890182 18890102 188900c2     ................
    c668:	21011808 280004c9 1840dd02 47701500     ...!...(..@...pG
    c678:	15001a08 47704240 0080b508 28009000     ....@BpG.......(
    c688:	1e40dd01 bd08e7fa 4606b5f0 4fc048c1     ..@........F.H.O
    c698:	b0896841 22072500 43910412 04122205     Ah...%."...C."..
    c6a8:	60414311 684849bc 020022f9 06120a00     .CA`.IHh."......
    c6b8:	09c04310 220301c0 60484310 48b42205     .C.....".CH`.".H
    c6c8:	38080292 4ab56002 230c6990 01000900     ...8.`.J.i.#....
    c6d8:	61904318 23386888 23184398 60884318     .C.a.h8#.C.#.C.`
    c6e8:	15096910 61104308 f7ff2028 48acffc5     .i...C.a( .....H
    c6f8:	21096884 f0004668 49a5febf 3908466a     .h.!hF.....IjF.9
    c708:	6848e00d d5fc03c0 f7ff200a 6838ffb5     ..Hh..... ....8h
    c718:	50d000a3 68481945 d4fc03c0 2c001e64     ...PE.Hh....d..,
    c728:	489cd1ef 22076841 43910412 04522201     ...HAh."...C."R.
    c738:	60414311 6881489a f0004628 4601fe37     .CA`.H.h(F..7..F
    c748:	6b804898 d40c00c0 30404896 69806982     .H.k.....H@0.i.i
    c758:	d5030612 0e400640 e0034240 0e400640     ....@.@.@B..@.@.
    c768:	2000e000 60114a90 2e001a08 6030d000     ... .J.`......0`
    c778:	ff64f7ff bdf0b009 0280498c 02011840     ..d......I..@...
    c788:	18890182 18890142 188900c2 21011808     ....B..........!
    c798:	18400489 47700cc0 497eb5f0 4f7c4606     ..@...pG..~I.F|O
    c7a8:	68482500 1d3fb089 04122207 22054390     .%Hh..?.."...C."
    c7b8:	43100412 4a786048 21fb6850 0a000200     ...CH`xJPh.!....
    c7c8:	43080609 01c009c0 43082102 21056050     ...C.....!.CP`.!
    c7d8:	0289486f 60013808 69884970 0900230c     oH...8.`pI.i.#..
    c7e8:	43180100 68906188 43982338 43182318     ...C.a.h8#.C.#.C
    c7f8:	69086090 4310150a 48696108 20286884     .`.i...C.aiH.h( 
    c808:	ff3af7ff 46682109 fe36f000 466a4960     ..:..!hF..6.`IjF
    c818:	e00d3908 03c06848 200ad5fc ff2cf7ff     .9..Hh..... ..,.
    c828:	00a36838 194550d0 03c06848 1e64d4fc     8h...PE.Hh....d.
    c838:	d1ef2c00 68484957 04122207 43902401     .,..WIHh."...$.C
    c848:	43200464 48566048 46286881 fdaef000     d. CH`VH.h(F....
    c858:	46024955 60483980 6b814852 d40a0089     UI.F.9H`RH.k....
    c868:	01896b81 d5036b81 0dc901c9 e0034249     .k...k......IB..
    c878:	0dc901c9 2100e000 00406b80 4849d413     .......!.k@...IH
    c888:	69833040 021d6980 d5074b49 28084018     @0.i.i..IK...@.(
    c898:	2001d901 2000e000 e0054240 28084018     ... ... @B...@.(
    c8a8:	2001d901 2000e000 226b1a51 1a8900d2     ... ... Q.k"....
    c8b8:	00804348 18400489 18400491 0c801900     HC....@...@.....
    c8c8:	d0002e00 f7ff6030 e753ff57 2800b5fe     ....0`..W.S....(
    c8d8:	4833d076 4d376840 26024c37 d0702800     v.3H@h7M7L.&.(p.
    c8e8:	f7ffa801 4f30ff59 37409901 04096339     ....Y.0O..@79c..
    c8f8:	63381808 f7ff4668 6378fec7 62389800     ..8chF....xc..8b
    c908:	68034825 02002007 98014383 fe60f7ff     %H.h. ...C....`.
    c918:	18400081 392c4922 98001847 fe3cf7ff     ..@."I,9G.....<.
    c928:	491d5c38 0d400740 60084318 09c16960     8\.I@.@..C.``i..
    c938:	01c94822 221e6940 22f34390 00d29b00     "H..@i.".C."....
    c948:	42932710 2234d901 4a0de005 189a322d     .'.B..4"...J-2..
    c958:	d8032a5b 43112244 e0484338 32894a08     [*..D".C8CH..J.2
    c968:	220e189f d8012f5b e0052355 1ebf4f05     ..."[/..U#...O..
    c978:	2f8919df 2356d826 e0334319 000007ff     .../&.V#.C3.....
    c988:	fffff896 fffff9ab fffffd5d 000076a0     ........]....v..
    c998:	4000b1c8 4000f000 4000f400 4000b000     ...@...@...@...@
    c9a8:	10007d34 4000a000 10007f80 00003d43     4}.....@....C=..
    c9b8:	007fff00 40022a00 40020000 40020800     .....*.@...@...@
    c9c8:	e076e0a2 189a4afe d8032a5b 43112267     ..v..J..[*..g".C
    c9d8:	e007220a 325c4afa 2a5b189a 2278d804     ."...J\2..[*..x"
    c9e8:	22064311 e0024310 43112279 61614330     .C.".C..y".C0Caa
    c9f8:	614849f4 68a249f4 08522000 60a20052     .IHa.I.h. R.R..`
    ca08:	4bf269e2 61e2401a 433269e2 23f361e2     .i.K.@.a.i2C.a.#
    ca18:	00db9a00 d906429a 4342220c 18574bec     .....B..."BC.KW.
    ca28:	4bec607b 4bece03f 2b5b18d3 220cd806     {`.K?..K..[+..."
    ca38:	4bea4342 607b1857 e0344be9 335c4be6     BC.KW.{`.K4..K\3
    ca48:	2b5b18d3 220cd806 4be64342 607b1857     ..[+..."BC.KW.{`
    ca58:	e0284be5 3b5c4bda 2b8918d3 220cd806     .K(..K\;...+..."
    ca68:	4be24342 607b1857 e01c4be1 18d34bd4     BC.KW.{`.K...K..
    ca78:	d8062b5b 4342220c 18574bde 4bde607b     [+..."BC.KW.{`.K
    ca88:	4bcfe011 18d2335c d8062a5b 4342220c     ...K\3..[*..."BC
    ca98:	18574bda 4bda607b 220ce005 4bd94342     .KW.{`.K..."BC.K
    caa8:	607b1857 19524bd8 1c406053 d3ae2828     W.{`.KR.S`@.((..
    cab8:	49c5e01e 20006962 01d209d2 431a2355     ...Ibi. ....U#.C
    cac8:	68a26162 00520852 69e260a2 401a4bbf     ba.hR.R..`.i.K.@
    cad8:	69e261e2 61e24332 270c4bc2 437a4602     .a.i2C.a.K.'.FzC
    cae8:	607b1857 19524fc0 1c406057 d3f42828     W.{`.OR.W`@.((..
    caf8:	43b069e0 69e061e0 43c949b4 61e04308     .i.C.a.i.I.C.C.a
    cb08:	210168a0 60a04308 2001bdfe 2300e6de     .h.!.C.`... ...#
    cb18:	68036003 d5fc041b 408b2301 431349bb     .`.h.....#.@.I.C
    cb28:	6801600b dafc2900 47704608 49b8b5f0     .`.h.)...FpG...I
    cb38:	6d0ab085 92012200 2a00680a 2800d07e     ...m."...h.*~..(
    cb48:	48b4d07c 04c06880 48b30ec4 68c09404     |..H.h.....H...h
    cb58:	0b804db2 07c04eb2 48acd02a 21071d00     .M...N..*..H...!
    cb68:	90029100 433169a9 9a0161a9 f7ff9900     .....i1C.a......
    cb78:	0847ffce 044049ab 0c40400f 69a84307     ..G..I@..@@..C.i
    cb88:	61a843b0 99009a01 f7ff9802 0846ffc0     .C.a..........F.
    cb98:	044049a4 0c40400e 0b394306 91030b30     .I@..@@..C9.0...
    cba8:	d5001a40 02804240 fc00f000 e03c4605     @...@B.......F<.
    cbb8:	4f9d4896 90023008 90002006 217d6cc8     .H.O.0... ...l}!
    cbc8:	42880209 4f99d1db 4605e7d9 42be9404     ...B...O...F...B
    cbd8:	2c1fd203 1c64d204 2c00e002 1e64d000     ...,..d....,..d.
    cbe8:	6888498c 0212221f 02224390 608a4302     .I.h."...C"..C.`
    cbf8:	f7ff2001 9a01fd41 98029900 ff87f7ff     . ..A...........
    cc08:	49880846 400e0440 43060c40 0b319803     F..I@..@@..C..1.
    cc18:	99031a08 4240d500 f0000280 2c1ffbc7     ......@B.......,
    cc28:	2c00d005 42a8d003 2805da01 42a8dccd     ...,...B...(...B
    cc38:	4978dd0a 221f6888 e0000212 4390e004     ..xI.h.".......C
    cc48:	02129a04 608a4302 bdf0b005 e76d2001     .....C.`..... m.
    cc58:	b5104b6f 33140052 461a60da 6050326c     oK..R..3.`.Fl2P`
    cc68:	28006091 d0024618 fa12f000 f000bd10     .`.(.F..........
    cc78:	bd10fc1b 2001b500 fcfef7ff b500bd00     ....... ........
    cc88:	f7ff2002 bd00fcf9 2064b500 fcf4f7ff     . ........d ....
    cc98:	b500bd00 f7ff20a0 bd00fcef b08fb5f0     ..... ..........
    cca8:	90052000 69804862 90030e00 68804859     . ..bH.i....YH.h
    ccb8:	08c09009 495700c0 60881d80 69504a5d     ......WI...`]JPi
    ccc8:	485d900b 483f6150 68c13040 495b910a     ..]HPa?H@0.h..[I
    ccd8:	210160c1 0409485a 21ff6201 31084859     .`.!ZH...b.!YH.1
    cce8:	49596081 27016808 43389008 6008463b     .`YI.h.'..8C;F.`
    ccf8:	90076890 609043b8 495469d0 40089006     .h...C.`.iTI...@
    cd08:	43082102 695061d0 08400040 48506150     .!.C.aPi@.@.PaPH
    cd18:	691460d0 08400060 21006110 60536051     .`.i`.@..a.!Q`S`
    cd28:	f7ff2001 6051fca9 f7ff2064 4825fca5     . ....Q`d ....%H
    cd38:	6a003080 0d450600 462007fe 61104330     .0.j..E... F0C.a
    cd48:	60576051 f7ff2001 6051fc97 f7ff2064     Q`W`. ....Q`d ..
    cd58:	481cfc93 6a003080 0f400600 69504305     ...H.0.j..@..CPi
    cd68:	40184b3c 4303052b 61534333 07402003     <K.@+..C3CSa. @.
    cd78:	61104320 60576051 f7ff2001 6051fc7d      C.aQ`W`. ..}.Q`
    cd88:	f7ff2064 2700fc79 463e4a0e 3280463d     d ..y..'.J>F=F.2
    cd98:	4b2b6251 62184830 f7ff20a0 2001fc6d     Qb+K0H.b. ..m.. 
    cda8:	20a06250 fc68f7ff 62516a90 482a19c7     Pb. ..h..jQb..*H
    cdb8:	1c404b23 20026218 fc5ef7ff e04d2001     #K@..b. ..^.. M.
    cdc8:	fffffa05 40020800 40022800 feefcfff     .......@.(.@....
    cdd8:	423d34af 420134af fffff8c3 423d44af     .4=B.4.B.....D=B
    cde8:	420144af 423d55af 420155af 423d56af     .D.B.U=B.U.B.V=B
    cdf8:	420156af 423d67af 420167af 423d78af     .V.B.g=B.g.B.x=B
    ce08:	420178af 423d79af 420179af 4000c000     .x.B.y=B.y.B...@
    ce18:	10007cb4 4000f400 10040828 4000b000     .|.....@(......@
    ce28:	00000200 3fff8000 018cba80 01964000     .......?.....@..
    ce38:	4000a040 40020000 6a029155 0000800f     @..@...@U..j....
    ce48:	40041800 40024a00 40025000 f80f8fff     ...@.J.@.P.@....
    ce58:	05c62762 800fffff 0001007f 20a06250     b'..........Pb. 
    ce68:	fc0af7ff 1c6d6a90 2d101986 2000d390     .....jm....-... 
    ce78:	1bb96250 f0004844 4607fa99 6b804843     Pb..DH.....FCH.k
    ce88:	db032800 28009803 0087d000 25004840     .(.....(....@H.%
    ce98:	4840900d 180e0069 46310480 fa86f000     ..@Hi.....1F....
    cea8:	46314a3c f0004350 4a3afa81 43504631     <J1FPC....:J1FPC
    ceb8:	fa7cf000 43782101 184004c9 28ff0d00     ..|..!xC..@....(
    cec8:	20ffd900 d1002d00 210c9005 43699a0d     ... .-.....!..iC
    ced8:	6891188a 02090a09 60914301 2d281c6d     ...h.....C.`m.(-
    cee8:	482dd3d7 990b6104 4a2c6141 60119908     ..-H.a..Aa,J...`
    cef8:	21004a2b 4a2b6091 4a2b6211 60d1990a     +J.!.`+J.b+J...`
    cf08:	61c19906 99094a29 68816091 60819907     ...a)J...`.h...`
    cf18:	98054927 98056388 bdf0b00f 2800b53e     'I...c......>..(
    cf28:	2400d018 d0162804 d1132806 f7ff2001     ...$.(...(... ..
    cf38:	f000fdfd 2001f89c fcc8f7ff 90002001     ....... ..... ..
    cf48:	23049002 a11c4a1b 48209401 fab2f000     ...#.J.... H....
    cf58:	fea4f7ff 481ebd3e 491e6800 1a406809     ....>..H.h.I.h@.
    cf68:	4348491d f000491d 491dfa21 684b680a     .IHC.I..!..I.hKh
    cf78:	415c1880 604c6008 f0004814 f000f889     ..\A.`L`.H......
    cf88:	f000f84b bd3ef874 0013b800 4000a000     K...t.>........@
    cf98:	40022800 00000962 40020000 40025000     .(.@b......@.P.@
    cfa8:	40024a00 40041800 40020840 4000f400     .J.@...@@..@...@
    cfb8:	10007fc0 1000715f 74616256 6574565f     ...._q..Vbat_Vte
    cfc8:	435f706d 62696c61 00000000 10007cc8     mp_Calib.....|..
    cfd8:	10007be0 10007c18 00000271 0007a120     .{...|..q... ...
    cfe8:	10040240 492c4602 43c02000 e0046809     @....F,I. .C.h..
    cff8:	d101428a 47702000 29006989 4770d1f8     .B... pG.i.)..pG
    d008:	4604b510 4608460b ffecf7ff d0022800     ...F.F.F.....(..
    d018:	61986820 bd106023 4e1fb5f8 462f2500      h.a#`.....N.%/F
    d028:	e0216830 69844a1d 68136881 1a596852     0h!..J.i.h.hRhY.
    d038:	d31741ba 29007901 4b18d00c 681968c2     .A...y.)...K.h.h
    d048:	1851685b 60814605 29006901 6940d00b     [hQ..F.`.i.)..@i
    d058:	e0084788 42816831 6034d101 61ace000     .G..1h.B..4`...a
    d068:	e7f16187 46204605 d1db2800 b510bdf8     .a...F F.(......
    d078:	6800480b 480b0841 61411e49 2207490a     .H.hA..HI.Aa.I."
    d088:	021c69cb 23000a24 618361cc bd106102     .i..$..#.a.a.a..
    d098:	48014601 0000e7b4 1004021c 10040240     .F.H........@...
    d0a8:	10007cb0 e000e000 e000ed04 4801b403     .|.............H
    d0b8:	bd019001 0001a2f9 4801b403 bd019001     ...........H....
    d0c8:	00019fe9 4801b403 bd019001 0001de29     .......H....)...
    d0d8:	4801b403 bd019001 0001a251 4801b403     ...H....Q......H
    d0e8:	bd019001 0001de5b 4801b403 bd019001     ....[......H....
    d0f8:	0001de17 4801b403 bd019001 0001bb9d     .......H........
    d108:	4801b403 bd019001 0001bf11 4801b403     ...H...........H
    d118:	bd019001 0001d0ad 4801b403 bd019001     ...........H....
    d128:	0001bb9f 4801b403 bd019001 0001bfd5     .......H........
    d138:	4801b403 bd019001 0001bdd1 4801b403     ...H...........H
    d148:	bd019001 00019c6d 4801b403 bd019001     ....m......H....
    d158:	0001bb7d 4801b403 bd019001 0001dbdd     }......H........
    d168:	4801b403 bd019001 00000215 4801b403     ...H...........H
    d178:	bd019001 0001b83b 4801b403 bd019001     ....;......H....
    d188:	0001dc5b 4801b403 bd019001 0001cf37     [......H....7...
    d198:	4801b403 bd019001 0001d6f5 4801b403     ...H...........H
    d1a8:	bd019001 0001b7fb 4801b403 bd019001     ...........H....
    d1b8:	00000b15 4801b403 bd019001 0001bdd5     .......H........
    d1c8:	4801b403 bd019001 0001d4d1 4801b403     ...H...........H
    d1d8:	bd019001 0001d4ed 4801b403 bd019001     ...........H....
    d1e8:	0001cffb 4801b403 bd019001 00000ab7     .......H........
    d1f8:	4801b403 bd019001 00000e17 4801b403     ...H...........H
    d208:	bd019001 000000d5 4801b403 bd019001     ...........H....
    d218:	0001cdbf 4801b403 bd019001 000011e3     .......H........
    d228:	4801b403 bd019001 00012edd 4801b403     ...H...........H
    d238:	bd019001 00006685 4801b403 bd019001     .....f.....H....
    d248:	00006651 4801b403 bd019001 00012faf     Qf.....H...../..
    d258:	4801b403 bd019001 00006647 4801b403     ...H....Gf.....H
    d268:	bd019001 00005081 4801b403 bd019001     .....P.....H....
    d278:	0001ba01 4801b403 bd019001 000131af     .......H.....1..
    d288:	4801b403 bd019001 00005df3 4801b403     ...H.....].....H
    d298:	bd019001 000082af 4801b403 bd019001     ...........H....
    d2a8:	0000533d 4801b403 bd019001 000190bf     =S.....H........
    d2b8:	4801b403 bd019001 00018bdb 4801b403     ...H...........H
    d2c8:	bd019001 0001a27d 4801b403 bd019001     ....}......H....
    d2d8:	0001a0b1 4801b403 bd019001 00019ab5     .......H........
    d2e8:	4801b403 bd019001 000197fd 4801b403     ...H...........H
    d2f8:	bd019001 00019a65 4801b403 bd019001     ....e......H....
    d308:	0001de8b 4801b403 bd019001 00019af1     .......H........
    d318:	4801b403 bd019001 00019a85 4801b403     ...H...........H
    d328:	bd019001 00019a45 4801b403 bd019001     ....E......H....
    d338:	0001bfd9 4801b403 bd019001 00019b05     .......H........
    d348:	4801b403 bd019001 00019a9f 4801b403     ...H...........H
    d358:	bd019001 00019ca1 4801b403 bd019001     ...........H....
    d368:	00019f09 4801b403 bd019001 00019095     .......H........
    d378:	4801b403 bd019001 00019711 4801b403     ...H...........H
    d388:	bd019001 0001a2a1 4801b403 bd019001     ...........H....
    d398:	0001d577 4801b403 bd019001 00019c81     w......H........
    d3a8:	4801b403 bd019001 0001dd01 4801b403     ...H...........H
    d3b8:	bd019001 0001dcd5 4801b403 bd019001     ...........H....
    d3c8:	0001b2a7 4801b403 bd019001 00019c47     .......H....G...
    d3d8:	4801b403 bd019001 0001b731 4801b403     ...H....1......H
    d3e8:	bd019001 0001a543 4801b403 bd019001     ....C......H....
    d3f8:	00001399 4801b403 bd019001 000131d3     .......H.....1..
    d408:	4801b403 bd019001 000196d1 4801b403     ...H...........H
    d418:	bd019001 0001c9db 4801b403 bd019001     ...........H....
    d428:	0001c93d 4801b403 bd019001 00006839     =......H....9h..
    d438:	4801b403 bd019001 0001cc03 4801b403     ...H...........H
    d448:	bd019001 0001e283 4801b403 bd019001     ...........H....
    d458:	00006a2d 4801b403 bd019001 0001c9ff     -j.....H........
    d468:	4801b403 bd019001 00006a01 4801b403     ...H.....j.....H
    d478:	bd019001 0001c999 4801b403 bd019001     ...........H....
    d488:	0001de5b 4801b403 bd019001 0001d25b     [......H....[...
    d498:	4801b403 bd019001 000007bd 4801b403     ...H...........H
    d4a8:	bd019001 000007d7 4801b403 bd019001     ...........H....
    d4b8:	0001d751 4801b403 bd019001 0001d6fd     Q......H........
    d4c8:	27100000 00000000 10007ba8 100400d8     ...'.....{......
    d4d8:	00010001 00000805 00019685 00000300     ................
    d4e8:	10005c0d 00000301 000192f7 00000302     .\..............
    d4f8:	00019379 00000303 000193a3 00000304     y...............
    d508:	000193d5 0000030a 00019403 00000305     ................
    d518:	0001947f 0000030f 000194b1 00000312     ................
    d528:	000194e5 00000313 00019535 00000314     ........5.......
    d538:	0001956b 00000315 000195ab 00000316     k...............
    d548:	000195f1 00000317 0001963b 00000318     ........;.......
    d558:	0001942b 10007b28 00000010 0001befb     +...({..........
    d568:	100066ff 0001bef3 0001bef5 0001d099     .f..............
    d578:	100069f1 0001d0fd 0001d0ff 00000000     .i..............
    d588:	00000004 00000001 00000000 00000000     ................
    d598:	00010001 00000000 00000000 00000000     ................
	...
    d5c8:	00000011 00000000 00000000 00000000     ................
    d5d8:	00000c13 10005185 00000e0b 100051ff     .....Q.......Q..
	...
    d5f0:	10007c24 00000002 10007c34 10007c3c     $|......4|..<|..
    d600:	10007c54 00080001 00000000 00000000     T|..............
    d610:	00003800 100052e1 00003801 100052f5     .8...R...8...R..
    d620:	00003802 1000533f 00000000 00000000     .8..?S..........
    d630:	10007c5c 00000003 00000000 10007c7c     \|..........||..
    d640:	10007c94 00080001 00000000 00000000     .|..............
    d650:	00000101 00000000 0001cccb 0000002f     ............/...
    d660:	00000000 018cba80 00000001 00000000     ................
    d670:	0bb80fa0 00000000 00000000 00000000     ................
	...
    d6bc:	05050505 05050505 05050505 04050505     ................
    d6cc:	04040404 04040404 03030304 02020303     ................
    d6dc:	01020202 01010101 00000000 00000000     ................
    d6ec:	00000001 00000002 00000043              ........C...

0000d6f8 <_global_impure_ptr>:
    d6f8:	20000048                                H.. 

0000d6fc <__sf_fake_stdin>:
	...

0000d71c <__sf_fake_stdout>:
	...

0000d73c <__sf_fake_stderr>:
	...
    d75c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    d76c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    d77c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    d78c:	00006665                                ef..

0000d790 <_init>:
    d790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d792:	46c0      	nop			; (mov r8, r8)
    d794:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d796:	bc08      	pop	{r3}
    d798:	469e      	mov	lr, r3
    d79a:	4770      	bx	lr

0000d79c <__init_array_start>:
    d79c:	000000dd 	.word	0x000000dd

0000d7a0 <_fini>:
    d7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d7a2:	46c0      	nop			; (mov r8, r8)
    d7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d7a6:	bc08      	pop	{r3}
    d7a8:	469e      	mov	lr, r3
    d7aa:	4770      	bx	lr

0000d7ac <__fini_array_start>:
    d7ac:	000000b5 	.word	0x000000b5
